; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\DelayedPublisher.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1CK@LOENILFL@?$AAE?$AAn?$AAd?$AAi?$AAn?$AAg?$AAD?$AAe?$AAl?$AAa?$AAy?$AA?4?$AAT?$AAi?$AAm?$AAe?$AAL?$AAe?$AAf?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@NHBKHMGN@?$AA?$CF?$AAu?$AA?3?$AA?$CF?$AA0?$AA2?$AAu?$AA?$AA@ ; `string'
PUBLIC	??_C@_15JKJHIGLI@?$AA$?$AA1?$AA?$AA@		; `string'
PUBLIC	??_R0?AVDelayedPublisher@@@8			; DelayedPublisher `RTTI Type Descriptor'
PUBLIC	??_R3RTMPPublisher@@8				; RTMPPublisher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3DelayedPublisher@@8			; DelayedPublisher::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2DelayedPublisher@@8			; DelayedPublisher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@RTMPPublisher@@8			; RTMPPublisher::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUNetworkPacket@@@8			; NetworkPacket `RTTI Type Descriptor'
PUBLIC	??_R0?AVRTMPPublisher@@@8			; RTMPPublisher `RTTI Type Descriptor'
PUBLIC	??_R4DelayedPublisher@@6B@			; DelayedPublisher::`RTTI Complete Object Locator'
PUBLIC	??_7DelayedPublisher@@6B@			; DelayedPublisher::`vftable'
PUBLIC	??_R2RTMPPublisher@@8				; RTMPPublisher::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@DelayedPublisher@@8		; DelayedPublisher::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp__DestroyWindow@4:PROC
EXTRN	__imp_?OBSCreateDialog@@YAPAUHWND__@@PAUHINSTANCE__@@PB_WPAU1@P6GH2IIJ@ZJ@Z:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp_?OSCreateThread@@YGPAXP6GKPAX@Z0@Z:PROC
EXTRN	__imp__ShowWindow@8:PROC
;	COMDAT ??_R1A@?0A@EA@DelayedPublisher@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DelayedPublisher@@8 DD FLAT:??_R0?AVDelayedPublisher@@@8 ; DelayedPublisher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DelayedPublisher@@8
rdata$r	ENDS
;	COMDAT ??_R2RTMPPublisher@@8
rdata$r	SEGMENT
??_R2RTMPPublisher@@8 DD FLAT:??_R1A@?0A@EA@RTMPPublisher@@8 ; RTMPPublisher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@NetworkStream@@8
	DD	FLAT:??_R1A@?0A@EA@ClosableStream@@8
rdata$r	ENDS
;	COMDAT ??_7DelayedPublisher@@6B@
CONST	SEGMENT
??_7DelayedPublisher@@6B@ DD FLAT:??_R4DelayedPublisher@@6B@ ; DelayedPublisher::`vftable'
	DD	FLAT:??_EDelayedPublisher@@UAEPAXI@Z
	DD	FLAT:?SendPacket@DelayedPublisher@@UAEXPAEIKW4PacketType@@@Z
	DD	FLAT:?BeginPublishing@RTMPPublisher@@UAEXXZ
	DD	FLAT:?GetPacketStrain@RTMPPublisher@@UBENXZ
	DD	FLAT:?GetCurrentSentBytes@RTMPPublisher@@UAE_KXZ
	DD	FLAT:?NumDroppedFrames@RTMPPublisher@@UBEKXZ
	DD	FLAT:?NumTotalVideoFrames@RTMPPublisher@@UBEKXZ
	DD	FLAT:?ProcessPackets@RTMPPublisher@@MAEXXZ
	DD	FLAT:?FlushBufferedPackets@RTMPPublisher@@MAEXXZ
	DD	FLAT:?RequestKeyframe@DelayedPublisher@@UAEXH@Z
CONST	ENDS
;	COMDAT ??_R4DelayedPublisher@@6B@
rdata$r	SEGMENT
??_R4DelayedPublisher@@6B@ DD 00H			; DelayedPublisher::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDelayedPublisher@@@8
	DD	FLAT:??_R3DelayedPublisher@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVRTMPPublisher@@@8
data$r	SEGMENT
??_R0?AVRTMPPublisher@@@8 DD FLAT:??_7type_info@@6B@	; RTMPPublisher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVRTMPPublisher@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AUNetworkPacket@@@8
data$r	SEGMENT
??_R0?AUNetworkPacket@@@8 DD FLAT:??_7type_info@@6B@	; NetworkPacket `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUNetworkPacket@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@RTMPPublisher@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@RTMPPublisher@@8 DD FLAT:??_R0?AVRTMPPublisher@@@8 ; RTMPPublisher::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3RTMPPublisher@@8
rdata$r	ENDS
;	COMDAT ??_R2DelayedPublisher@@8
rdata$r	SEGMENT
??_R2DelayedPublisher@@8 DD FLAT:??_R1A@?0A@EA@DelayedPublisher@@8 ; DelayedPublisher::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@RTMPPublisher@@8
	DD	FLAT:??_R1A@?0A@EA@NetworkStream@@8
	DD	FLAT:??_R1A@?0A@EA@ClosableStream@@8
rdata$r	ENDS
;	COMDAT ??_R3DelayedPublisher@@8
rdata$r	SEGMENT
??_R3DelayedPublisher@@8 DD 00H				; DelayedPublisher::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	04H
	DD	FLAT:??_R2DelayedPublisher@@8
rdata$r	ENDS
;	COMDAT ??_R3RTMPPublisher@@8
rdata$r	SEGMENT
??_R3RTMPPublisher@@8 DD 00H				; RTMPPublisher::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2RTMPPublisher@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDelayedPublisher@@@8
data$r	SEGMENT
??_R0?AVDelayedPublisher@@@8 DD FLAT:??_7type_info@@6B@	; DelayedPublisher `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDelayedPublisher@@', 00H
data$r	ENDS
;	COMDAT ??_C@_15JKJHIGLI@?$AA$?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_15JKJHIGLI@?$AA$?$AA1?$AA?$AA@ DB '$', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@NHBKHMGN@?$AA?$CF?$AAu?$AA?3?$AA?$CF?$AA0?$AA2?$AAu?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@NHBKHMGN@?$AA?$CF?$AAu?$AA?3?$AA?$CF?$AA0?$AA2?$AAu?$AA?$AA@ DB '%'
	DB	00H, 'u', 00H, ':', 00H, '%', 00H, '0', 00H, '2', 00H, 'u', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@LOENILFL@?$AAE?$AAn?$AAd?$AAi?$AAn?$AAg?$AAD?$AAe?$AAl?$AAa?$AAy?$AA?4?$AAT?$AAi?$AAm?$AAe?$AAL?$AAe?$AAf?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@LOENILFL@?$AAE?$AAn?$AAd?$AAi?$AAn?$AAg?$AAD?$AAe?$AAl?$AAa?$AAy?$AA?4?$AAT?$AAi?$AAm?$AAe?$AAL?$AAe?$AAf?$AAt?$AA?$AA@ DB 'E'
	DB	00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'D', 00H
	DB	'e', 00H, 'l', 00H, 'a', 00H, 'y', 00H, '.', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 'L', 00H, 'e', 00H, 'f', 00H, 't', 00H
	DB	00H, 00H					; `string'
$SG4294894915 DB 'app', 00H
$SG4294894913 DB 'flashVer', 00H
$SG4294894906 DB 'videoCodecs', 00H
	ORG $+2
$SG4294894914 DB 'connect', 00H
$SG4294894907 DB 'audioCodecs', 00H
	ORG $+2
$SG4294894912 DB 'swfUrl', 00H
	ORG $+1
$SG4294894911 DB 'pageUrl', 00H
$SG4294894902 DB 'FCSubscribe', 00H
$SG4294894892 DB 'description', 00H
	ORG $+2
$SG4294894904 DB 'objectEncoding', 00H
	ORG $+1
$SG4294894903 DB '_result', 00H
$SG4294894891 DB 'secureToken', 00H
$SG4294894888 DB 'duration', 00H
$SG4294894889 DB 'onMetaData', 00H
	ORG $+2
$SG4294894898 DB 'getStreamLength', 00H
$SG4294894883 DB 'framerate', 00H
$SG4294894874 DB 'onStatus', 00H
	ORG $+2
$SG4294894896 DB 'fmsVer', 00H
	ORG $+1
$SG4294894880 DB 'audiosamplerate', 00H
$SG4294894875 DB 'fileSize', 00H
$SG4294894870 DB 'NetStream.Play.Stop', 00H
	ORG $+2
$SG4294894886 DB 'height', 00H
	ORG $+1
$SG4294894879 DB 'audiosamplesize', 00H
$SG4294894866 DB 'NetStream.Authenticate.UsherToken', 00H
$SG4294894867 DB 'clientid', 00H
	ORG $+2
$SG4294894876 DB 'encoder', 00H
$SG4294894864 DB '"', 00H
$SG4294894862 DB 'Open Broadcaster Software v0.657b', 00H
$SG4294894863 DB '\"', 00H
	ORG $+2
$SG4294894877 DB 'stereo', 00H
	ORG $+1
$SG4294894871 DB 'Started playing', 00H
	ORG $+2
$SG4294894873 DB 'status', 00H
	ORG $+1
$SG4294894868 DB 'details', 00H
	ORG $+2
$SG4294894869 DB 'Stopped playing', 00H
	ORG $+2
$SG4294894910 DB 'tcUrl', 00H
	ORG $+2
$SG4294894908 DB 'capabilities', 00H
	ORG $+3
$SG4294894909 DB 'fpad', 00H
	ORG $+3
$SG4294894905 DB 'videoFunction', 00H
	ORG $+2
$SG4294894900 DB 'createStream', 00H
	ORG $+3
$SG4294894901 DB 'onFCSubscribe', 00H
	ORG $+2
$SG4294894899 DB 'deleteStream', 00H
	ORG $+3
$SG4294894897 DB 'play', 00H
	ORG $+3
$SG4294894894 DB 'level', 00H
	ORG $+2
$SG4294894895 DB 'mode', 00H
	ORG $+3
$SG4294894893 DB 'code', 00H
	ORG $+3
$SG4294894890 DB 'send', 00H
	ORG $+3
$SG4294894887 DB 'width', 00H
	ORG $+2
$SG4294894884 DB 'videodatarate', 00H
	ORG $+2
$SG4294894885 DB 'videocodecid', 00H
	ORG $+3
$SG4294894882 DB 'audiocodecid', 00H
	ORG $+3
$SG4294894881 DB 'audiodatarate', 00H
	ORG $+2
$SG4294894878 DB 'audiochannels', 00H
	ORG $+2
$SG4294894872 DB 'NetStream.Play.Start', 00H
	ORG $+3
$SG4294894865 DB '@setDataFrame', 00H
	ORG $+2
$SG4294894860 DB 'mp4a', 00H
	ORG $+3
$SG4294894861 DB 'avc1', 00H
	ORG $+3
$SG4294894859 DB 'mp3 ', 00H
PUBLIC	?Clear@?$List@UNetworkPacket@@@@QAEXXZ		; List<NetworkPacket>::Clear
PUBLIC	?SetSize@?$List@UNetworkPacket@@@@QAEHI@Z	; List<NetworkPacket>::SetSize
PUBLIC	??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z ; List<NetworkPacket>::operator[]
PUBLIC	?CreateNew@?$List@UNetworkPacket@@@@QAEPAUNetworkPacket@@XZ ; List<NetworkPacket>::CreateNew
PUBLIC	?Remove@?$List@UNetworkPacket@@@@QAEXI@Z	; List<NetworkPacket>::Remove
PUBLIC	?Num@?$List@UNetworkPacket@@@@QBEIXZ		; List<NetworkPacket>::Num
PUBLIC	??1?$List@UNetworkPacket@@@@QAE@XZ		; List<NetworkPacket>::~List<NetworkPacket>
PUBLIC	??0?$List@UNetworkPacket@@@@QAE@XZ		; List<NetworkPacket>::List<NetworkPacket>
PUBLIC	?CreateDelayedPublisher@@YAPAVNetworkStream@@K@Z ; CreateDelayedPublisher
PUBLIC	??_GDelayedPublisher@@UAEPAXI@Z			; DelayedPublisher::`scalar deleting destructor'
PUBLIC	?RequestKeyframe@DelayedPublisher@@UAEXH@Z	; DelayedPublisher::RequestKeyframe
PUBLIC	?SendPacket@DelayedPublisher@@UAEXPAEIKW4PacketType@@@Z ; DelayedPublisher::SendPacket
PUBLIC	??1DelayedPublisher@@UAE@XZ			; DelayedPublisher::~DelayedPublisher
PUBLIC	??0DelayedPublisher@@QAE@K@Z			; DelayedPublisher::DelayedPublisher
PUBLIC	?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z ; DelayedPublisher::ProcessDelayedPackets
PUBLIC	?EndDelayProc@DelayedPublisher@@CGHPAUHWND__@@IIJ@Z ; DelayedPublisher::EndDelayProc
PUBLIC	?NumTotalVideoFrames@RTMPPublisher@@UBEKXZ	; RTMPPublisher::NumTotalVideoFrames
PUBLIC	?EnableSceneSwitching@OBS@@QAEX_N@Z		; OBS::EnableSceneSwitching
EXTRN	??_EDelayedPublisher@@UAEPAXI@Z:PROC		; DelayedPublisher::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?EnableSceneSwitching@OBS@@QAEX_N@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv67 = -4						; size = 4
_bEnable$ = 8						; size = 1
?EnableSceneSwitching@OBS@@QAEX_N@Z PROC		; OBS::EnableSceneSwitching, COMDAT
; _this$ = ecx

; 1234 :     inline void EnableSceneSwitching(bool bEnable) {bDisableSceneSwitching = !bEnable;}

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	movzx	eax, BYTE PTR _bEnable$[ebp]
	test	eax, eax
	jne	SHORT $LN3@EnableScen
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@EnableScen
$LN3@EnableScen:
	mov	DWORD PTR tv67[ebp], 0
$LN4@EnableScen:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv67[ebp]
	mov	BYTE PTR [ecx+704], dl
	mov	esp, ebp
	pop	ebp
	ret	4
?EnableSceneSwitching@OBS@@QAEX_N@Z ENDP		; OBS::EnableSceneSwitching
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\rtmppublisher.h
;	COMDAT ?NumTotalVideoFrames@RTMPPublisher@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumTotalVideoFrames@RTMPPublisher@@UBEKXZ PROC		; RTMPPublisher::NumTotalVideoFrames, COMDAT
; _this$ = ecx

; 179  :     DWORD NumTotalVideoFrames() const {return totalVideoFrames;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+196]
	mov	esp, ebp
	pop	ebp
	ret	0
?NumTotalVideoFrames@RTMPPublisher@@UBEKXZ ENDP		; RTMPPublisher::NumTotalVideoFrames
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ?EndDelayProc@DelayedPublisher@@CGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_publisher$1 = -12					; size = 4
_publisher$2 = -8					; size = 4
tv64 = -4						; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?EndDelayProc@DelayedPublisher@@CGHPAUHWND__@@IIJ@Z PROC ; DelayedPublisher::EndDelayProc, COMDAT

; 36   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 37   :         switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	SHORT $LN1@EndDelayPr
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN4@EndDelayPr
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	SHORT $LN3@EndDelayPr
	jmp	SHORT $LN5@EndDelayPr
$LN4@EndDelayPr:

; 38   :         {
; 39   :             case WM_INITDIALOG:
; 40   :                 LocalizeWindow(hwnd);

	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 41   :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12

; 42   :                 return TRUE;

	mov	eax, 1
	jmp	SHORT $LN7@EndDelayPr
$LN3@EndDelayPr:

; 43   : 
; 44   :             case WM_COMMAND:
; 45   :                 if(LOWORD(wParam) == IDCANCEL)

	movzx	ecx, WORD PTR _wParam$[ebp]
	cmp	ecx, 2
	jne	SHORT $LN2@EndDelayPr

; 46   :                 {
; 47   :                     DelayedPublisher *publisher = (DelayedPublisher*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _publisher$2[ebp], eax

; 48   :                     publisher->bCancelEnd = true;

	mov	eax, DWORD PTR _publisher$2[ebp]
	mov	BYTE PTR [eax+281], 1
$LN2@EndDelayPr:

; 49   :                 }
; 50   :                 break;

	jmp	SHORT $LN5@EndDelayPr
$LN1@EndDelayPr:

; 51   : 
; 52   :             case WM_CLOSE:
; 53   :                 {
; 54   :                     DelayedPublisher *publisher = (DelayedPublisher*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _publisher$1[ebp], eax

; 55   :                     publisher->bCancelEnd = true;

	mov	edx, DWORD PTR _publisher$1[ebp]
	mov	BYTE PTR [edx+281], 1
$LN5@EndDelayPr:

; 56   :                 }
; 57   :         }
; 58   :         return 0;

	xor	eax, eax
$LN7@EndDelayPr:

; 59   :     }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?EndDelayProc@DelayedPublisher@@CGHPAUHWND__@@IIJ@Z ENDP ; DelayedPublisher::EndDelayProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z
_TEXT	SEGMENT
tv182 = -20						; size = 4
_sendTime$1 = -16					; size = 4
_packet$2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_timestamp$ = 8						; size = 4
?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z PROC	; DelayedPublisher::ProcessDelayedPackets, COMDAT
; _this$ = ecx

; 62   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 63   :         if(bCancelEnd)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+281]
	test	ecx, ecx
	je	SHORT $LN9@ProcessDel

; 64   :             return;

	jmp	$LN10@ProcessDel
$LN9@ProcessDel:

; 65   : 
; 66   :         if(timestamp >= delayTime)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _timestamp$[ebp]
	cmp	eax, DWORD PTR [edx+264]
	jb	$LN10@ProcessDel

; 67   :         {
; 68   :             if(!bConnected && !bConnecting && !bStopping)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	jne	SHORT $LN7@ProcessDel
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN7@ProcessDel
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+176]
	test	eax, eax
	jne	SHORT $LN7@ProcessDel

; 69   :             {
; 70   :                 hConnectionThread = OSCreateThread((XTHREAD)CreateConnectionThread, this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?CreateConnectionThread@RTMPPublisher@@CGKPAV1@@Z ; RTMPPublisher::CreateConnectionThread
	call	DWORD PTR __imp_?OSCreateThread@@YGPAXP6GKPAX@Z0@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+140], eax

; 71   :                 bConnecting = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+17], 1
$LN7@ProcessDel:

; 72   :             }
; 73   : 
; 74   :             if(bConnected)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+18]
	test	edx, edx
	je	$LN10@ProcessDel

; 75   :             {
; 76   :                 if(!bDelayConnected)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+282]
	test	ecx, ecx
	jne	SHORT $LN5@ProcessDel

; 77   :                 {
; 78   :                     delayTime = timestamp;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _timestamp$[ebp]
	mov	DWORD PTR [edx+264], eax

; 79   :                     bDelayConnected = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+282], 1
$LN5@ProcessDel:

; 80   :                 }
; 81   : 
; 82   :                 DWORD sendTime = timestamp-delayTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _timestamp$[ebp]
	sub	eax, DWORD PTR [edx+264]
	mov	DWORD PTR _sendTime$1[ebp], eax

; 83   :                 for(UINT i=0; i<delayedPackets.Num(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@ProcessDel
$LN3@ProcessDel:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@ProcessDel:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Num@?$List@UNetworkPacket@@@@QBEIXZ	; List<NetworkPacket>::Num
	cmp	DWORD PTR _i$3[ebp], eax
	jae	SHORT $LN10@ProcessDel

; 84   :                 {
; 85   :                     NetworkPacket &packet = delayedPackets[i];

	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z ; List<NetworkPacket>::operator[]
	mov	DWORD PTR _packet$2[ebp], eax

; 86   :                     if(packet.timestamp <= sendTime)

	mov	eax, DWORD PTR _packet$2[ebp]
	mov	ecx, DWORD PTR [eax+8]
	cmp	ecx, DWORD PTR _sendTime$1[ebp]
	ja	SHORT $LN1@ProcessDel

; 87   :                     {
; 88   :                         RTMPPublisher::SendPacket(packet.data.Array(), packet.data.Num(), packet.timestamp, packet.type);

	mov	edx, DWORD PTR _packet$2[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	mov	ecx, DWORD PTR _packet$2[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	ecx, DWORD PTR _packet$2[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	push	eax
	mov	ecx, DWORD PTR _packet$2[ebp]
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SendPacket@RTMPPublisher@@UAEXPAEIKW4PacketType@@@Z ; RTMPPublisher::SendPacket

; 89   :                         packet.data.Clear();

	mov	ecx, DWORD PTR _packet$2[ebp]
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear

; 90   :                         delayedPackets.Remove(i--);

	mov	eax, DWORD PTR _i$3[ebp]
	mov	DWORD PTR tv182[ebp], eax
	mov	ecx, DWORD PTR tv182[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Remove@?$List@UNetworkPacket@@@@QAEXI@Z ; List<NetworkPacket>::Remove
	mov	edx, DWORD PTR _i$3[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN1@ProcessDel:

; 91   :                     }
; 92   :                 }

	jmp	$LN3@ProcessDel
$LN10@ProcessDel:

; 93   :             }
; 94   :         }
; 95   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z ENDP	; DelayedPublisher::ProcessDelayedPackets
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ??0DelayedPublisher@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_delayTime$ = 8						; size = 4
??0DelayedPublisher@@QAE@K@Z PROC			; DelayedPublisher::DelayedPublisher, COMDAT
; _this$ = ecx

; 99   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0RTMPPublisher@@QAE@XZ		; RTMPPublisher::RTMPPublisher
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DelayedPublisher@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??0?$List@UNetworkPacket@@@@QAE@XZ	; List<NetworkPacket>::List<NetworkPacket>

; 100  :         this->delayTime = delayTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _delayTime$[ebp]
	mov	DWORD PTR [ecx+264], edx

; 101  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0DelayedPublisher@@QAE@K@Z ENDP			; DelayedPublisher::DelayedPublisher
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ??1DelayedPublisher@@UAE@XZ
_TEXT	SEGMENT
$T1 = -64						; size = 8
_strTimeLeftVal$2 = -56					; size = 8
_strTimeLeft$3 = -48					; size = 8
_timeLeftMinutes$4 = -40				; size = 4
_timeLeftSeconds$5 = -36				; size = 4
_firstTime$6 = -32					; size = 4
_lastTimeLeft$7 = -28					; size = 4
_totalTimeLeft$8 = -24					; size = 4
_hwndProgressDialog$9 = -20				; size = 4
_timeElapsed$10 = -16					; size = 4
_i$11 = -12						; size = 4
_timeLeft$12 = -8					; size = 4
_this$ = -4						; size = 4
??1DelayedPublisher@@UAE@XZ PROC			; DelayedPublisher::~DelayedPublisher, COMDAT
; _this$ = ecx

; 104  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DelayedPublisher@@6B@

; 105  :         if(!bStopping && rtmp && RTMP_IsConnected(rtmp))

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+176]
	test	edx, edx
	jne	$LN8@DelayedPub
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+100], 0
	je	$LN8@DelayedPub
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+100]
	call	_RTMP_IsConnected
	test	eax, eax
	je	$LN8@DelayedPub

; 106  :         {
; 107  :             App->EnableSceneSwitching(FALSE);

	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?EnableSceneSwitching@OBS@@QAEX_N@Z	; OBS::EnableSceneSwitching

; 108  :             EnableWindow (hwndMain, FALSE);

	push	0
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	call	DWORD PTR __imp__EnableWindow@8

; 109  : 
; 110  :             bStreamEnding = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+280], 1

; 111  :             HWND hwndProgressDialog = OBSCreateDialog(hinstMain, MAKEINTRESOURCE(IDD_ENDINGDELAY), hwndMain, (DLGPROC)EndDelayProc, (LPARAM)this);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	OFFSET ?EndDelayProc@DelayedPublisher@@CGHPAUHWND__@@IIJ@Z ; DelayedPublisher::EndDelayProc
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	push	140					; 0000008cH
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSCreateDialog@@YAPAUHWND__@@PAUHINSTANCE__@@PB_WPAU1@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	mov	DWORD PTR _hwndProgressDialog$9[ebp], eax

; 112  :             ProcessEvents();

	call	?ProcessEvents@@YGXXZ			; ProcessEvents

; 113  : 
; 114  :             ShowWindow(hwndProgressDialog, TRUE);

	push	1
	mov	ecx, DWORD PTR _hwndProgressDialog$9[ebp]
	push	ecx
	call	DWORD PTR __imp__ShowWindow@8

; 115  : 
; 116  :             DWORD totalTimeLeft = delayTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+264]
	mov	DWORD PTR _totalTimeLeft$8[ebp], eax

; 117  : 
; 118  :             String strTimeLeftVal = Str("EndingDelay.TimeLeft");

	push	OFFSET ??_C@_1CK@LOENILFL@?$AAE?$AAn?$AAd?$AAi?$AAn?$AAg?$AAD?$AAe?$AAl?$AAa?$AAy?$AA?4?$AAT?$AAi?$AAm?$AAe?$AAL?$AAe?$AAf?$AAt?$AA?$AA@
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strTimeLeftVal$2[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 119  : 
; 120  :             DWORD lastTimeLeft = -1;

	mov	DWORD PTR _lastTimeLeft$7[ebp], -1

; 121  : 
; 122  :             DWORD firstTime = OSGetTime();

	call	DWORD PTR __imp_?OSGetTime@@YGKXZ
	mov	DWORD PTR _firstTime$6[ebp], eax
$LN7@DelayedPub:

; 123  :             while(delayedPackets.Num() && !bCancelEnd)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Num@?$List@UNetworkPacket@@@@QBEIXZ	; List<NetworkPacket>::Num
	test	eax, eax
	je	$LN6@DelayedPub
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+281]
	test	eax, eax
	jne	$LN6@DelayedPub

; 124  :             {
; 125  :                 ProcessEvents();

	call	?ProcessEvents@@YGXXZ			; ProcessEvents

; 126  : 
; 127  :                 DWORD timeElapsed = (OSGetTime()-firstTime);

	call	DWORD PTR __imp_?OSGetTime@@YGKXZ
	sub	eax, DWORD PTR _firstTime$6[ebp]
	mov	DWORD PTR _timeElapsed$10[ebp], eax

; 128  : 
; 129  :                 DWORD timeLeft = (totalTimeLeft-timeElapsed)/1000;

	mov	eax, DWORD PTR _totalTimeLeft$8[ebp]
	sub	eax, DWORD PTR _timeElapsed$10[ebp]
	xor	edx, edx
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR _timeLeft$12[ebp], eax

; 130  :                 DWORD timeLeftMinutes = timeLeft/60;

	mov	eax, DWORD PTR _timeLeft$12[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _timeLeftMinutes$4[ebp], eax

; 131  :                 DWORD timeLeftSeconds = timeLeft%60;

	mov	eax, DWORD PTR _timeLeft$12[ebp]
	xor	edx, edx
	mov	ecx, 60					; 0000003cH
	div	ecx
	mov	DWORD PTR _timeLeftSeconds$5[ebp], edx

; 132  : 
; 133  :                 if((timeLeft != lastTimeLeft) && (totalTimeLeft >= timeElapsed))

	mov	edx, DWORD PTR _timeLeft$12[ebp]
	cmp	edx, DWORD PTR _lastTimeLeft$7[ebp]
	je	SHORT $LN5@DelayedPub
	mov	eax, DWORD PTR _totalTimeLeft$8[ebp]
	cmp	eax, DWORD PTR _timeElapsed$10[ebp]
	jb	SHORT $LN5@DelayedPub

; 134  :                 {
; 135  :                     String strTimeLeft = strTimeLeftVal;

	lea	ecx, DWORD PTR _strTimeLeftVal$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strTimeLeft$3[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z

; 136  :                     strTimeLeft.FindReplace(TEXT("$1"), FormattedString(TEXT("%u:%02u"), timeLeftMinutes, timeLeftSeconds));

	mov	edx, DWORD PTR _timeLeftSeconds$5[ebp]
	push	edx
	mov	eax, DWORD PTR _timeLeftMinutes$4[ebp]
	push	eax
	push	OFFSET ??_C@_1BA@NHBKHMGN@?$AA?$CF?$AAu?$AA?3?$AA?$CF?$AA0?$AA2?$AAu?$AA?$AA@
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	DWORD PTR __imp_?FormattedString@@YA?AVString@@PB_WZZ
	add	esp, 16					; 00000010H
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET ??_C@_15JKJHIGLI@?$AA$?$AA1?$AA?$AA@
	lea	ecx, DWORD PTR _strTimeLeft$3[ebp]
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 137  :                     SetWindowText(GetDlgItem(hwndProgressDialog, IDC_TIMELEFT), strTimeLeft);

	lea	ecx, DWORD PTR _strTimeLeft$3[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	1127					; 00000467H
	mov	edx, DWORD PTR _hwndProgressDialog$9[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 138  :                     lastTimeLeft = timeLeft;

	mov	eax, DWORD PTR _timeLeft$12[ebp]
	mov	DWORD PTR _lastTimeLeft$7[ebp], eax

; 139  :                 }

	lea	ecx, DWORD PTR _strTimeLeft$3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN5@DelayedPub:

; 140  : 
; 141  :                 ProcessDelayedPackets(lastTimestamp+timeElapsed);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+268]
	add	edx, DWORD PTR _timeElapsed$10[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z ; DelayedPublisher::ProcessDelayedPackets

; 142  :                 if(bStopping)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+176]
	test	ecx, ecx
	je	SHORT $LN4@DelayedPub

; 143  :                     bCancelEnd = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+281], 1
$LN4@DelayedPub:

; 144  : 
; 145  :                 Sleep(10);

	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4

; 146  :             }

	jmp	$LN7@DelayedPub
$LN6@DelayedPub:

; 147  : 
; 148  :             EnableWindow (hwndMain, TRUE);

	push	1
	mov	eax, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 149  :             App->EnableSceneSwitching(TRUE);

	push	1
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?EnableSceneSwitching@OBS@@QAEX_N@Z	; OBS::EnableSceneSwitching

; 150  :             DestroyWindow(hwndProgressDialog);

	mov	ecx, DWORD PTR _hwndProgressDialog$9[ebp]
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4

; 151  :         }

	lea	ecx, DWORD PTR _strTimeLeftVal$2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN8@DelayedPub:

; 152  : 
; 153  :         for(UINT i=0; i<delayedPackets.Num(); i++)

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN3@DelayedPub
$LN2@DelayedPub:
	mov	edx, DWORD PTR _i$11[ebp]
	add	edx, 1
	mov	DWORD PTR _i$11[ebp], edx
$LN3@DelayedPub:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?Num@?$List@UNetworkPacket@@@@QBEIXZ	; List<NetworkPacket>::Num
	cmp	DWORD PTR _i$11[ebp], eax
	jae	SHORT $LN9@DelayedPub

; 154  :             delayedPackets[i].data.Clear();

	mov	eax, DWORD PTR _i$11[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z ; List<NetworkPacket>::operator[]
	mov	ecx, eax
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear
	jmp	SHORT $LN2@DelayedPub
$LN9@DelayedPub:

; 155  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	??1?$List@UNetworkPacket@@@@QAE@XZ	; List<NetworkPacket>::~List<NetworkPacket>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1RTMPPublisher@@UAE@XZ		; RTMPPublisher::~RTMPPublisher
	mov	esp, ebp
	pop	ebp
	ret	0
??1DelayedPublisher@@UAE@XZ ENDP			; DelayedPublisher::~DelayedPublisher
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ?SendPacket@DelayedPublisher@@UAEXPAEIKW4PacketType@@@Z
_TEXT	SEGMENT
_newPacket$ = -8					; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_timestamp$ = 16					; size = 4
_type$ = 20						; size = 4
?SendPacket@DelayedPublisher@@UAEXPAEIKW4PacketType@@@Z PROC ; DelayedPublisher::SendPacket, COMDAT
; _this$ = ecx

; 158  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 159  :         InitEncoderData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?InitEncoderData@RTMPPublisher@@IAEXXZ	; RTMPPublisher::InitEncoderData

; 160  : 
; 161  :         ProcessDelayedPackets(timestamp);

	mov	eax, DWORD PTR _timestamp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessDelayedPackets@DelayedPublisher@@AAEXK@Z ; DelayedPublisher::ProcessDelayedPackets

; 162  : 
; 163  :         NetworkPacket *newPacket = delayedPackets.CreateNew();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 272				; 00000110H
	call	?CreateNew@?$List@UNetworkPacket@@@@QAEPAUNetworkPacket@@XZ ; List<NetworkPacket>::CreateNew
	mov	DWORD PTR _newPacket$[ebp], eax

; 164  :         newPacket->data.CopyArray(data, size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	ecx, DWORD PTR _newPacket$[ebp]
	call	?CopyArray@?$List@E@@QAEXPBEI@Z		; List<unsigned char>::CopyArray

; 165  :         newPacket->timestamp = timestamp;

	mov	eax, DWORD PTR _newPacket$[ebp]
	mov	ecx, DWORD PTR _timestamp$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 166  :         newPacket->type = type;

	mov	edx, DWORD PTR _newPacket$[ebp]
	mov	eax, DWORD PTR _type$[ebp]
	mov	DWORD PTR [edx+12], eax

; 167  : 
; 168  :         lastTimestamp = timestamp;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _timestamp$[ebp]
	mov	DWORD PTR [ecx+268], edx

; 169  :     }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SendPacket@DelayedPublisher@@UAEXPAEIKW4PacketType@@@Z ENDP ; DelayedPublisher::SendPacket
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ?RequestKeyframe@DelayedPublisher@@UAEXH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_waitTime$ = 8						; size = 4
?RequestKeyframe@DelayedPublisher@@UAEXH@Z PROC		; DelayedPublisher::RequestKeyframe, COMDAT
; _this$ = ecx

; 172  :     void RequestKeyframe(int waitTime) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?RequestKeyframe@DelayedPublisher@@UAEXH@Z ENDP		; DelayedPublisher::RequestKeyframe
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDelayedPublisher@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDelayedPublisher@@UAEPAXI@Z PROC			; DelayedPublisher::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DelayedPublisher@@UAE@XZ		; DelayedPublisher::~DelayedPublisher
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDelayedPublisher@@UAEPAXI@Z ENDP			; DelayedPublisher::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\delayedpublisher.cpp
;	COMDAT ?CreateDelayedPublisher@@YAPAVNetworkStream@@K@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
$T1 = -4						; size = 4
_delayTime$ = 8						; size = 4
?CreateDelayedPublisher@@YAPAVNetworkStream@@K@Z PROC	; CreateDelayedPublisher, COMDAT

; 177  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 178  :     return new DelayedPublisher(delayTime*1000);

	push	288					; 00000120H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@CreateDela
	imul	eax, DWORD PTR _delayTime$[ebp], 1000
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DelayedPublisher@@QAE@K@Z		; DelayedPublisher::DelayedPublisher
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateDela
$LN3@CreateDela:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateDela:
	mov	eax, DWORD PTR tv74[ebp]

; 179  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateDelayedPublisher@@YAPAVNetworkStream@@K@Z ENDP	; CreateDelayedPublisher
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UNetworkPacket@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@UNetworkPacket@@@@QAE@XZ PROC			; List<NetworkPacket>::List<NetworkPacket>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UNetworkPacket@@@@QAE@XZ ENDP			; List<NetworkPacket>::List<NetworkPacket>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@UNetworkPacket@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@UNetworkPacket@@@@QAE@XZ PROC			; List<NetworkPacket>::~List<NetworkPacket>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UNetworkPacket@@@@QAEXXZ	; List<NetworkPacket>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UNetworkPacket@@@@QAE@XZ ENDP			; List<NetworkPacket>::~List<NetworkPacket>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UNetworkPacket@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UNetworkPacket@@@@QBEIXZ PROC		; List<NetworkPacket>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UNetworkPacket@@@@QBEIXZ ENDP		; List<NetworkPacket>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Remove@?$List@UNetworkPacket@@@@QAEXI@Z
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Remove@?$List@UNetworkPacket@@@@QAEXI@Z PROC		; List<NetworkPacket>::Remove, COMDAT
; _this$ = ecx

; 88   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 89   :         assert(index < num);
; 90   :         if(index >= num) return;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN2@Remove
	jmp	$LN3@Remove
$LN2@Remove:

; 91   : 
; 92   :         if(!--num) {Free(array); array=NULL; return;}

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR [ecx+4], edx
	cmp	DWORD PTR tv68[ebp], 0
	jne	SHORT $LN1@Remove
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN3@Remove
$LN1@Remove:

; 93   : 
; 94   :         mcpy(&array[index], &array[index+1], sizeof(T)*(num-index));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _index$[ebp]
	imul	edx, ecx, 20
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	push	ecx
	imul	eax, DWORD PTR _index$[ebp], 20
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 95   : 
; 96   :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+4], 20
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
$LN3@Remove:

; 97   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Remove@?$List@UNetworkPacket@@@@QAEXI@Z ENDP		; List<NetworkPacket>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?CreateNew@?$List@UNetworkPacket@@@@QAEPAUNetworkPacket@@XZ
_TEXT	SEGMENT
_value$ = -8						; size = 4
_this$ = -4						; size = 4
?CreateNew@?$List@UNetworkPacket@@@@QAEPAUNetworkPacket@@XZ PROC ; List<NetworkPacket>::CreateNew, COMDAT
; _this$ = ecx

; 346  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 347  :         SetSize(num+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$List@UNetworkPacket@@@@QAEHI@Z ; List<NetworkPacket>::SetSize

; 348  : 
; 349  :         T *value = &array[num-1];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	imul	ecx, eax, 20
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx]
	mov	DWORD PTR _value$[ebp], ecx

; 350  : 
; 351  :         return value;

	mov	eax, DWORD PTR _value$[ebp]

; 352  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateNew@?$List@UNetworkPacket@@@@QAEPAUNetworkPacket@@XZ ENDP ; List<NetworkPacket>::CreateNew
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z PROC ; List<NetworkPacket>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUNetworkPacket@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 20					; 00000014H
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 20
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UNetworkPacket@@@@QAEAAUNetworkPacket@@I@Z ENDP ; List<NetworkPacket>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?SetSize@?$List@UNetworkPacket@@@@QAEHI@Z
_TEXT	SEGMENT
_bClear$ = -16						; size = 4
_oldNum$ = -12						; size = 4
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SetSize@?$List@UNetworkPacket@@@@QAEHI@Z PROC		; List<NetworkPacket>::SetSize, COMDAT
; _this$ = ecx

; 205  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 206  :         if(num == n)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _n$[ebp]
	jne	SHORT $LN4@SetSize

; 207  :             return FALSE;

	xor	eax, eax
	jmp	$LN5@SetSize
	jmp	SHORT $LN3@SetSize
$LN4@SetSize:

; 208  :         else if(!n)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN3@SetSize

; 209  :         {
; 210  :             Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UNetworkPacket@@@@QAEXXZ	; List<NetworkPacket>::Clear

; 211  :             return TRUE;

	mov	eax, 1
	jmp	$LN5@SetSize
$LN3@SetSize:

; 212  :         }
; 213  : 
; 214  :         BOOL bClear=(n>num);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN7@SetSize
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN8@SetSize
$LN7@SetSize:
	mov	DWORD PTR tv70[ebp], 0
$LN8@SetSize:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _bClear$[ebp], ecx

; 215  :         UINT oldNum=num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _oldNum$[ebp], eax

; 216  : 
; 217  :         num = n;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 218  :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	eax, DWORD PTR _this$[ebp]
	imul	ecx, DWORD PTR [eax+4], 20
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 219  : 
; 220  :         if(bClear)

	cmp	DWORD PTR _bClear$[ebp], 0
	je	SHORT $LN1@SetSize

; 221  :             zero(&array[oldNum], sizeof(T)*(num-oldNum));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _oldNum$[ebp]
	imul	ecx, eax, 20
	push	ecx
	imul	edx, DWORD PTR _oldNum$[ebp], 20
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero
$LN1@SetSize:

; 222  : 
; 223  :         return TRUE;

	mov	eax, 1
$LN5@SetSize:

; 224  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$List@UNetworkPacket@@@@QAEHI@Z ENDP		; List<NetworkPacket>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@UNetworkPacket@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@UNetworkPacket@@@@QAEXXZ PROC		; List<NetworkPacket>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@UNetworkPacket@@@@QAEXXZ ENDP		; List<NetworkPacket>::Clear
_TEXT	ENDS
END
