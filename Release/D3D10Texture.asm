; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\D3D10Texture.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R0?AVD3D10SamplerState@@@8			; D3D10SamplerState `RTTI Type Descriptor'
PUBLIC	??_R3SamplerState@@8				; SamplerState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3BaseTexture@@8				; BaseTexture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2Texture@@8					; Texture::`RTTI Base Class Array'
PUBLIC	??_R2D3D10Texture@@8				; D3D10Texture::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@Texture@@8			; Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSamplerState@@@8			; SamplerState `RTTI Type Descriptor'
PUBLIC	??_R3Texture@@8					; Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2D3D10SamplerState@@8			; D3D10SamplerState::`RTTI Base Class Array'
PUBLIC	??_R4D3D10SamplerState@@6B@			; D3D10SamplerState::`RTTI Complete Object Locator'
PUBLIC	??_R3D3D10SamplerState@@8			; D3D10SamplerState::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7D3D10SamplerState@@6B@			; D3D10SamplerState::`vftable'
PUBLIC	??_R1A@?0A@EA@BaseTexture@@8			; BaseTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@SamplerState@@8			; SamplerState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVBaseTexture@@@8				; BaseTexture `RTTI Type Descriptor'
PUBLIC	??_R3D3D10Texture@@8				; D3D10Texture::`RTTI Class Hierarchy Descriptor'
PUBLIC	__GUID_9b7e4c01_342c_4106_a19f_4f2704f689f0
PUBLIC	__GUID_4ae63092_6327_4c1b_80ae_bfe12ea32b86
PUBLIC	??_R0?AVD3D10Texture@@@8			; D3D10Texture `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@D3D10Texture@@8			; D3D10Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2SamplerState@@8				; SamplerState::`RTTI Base Class Array'
PUBLIC	??_7D3D10Texture@@6B@				; D3D10Texture::`vftable'
PUBLIC	??_R0?AVTexture@@@8				; Texture `RTTI Type Descriptor'
PUBLIC	??_R2BaseTexture@@8				; BaseTexture::`RTTI Base Class Array'
PUBLIC	__GUID_035f3ab4_482e_4e50_b41f_8a7f8bd8960b
PUBLIC	??_R1A@?0A@EA@D3D10SamplerState@@8		; D3D10SamplerState::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4D3D10Texture@@6B@				; D3D10Texture::`RTTI Complete Object Locator'
EXTRN	__imp__D3DX10CreateTextureFromFileW@24:PROC
EXTRN	__imp_??1SamplerState@@UAE@XZ:PROC
EXTRN	__imp_??0SamplerState@@QAE@XZ:PROC
EXTRN	__imp_??0Texture@@QAE@XZ:PROC
EXTRN	__imp_??1Texture@@UAE@XZ:PROC
;	COMDAT ??_R4D3D10Texture@@6B@
rdata$r	SEGMENT
??_R4D3D10Texture@@6B@ DD 00H				; D3D10Texture::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10Texture@@@8
	DD	FLAT:??_R3D3D10Texture@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10SamplerState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10SamplerState@@8 DD FLAT:??_R0?AVD3D10SamplerState@@@8 ; D3D10SamplerState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10SamplerState@@8
rdata$r	ENDS
;	COMDAT __GUID_035f3ab4_482e_4e50_b41f_8a7f8bd8960b
CONST	SEGMENT
__GUID_035f3ab4_482e_4e50_b41f_8a7f8bd8960b DD 035f3ab4H
	DW	0482eH
	DW	04e50H
	DB	0b4H
	DB	01fH
	DB	08aH
	DB	07fH
	DB	08bH
	DB	0d8H
	DB	096H
	DB	0bH
CONST	ENDS
;	COMDAT ??_R2BaseTexture@@8
rdata$r	SEGMENT
??_R2BaseTexture@@8 DD FLAT:??_R1A@?0A@EA@BaseTexture@@8 ; BaseTexture::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVTexture@@@8
data$r	SEGMENT
??_R0?AVTexture@@@8 DD FLAT:??_7type_info@@6B@		; Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTexture@@', 00H
data$r	ENDS
;	COMDAT ??_7D3D10Texture@@6B@
CONST	SEGMENT
??_7D3D10Texture@@6B@ DD FLAT:??_R4D3D10Texture@@6B@	; D3D10Texture::`vftable'
	DD	FLAT:??_ED3D10Texture@@UAEPAXI@Z
	DD	FLAT:?Width@D3D10Texture@@UBEKXZ
	DD	FLAT:?Height@D3D10Texture@@UBEKXZ
	DD	FLAT:?HasAlpha@D3D10Texture@@UBEHXZ
	DD	FLAT:?SetImage@D3D10Texture@@UAEXPAXW4GSImageFormat@@I@Z
	DD	FLAT:?Map@D3D10Texture@@UAE_NAAPAEAAI@Z
	DD	FLAT:?Unmap@D3D10Texture@@UAEXXZ
	DD	FLAT:?GetFormat@D3D10Texture@@UBE?AW4GSColorFormat@@XZ
	DD	FLAT:?GetDC@D3D10Texture@@UAE_NAAPAUHDC__@@@Z
	DD	FLAT:?ReleaseDC@D3D10Texture@@UAEXXZ
	DD	FLAT:?GetD3DTexture@D3D10Texture@@UAEPAXXZ
	DD	FLAT:?GetSharedHandle@D3D10Texture@@UAEPAXXZ
CONST	ENDS
;	COMDAT ??_R2SamplerState@@8
rdata$r	SEGMENT
??_R2SamplerState@@8 DD FLAT:??_R1A@?0A@EA@SamplerState@@8 ; SamplerState::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10Texture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10Texture@@8 DD FLAT:??_R0?AVD3D10Texture@@@8 ; D3D10Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10Texture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10Texture@@@8
data$r	SEGMENT
??_R0?AVD3D10Texture@@@8 DD FLAT:??_7type_info@@6B@	; D3D10Texture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10Texture@@', 00H
data$r	ENDS
;	COMDAT __GUID_4ae63092_6327_4c1b_80ae_bfe12ea32b86
CONST	SEGMENT
__GUID_4ae63092_6327_4c1b_80ae_bfe12ea32b86 DD 04ae63092H
	DW	06327H
	DW	04c1bH
	DB	080H
	DB	0aeH
	DB	0bfH
	DB	0e1H
	DB	02eH
	DB	0a3H
	DB	02bH
	DB	086H
CONST	ENDS
;	COMDAT __GUID_9b7e4c01_342c_4106_a19f_4f2704f689f0
CONST	SEGMENT
__GUID_9b7e4c01_342c_4106_a19f_4f2704f689f0 DD 09b7e4c01H
	DW	0342cH
	DW	04106H
	DB	0a1H
	DB	09fH
	DB	04fH
	DB	027H
	DB	04H
	DB	0f6H
	DB	089H
	DB	0f0H
CONST	ENDS
;	COMDAT ??_R3D3D10Texture@@8
rdata$r	SEGMENT
??_R3D3D10Texture@@8 DD 00H				; D3D10Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2D3D10Texture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBaseTexture@@@8
data$r	SEGMENT
??_R0?AVBaseTexture@@@8 DD FLAT:??_7type_info@@6B@	; BaseTexture `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBaseTexture@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SamplerState@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SamplerState@@8 DD FLAT:??_R0?AVSamplerState@@@8 ; SamplerState::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SamplerState@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BaseTexture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BaseTexture@@8 DD FLAT:??_R0?AVBaseTexture@@@8 ; BaseTexture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BaseTexture@@8
rdata$r	ENDS
;	COMDAT ??_7D3D10SamplerState@@6B@
CONST	SEGMENT
??_7D3D10SamplerState@@6B@ DD FLAT:??_R4D3D10SamplerState@@6B@ ; D3D10SamplerState::`vftable'
	DD	FLAT:??_ED3D10SamplerState@@UAEPAXI@Z
CONST	ENDS
;	COMDAT ??_R3D3D10SamplerState@@8
rdata$r	SEGMENT
??_R3D3D10SamplerState@@8 DD 00H			; D3D10SamplerState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2D3D10SamplerState@@8
rdata$r	ENDS
;	COMDAT ??_R4D3D10SamplerState@@6B@
rdata$r	SEGMENT
??_R4D3D10SamplerState@@6B@ DD 00H			; D3D10SamplerState::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10SamplerState@@@8
	DD	FLAT:??_R3D3D10SamplerState@@8
rdata$r	ENDS
;	COMDAT ??_R2D3D10SamplerState@@8
rdata$r	SEGMENT
??_R2D3D10SamplerState@@8 DD FLAT:??_R1A@?0A@EA@D3D10SamplerState@@8 ; D3D10SamplerState::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SamplerState@@8
rdata$r	ENDS
;	COMDAT ??_R3Texture@@8
rdata$r	SEGMENT
??_R3Texture@@8 DD 00H					; Texture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Texture@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSamplerState@@@8
data$r	SEGMENT
??_R0?AVSamplerState@@@8 DD FLAT:??_7type_info@@6B@	; SamplerState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSamplerState@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Texture@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Texture@@8 DD FLAT:??_R0?AVTexture@@@8	; Texture::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Texture@@8
rdata$r	ENDS
;	COMDAT ??_R2D3D10Texture@@8
rdata$r	SEGMENT
??_R2D3D10Texture@@8 DD FLAT:??_R1A@?0A@EA@D3D10Texture@@8 ; D3D10Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Texture@@8
	DD	FLAT:??_R1A@?0A@EA@BaseTexture@@8
rdata$r	ENDS
;	COMDAT ??_R2Texture@@8
rdata$r	SEGMENT
??_R2Texture@@8 DD FLAT:??_R1A@?0A@EA@Texture@@8	; Texture::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@BaseTexture@@8
rdata$r	ENDS
;	COMDAT ??_R3BaseTexture@@8
rdata$r	SEGMENT
??_R3BaseTexture@@8 DD 00H				; BaseTexture::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2BaseTexture@@8
rdata$r	ENDS
;	COMDAT ??_R3SamplerState@@8
rdata$r	SEGMENT
??_R3SamplerState@@8 DD 00H				; SamplerState::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2SamplerState@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10SamplerState@@@8
data$r	SEGMENT
??_R0?AVD3D10SamplerState@@@8 DD FLAT:??_7type_info@@6B@ ; D3D10SamplerState `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10SamplerState@@', 00H
_convertFilter DD 015H
	DD	00H
	DD	055H
	DD	01H
	DD	04H
	DD	05H
	DD	010H
	DD	011H
	DD	014H
_convertFormat DD 00H
	DD	041H
	DD	03dH
	DD	01cH
	DD	01cH
	DD	058H
	DD	057H
	DD	0aH
	DD	02H
	DD	056H
	DD	055H
	DD	018H
	DD	047H
	DD	04dH
	DD	053H
_convertAddressMode DD 03H
	DD	01H
	DD	02H
	DD	04H
	DD	05H
_formatPitch DD	00H
	DD	01H
	DD	01H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	08H
	DD	010H
	DD	00H
	DD	00H
	DD	00H
$SG4294904588 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'S', 00H
	DB	'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'r', 00H, 'S'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'S'
	DB	00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'r', 00H
	DB	'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'u', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'a', 00H
	DB	'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H
	DB	'X', 00H, 00H, 00H
$SG4294904587 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'S', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'h', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'a'
	DB	00H, 'l', 00H, 'u', 00H, 'e', 00H, '.', 00H, 00H, 00H
$SG4294904586 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'S', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l'
	DB	00H, 'e', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H
	DB	00H, 00H
$SG4294904585 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'S', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904584 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'S', 00H, 'h'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H
	DB	'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'R', 00H, 'e'
	DB	00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0', 00H
	DB	'8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904583 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, 't', 00H, 'r', 00H, 'i', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'a', 00H, ' ', 00H, 'b', 00H, 'l', 00H, 'a', 00H, 'n', 00H, 'k'
	DB	00H, ' ', 00H, 'D', 00H, 'X', 00H, 'T', 00H, ' ', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, '.'
	DB	00H, ' ', 00H, ' ', 00H, 'U', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'F'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, 'F', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG4294904582 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 'n', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'm', 00H, 'i', 00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 's'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'a', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'p', 00H, 'o'
	DB	00H, 'w', 00H, 'e', 00H, 'r', 00H, '-', 00H, 'o', 00H, 'f', 00H
	DB	'-', 00H, 't', 00H, 'w', 00H, 'o', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, '.', 00H, ' '
	DB	00H, ' ', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'm', 00H, 'i'
	DB	00H, 'p', 00H, 'm', 00H, 'a', 00H, 'p', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 00H, 00H
$SG4294904581 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, '2', 00H, 'D', 00H, ' ', 00H
	DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ','
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+3
$SG4294904580 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H
	DB	'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'V', 00H, 'i', 00H, 'e'
	DB	00H, 'w', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294904579 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'b', 00H
	DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's'
	DB	00H, '''', 00H, 00H, 00H
$SG4294904578 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'f', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H, ' ', 00H
	DB	'''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+1
$SG4294904577 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H
	DB	'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'S', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, 'R', 00H, 'e', 00H, 's', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'V', 00H, 'i'
	DB	00H, 'e', 00H, 'w', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'l'
	DB	00H, 'X', 00H, 00H, 00H
$SG4294904576 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'm', 00H, 'F', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'r', 00H, 'y', 00H
	DB	' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG4294904575 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	':', 00H, ' ', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, ' ', 00H
	DB	'b', 00H, 'l', 00H, 'a', 00H, 'n', 00H, 'k', 00H, ' ', 00H, 'D'
	DB	00H, 'X', 00H, 'T', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'r'
	DB	00H, 'g', 00H, 'e', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294904574 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, '2', 00H, 'D', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0', 00H
	DB	'8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294904573 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904572 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+3
$SG4294904571 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'G', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'e', 00H, 'x'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' ', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'2', 00H, 'D', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H
	DB	'X', 00H, 00H, 00H
	ORG $+3
$SG4294904570 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'G', 00H, 'D', 00H, 'I', 00H, 'T', 00H, 'e', 00H, 'x'
	DB	00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' ', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'S'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'R', 00H
	DB	'e', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e'
	DB	00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904569 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, '2', 00H, 'D', 00H, ' ', 00H, 'f', 00H
	DB	'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294904568 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'R', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	'x', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+3
$SG4294904567 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, ':', 00H, ' ', 00H, 'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, '%', 00H
	DB	'0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904566 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'C', 00H
	DB	':', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'a', 00H
	DB	's', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'a', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'G', 00H, 'D'
	DB	00H, 'I', 00H, '-', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG4294904565 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'C', 00H
	DB	':', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'q', 00H
	DB	'u', 00H, 'e', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 's', 00H, 'u'
	DB	00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'a'
	DB	00H, 'c', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294904564 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'C', 00H
	DB	':', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'g', 00H
	DB	'e', 00H, 't', 00H, ' ', 00H, 'D', 00H, 'C', 00H, ',', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l'
	DB	00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294904563 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'R', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, 'D', 00H, 'C', 00H, ':', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, ' ', 00H, 'D', 00H, 'C', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'a'
	DB	00H, 's', 00H, 'e', 00H, 00H, 00H
	ORG $+1
$SG4294904562 DB '3', 00H, 'D', 00H, '1', 00H, '1', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ':'
	DB	00H, 'S', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'm', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'a'
	DB	00H, ' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'd', 00H
	DB	'y', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'c', 00H, ' '
	DB	00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H
$SG4294904561 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 'm'
	DB	00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i'
	DB	00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG4294904560 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'I', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294904559 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'M', 00H, 'a', 00H, 'p', 00H, ':', 00H, ' ', 00H
	DB	'm', 00H, 'a', 00H, 'p', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H
	DB	00H, 00H
$SG4294904558 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'Q', 00H
	DB	'u', 00H, 'e', 00H, 'r', 00H, 'y', 00H, 'I', 00H, 'n', 00H, 't'
	DB	00H, 'e', 00H, 'r', 00H, 'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294904557 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':'
	DB	00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'S', 00H, 'h', 00H
	DB	'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'H', 00H, 'a', 00H, 'n'
	DB	00H, 'd', 00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'G', 00H
	DB	'e', 00H, 't', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
PUBLIC	?GetSharedHandle@D3D10Texture@@UAEPAXXZ		; D3D10Texture::GetSharedHandle
PUBLIC	?Unmap@D3D10Texture@@UAEXXZ			; D3D10Texture::Unmap
PUBLIC	?Map@D3D10Texture@@UAE_NAAPAEAAI@Z		; D3D10Texture::Map
PUBLIC	?SetImage@D3D10Texture@@UAEXPAXW4GSImageFormat@@I@Z ; D3D10Texture::SetImage
PUBLIC	?CopyPackedRGB@@YAXPAE0I@Z			; CopyPackedRGB
PUBLIC	?ReleaseDC@D3D10Texture@@UAEXXZ			; D3D10Texture::ReleaseDC
PUBLIC	?GetDC@D3D10Texture@@UAE_NAAPAUHDC__@@@Z	; D3D10Texture::GetDC
PUBLIC	?GetFormat@D3D10Texture@@UBE?AW4GSColorFormat@@XZ ; D3D10Texture::GetFormat
PUBLIC	?HasAlpha@D3D10Texture@@UBEHXZ			; D3D10Texture::HasAlpha
PUBLIC	?Height@D3D10Texture@@UBEKXZ			; D3D10Texture::Height
PUBLIC	?Width@D3D10Texture@@UBEKXZ			; D3D10Texture::Width
PUBLIC	??1D3D10Texture@@UAE@XZ				; D3D10Texture::~D3D10Texture
PUBLIC	??_GD3D10Texture@@UAEPAXI@Z			; D3D10Texture::`scalar deleting destructor'
PUBLIC	??0D3D10Texture@@QAE@XZ				; D3D10Texture::D3D10Texture
PUBLIC	??1D3D10SamplerState@@UAE@XZ			; D3D10SamplerState::~D3D10SamplerState
PUBLIC	??_GD3D10SamplerState@@UAEPAXI@Z		; D3D10SamplerState::`scalar deleting destructor'
PUBLIC	??0D3D10SamplerState@@QAE@XZ			; D3D10SamplerState::D3D10SamplerState
PUBLIC	?GetGSFormatFromDXGIFormat@@YA?AW4GSColorFormat@@W4DXGI_FORMAT@@@Z ; GetGSFormatFromDXGIFormat
PUBLIC	?IsPow2@@YA_NI@Z				; IsPow2
PUBLIC	?GetD3DTexture@D3D10Texture@@UAEPAXXZ		; D3D10Texture::GetD3DTexture
PUBLIC	??0D3DX10_IMAGE_LOAD_INFO@@QAE@XZ		; D3DX10_IMAGE_LOAD_INFO::D3DX10_IMAGE_LOAD_INFO
PUBLIC	?CreateSamplerState@D3D10SamplerState@@CAPAVSamplerState@@AAUSamplerInfo@@@Z ; D3D10SamplerState::CreateSamplerState
PUBLIC	?CreateShared@D3D10Texture@@CAPAVTexture@@II@Z	; D3D10Texture::CreateShared
PUBLIC	?CreateGDITexture@D3D10Texture@@CAPAVTexture@@II@Z ; D3D10Texture::CreateGDITexture
PUBLIC	?CreateRenderTarget@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@H@Z ; D3D10Texture::CreateRenderTarget
PUBLIC	?CreateFromFile@D3D10Texture@@CAPAVTexture@@PB_WH@Z ; D3D10Texture::CreateFromFile
PUBLIC	?CreateTexture@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z ; D3D10Texture::CreateTexture
PUBLIC	?CreateFromSharedHandle@D3D10Texture@@CAPAVTexture@@IIPAX@Z ; D3D10Texture::CreateFromSharedHandle
EXTRN	??_ED3D10SamplerState@@UAEPAXI@Z:PROC		; D3D10SamplerState::`vector deleting destructor'
EXTRN	??_ED3D10Texture@@UAEPAXI@Z:PROC		; D3D10Texture::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateFromSharedHandle@D3D10Texture@@CAPAVTexture@@IIPAX@Z
_TEXT	SEGMENT
_resourceDesc$ = -108					; size = 24
tv173 = -84						; size = 4
tv68 = -80						; size = 4
$T1 = -76						; size = 4
_resource$ = -72					; size = 4
tv146 = -68						; size = 4
_newTex$ = -64						; size = 4
_err$ = -60						; size = 4
_tempResource$ = -56					; size = 4
_texVal$ = -52						; size = 4
_td$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_handle$ = 16						; size = 4
?CreateFromSharedHandle@D3D10Texture@@CAPAVTexture@@IIPAX@Z PROC ; D3D10Texture::CreateFromSharedHandle, COMDAT

; 84   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 85   :     HRESULT err;
; 86   : 
; 87   :     if(!handle)

	cmp	DWORD PTR _handle$[ebp], 0
	jne	SHORT $LN6@CreateFrom

; 88   :     {
; 89   :         AppWarning(TEXT("D3D10Texture::CreateFromSharedHandle: NULL handle value."));

	push	OFFSET $SG4294904587
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 90   :         return NULL;

	xor	eax, eax
	jmp	$LN7@CreateFrom
$LN6@CreateFrom:

; 91   :     }
; 92   : 
; 93   :     ID3D10Resource *tempResource;
; 94   :     if(FAILED(err = GetD3D()->OpenSharedResource(handle, __uuidof(ID3D10Resource), (void**)&tempResource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv68[ebp], eax
	lea	eax, DWORD PTR _tempResource$[ebp]
	push	eax
	push	OFFSET __GUID_9b7e4c01_342c_4106_a19f_4f2704f689f0
	mov	ecx, DWORD PTR _handle$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+380]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN5@CreateFrom

; 95   :     {
; 96   :         AppWarning(TEXT("D3D10Texture::CreateFromSharedHandle: Failed to open shared handle, result = 0x%08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904586
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 97   :         return NULL;

	xor	eax, eax
	jmp	$LN7@CreateFrom
$LN5@CreateFrom:

; 98   :     }
; 99   : 
; 100  :     ID3D10Texture2D *texVal;
; 101  :     if(FAILED(err = tempResource->QueryInterface(__uuidof(ID3D10Texture2D), (void**)&texVal)))

	lea	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	push	OFFSET __GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0
	mov	edx, DWORD PTR _tempResource$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _tempResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN4@CreateFrom

; 102  :     {
; 103  :         SafeRelease(tempResource);

	cmp	DWORD PTR _tempResource$[ebp], 0
	je	SHORT $LN3@CreateFrom
	mov	eax, DWORD PTR _tempResource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _tempResource$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _tempResource$[ebp], 0
$LN3@CreateFrom:

; 104  :         AppWarning(TEXT("D3D10Texture::CreateFromSharedHandle: could not query interface, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904585
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 105  :         return NULL;

	xor	eax, eax
	jmp	$LN7@CreateFrom
$LN4@CreateFrom:

; 106  :     }
; 107  : 
; 108  :     tempResource->Release();

	mov	edx, DWORD PTR _tempResource$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _tempResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx

; 109  : 
; 110  :     //------------------------------------------
; 111  : 
; 112  :     D3D10_TEXTURE2D_DESC td;
; 113  :     texVal->GetDesc(&td);

	lea	eax, DWORD PTR _td$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texVal$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	call	ecx

; 114  : 
; 115  :     //------------------------------------------
; 116  : 
; 117  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 118  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	edx, DWORD PTR _resourceDesc$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 119  :     resourceDesc.Format              = td.Format;

	mov	eax, DWORD PTR _td$[ebp+16]
	mov	DWORD PTR _resourceDesc$[ebp], eax

; 120  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 121  :     resourceDesc.Texture2D.MipLevels = 1;

	mov	DWORD PTR _resourceDesc$[ebp+12], 1

; 122  : 
; 123  :     ID3D10ShaderResourceView *resource = NULL;

	mov	DWORD PTR _resource$[ebp], 0

; 124  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texVal, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv146[ebp], eax
	lea	ecx, DWORD PTR _resource$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resourceDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv146[ebp]
	push	ecx
	mov	edx, DWORD PTR tv146[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@CreateFrom

; 125  :     {
; 126  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN1@CreateFrom
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _texVal$[ebp], 0
$LN1@CreateFrom:

; 127  :         AppWarning(TEXT("D3D10Texture::CreateFromSharedHandle: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904584
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 128  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN7@CreateFrom
$LN2@CreateFrom:

; 129  :     }
; 130  : 
; 131  :     //------------------------------------------
; 132  : 
; 133  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN9@CreateFrom
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv173[ebp], eax
	jmp	SHORT $LN10@CreateFrom
$LN9@CreateFrom:
	mov	DWORD PTR tv173[ebp], 0
$LN10@CreateFrom:
	mov	ecx, DWORD PTR tv173[ebp]
	mov	DWORD PTR _newTex$[ebp], ecx

; 134  :     newTex->format = GetGSFormatFromDXGIFormat(td.Format);;

	mov	edx, DWORD PTR _td$[ebp+16]
	push	edx
	call	?GetGSFormatFromDXGIFormat@@YA?AW4GSColorFormat@@W4DXGI_FORMAT@@@Z ; GetGSFormatFromDXGIFormat
	add	esp, 4
	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], eax

; 135  :     newTex->resource = resource;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [edx+8], eax

; 136  :     newTex->texture = texVal;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 137  :     newTex->bDynamic = false;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	BYTE PTR [eax+33], 0

; 138  :     newTex->width = width;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 139  :     newTex->height = height;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 140  : 
; 141  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN7@CreateFrom:

; 142  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateFromSharedHandle@D3D10Texture@@CAPAVTexture@@IIPAX@Z ENDP ; D3D10Texture::CreateFromSharedHandle
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateTexture@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z
_TEXT	SEGMENT
_resourceDesc$ = -144					; size = 24
_srd$ = -120						; size = 12
_resource$ = -108					; size = 4
_lpSRD$ = -104						; size = 4
tv83 = -100						; size = 4
tv172 = -96						; size = 4
tv81 = -92						; size = 4
tv169 = -88						; size = 4
tv205 = -84						; size = 4
tv92 = -80						; size = 4
tv199 = -76						; size = 4
tv85 = -72						; size = 4
$T1 = -68						; size = 4
_format$ = -64						; size = 4
_err$ = -60						; size = 4
_texVal$ = -56						; size = 4
_newTex$ = -52						; size = 4
_td$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_colorFormat$ = 16					; size = 4
_lpData$ = 20						; size = 4
_bGenMipMaps$ = 24					; size = 4
_bStatic$ = 28						; size = 4
?CreateTexture@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z PROC ; D3D10Texture::CreateTexture, COMDAT

; 145  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 146  :     HRESULT err;
; 147  : 
; 148  :     if(colorFormat >= GS_DXT1)

	cmp	DWORD PTR _colorFormat$[ebp], 12	; 0000000cH
	jl	SHORT $LN8@CreateText

; 149  :     {
; 150  :         AppWarning(TEXT("D3D10Texture::CreateTexture: tried to create a blank DXT texture.  Use CreateFromFile instead."));

	push	OFFSET $SG4294904583
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 151  :         return NULL;

	xor	eax, eax
	jmp	$LN9@CreateText
$LN8@CreateText:

; 152  :     }
; 153  : 
; 154  :     DXGI_FORMAT format = convertFormat[(UINT)colorFormat];

	mov	eax, DWORD PTR _colorFormat$[ebp]
	mov	ecx, DWORD PTR _convertFormat[eax*4]
	mov	DWORD PTR _format$[ebp], ecx

; 155  : 
; 156  :     if(bGenMipMaps && (!IsPow2(width) || !IsPow2(height)))

	cmp	DWORD PTR _bGenMipMaps$[ebp], 0
	je	SHORT $LN7@CreateText
	mov	edx, DWORD PTR _width$[ebp]
	push	edx
	call	?IsPow2@@YA_NI@Z			; IsPow2
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@CreateText
	mov	ecx, DWORD PTR _height$[ebp]
	push	ecx
	call	?IsPow2@@YA_NI@Z			; IsPow2
	add	esp, 4
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@CreateText
$LN6@CreateText:

; 157  :     {
; 158  :         AppWarning(TEXT("D3D10Texture::CreateTexture: Cannot generate mipmaps for a non-power-of-two sized texture.  Disabling mipmap generation."));

	push	OFFSET $SG4294904582
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 159  :         bGenMipMaps = FALSE;

	mov	DWORD PTR _bGenMipMaps$[ebp], 0
$LN7@CreateText:

; 160  :     }
; 161  : 
; 162  :     D3D10_TEXTURE2D_DESC td;
; 163  :     zero(&td, sizeof(td));

	push	44					; 0000002cH
	lea	eax, DWORD PTR _td$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 164  :     td.Width            = width;

	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _td$[ebp], ecx

; 165  :     td.Height           = height;

	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _td$[ebp+4], edx

; 166  :     td.MipLevels        = bGenMipMaps ? 0 : 1;

	cmp	DWORD PTR _bGenMipMaps$[ebp], 0
	je	SHORT $LN11@CreateText
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN12@CreateText
$LN11@CreateText:
	mov	DWORD PTR tv81[ebp], 1
$LN12@CreateText:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _td$[ebp+8], eax

; 167  :     td.ArraySize        = 1;

	mov	DWORD PTR _td$[ebp+12], 1

; 168  :     td.Format           = format;

	mov	ecx, DWORD PTR _format$[ebp]
	mov	DWORD PTR _td$[ebp+16], ecx

; 169  :     td.BindFlags        = D3D10_BIND_SHADER_RESOURCE;

	mov	DWORD PTR _td$[ebp+32], 8

; 170  :     td.SampleDesc.Count = 1;

	mov	DWORD PTR _td$[ebp+20], 1

; 171  :     td.Usage            = bStatic ? D3D10_USAGE_DEFAULT : D3D10_USAGE_DYNAMIC;

	cmp	DWORD PTR _bStatic$[ebp], 0
	je	SHORT $LN13@CreateText
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN14@CreateText
$LN13@CreateText:
	mov	DWORD PTR tv83[ebp], 2
$LN14@CreateText:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _td$[ebp+28], edx

; 172  :     td.CPUAccessFlags   = bStatic ? 0 : D3D10_CPU_ACCESS_WRITE;

	cmp	DWORD PTR _bStatic$[ebp], 0
	je	SHORT $LN15@CreateText
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN16@CreateText
$LN15@CreateText:
	mov	DWORD PTR tv85[ebp], 65536		; 00010000H
$LN16@CreateText:
	mov	eax, DWORD PTR tv85[ebp]
	mov	DWORD PTR _td$[ebp+36], eax

; 173  : 
; 174  :     D3D10_SUBRESOURCE_DATA srd;
; 175  :     D3D10_SUBRESOURCE_DATA *lpSRD;
; 176  :     if(lpData)

	cmp	DWORD PTR _lpData$[ebp], 0
	je	SHORT $LN5@CreateText

; 177  :     {
; 178  :         srd.pSysMem = lpData;

	mov	ecx, DWORD PTR _lpData$[ebp]
	mov	DWORD PTR _srd$[ebp], ecx

; 179  :         srd.SysMemPitch = width*formatPitch[(UINT)colorFormat];

	mov	edx, DWORD PTR _colorFormat$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	imul	eax, DWORD PTR _formatPitch[edx*4]
	mov	DWORD PTR _srd$[ebp+4], eax

; 180  :         srd.SysMemSlicePitch = 0;

	mov	DWORD PTR _srd$[ebp+8], 0

; 181  :         lpSRD = &srd;

	lea	ecx, DWORD PTR _srd$[ebp]
	mov	DWORD PTR _lpSRD$[ebp], ecx

; 182  :     }
; 183  :     else

	jmp	SHORT $LN4@CreateText
$LN5@CreateText:

; 184  :         lpSRD = NULL;

	mov	DWORD PTR _lpSRD$[ebp], 0
$LN4@CreateText:

; 185  : 
; 186  :     ID3D10Texture2D *texVal;
; 187  :     if(FAILED(err = GetD3D()->CreateTexture2D(&td, lpSRD, &texVal)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv92[ebp], eax
	lea	edx, DWORD PTR _texVal$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpSRD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _td$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv92[ebp]
	push	edx
	mov	eax, DWORD PTR tv92[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateText

; 188  :     {
; 189  :         AppWarning(TEXT("D3D10Texture::CreateTexture: CreateTexture2D failed, result = 0x%08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904581
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 190  :         return NULL;

	xor	eax, eax
	jmp	$LN9@CreateText
$LN3@CreateText:

; 191  :     }
; 192  : 
; 193  :     //------------------------------------------
; 194  : 
; 195  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 196  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	ecx, DWORD PTR _resourceDesc$[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 197  :     resourceDesc.Format              = format;

	mov	edx, DWORD PTR _format$[ebp]
	mov	DWORD PTR _resourceDesc$[ebp], edx

; 198  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 199  :     resourceDesc.Texture2D.MipLevels = bGenMipMaps ? -1 : 1;

	cmp	DWORD PTR _bGenMipMaps$[ebp], 0
	je	SHORT $LN17@CreateText
	mov	DWORD PTR tv169[ebp], -1
	jmp	SHORT $LN18@CreateText
$LN17@CreateText:
	mov	DWORD PTR tv169[ebp], 1
$LN18@CreateText:
	mov	eax, DWORD PTR tv169[ebp]
	mov	DWORD PTR _resourceDesc$[ebp+12], eax

; 200  : 
; 201  :     ID3D10ShaderResourceView *resource;
; 202  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texVal, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv172[ebp], eax
	lea	ecx, DWORD PTR _resource$[ebp]
	push	ecx
	lea	edx, DWORD PTR _resourceDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv172[ebp]
	push	ecx
	mov	edx, DWORD PTR tv172[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+300]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@CreateText

; 203  :     {
; 204  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN1@CreateText
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _texVal$[ebp], 0
$LN1@CreateText:

; 205  :         AppWarning(TEXT("D3D10Texture::CreateTexture: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904580
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 206  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN9@CreateText
$LN2@CreateText:

; 207  :     }
; 208  : 
; 209  :     //------------------------------------------
; 210  : 
; 211  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN19@CreateText
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv199[ebp], eax
	jmp	SHORT $LN20@CreateText
$LN19@CreateText:
	mov	DWORD PTR tv199[ebp], 0
$LN20@CreateText:
	mov	ecx, DWORD PTR tv199[ebp]
	mov	DWORD PTR _newTex$[ebp], ecx

; 212  :     newTex->format = colorFormat;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _colorFormat$[ebp]
	mov	DWORD PTR [edx+24], eax

; 213  :     newTex->resource = resource;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 214  :     newTex->texture = texVal;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _texVal$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 215  :     newTex->bDynamic = !bStatic;

	cmp	DWORD PTR _bStatic$[ebp], 0
	jne	SHORT $LN21@CreateText
	mov	DWORD PTR tv205[ebp], 1
	jmp	SHORT $LN22@CreateText
$LN21@CreateText:
	mov	DWORD PTR tv205[ebp], 0
$LN22@CreateText:
	mov	edx, DWORD PTR _newTex$[ebp]
	mov	al, BYTE PTR tv205[ebp]
	mov	BYTE PTR [edx+33], al

; 216  :     newTex->width = width;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 217  :     newTex->height = height;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 218  : 
; 219  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN9@CreateText:

; 220  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateTexture@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z ENDP ; D3D10Texture::CreateTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateFromFile@D3D10Texture@@CAPAVTexture@@PB_WH@Z
_TEXT	SEGMENT
_resourceDesc$ = -160					; size = 24
_ili$ = -136						; size = 52
_tex2D$ = -84						; size = 4
tv165 = -80						; size = 4
tv83 = -76						; size = 4
tv223 = -72						; size = 4
$T1 = -68						; size = 4
tv162 = -64						; size = 4
tv228 = -60						; size = 4
_resource$ = -56					; size = 4
_err$ = -52						; size = 4
_texResource$ = -48					; size = 4
_newTex$ = -44						; size = 4
_ii$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_lpFile$ = 8						; size = 4
_bBuildMipMaps$ = 12					; size = 4
?CreateFromFile@D3D10Texture@@CAPAVTexture@@PB_WH@Z PROC ; D3D10Texture::CreateFromFile, COMDAT

; 223  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 224  :     HRESULT err;
; 225  : 
; 226  :     D3DX10_IMAGE_INFO ii;
; 227  :     if(FAILED(D3DX10GetImageInfoFromFile(lpFile, NULL, &ii, NULL)))

	push	0
	lea	eax, DWORD PTR _ii$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _lpFile$[ebp]
	push	ecx
	call	DWORD PTR __imp__D3DX10GetImageInfoFromFileW@16
	test	eax, eax
	jge	SHORT $LN22@CreateFrom

; 228  :     {
; 229  :         AppWarning(TEXT("D3D10Texture::CreateFromFile: Could not get information about texture file '%s'"), lpFile);

	mov	edx, DWORD PTR _lpFile$[ebp]
	push	edx
	push	OFFSET $SG4294904579
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 230  :         return NULL;

	xor	eax, eax
	jmp	$LN23@CreateFrom
$LN22@CreateFrom:

; 231  :     }
; 232  : 
; 233  :     //------------------------------------------
; 234  : 
; 235  :     if(bBuildMipMaps && (!IsPow2(ii.Width) || !IsPow2(ii.Height)))

	cmp	DWORD PTR _bBuildMipMaps$[ebp], 0
	je	SHORT $LN21@CreateFrom
	mov	eax, DWORD PTR _ii$[ebp]
	push	eax
	call	?IsPow2@@YA_NI@Z			; IsPow2
	add	esp, 4
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN20@CreateFrom
	mov	edx, DWORD PTR _ii$[ebp+4]
	push	edx
	call	?IsPow2@@YA_NI@Z			; IsPow2
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN21@CreateFrom
$LN20@CreateFrom:

; 236  :         bBuildMipMaps = FALSE;

	mov	DWORD PTR _bBuildMipMaps$[ebp], 0
$LN21@CreateFrom:

; 237  : 
; 238  :     D3DX10_IMAGE_LOAD_INFO ili;

	lea	ecx, DWORD PTR _ili$[ebp]
	call	??0D3DX10_IMAGE_LOAD_INFO@@QAE@XZ	; D3DX10_IMAGE_LOAD_INFO::D3DX10_IMAGE_LOAD_INFO

; 239  :     ili.Width           = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp], -1

; 240  :     ili.Height          = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+4], -1

; 241  :     ili.Depth           = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+8], -1

; 242  :     ili.FirstMipLevel   = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+12], -1

; 243  :     ili.MipLevels       = bBuildMipMaps ? 0 : 1;

	cmp	DWORD PTR _bBuildMipMaps$[ebp], 0
	je	SHORT $LN25@CreateFrom
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN26@CreateFrom
$LN25@CreateFrom:
	mov	DWORD PTR tv83[ebp], 1
$LN26@CreateFrom:
	mov	ecx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _ili$[ebp+16], ecx

; 244  :     ili.Usage           = (D3D10_USAGE)D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+20], -1

; 245  :     ili.BindFlags       = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+24], -1

; 246  :     ili.CpuAccessFlags  = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+28], -1

; 247  :     ili.MiscFlags       = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+32], -1

; 248  :     ili.Format          = (DXGI_FORMAT)D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+36], -1

; 249  :     ili.Filter          = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+40], -1

; 250  :     ili.MipFilter       = D3DX10_DEFAULT;

	mov	DWORD PTR _ili$[ebp+44], -1

; 251  :     ili.pSrcInfo        = NULL;

	mov	DWORD PTR _ili$[ebp+48], 0

; 252  : 
; 253  :     ID3D10Resource *texResource;
; 254  :     if(FAILED(err = D3DX10CreateTextureFromFile(GetD3D(), lpFile, &ili, NULL, &texResource, NULL)))

	push	0
	lea	edx, DWORD PTR _texResource$[ebp]
	push	edx
	push	0
	lea	eax, DWORD PTR _ili$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpFile$[ebp]
	push	ecx
	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	push	eax
	call	DWORD PTR __imp__D3DX10CreateTextureFromFileW@24
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN19@CreateFrom

; 255  :     {
; 256  :         AppWarning(TEXT("D3D10Texture::CreateFromFile: failed to load '%s'"), lpFile);

	mov	edx, DWORD PTR _lpFile$[ebp]
	push	edx
	push	OFFSET $SG4294904578
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 257  :         return NULL;

	xor	eax, eax
	jmp	$LN23@CreateFrom
$LN19@CreateFrom:

; 258  :     }
; 259  : 
; 260  :     //------------------------------------------
; 261  : 
; 262  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 263  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	eax, DWORD PTR _resourceDesc$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 264  :     resourceDesc.Format              = ii.Format;

	mov	ecx, DWORD PTR _ii$[ebp+24]
	mov	DWORD PTR _resourceDesc$[ebp], ecx

; 265  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 266  :     resourceDesc.Texture2D.MipLevels = bBuildMipMaps ? -1 : 1;

	cmp	DWORD PTR _bBuildMipMaps$[ebp], 0
	je	SHORT $LN27@CreateFrom
	mov	DWORD PTR tv162[ebp], -1
	jmp	SHORT $LN28@CreateFrom
$LN27@CreateFrom:
	mov	DWORD PTR tv162[ebp], 1
$LN28@CreateFrom:
	mov	edx, DWORD PTR tv162[ebp]
	mov	DWORD PTR _resourceDesc$[ebp+12], edx

; 267  : 
; 268  :     ID3D10ShaderResourceView *resource;
; 269  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texResource, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv165[ebp], eax
	lea	eax, DWORD PTR _resource$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resourceDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texResource$[ebp]
	push	edx
	mov	eax, DWORD PTR tv165[ebp]
	push	eax
	mov	ecx, DWORD PTR tv165[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+300]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN18@CreateFrom

; 270  :     {
; 271  :         SafeRelease(texResource);

	cmp	DWORD PTR _texResource$[ebp], 0
	je	SHORT $LN17@CreateFrom
	mov	ecx, DWORD PTR _texResource$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _texResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	mov	DWORD PTR _texResource$[ebp], 0
$LN17@CreateFrom:

; 272  :         AppWarning(TEXT("D3D10Texture::CreateFromFile: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294904577
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 273  :         return NULL;

	xor	eax, eax
	jmp	$LN23@CreateFrom
$LN18@CreateFrom:

; 274  :     }
; 275  : 
; 276  :     //------------------------------------------
; 277  : 
; 278  :     ID3D10Texture2D *tex2D;
; 279  :     err = texResource->QueryInterface(__uuidof(ID3D10Texture2D), (void**)&tex2D);

	lea	eax, DWORD PTR _tex2D$[ebp]
	push	eax
	push	OFFSET __GUID_9b7e4c04_342c_4106_a19f_4f2704f689f0
	mov	ecx, DWORD PTR _texResource$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _texResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 280  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN16@CreateFrom

; 281  :     {
; 282  :         SafeRelease(texResource);

	cmp	DWORD PTR _texResource$[ebp], 0
	je	SHORT $LN15@CreateFrom
	mov	edx, DWORD PTR _texResource$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _texResource$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _texResource$[ebp], 0
$LN15@CreateFrom:

; 283  :         SafeRelease(resource);

	cmp	DWORD PTR _resource$[ebp], 0
	je	SHORT $LN14@CreateFrom
	mov	eax, DWORD PTR _resource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _resource$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _resource$[ebp], 0
$LN14@CreateFrom:

; 284  :         AppWarning(TEXT("D3D10Texture::CreateFromFile: could not query texture interface"));

	push	OFFSET $SG4294904576
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 285  :         return NULL;

	xor	eax, eax
	jmp	$LN23@CreateFrom
$LN16@CreateFrom:

; 286  :     }
; 287  : 
; 288  :     texResource->Release();

	mov	ecx, DWORD PTR _texResource$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _texResource$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx

; 289  : 
; 290  :     //------------------------------------------
; 291  : 
; 292  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN29@CreateFrom
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv223[ebp], eax
	jmp	SHORT $LN30@CreateFrom
$LN29@CreateFrom:
	mov	DWORD PTR tv223[ebp], 0
$LN30@CreateFrom:
	mov	edx, DWORD PTR tv223[ebp]
	mov	DWORD PTR _newTex$[ebp], edx

; 293  :     newTex->resource = resource;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 294  :     newTex->texture = tex2D;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _tex2D$[ebp]
	mov	DWORD PTR [edx+4], eax

; 295  :     newTex->width = ii.Width;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 296  :     newTex->height = ii.Height;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _ii$[ebp+4]
	mov	DWORD PTR [eax+20], ecx

; 297  : 
; 298  :     switch(ii.Format)

	mov	edx, DWORD PTR _ii$[ebp+24]
	mov	DWORD PTR tv228[ebp], edx
	mov	eax, DWORD PTR tv228[ebp]
	sub	eax, 2
	mov	DWORD PTR tv228[ebp], eax
	cmp	DWORD PTR tv228[ebp], 86		; 00000056H
	ja	$LN1@CreateFrom
	mov	ecx, DWORD PTR tv228[ebp]
	movzx	edx, BYTE PTR $LN31@CreateFrom[ecx]
	jmp	DWORD PTR $LN32@CreateFrom[edx*4]
$LN11@CreateFrom:

; 299  :     {
; 300  :         case DXGI_FORMAT_R8_UNORM:              newTex->format = GS_ALPHA;       break;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [eax+24], 1
	jmp	SHORT $LN12@CreateFrom
$LN10@CreateFrom:

; 301  :         case DXGI_FORMAT_A8_UNORM:              newTex->format = GS_GRAYSCALE;   break;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], 2
	jmp	SHORT $LN12@CreateFrom
$LN9@CreateFrom:

; 302  :         case DXGI_FORMAT_B8G8R8X8_UNORM:        newTex->format = GS_BGR;         break;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [edx+24], 5
	jmp	SHORT $LN12@CreateFrom
$LN8@CreateFrom:

; 303  :         case DXGI_FORMAT_B8G8R8A8_UNORM:        newTex->format = GS_BGRA;        break;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [eax+24], 6
	jmp	SHORT $LN12@CreateFrom
$LN7@CreateFrom:

; 304  :         case DXGI_FORMAT_R8G8B8A8_UNORM:        newTex->format = GS_RGBA;        break;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], 4
	jmp	SHORT $LN12@CreateFrom
$LN6@CreateFrom:

; 305  :         case DXGI_FORMAT_R16G16B16A16_FLOAT:    newTex->format = GS_RGBA16F;     break;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [edx+24], 7
	jmp	SHORT $LN12@CreateFrom
$LN5@CreateFrom:

; 306  :         case DXGI_FORMAT_R32G32B32A32_FLOAT:    newTex->format = GS_RGBA32F;     break;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [eax+24], 8
	jmp	SHORT $LN12@CreateFrom
$LN4@CreateFrom:

; 307  :         case DXGI_FORMAT_BC1_UNORM:             newTex->format = GS_DXT1;        break;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], 12			; 0000000cH
	jmp	SHORT $LN12@CreateFrom
$LN3@CreateFrom:

; 308  :         case DXGI_FORMAT_BC2_UNORM:             newTex->format = GS_DXT3;        break;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [edx+24], 13			; 0000000dH
	jmp	SHORT $LN12@CreateFrom
$LN2@CreateFrom:

; 309  :         case DXGI_FORMAT_BC3_UNORM:             newTex->format = GS_DXT5;        break;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [eax+24], 14			; 0000000eH
	jmp	SHORT $LN12@CreateFrom
$LN1@CreateFrom:

; 310  :         default:
; 311  :             newTex->format = GS_UNKNOWNFORMAT;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], 0
$LN12@CreateFrom:

; 312  :     }
; 313  : 
; 314  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN23@CreateFrom:

; 315  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN32@CreateFrom:
	DD	$LN5@CreateFrom
	DD	$LN6@CreateFrom
	DD	$LN7@CreateFrom
	DD	$LN11@CreateFrom
	DD	$LN10@CreateFrom
	DD	$LN4@CreateFrom
	DD	$LN3@CreateFrom
	DD	$LN2@CreateFrom
	DD	$LN8@CreateFrom
	DD	$LN9@CreateFrom
	DD	$LN1@CreateFrom
$LN31@CreateFrom:
	DB	0
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	2
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	3
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	4
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	5
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	6
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	7
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	8
	DB	9
?CreateFromFile@D3D10Texture@@CAPAVTexture@@PB_WH@Z ENDP ; D3D10Texture::CreateFromFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateRenderTarget@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@H@Z
_TEXT	SEGMENT
_resourceDesc$ = -124					; size = 24
_view$ = -100						; size = 4
tv71 = -96						; size = 4
tv74 = -92						; size = 4
tv178 = -88						; size = 4
tv90 = -84						; size = 4
tv213 = -80						; size = 4
_format$ = -76						; size = 4
$T1 = -72						; size = 4
tv87 = -68						; size = 4
_resource$ = -64					; size = 4
_newTex$ = -60						; size = 4
_err$ = -56						; size = 4
_texVal$ = -52						; size = 4
_td$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_colorFormat$ = 16					; size = 4
_bGenMipMaps$ = 20					; size = 4
?CreateRenderTarget@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@H@Z PROC ; D3D10Texture::CreateRenderTarget, COMDAT

; 318  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 319  :     HRESULT err;
; 320  : 
; 321  :     if(colorFormat >= GS_DXT1)

	cmp	DWORD PTR _colorFormat$[ebp], 12	; 0000000cH
	jl	SHORT $LN7@CreateRend

; 322  :     {
; 323  :         AppWarning(TEXT("D3D10Texture::CreateRenderTarget: tried to a blank DXT render target"));

	push	OFFSET $SG4294904575
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 324  :         return NULL;

	xor	eax, eax
	jmp	$LN8@CreateRend
$LN7@CreateRend:

; 325  :     }
; 326  : 
; 327  :     DXGI_FORMAT format = convertFormat[(UINT)colorFormat];

	mov	eax, DWORD PTR _colorFormat$[ebp]
	mov	ecx, DWORD PTR _convertFormat[eax*4]
	mov	DWORD PTR _format$[ebp], ecx

; 328  : 
; 329  :     D3D10_TEXTURE2D_DESC td;
; 330  :     zero(&td, sizeof(td));

	push	44					; 0000002cH
	lea	edx, DWORD PTR _td$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 331  :     td.Width            = width;

	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR _td$[ebp], eax

; 332  :     td.Height           = height;

	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _td$[ebp+4], ecx

; 333  :     td.MipLevels        = bGenMipMaps ? 0 : 1;

	cmp	DWORD PTR _bGenMipMaps$[ebp], 0
	je	SHORT $LN10@CreateRend
	mov	DWORD PTR tv71[ebp], 0
	jmp	SHORT $LN11@CreateRend
$LN10@CreateRend:
	mov	DWORD PTR tv71[ebp], 1
$LN11@CreateRend:
	mov	edx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _td$[ebp+8], edx

; 334  :     td.ArraySize        = 1;

	mov	DWORD PTR _td$[ebp+12], 1

; 335  :     td.Format           = format;

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR _td$[ebp+16], eax

; 336  :     td.BindFlags        = D3D10_BIND_SHADER_RESOURCE|D3D10_BIND_RENDER_TARGET;

	mov	DWORD PTR _td$[ebp+32], 40		; 00000028H

; 337  :     td.SampleDesc.Count = 1;

	mov	DWORD PTR _td$[ebp+20], 1

; 338  :     td.Usage            = D3D10_USAGE_DEFAULT;

	mov	DWORD PTR _td$[ebp+28], 0

; 339  : 
; 340  :     ID3D10Texture2D *texVal;
; 341  :     if(FAILED(err = GetD3D()->CreateTexture2D(&td, NULL, &texVal)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv74[ebp], eax
	lea	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _td$[ebp]
	push	edx
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN6@CreateRend

; 342  :     {
; 343  :         AppWarning(TEXT("D3D10Texture::CreateRenderTarget: CreateTexture2D failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904574
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 344  :         return NULL;

	xor	eax, eax
	jmp	$LN8@CreateRend
$LN6@CreateRend:

; 345  :     }
; 346  : 
; 347  :     //------------------------------------------
; 348  : 
; 349  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 350  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	edx, DWORD PTR _resourceDesc$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 351  :     resourceDesc.Format              = format;

	mov	eax, DWORD PTR _format$[ebp]
	mov	DWORD PTR _resourceDesc$[ebp], eax

; 352  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 353  :     resourceDesc.Texture2D.MipLevels = bGenMipMaps ? -1 : 1;

	cmp	DWORD PTR _bGenMipMaps$[ebp], 0
	je	SHORT $LN12@CreateRend
	mov	DWORD PTR tv87[ebp], -1
	jmp	SHORT $LN13@CreateRend
$LN12@CreateRend:
	mov	DWORD PTR tv87[ebp], 1
$LN13@CreateRend:
	mov	ecx, DWORD PTR tv87[ebp]
	mov	DWORD PTR _resourceDesc$[ebp+12], ecx

; 354  : 
; 355  :     ID3D10ShaderResourceView *resource;
; 356  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texVal, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv90[ebp], eax
	lea	edx, DWORD PTR _resource$[ebp]
	push	edx
	lea	eax, DWORD PTR _resourceDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv90[ebp]
	push	edx
	mov	eax, DWORD PTR tv90[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+300]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN5@CreateRend

; 357  :     {
; 358  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN4@CreateRend
	mov	eax, DWORD PTR _texVal$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _texVal$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _texVal$[ebp], 0
$LN4@CreateRend:

; 359  :         AppWarning(TEXT("D3D10Texture::CreateRenderTarget: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904573
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 360  :         return NULL;

	xor	eax, eax
	jmp	$LN8@CreateRend
$LN5@CreateRend:

; 361  :     }
; 362  : 
; 363  :     //------------------------------------------
; 364  : 
; 365  :     ID3D10RenderTargetView *view;
; 366  :     err = GetD3D()->CreateRenderTargetView(texVal, NULL, &view);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv178[ebp], eax
	lea	edx, DWORD PTR _view$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv178[ebp]
	push	ecx
	mov	edx, DWORD PTR tv178[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 367  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateRend

; 368  :     {
; 369  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN2@CreateRend
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _texVal$[ebp], 0
$LN2@CreateRend:

; 370  :         SafeRelease(resource);

	cmp	DWORD PTR _resource$[ebp], 0
	je	SHORT $LN1@CreateRend
	mov	eax, DWORD PTR _resource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _resource$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _resource$[ebp], 0
$LN1@CreateRend:

; 371  :         AppWarning(TEXT("D3D10Texture::CreateRenderTarget: CreateRenderTargetView failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904572
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 372  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN8@CreateRend
$LN3@CreateRend:

; 373  :     }
; 374  : 
; 375  :     //------------------------------------------
; 376  : 
; 377  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN14@CreateRend
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN15@CreateRend
$LN14@CreateRend:
	mov	DWORD PTR tv213[ebp], 0
$LN15@CreateRend:
	mov	edx, DWORD PTR tv213[ebp]
	mov	DWORD PTR _newTex$[ebp], edx

; 378  :     newTex->format = colorFormat;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _colorFormat$[ebp]
	mov	DWORD PTR [eax+24], ecx

; 379  :     newTex->resource = resource;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [edx+8], eax

; 380  :     newTex->texture = texVal;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 381  :     newTex->renderTarget = view;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _view$[ebp]
	mov	DWORD PTR [eax+12], ecx

; 382  :     newTex->width = width;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _width$[ebp]
	mov	DWORD PTR [edx+16], eax

; 383  :     newTex->height = height;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [ecx+20], edx

; 384  : 
; 385  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN8@CreateRend:

; 386  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateRenderTarget@D3D10Texture@@CAPAVTexture@@IIW4GSColorFormat@@H@Z ENDP ; D3D10Texture::CreateRenderTarget
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateGDITexture@D3D10Texture@@CAPAVTexture@@II@Z
_TEXT	SEGMENT
_srd$ = -116						; size = 12
_resourceDesc$ = -104					; size = 24
_resource$ = -80					; size = 4
tv70 = -76						; size = 4
tv84 = -72						; size = 4
tv175 = -68						; size = 4
$T1 = -64						; size = 4
_err$ = -60						; size = 4
_texVal$ = -56						; size = 4
_newTex$ = -52						; size = 4
_td$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?CreateGDITexture@D3D10Texture@@CAPAVTexture@@II@Z PROC	; D3D10Texture::CreateGDITexture, COMDAT

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 390  :     HRESULT err;
; 391  : 
; 392  :     D3D10_TEXTURE2D_DESC td;
; 393  :     zero(&td, sizeof(td));

	push	44					; 0000002cH
	lea	eax, DWORD PTR _td$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 394  :     td.Width            = width;

	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _td$[ebp], ecx

; 395  :     td.Height           = height;

	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _td$[ebp+4], edx

; 396  :     td.MipLevels        = 1;

	mov	DWORD PTR _td$[ebp+8], 1

; 397  :     td.ArraySize        = 1;

	mov	DWORD PTR _td$[ebp+12], 1

; 398  :     td.Format           = DXGI_FORMAT_B8G8R8A8_UNORM;

	mov	DWORD PTR _td$[ebp+16], 87		; 00000057H

; 399  :     td.BindFlags        = D3D10_BIND_SHADER_RESOURCE|D3D10_BIND_RENDER_TARGET;

	mov	DWORD PTR _td$[ebp+32], 40		; 00000028H

; 400  :     td.SampleDesc.Count = 1;

	mov	DWORD PTR _td$[ebp+20], 1

; 401  :     td.Usage            = D3D10_USAGE_DEFAULT;

	mov	DWORD PTR _td$[ebp+28], 0

; 402  :     td.MiscFlags        = D3D10_RESOURCE_MISC_GDI_COMPATIBLE;

	mov	DWORD PTR _td$[ebp+40], 32		; 00000020H

; 403  : 
; 404  :     D3D10_SUBRESOURCE_DATA srd;
; 405  :     zero(&srd, sizeof(srd));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _srd$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 406  : 
; 407  :     ID3D10Texture2D *texVal;
; 408  :     if(FAILED(err = GetD3D()->CreateTexture2D(&td, NULL, &texVal)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv70[ebp], eax
	lea	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	push	0
	lea	edx, DWORD PTR _td$[ebp]
	push	edx
	mov	eax, DWORD PTR tv70[ebp]
	push	eax
	mov	ecx, DWORD PTR tv70[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+292]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateGDIT

; 409  :     {
; 410  :         AppWarning(TEXT("D3D10Texture::CreateGDITexture: CreateTexture2D failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904571
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 411  :         return NULL;

	xor	eax, eax
	jmp	$LN4@CreateGDIT
$LN3@CreateGDIT:

; 412  :     }
; 413  : 
; 414  :     //------------------------------------------
; 415  : 
; 416  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 417  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	edx, DWORD PTR _resourceDesc$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 418  :     resourceDesc.Format              = DXGI_FORMAT_B8G8R8A8_UNORM;

	mov	DWORD PTR _resourceDesc$[ebp], 87	; 00000057H

; 419  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 420  :     resourceDesc.Texture2D.MipLevels = 1;

	mov	DWORD PTR _resourceDesc$[ebp+12], 1

; 421  : 
; 422  :     ID3D10ShaderResourceView *resource;
; 423  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texVal, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv84[ebp], eax
	lea	eax, DWORD PTR _resource$[ebp]
	push	eax
	lea	ecx, DWORD PTR _resourceDesc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texVal$[ebp]
	push	edx
	mov	eax, DWORD PTR tv84[ebp]
	push	eax
	mov	ecx, DWORD PTR tv84[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+300]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@CreateGDIT

; 424  :     {
; 425  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN1@CreateGDIT
	mov	ecx, DWORD PTR _texVal$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+8]
	call	ecx
	mov	DWORD PTR _texVal$[ebp], 0
$LN1@CreateGDIT:

; 426  :         AppWarning(TEXT("D3D10Texture::CreateGDITexture: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294904570
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 427  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN4@CreateGDIT
$LN2@CreateGDIT:

; 428  :     }
; 429  : 
; 430  :     //------------------------------------------
; 431  : 
; 432  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN6@CreateGDIT
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv175[ebp], eax
	jmp	SHORT $LN7@CreateGDIT
$LN6@CreateGDIT:
	mov	DWORD PTR tv175[ebp], 0
$LN7@CreateGDIT:
	mov	eax, DWORD PTR tv175[ebp]
	mov	DWORD PTR _newTex$[ebp], eax

; 433  :     newTex->format = GS_BGRA;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [ecx+24], 6

; 434  :     newTex->resource = resource;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [edx+8], eax

; 435  :     newTex->texture = texVal;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 436  :     newTex->width = width;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [eax+16], ecx

; 437  :     newTex->height = height;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _height$[ebp]
	mov	DWORD PTR [edx+20], eax

; 438  :     newTex->bGDICompatible = true;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	BYTE PTR [ecx+32], 1

; 439  : 
; 440  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN4@CreateGDIT:

; 441  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateGDITexture@D3D10Texture@@CAPAVTexture@@II@Z ENDP	; D3D10Texture::CreateGDITexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateShared@D3D10Texture@@CAPAVTexture@@II@Z
_TEXT	SEGMENT
_resourceDesc$ = -112					; size = 24
_view$ = -88						; size = 4
$T1 = -84						; size = 4
tv68 = -80						; size = 4
tv170 = -76						; size = 4
tv205 = -72						; size = 4
tv82 = -68						; size = 4
_resource$ = -64					; size = 4
_newTex$ = -60						; size = 4
_err$ = -56						; size = 4
_texVal$ = -52						; size = 4
_td$ = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?CreateShared@D3D10Texture@@CAPAVTexture@@II@Z PROC	; D3D10Texture::CreateShared, COMDAT

; 444  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 445  :     HRESULT err;
; 446  : 
; 447  :     D3D10_TEXTURE2D_DESC td;
; 448  :     zero(&td, sizeof(td));

	push	44					; 0000002cH
	lea	eax, DWORD PTR _td$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 449  :     td.Width            = width;

	mov	ecx, DWORD PTR _width$[ebp]
	mov	DWORD PTR _td$[ebp], ecx

; 450  :     td.Height           = height;

	mov	edx, DWORD PTR _height$[ebp]
	mov	DWORD PTR _td$[ebp+4], edx

; 451  :     td.MipLevels        = 1;

	mov	DWORD PTR _td$[ebp+8], 1

; 452  :     td.ArraySize        = 1;

	mov	DWORD PTR _td$[ebp+12], 1

; 453  :     td.Format           = DXGI_FORMAT_B8G8R8A8_UNORM;

	mov	DWORD PTR _td$[ebp+16], 87		; 00000057H

; 454  :     td.BindFlags        = D3D10_BIND_SHADER_RESOURCE|D3D10_BIND_RENDER_TARGET;

	mov	DWORD PTR _td$[ebp+32], 40		; 00000028H

; 455  :     td.SampleDesc.Count = 1;

	mov	DWORD PTR _td$[ebp+20], 1

; 456  :     td.Usage            = D3D10_USAGE_DEFAULT;

	mov	DWORD PTR _td$[ebp+28], 0

; 457  :     td.CPUAccessFlags   = 0;

	mov	DWORD PTR _td$[ebp+36], 0

; 458  :     td.MiscFlags		= D3D10_RESOURCE_MISC_SHARED;

	mov	DWORD PTR _td$[ebp+40], 2

; 459  : 
; 460  :     ID3D10Texture2D *texVal;
; 461  :     if(FAILED(err = GetD3D()->CreateTexture2D(&td, NULL, &texVal)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv68[ebp], eax
	lea	eax, DWORD PTR _texVal$[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _td$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+292]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN6@CreateShar

; 462  :     {
; 463  :         AppWarning(TEXT("D3D10Texture::CreateShared: CreateTexture2D failed, result = 0x%08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904569
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 464  :         return NULL;

	xor	eax, eax
	jmp	$LN7@CreateShar
$LN6@CreateShar:

; 465  :     }
; 466  : 
; 467  :     //------------------------------------------
; 468  : 
; 469  :     D3D10_SHADER_RESOURCE_VIEW_DESC resourceDesc;
; 470  :     zero(&resourceDesc, sizeof(resourceDesc));

	push	24					; 00000018H
	lea	ecx, DWORD PTR _resourceDesc$[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 471  :     resourceDesc.Format              = DXGI_FORMAT_B8G8R8A8_UNORM;

	mov	DWORD PTR _resourceDesc$[ebp], 87	; 00000057H

; 472  :     resourceDesc.ViewDimension       = D3D10_SRV_DIMENSION_TEXTURE2D;

	mov	DWORD PTR _resourceDesc$[ebp+4], 4

; 473  :     resourceDesc.Texture2D.MipLevels = 1;

	mov	DWORD PTR _resourceDesc$[ebp+12], 1

; 474  : 
; 475  :     ID3D10ShaderResourceView *resource;
; 476  :     if(FAILED(err = GetD3D()->CreateShaderResourceView(texVal, &resourceDesc, &resource)))

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv82[ebp], eax
	lea	edx, DWORD PTR _resource$[ebp]
	push	edx
	lea	eax, DWORD PTR _resourceDesc$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv82[ebp]
	push	edx
	mov	eax, DWORD PTR tv82[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+300]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN5@CreateShar

; 477  :     {
; 478  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN4@CreateShar
	mov	eax, DWORD PTR _texVal$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _texVal$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _texVal$[ebp], 0
$LN4@CreateShar:

; 479  :         AppWarning(TEXT("D3D10Texture::CreateShared: CreateShaderResourceView failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904568
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 480  :         return NULL;

	xor	eax, eax
	jmp	$LN7@CreateShar
$LN5@CreateShar:

; 481  :     }
; 482  : 
; 483  :     //------------------------------------------
; 484  : 
; 485  :     ID3D10RenderTargetView *view;
; 486  :     err = GetD3D()->CreateRenderTargetView(texVal, NULL, &view);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv170[ebp], eax
	lea	edx, DWORD PTR _view$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _texVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv170[ebp]
	push	ecx
	mov	edx, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+304]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 487  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateShar

; 488  :     {
; 489  :         SafeRelease(texVal);

	cmp	DWORD PTR _texVal$[ebp], 0
	je	SHORT $LN2@CreateShar
	mov	edx, DWORD PTR _texVal$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _texVal$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	DWORD PTR _texVal$[ebp], 0
$LN2@CreateShar:

; 490  :         SafeRelease(resource);

	cmp	DWORD PTR _resource$[ebp], 0
	je	SHORT $LN1@CreateShar
	mov	eax, DWORD PTR _resource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _resource$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
	mov	DWORD PTR _resource$[ebp], 0
$LN1@CreateShar:

; 491  :         AppWarning(TEXT("D3D10Texture::CreateShared: CreateRenderTargetView failed, result = 0x%08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904567
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 492  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN7@CreateShar
$LN3@CreateShar:

; 493  :     }
; 494  : 
; 495  :     //------------------------------------------
; 496  : 
; 497  :     D3D10Texture *newTex = new D3D10Texture;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN9@CreateShar
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10Texture@@QAE@XZ
	mov	DWORD PTR tv205[ebp], eax
	jmp	SHORT $LN10@CreateShar
$LN9@CreateShar:
	mov	DWORD PTR tv205[ebp], 0
$LN10@CreateShar:
	mov	edx, DWORD PTR tv205[ebp]
	mov	DWORD PTR _newTex$[ebp], edx

; 498  :     newTex->format = GS_BGRA;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	DWORD PTR [eax+24], 6

; 499  :     newTex->resource = resource;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _resource$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 500  :     newTex->texture = texVal;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _texVal$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 501  :     newTex->renderTarget = view;

	mov	edx, DWORD PTR _newTex$[ebp]
	mov	eax, DWORD PTR _view$[ebp]
	mov	DWORD PTR [edx+12], eax

; 502  :     newTex->width = width;

	mov	ecx, DWORD PTR _newTex$[ebp]
	mov	edx, DWORD PTR _width$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 503  :     newTex->height = height;

	mov	eax, DWORD PTR _newTex$[ebp]
	mov	ecx, DWORD PTR _height$[ebp]
	mov	DWORD PTR [eax+20], ecx

; 504  : 
; 505  :     return newTex;

	mov	eax, DWORD PTR _newTex$[ebp]
$LN7@CreateShar:

; 506  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateShared@D3D10Texture@@CAPAVTexture@@II@Z ENDP	; D3D10Texture::CreateShared
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CreateSamplerState@D3D10SamplerState@@CAPAVSamplerState@@AAUSamplerInfo@@@Z
_TEXT	SEGMENT
_state$ = -80						; size = 4
tv87 = -76						; size = 4
_err$ = -72						; size = 4
tv133 = -68						; size = 4
$T1 = -64						; size = 4
_samplerState$ = -60					; size = 4
_sampDesc$ = -56					; size = 52
__$ArrayPad$ = -4					; size = 4
_info$ = 8						; size = 4
?CreateSamplerState@D3D10SamplerState@@CAPAVSamplerState@@AAUSamplerInfo@@@Z PROC ; D3D10SamplerState::CreateSamplerState, COMDAT

; 48   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi

; 49   :     D3D10_SAMPLER_DESC sampDesc;
; 50   :     zero(&sampDesc, sizeof(sampDesc));

	push	52					; 00000034H
	lea	eax, DWORD PTR _sampDesc$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 51   :     sampDesc.AddressU       = convertAddressMode[(UINT)info.addressU];

	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _convertAddressMode[edx*4]
	mov	DWORD PTR _sampDesc$[ebp+4], eax

; 52   :     sampDesc.AddressV       = convertAddressMode[(UINT)info.addressV];

	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _convertAddressMode[edx*4]
	mov	DWORD PTR _sampDesc$[ebp+8], eax

; 53   :     sampDesc.AddressW       = convertAddressMode[(UINT)info.addressW];

	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _convertAddressMode[edx*4]
	mov	DWORD PTR _sampDesc$[ebp+12], eax

; 54   :     sampDesc.ComparisonFunc = D3D10_COMPARISON_ALWAYS;

	mov	DWORD PTR _sampDesc$[ebp+24], 8

; 55   :     sampDesc.Filter         = convertFilter[(UINT)info.filter];

	mov	ecx, DWORD PTR _info$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _convertFilter[edx*4]
	mov	DWORD PTR _sampDesc$[ebp], eax

; 56   :     sampDesc.MaxAnisotropy  = 1;//info.maxAnisotropy;

	mov	DWORD PTR _sampDesc$[ebp+20], 1

; 57   :     sampDesc.MaxLOD         = FLT_MAX;

	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR _sampDesc$[ebp+48], xmm0

; 58   :     mcpy(sampDesc.BorderColor, info.borderColor.ptr, sizeof(Color4));

	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _sampDesc$[ebp+28], edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _sampDesc$[ebp+32], eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _sampDesc$[ebp+36], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _sampDesc$[ebp+40], eax

; 59   : 
; 60   :     ID3D10SamplerState *state;
; 61   :     HRESULT err = GetD3D()->CreateSamplerState(&sampDesc, &state);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv87[ebp], eax
	lea	ecx, DWORD PTR _state$[ebp]
	push	ecx
	lea	edx, DWORD PTR _sampDesc$[ebp]
	push	edx
	mov	eax, DWORD PTR tv87[ebp]
	push	eax
	mov	ecx, DWORD PTR tv87[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+344]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 62   :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN1@CreateSamp

; 63   :     {
; 64   :         AppWarning(TEXT("D3D10SamplerState::CreateSamplerState: unable to create sampler state, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904588
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 65   :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CreateSamp
$LN1@CreateSamp:

; 66   :     }
; 67   : 
; 68   :     //-------------------------------------------
; 69   : 
; 70   :     D3D10SamplerState *samplerState = new D3D10SamplerState;

	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@CreateSamp
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0D3D10SamplerState@@QAE@XZ
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN5@CreateSamp
$LN4@CreateSamp:
	mov	DWORD PTR tv133[ebp], 0
$LN5@CreateSamp:
	mov	edx, DWORD PTR tv133[ebp]
	mov	DWORD PTR _samplerState$[ebp], edx

; 71   :     samplerState->state = state;

	mov	eax, DWORD PTR _samplerState$[ebp]
	mov	ecx, DWORD PTR _state$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 72   :     mcpy(&samplerState->info, &info, sizeof(SamplerInfo));

	mov	edi, DWORD PTR _samplerState$[ebp]
	add	edi, 16					; 00000010H
	mov	ecx, 12					; 0000000cH
	mov	esi, DWORD PTR _info$[ebp]
	rep movsd

; 73   : 
; 74   :     return samplerState;

	mov	eax, DWORD PTR _samplerState$[ebp]
$LN2@CreateSamp:

; 75   : }

	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateSamplerState@D3D10SamplerState@@CAPAVSamplerState@@AAUSamplerInfo@@@Z ENDP ; D3D10SamplerState::CreateSamplerState
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\directx\include\d3dx10tex.h
;	COMDAT ??0D3DX10_IMAGE_LOAD_INFO@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3DX10_IMAGE_LOAD_INFO@@QAE@XZ PROC			; D3DX10_IMAGE_LOAD_INFO::D3DX10_IMAGE_LOAD_INFO, COMDAT
; _this$ = ecx

; 293  :     D3DX10_IMAGE_LOAD_INFO()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 294  :     {
; 295  :         Width = D3DX10_DEFAULT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], -1

; 296  :         Height = D3DX10_DEFAULT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], -1

; 297  :         Depth = D3DX10_DEFAULT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], -1

; 298  :         FirstMipLevel = D3DX10_DEFAULT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], -1

; 299  :         MipLevels = D3DX10_DEFAULT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], -1

; 300  :         Usage = (D3D10_USAGE) D3DX10_DEFAULT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], -1

; 301  :         BindFlags = D3DX10_DEFAULT;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], -1

; 302  :         CpuAccessFlags = D3DX10_DEFAULT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], -1

; 303  :         MiscFlags = D3DX10_DEFAULT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], -1

; 304  :         Format = DXGI_FORMAT_FROM_FILE;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], -3			; fffffffdH

; 305  :         Filter = D3DX10_DEFAULT;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], -1

; 306  :         MipFilter = D3DX10_DEFAULT;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], -1

; 307  :         pSrcInfo = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0

; 308  :     }  

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3DX10_IMAGE_LOAD_INFO@@QAE@XZ ENDP			; D3DX10_IMAGE_LOAD_INFO::D3DX10_IMAGE_LOAD_INFO
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?GetD3DTexture@D3D10Texture@@UAEPAXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetD3DTexture@D3D10Texture@@UAEPAXXZ PROC		; D3D10Texture::GetD3DTexture, COMDAT
; _this$ = ecx

; 131  :     LPVOID GetD3DTexture() {return texture;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetD3DTexture@D3D10Texture@@UAEPAXXZ ENDP		; D3D10Texture::GetD3DTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?IsPow2@@YA_NI@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_num$ = 8						; size = 4
?IsPow2@@YA_NI@Z PROC					; IsPow2, COMDAT

; 24   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 25   :     return num >= 2 && (num & (num-1)) == 0;

	cmp	DWORD PTR _num$[ebp], 2
	jb	SHORT $LN3@IsPow2
	mov	eax, DWORD PTR _num$[ebp]
	sub	eax, 1
	and	eax, DWORD PTR _num$[ebp]
	jne	SHORT $LN3@IsPow2
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@IsPow2
$LN3@IsPow2:
	mov	DWORD PTR tv68[ebp], 0
$LN4@IsPow2:
	mov	al, BYTE PTR tv68[ebp]

; 26   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsPow2@@YA_NI@Z ENDP					; IsPow2
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?GetGSFormatFromDXGIFormat@@YA?AW4GSColorFormat@@W4DXGI_FORMAT@@@Z
_TEXT	SEGMENT
_numVals$ = -8						; size = 4
_i$1 = -4						; size = 4
_dxgiFormat$ = 8					; size = 4
?GetGSFormatFromDXGIFormat@@YA?AW4GSColorFormat@@W4DXGI_FORMAT@@@Z PROC ; GetGSFormatFromDXGIFormat, COMDAT

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 37   :     UINT numVals = sizeof(convertFormat)/sizeof(DXGI_FORMAT);

	mov	DWORD PTR _numVals$[ebp], 15		; 0000000fH

; 38   : 
; 39   :     for (UINT i=0; i<numVals; i++) {

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@GetGSForma
$LN3@GetGSForma:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@GetGSForma:
	mov	ecx, DWORD PTR _i$1[ebp]
	cmp	ecx, DWORD PTR _numVals$[ebp]
	jae	SHORT $LN2@GetGSForma

; 40   :         if (convertFormat[i] == dxgiFormat)

	mov	edx, DWORD PTR _i$1[ebp]
	mov	eax, DWORD PTR _convertFormat[edx*4]
	cmp	eax, DWORD PTR _dxgiFormat$[ebp]
	jne	SHORT $LN1@GetGSForma

; 41   :             return (GSColorFormat)i;

	mov	eax, DWORD PTR _i$1[ebp]
	jmp	SHORT $LN5@GetGSForma
$LN1@GetGSForma:

; 42   :     }

	jmp	SHORT $LN3@GetGSForma
$LN2@GetGSForma:

; 43   : 
; 44   :     return GS_UNKNOWNFORMAT;

	xor	eax, eax
$LN5@GetGSForma:

; 45   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetGSFormatFromDXGIFormat@@YA?AW4GSColorFormat@@W4DXGI_FORMAT@@@Z ENDP ; GetGSFormatFromDXGIFormat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10SamplerState@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10SamplerState@@QAE@XZ PROC			; D3D10SamplerState::D3D10SamplerState, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0SamplerState@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10SamplerState@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10SamplerState@@QAE@XZ ENDP			; D3D10SamplerState::D3D10SamplerState
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10SamplerState@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10SamplerState@@UAEPAXI@Z PROC			; D3D10SamplerState::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10SamplerState@@UAE@XZ		; D3D10SamplerState::~D3D10SamplerState
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10SamplerState@@UAEPAXI@Z ENDP			; D3D10SamplerState::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ??1D3D10SamplerState@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1D3D10SamplerState@@UAE@XZ PROC			; D3D10SamplerState::~D3D10SamplerState, COMDAT
; _this$ = ecx

; 78   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10SamplerState@@6B@

; 79   :     SafeRelease(state);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+64], 0
	je	SHORT $LN2@D3D10Sampl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], 0
$LN2@D3D10Sampl:

; 80   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1SamplerState@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10SamplerState@@UAE@XZ ENDP			; D3D10SamplerState::~D3D10SamplerState
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10Texture@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10Texture@@QAE@XZ PROC				; D3D10Texture::D3D10Texture, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0Texture@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10Texture@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10Texture@@QAE@XZ ENDP				; D3D10Texture::D3D10Texture
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10Texture@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10Texture@@UAEPAXI@Z PROC			; D3D10Texture::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10Texture@@UAE@XZ			; D3D10Texture::~D3D10Texture
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10Texture@@UAEPAXI@Z ENDP			; D3D10Texture::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ??1D3D10Texture@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1D3D10Texture@@UAE@XZ PROC				; D3D10Texture::~D3D10Texture, COMDAT
; _this$ = ecx

; 509  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10Texture@@6B@

; 510  :     SafeRelease(renderTarget);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	SHORT $LN3@D3D10Textu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN3@D3D10Textu:

; 511  :     SafeRelease(resource);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 0
	je	SHORT $LN2@D3D10Textu
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@D3D10Textu:

; 512  :     SafeRelease(texture);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN4@D3D10Textu
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
$LN4@D3D10Textu:

; 513  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1Texture@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10Texture@@UAE@XZ ENDP				; D3D10Texture::~D3D10Texture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?Width@D3D10Texture@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Width@D3D10Texture@@UBEKXZ PROC			; D3D10Texture::Width, COMDAT
; _this$ = ecx

; 516  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 517  :     return width;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+16]

; 518  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Width@D3D10Texture@@UBEKXZ ENDP			; D3D10Texture::Width
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?Height@D3D10Texture@@UBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Height@D3D10Texture@@UBEKXZ PROC			; D3D10Texture::Height, COMDAT
; _this$ = ecx

; 521  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 522  :     return height;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+20]

; 523  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Height@D3D10Texture@@UBEKXZ ENDP			; D3D10Texture::Height
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?HasAlpha@D3D10Texture@@UBEHXZ
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
?HasAlpha@D3D10Texture@@UBEHXZ PROC			; D3D10Texture::HasAlpha, COMDAT
; _this$ = ecx

; 526  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 527  :     return format == 1 || (format >= GS_RGBA && format <= GS_RGBA32F) || format == GS_DXT3 || format == GS_DXT5;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 1
	je	SHORT $LN4@HasAlpha
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 4
	jl	SHORT $LN3@HasAlpha
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 8
	jle	SHORT $LN4@HasAlpha
$LN3@HasAlpha:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 13			; 0000000dH
	je	SHORT $LN4@HasAlpha
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+24], 14			; 0000000eH
	je	SHORT $LN4@HasAlpha
	mov	DWORD PTR tv74[ebp], 0
	jmp	SHORT $LN5@HasAlpha
$LN4@HasAlpha:
	mov	DWORD PTR tv74[ebp], 1
$LN5@HasAlpha:
	mov	eax, DWORD PTR tv74[ebp]

; 528  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasAlpha@D3D10Texture@@UBEHXZ ENDP			; D3D10Texture::HasAlpha
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?GetFormat@D3D10Texture@@UBE?AW4GSColorFormat@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFormat@D3D10Texture@@UBE?AW4GSColorFormat@@XZ PROC	; D3D10Texture::GetFormat, COMDAT
; _this$ = ecx

; 531  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 532  :     return (GSColorFormat)format;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+24]

; 533  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFormat@D3D10Texture@@UBE?AW4GSColorFormat@@XZ ENDP	; D3D10Texture::GetFormat
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?GetDC@D3D10Texture@@UAE_NAAPAUHDC__@@@Z
_TEXT	SEGMENT
_err$ = -8						; size = 4
_this$ = -4						; size = 4
_hDC$ = 8						; size = 4
?GetDC@D3D10Texture@@UAE_NAAPAUHDC__@@@Z PROC		; D3D10Texture::GetDC, COMDAT
; _this$ = ecx

; 536  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 537  :     if(!bGDICompatible)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	test	ecx, ecx
	jne	SHORT $LN4@GetDC

; 538  :     {
; 539  :         AppWarning(TEXT("D3D10Texture::GetDC: function was called on a non-GDI-compatible texture"));

	push	OFFSET $SG4294904566
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 540  :         return false;

	xor	al, al
	jmp	$LN5@GetDC
$LN4@GetDC:

; 541  :     }
; 542  : 
; 543  :     HRESULT err;
; 544  :     if(FAILED(err = texture->QueryInterface(__uuidof(IDXGISurface1), (void**)&surface)))

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 28					; 0000001cH
	push	edx
	push	OFFSET __GUID_4ae63092_6327_4c1b_80ae_bfe12ea32b86
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@GetDC

; 545  :     {
; 546  :         AppWarning(TEXT("D3D10Texture::GetDC: could not query surface interface, result = %08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294904565
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 547  :         return false;

	xor	al, al
	jmp	SHORT $LN5@GetDC
$LN3@GetDC:

; 548  :     }
; 549  : 
; 550  :     if(FAILED(err = surface->GetDC(TRUE, &hDC)))

	mov	ecx, DWORD PTR _hDC$[ebp]
	push	ecx
	push	1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@GetDC

; 551  :     {
; 552  :         AppWarning(TEXT("D3D10Texture::GetDC: could not get DC, result = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294904564
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 553  :         SafeRelease(surface);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN1@GetDC
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+28], 0
$LN1@GetDC:

; 554  :         return false;

	xor	al, al
	jmp	SHORT $LN5@GetDC
$LN2@GetDC:

; 555  :     }
; 556  : 
; 557  :     return true;

	mov	al, 1
$LN5@GetDC:

; 558  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetDC@D3D10Texture@@UAE_NAAPAUHDC__@@@Z ENDP		; D3D10Texture::GetDC
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?ReleaseDC@D3D10Texture@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseDC@D3D10Texture@@UAEXXZ PROC			; D3D10Texture::ReleaseDC, COMDAT
; _this$ = ecx

; 561  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 562  :     if(!surface)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN2@ReleaseDC

; 563  :     {
; 564  :         AppWarning(TEXT("D3D10Texture::ReleaseDC: no DC to release"));

	push	OFFSET $SG4294904563
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 565  :         return;

	jmp	SHORT $LN3@ReleaseDC
$LN2@ReleaseDC:

; 566  :     }
; 567  : 
; 568  :     surface->ReleaseDC(NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+48]
	call	eax

; 569  :     SafeRelease(surface);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+28], 0
	je	SHORT $LN3@ReleaseDC
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0
$LN3@ReleaseDC:

; 570  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseDC@D3D10Texture@@UAEXXZ ENDP			; D3D10Texture::ReleaseDC
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?CopyPackedRGB@@YAXPAE0I@Z
_TEXT	SEGMENT
tv129 = -32						; size = 4
_alignedBytes$ = -28					; size = 4
_nDWords$ = -24						; size = 4
tv68 = -20						; size = 4
_totalBytes$ = -16					; size = 4
_curComponent$ = -12					; size = 4
_lpDWSrc$ = -8						; size = 4
_lpDWDest$ = -4						; size = 4
_lpDest$ = 8						; size = 4
_lpSource$ = 12						; size = 4
_nPixels$ = 16						; size = 4
?CopyPackedRGB@@YAXPAE0I@Z PROC				; CopyPackedRGB, COMDAT

; 575  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H

; 576  :     DWORD curComponent = 0;

	mov	DWORD PTR _curComponent$[ebp], 0

; 577  : 
; 578  :     UINT totalBytes = (nPixels*3);

	imul	eax, DWORD PTR _nPixels$[ebp], 3
	mov	DWORD PTR _totalBytes$[ebp], eax

; 579  :     UINT alignedBytes = totalBytes&0xFFFFFFFC;

	mov	ecx, DWORD PTR _totalBytes$[ebp]
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR _alignedBytes$[ebp], ecx

; 580  :     UINT nDWords = alignedBytes>>2;

	mov	edx, DWORD PTR _alignedBytes$[ebp]
	shr	edx, 2
	mov	DWORD PTR _nDWords$[ebp], edx

; 581  : 
; 582  :     DWORD *lpDWDest = (DWORD*)lpDest;

	mov	eax, DWORD PTR _lpDest$[ebp]
	mov	DWORD PTR _lpDWDest$[ebp], eax

; 583  :     DWORD *lpDWSrc  = (DWORD*)lpSource;

	mov	ecx, DWORD PTR _lpSource$[ebp]
	mov	DWORD PTR _lpDWSrc$[ebp], ecx
$LN14@CopyPacked:

; 584  : 
; 585  :     while(nDWords)

	cmp	DWORD PTR _nDWords$[ebp], 0
	je	$LN13@CopyPacked

; 586  :     {
; 587  :         switch(curComponent)

	mov	edx, DWORD PTR _curComponent$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 0
	je	SHORT $LN10@CopyPacked
	cmp	DWORD PTR tv68[ebp], 1
	je	SHORT $LN9@CopyPacked
	cmp	DWORD PTR tv68[ebp], 2
	je	SHORT $LN8@CopyPacked
	jmp	$LN11@CopyPacked
$LN10@CopyPacked:

; 588  :         {
; 589  :             case 0: *(lpDWDest++)  = *lpDWSrc         & 0xFFFFFF; *lpDWDest     = *(lpDWSrc++)>>24; break; //RBGR

	mov	eax, DWORD PTR _lpDWSrc$[ebp]
	mov	ecx, DWORD PTR [eax]
	and	ecx, 16777215				; 00ffffffH
	mov	edx, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _lpDWDest$[ebp], eax
	mov	ecx, DWORD PTR _lpDWSrc$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 24					; 00000018H
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _lpDWSrc$[ebp]
	add	ecx, 4
	mov	DWORD PTR _lpDWSrc$[ebp], ecx
	jmp	SHORT $LN11@CopyPacked
$LN9@CopyPacked:

; 590  :             case 1: *(lpDWDest++) |= ((*lpDWSrc)<<8)  & 0xFFFF00; *lpDWDest     = *(lpDWSrc++)>>16; break; //GRBG

	mov	edx, DWORD PTR _lpDWSrc$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 8
	and	eax, 16776960				; 00ffff00H
	mov	ecx, DWORD PTR _lpDWDest$[ebp]
	or	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _lpDWDest$[ebp], eax
	mov	ecx, DWORD PTR _lpDWSrc$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 16					; 00000010H
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _lpDWSrc$[ebp]
	add	ecx, 4
	mov	DWORD PTR _lpDWSrc$[ebp], ecx
	jmp	SHORT $LN11@CopyPacked
$LN8@CopyPacked:

; 591  :             case 2: *(lpDWDest++) |= ((*lpDWSrc)<<16) & 0xFFFF00; *(lpDWDest++) = *(lpDWSrc++)>>8;  break; //BGRB

	mov	edx, DWORD PTR _lpDWSrc$[ebp]
	mov	eax, DWORD PTR [edx]
	shl	eax, 16					; 00000010H
	and	eax, 16776960				; 00ffff00H
	mov	ecx, DWORD PTR _lpDWDest$[ebp]
	or	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	add	eax, 4
	mov	DWORD PTR _lpDWDest$[ebp], eax
	mov	ecx, DWORD PTR _lpDWSrc$[ebp]
	mov	edx, DWORD PTR [ecx]
	shr	edx, 8
	mov	eax, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR _lpDWDest$[ebp]
	add	ecx, 4
	mov	DWORD PTR _lpDWDest$[ebp], ecx
	mov	edx, DWORD PTR _lpDWSrc$[ebp]
	add	edx, 4
	mov	DWORD PTR _lpDWSrc$[ebp], edx
$LN11@CopyPacked:

; 592  :         }
; 593  : 
; 594  :         if(curComponent == 2)

	cmp	DWORD PTR _curComponent$[ebp], 2
	jne	SHORT $LN7@CopyPacked

; 595  :             curComponent = 0;

	mov	DWORD PTR _curComponent$[ebp], 0

; 596  :         else

	jmp	SHORT $LN6@CopyPacked
$LN7@CopyPacked:

; 597  :             curComponent++;

	mov	eax, DWORD PTR _curComponent$[ebp]
	add	eax, 1
	mov	DWORD PTR _curComponent$[ebp], eax
$LN6@CopyPacked:

; 598  : 
; 599  :         nDWords--;

	mov	ecx, DWORD PTR _nDWords$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _nDWords$[ebp], ecx

; 600  :     }

	jmp	$LN14@CopyPacked
$LN13@CopyPacked:

; 601  : 
; 602  :     totalBytes -= alignedBytes;

	mov	edx, DWORD PTR _totalBytes$[ebp]
	sub	edx, DWORD PTR _alignedBytes$[ebp]
	mov	DWORD PTR _totalBytes$[ebp], edx

; 603  :     lpSource = (LPBYTE)lpDWSrc;

	mov	eax, DWORD PTR _lpDWSrc$[ebp]
	mov	DWORD PTR _lpSource$[ebp], eax

; 604  :     lpDest   = (LPBYTE)lpDWDest;

	mov	ecx, DWORD PTR _lpDWDest$[ebp]
	mov	DWORD PTR _lpDest$[ebp], ecx

; 605  : 
; 606  :     if(curComponent != 0)

	cmp	DWORD PTR _curComponent$[ebp], 0
	je	SHORT $LN4@CopyPacked

; 607  :         lpDest += curComponent;

	mov	edx, DWORD PTR _lpDest$[ebp]
	add	edx, DWORD PTR _curComponent$[ebp]
	mov	DWORD PTR _lpDest$[ebp], edx
$LN4@CopyPacked:

; 608  : 
; 609  :     while(totalBytes--)

	mov	eax, DWORD PTR _totalBytes$[ebp]
	mov	DWORD PTR tv129[ebp], eax
	mov	ecx, DWORD PTR _totalBytes$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _totalBytes$[ebp], ecx
	cmp	DWORD PTR tv129[ebp], 0
	je	SHORT $LN15@CopyPacked

; 610  :     {
; 611  :         *(lpDest++) = *(lpSource++);

	mov	edx, DWORD PTR _lpDest$[ebp]
	mov	eax, DWORD PTR _lpSource$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx], cl
	mov	edx, DWORD PTR _lpDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _lpDest$[ebp], edx
	mov	eax, DWORD PTR _lpSource$[ebp]
	add	eax, 1
	mov	DWORD PTR _lpSource$[ebp], eax

; 612  : 
; 613  :         if(curComponent == 2)

	cmp	DWORD PTR _curComponent$[ebp], 2
	jne	SHORT $LN2@CopyPacked

; 614  :         {
; 615  :             *(lpDest++) = 0;

	mov	ecx, DWORD PTR _lpDest$[ebp]
	mov	BYTE PTR [ecx], 0
	mov	edx, DWORD PTR _lpDest$[ebp]
	add	edx, 1
	mov	DWORD PTR _lpDest$[ebp], edx

; 616  :             curComponent = 0;

	mov	DWORD PTR _curComponent$[ebp], 0

; 617  :         }
; 618  :         else

	jmp	SHORT $LN1@CopyPacked
$LN2@CopyPacked:

; 619  :             curComponent++;

	mov	eax, DWORD PTR _curComponent$[ebp]
	add	eax, 1
	mov	DWORD PTR _curComponent$[ebp], eax
$LN1@CopyPacked:

; 620  :     }

	jmp	SHORT $LN4@CopyPacked
$LN15@CopyPacked:

; 621  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CopyPackedRGB@@YAXPAE0I@Z ENDP				; CopyPackedRGB
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?SetImage@D3D10Texture@@UAEXPAXW4GSImageFormat@@I@Z
_TEXT	SEGMENT
_map$ = -92						; size = 8
_curOutput$1 = -84					; size = 4
_curInput$2 = -80					; size = 4
_bestPitch$3 = -76					; size = 4
_curOutput$4 = -72					; size = 4
_curInput$5 = -68					; size = 4
tv184 = -64						; size = 4
_err$ = -60						; size = 4
tv94 = -56						; size = 4
tv91 = -52						; size = 4
tv88 = -48						; size = 4
tv85 = -44						; size = 4
tv81 = -40						; size = 4
tv78 = -36						; size = 4
tv74 = -32						; size = 4
tv71 = -28						; size = 4
tv69 = -24						; size = 4
_y$6 = -20						; size = 4
_y$7 = -16						; size = 4
_pixelBytes$ = -12					; size = 4
_this$ = -8						; size = 4
_bMatchingFormat$ = -1					; size = 1
_lpData$ = 8						; size = 4
_imageFormat$ = 12					; size = 4
_pitch$ = 16						; size = 4
?SetImage@D3D10Texture@@UAEXPAXW4GSImageFormat@@I@Z PROC ; D3D10Texture::SetImage, COMDAT
; _this$ = ecx

; 624  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	DWORD PTR _this$[ebp], ecx

; 625  :     if(!bDynamic)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN27@SetImage

; 626  :     {
; 627  :         AppWarning(TEXT("3D11Texture::SetImage: cannot call on a non-dynamic texture"));

	push	OFFSET $SG4294904562
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 628  :         return;

	jmp	$LN28@SetImage
$LN27@SetImage:

; 629  :     }
; 630  : 
; 631  :     bool bMatchingFormat = false;

	mov	BYTE PTR _bMatchingFormat$[ebp], 0

; 632  :     UINT pixelBytes = 0;    //What is this needed for?

	mov	DWORD PTR _pixelBytes$[ebp], 0

; 633  : 
; 634  :     switch(format)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR tv69[ebp], eax
	mov	ecx, DWORD PTR tv69[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv69[ebp], ecx
	cmp	DWORD PTR tv69[ebp], 7
	ja	$LN25@SetImage
	mov	edx, DWORD PTR tv69[ebp]
	jmp	DWORD PTR $LN48@SetImage[edx*4]
$LN24@SetImage:

; 635  :     {
; 636  :         case GS_ALPHA:      bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_A8); pixelBytes = 1; break;

	cmp	DWORD PTR _imageFormat$[ebp], 0
	jne	SHORT $LN30@SetImage
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN31@SetImage
$LN30@SetImage:
	mov	DWORD PTR tv71[ebp], 0
$LN31@SetImage:
	mov	al, BYTE PTR tv71[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], al
	mov	DWORD PTR _pixelBytes$[ebp], 1
	jmp	$LN25@SetImage
$LN23@SetImage:

; 637  :         case GS_GRAYSCALE:  bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_L8); pixelBytes = 1; break;

	cmp	DWORD PTR _imageFormat$[ebp], 1
	jne	SHORT $LN32@SetImage
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN33@SetImage
$LN32@SetImage:
	mov	DWORD PTR tv74[ebp], 0
$LN33@SetImage:
	mov	cl, BYTE PTR tv74[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], cl
	mov	DWORD PTR _pixelBytes$[ebp], 1
	jmp	$LN25@SetImage
$LN22@SetImage:

; 638  :         case GS_RGB:        bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_RGB || imageFormat == GS_IMAGEFORMAT_RGBX); pixelBytes = 4; break;

	cmp	DWORD PTR _imageFormat$[ebp], 2
	je	SHORT $LN34@SetImage
	cmp	DWORD PTR _imageFormat$[ebp], 3
	je	SHORT $LN34@SetImage
	mov	DWORD PTR tv78[ebp], 0
	jmp	SHORT $LN35@SetImage
$LN34@SetImage:
	mov	DWORD PTR tv78[ebp], 1
$LN35@SetImage:
	mov	dl, BYTE PTR tv78[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], dl
	mov	DWORD PTR _pixelBytes$[ebp], 4
	jmp	$LN25@SetImage
$LN21@SetImage:

; 639  :         case GS_RGBA:       bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_RGBA); pixelBytes = 4; break;

	cmp	DWORD PTR _imageFormat$[ebp], 4
	jne	SHORT $LN36@SetImage
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN37@SetImage
$LN36@SetImage:
	mov	DWORD PTR tv81[ebp], 0
$LN37@SetImage:
	mov	al, BYTE PTR tv81[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], al
	mov	DWORD PTR _pixelBytes$[ebp], 4
	jmp	$LN25@SetImage
$LN20@SetImage:

; 640  :         case GS_BGR:        bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_BGR || imageFormat == GS_IMAGEFORMAT_BGRX); pixelBytes = 4; break;

	cmp	DWORD PTR _imageFormat$[ebp], 7
	je	SHORT $LN38@SetImage
	cmp	DWORD PTR _imageFormat$[ebp], 8
	je	SHORT $LN38@SetImage
	mov	DWORD PTR tv85[ebp], 0
	jmp	SHORT $LN39@SetImage
$LN38@SetImage:
	mov	DWORD PTR tv85[ebp], 1
$LN39@SetImage:
	mov	cl, BYTE PTR tv85[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], cl
	mov	DWORD PTR _pixelBytes$[ebp], 4
	jmp	SHORT $LN25@SetImage
$LN19@SetImage:

; 641  :         case GS_BGRA:       bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_BGRA); pixelBytes = 4; break;

	cmp	DWORD PTR _imageFormat$[ebp], 9
	jne	SHORT $LN40@SetImage
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN41@SetImage
$LN40@SetImage:
	mov	DWORD PTR tv88[ebp], 0
$LN41@SetImage:
	mov	dl, BYTE PTR tv88[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], dl
	mov	DWORD PTR _pixelBytes$[ebp], 4
	jmp	SHORT $LN25@SetImage
$LN18@SetImage:

; 642  :         case GS_RGBA16F:    bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_RGBA16F); pixelBytes = 8; break;

	cmp	DWORD PTR _imageFormat$[ebp], 5
	jne	SHORT $LN42@SetImage
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN43@SetImage
$LN42@SetImage:
	mov	DWORD PTR tv91[ebp], 0
$LN43@SetImage:
	mov	al, BYTE PTR tv91[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], al
	mov	DWORD PTR _pixelBytes$[ebp], 8
	jmp	SHORT $LN25@SetImage
$LN17@SetImage:

; 643  :         case GS_RGBA32F:    bMatchingFormat = (imageFormat == GS_IMAGEFORMAT_RGBA32F); pixelBytes = 16; break;

	cmp	DWORD PTR _imageFormat$[ebp], 6
	jne	SHORT $LN44@SetImage
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN45@SetImage
$LN44@SetImage:
	mov	DWORD PTR tv94[ebp], 0
$LN45@SetImage:
	mov	cl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _bMatchingFormat$[ebp], cl
	mov	DWORD PTR _pixelBytes$[ebp], 16		; 00000010H
$LN25@SetImage:

; 644  :     }
; 645  : 
; 646  :     if(!bMatchingFormat)

	movzx	edx, BYTE PTR _bMatchingFormat$[ebp]
	test	edx, edx
	jne	SHORT $LN16@SetImage

; 647  :     {
; 648  :         AppWarning(TEXT("D3D10Texture::SetImage: invalid or mismatching image format specified"));

	push	OFFSET $SG4294904561
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 649  :         return;

	jmp	$LN28@SetImage
$LN16@SetImage:

; 650  :     }
; 651  : 
; 652  :     HRESULT err;
; 653  : 
; 654  :     D3D10_MAPPED_TEXTURE2D map;
; 655  :     if(FAILED(err = texture->Map(0, D3D10_MAP_WRITE_DISCARD, 0, &map)))

	lea	eax, DWORD PTR _map$[ebp]
	push	eax
	push	0
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN15@SetImage

; 656  :     {
; 657  :         AppWarning(TEXT("D3D10Texture::SetImage: map failed, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904560
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 658  :         return;

	jmp	$LN28@SetImage
$LN15@SetImage:

; 659  :     }
; 660  : 
; 661  :     //-------------------------------------------------------------------------
; 662  :     if((format == GS_RGB || format == GS_BGR) && (imageFormat == GS_IMAGEFORMAT_BGR || imageFormat == GS_IMAGEFORMAT_RGB))

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 3
	je	SHORT $LN13@SetImage
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+24], 5
	jne	$LN14@SetImage
$LN13@SetImage:
	cmp	DWORD PTR _imageFormat$[ebp], 7
	je	SHORT $LN12@SetImage
	cmp	DWORD PTR _imageFormat$[ebp], 2
	jne	$LN14@SetImage
$LN12@SetImage:

; 663  :     {
; 664  :         if(pitch == (width*3) && map.RowPitch == (width*4))

	mov	ecx, DWORD PTR _this$[ebp]
	imul	edx, DWORD PTR [ecx+16], 3
	cmp	DWORD PTR _pitch$[ebp], edx
	jne	SHORT $LN11@SetImage
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	shl	ecx, 2
	cmp	DWORD PTR _map$[ebp+4], ecx
	jne	SHORT $LN11@SetImage

; 665  :             CopyPackedRGB((BYTE*)map.pData, (BYTE*)lpData, width*height);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+16]
	imul	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR _lpData$[ebp]
	push	edx
	mov	eax, DWORD PTR _map$[ebp]
	push	eax
	call	?CopyPackedRGB@@YAXPAE0I@Z		; CopyPackedRGB
	add	esp, 12					; 0000000cH

; 666  :         else

	jmp	SHORT $LN10@SetImage
$LN11@SetImage:

; 667  :         {
; 668  :             for(UINT y=0; y<height; y++)

	mov	DWORD PTR _y$7[ebp], 0
	jmp	SHORT $LN9@SetImage
$LN8@SetImage:
	mov	ecx, DWORD PTR _y$7[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$7[ebp], ecx
$LN9@SetImage:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$7[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN10@SetImage

; 669  :             {
; 670  :                 LPBYTE curInput  = ((LPBYTE)lpData)    + (pitch*y);

	mov	ecx, DWORD PTR _pitch$[ebp]
	imul	ecx, DWORD PTR _y$7[ebp]
	add	ecx, DWORD PTR _lpData$[ebp]
	mov	DWORD PTR _curInput$5[ebp], ecx

; 671  :                 LPBYTE curOutput = ((LPBYTE)map.pData) + (map.RowPitch*y);

	mov	edx, DWORD PTR _map$[ebp+4]
	imul	edx, DWORD PTR _y$7[ebp]
	add	edx, DWORD PTR _map$[ebp]
	mov	DWORD PTR _curOutput$4[ebp], edx

; 672  : 
; 673  :                 CopyPackedRGB(curOutput, curInput, width);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	mov	edx, DWORD PTR _curInput$5[ebp]
	push	edx
	mov	eax, DWORD PTR _curOutput$4[ebp]
	push	eax
	call	?CopyPackedRGB@@YAXPAE0I@Z		; CopyPackedRGB
	add	esp, 12					; 0000000cH

; 674  :             }

	jmp	SHORT $LN8@SetImage
$LN10@SetImage:

; 675  :         }
; 676  :     }
; 677  :     //-------------------------------------------------------------------------
; 678  :     else

	jmp	$LN6@SetImage
$LN14@SetImage:

; 679  :     {
; 680  :         if(pitch == map.RowPitch)

	mov	ecx, DWORD PTR _pitch$[ebp]
	cmp	ecx, DWORD PTR _map$[ebp+4]
	jne	SHORT $LN5@SetImage

; 681  :             mcpy(map.pData, lpData, pitch*height);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pitch$[ebp]
	imul	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR _lpData$[ebp]
	push	ecx
	mov	edx, DWORD PTR _map$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 682  :         else

	jmp	SHORT $LN6@SetImage
$LN5@SetImage:

; 683  :         {
; 684  :             UINT bestPitch = MIN(pitch, map.RowPitch);

	mov	eax, DWORD PTR _pitch$[ebp]
	cmp	eax, DWORD PTR _map$[ebp+4]
	jae	SHORT $LN46@SetImage
	mov	ecx, DWORD PTR _pitch$[ebp]
	mov	DWORD PTR tv184[ebp], ecx
	jmp	SHORT $LN47@SetImage
$LN46@SetImage:
	mov	edx, DWORD PTR _map$[ebp+4]
	mov	DWORD PTR tv184[ebp], edx
$LN47@SetImage:
	mov	eax, DWORD PTR tv184[ebp]
	mov	DWORD PTR _bestPitch$3[ebp], eax

; 685  : 
; 686  :             for(UINT y=0; y<height; y++)

	mov	DWORD PTR _y$6[ebp], 0
	jmp	SHORT $LN3@SetImage
$LN2@SetImage:
	mov	ecx, DWORD PTR _y$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _y$6[ebp], ecx
$LN3@SetImage:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _y$6[ebp]
	cmp	eax, DWORD PTR [edx+20]
	jae	SHORT $LN6@SetImage

; 687  :             {
; 688  :                 LPBYTE curInput  = ((LPBYTE)lpData)    + (pitch*y);

	mov	ecx, DWORD PTR _pitch$[ebp]
	imul	ecx, DWORD PTR _y$6[ebp]
	add	ecx, DWORD PTR _lpData$[ebp]
	mov	DWORD PTR _curInput$2[ebp], ecx

; 689  :                 LPBYTE curOutput = ((LPBYTE)map.pData) + (map.RowPitch*y);

	mov	edx, DWORD PTR _map$[ebp+4]
	imul	edx, DWORD PTR _y$6[ebp]
	add	edx, DWORD PTR _map$[ebp]
	mov	DWORD PTR _curOutput$1[ebp], edx

; 690  : 
; 691  :                 mcpy(curOutput, curInput, bestPitch);

	mov	eax, DWORD PTR _bestPitch$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _curInput$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _curOutput$1[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 692  :             }

	jmp	SHORT $LN2@SetImage
$LN6@SetImage:

; 693  :         }
; 694  :     }
; 695  : 
; 696  :     texture->Unmap(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
$LN28@SetImage:

; 697  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN48@SetImage:
	DD	$LN24@SetImage
	DD	$LN23@SetImage
	DD	$LN22@SetImage
	DD	$LN21@SetImage
	DD	$LN20@SetImage
	DD	$LN19@SetImage
	DD	$LN18@SetImage
	DD	$LN17@SetImage
?SetImage@D3D10Texture@@UAEXPAXW4GSImageFormat@@I@Z ENDP ; D3D10Texture::SetImage
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?Map@D3D10Texture@@UAE_NAAPAEAAI@Z
_TEXT	SEGMENT
_map$ = -16						; size = 8
_err$ = -8						; size = 4
_this$ = -4						; size = 4
_lpData$ = 8						; size = 4
_pitch$ = 12						; size = 4
?Map@D3D10Texture@@UAE_NAAPAEAAI@Z PROC			; D3D10Texture::Map, COMDAT
; _this$ = ecx

; 700  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 701  :     HRESULT err;
; 702  :     D3D10_MAPPED_TEXTURE2D map;
; 703  : 
; 704  :     if(FAILED(err = texture->Map(0, D3D10_MAP_WRITE_DISCARD, 0, &map)))

	lea	eax, DWORD PTR _map$[ebp]
	push	eax
	push	0
	push	4
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN1@Map

; 705  :     {
; 706  :         AppWarning(TEXT("D3D10Texture::Map: map failed, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904559
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 707  :         return false;

	xor	al, al
	jmp	SHORT $LN2@Map
$LN1@Map:

; 708  :     }
; 709  : 
; 710  :     lpData = (BYTE*)map.pData;

	mov	edx, DWORD PTR _lpData$[ebp]
	mov	eax, DWORD PTR _map$[ebp]
	mov	DWORD PTR [edx], eax

; 711  :     pitch = map.RowPitch;

	mov	ecx, DWORD PTR _pitch$[ebp]
	mov	edx, DWORD PTR _map$[ebp+4]
	mov	DWORD PTR [ecx], edx

; 712  : 
; 713  :     return true;

	mov	al, 1
$LN2@Map:

; 714  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?Map@D3D10Texture@@UAE_NAAPAEAAI@Z ENDP			; D3D10Texture::Map
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?Unmap@D3D10Texture@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Unmap@D3D10Texture@@UAEXXZ PROC			; D3D10Texture::Unmap, COMDAT
; _this$ = ecx

; 717  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 718  :     texture->Unmap(0);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx

; 719  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?Unmap@D3D10Texture@@UAEXXZ ENDP			; D3D10Texture::Unmap
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10texture.cpp
;	COMDAT ?GetSharedHandle@D3D10Texture@@UAEPAXXZ
_TEXT	SEGMENT
_pDXGIResource$ = -16					; size = 4
_this$ = -12						; size = 4
_handle$ = -8						; size = 4
_err$ = -4						; size = 4
?GetSharedHandle@D3D10Texture@@UAEPAXXZ PROC		; D3D10Texture::GetSharedHandle, COMDAT
; _this$ = ecx

; 722  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 723  :     HRESULT err;
; 724  :     HANDLE handle = NULL;

	mov	DWORD PTR _handle$[ebp], 0

; 725  :     IDXGIResource *pDXGIResource;
; 726  :     if FAILED(err = texture->QueryInterface(__uuidof(IDXGIResource), (void **)&pDXGIResource))

	lea	eax, DWORD PTR _pDXGIResource$[ebp]
	push	eax
	push	OFFSET __GUID_035f3ab4_482e_4e50_b41f_8a7f8bd8960b
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@GetSharedH

; 727  :     {
; 728  :         AppWarning(TEXT("D3D10Texture::GetSharedHandle: QueryInterface failed, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904558
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 729  :         return handle;

	mov	eax, DWORD PTR _handle$[ebp]
	jmp	SHORT $LN3@GetSharedH
$LN2@GetSharedH:

; 730  :     }
; 731  :     
; 732  :     if FAILED(err = pDXGIResource->GetSharedHandle(&handle))

	lea	edx, DWORD PTR _handle$[ebp]
	push	edx
	mov	eax, DWORD PTR _pDXGIResource$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pDXGIResource$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+32]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN1@GetSharedH

; 733  :     {
; 734  :         AppWarning(TEXT("D3D10Texture::GetSharedHandle: GetSharedHandle failed, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294904557
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN1@GetSharedH:

; 735  :     }
; 736  :     
; 737  :     return handle;

	mov	eax, DWORD PTR _handle$[ebp]
$LN3@GetSharedH:

; 738  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSharedHandle@D3D10Texture@@UAEPAXXZ ENDP		; D3D10Texture::GetSharedHandle
_TEXT	ENDS
END
