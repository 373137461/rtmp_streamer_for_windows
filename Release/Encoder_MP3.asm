; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\Encoder_MP3.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1DG@HOBDGIEI@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAm?$AAp?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@FAKNMOGL@?$AAM?$AAP?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_17MGFFKIBC@?$AAM?$AAP?$AA3?$AA?$AA@	; `string'
PUBLIC	??_C@_1CI@GDPDIGGB@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAM?$AAP?$AA3?$AA?$AA@ ; `string'
PUBLIC	??_R3MP3Encoder@@8				; MP3Encoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7MP3Encoder@@6B@				; MP3Encoder::`vftable'
PUBLIC	??_R4MP3Encoder@@6B@				; MP3Encoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVMP3Encoder@@@8				; MP3Encoder `RTTI Type Descriptor'
PUBLIC	??_R2MP3Encoder@@8				; MP3Encoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@MP3Encoder@@8			; MP3Encoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	_lame_encode_buffer_interleaved_ieee_float:PROC
EXTRN	_lame_close:PROC
EXTRN	_lame_init_params:PROC
EXTRN	_lame_init:PROC
EXTRN	_lame_set_out_samplerate:PROC
EXTRN	_lame_set_disable_reservoir:PROC
EXTRN	_lame_set_num_channels:PROC
EXTRN	_lame_set_VBR:PROC
EXTRN	_lame_set_brate:PROC
EXTRN	_lame_set_quality:PROC
EXTRN	_lame_get_framesize:PROC
EXTRN	_lame_set_in_samplerate:PROC
;	COMDAT ??_R1A@?0A@EA@MP3Encoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MP3Encoder@@8 DD FLAT:??_R0?AVMP3Encoder@@@8 ; MP3Encoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MP3Encoder@@8
rdata$r	ENDS
;	COMDAT ??_R2MP3Encoder@@8
rdata$r	SEGMENT
??_R2MP3Encoder@@8 DD FLAT:??_R1A@?0A@EA@MP3Encoder@@8	; MP3Encoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AudioEncoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMP3Encoder@@@8
data$r	SEGMENT
??_R0?AVMP3Encoder@@@8 DD FLAT:??_7type_info@@6B@	; MP3Encoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMP3Encoder@@', 00H
data$r	ENDS
;	COMDAT ??_R4MP3Encoder@@6B@
rdata$r	SEGMENT
??_R4MP3Encoder@@6B@ DD 00H				; MP3Encoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMP3Encoder@@@8
	DD	FLAT:??_R3MP3Encoder@@8
rdata$r	ENDS
;	COMDAT ??_7MP3Encoder@@6B@
CONST	SEGMENT
??_7MP3Encoder@@6B@ DD FLAT:??_R4MP3Encoder@@6B@	; MP3Encoder::`vftable'
	DD	FLAT:?Encode@MP3Encoder@@UAE_NPAMIAAUDataPacket@@AA_K@Z
	DD	FLAT:?GetHeaders@MP3Encoder@@UAEXAAUDataPacket@@@Z
	DD	FLAT:??_EMP3Encoder@@UAEPAXI@Z
	DD	FLAT:?GetFrameSize@MP3Encoder@@UBEIXZ
	DD	FLAT:?GetBitRate@MP3Encoder@@UBEHXZ
	DD	FLAT:?GetCodec@MP3Encoder@@UBEPB_WXZ
	DD	FLAT:?GetInfoString@MP3Encoder@@UBE?AVString@@XZ
CONST	ENDS
;	COMDAT ??_R3MP3Encoder@@8
rdata$r	SEGMENT
??_R3MP3Encoder@@8 DD 00H				; MP3Encoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MP3Encoder@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CI@GDPDIGGB@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAM?$AAP?$AA3?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GDPDIGGB@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAM?$AAP?$AA3?$AA?$AA@ DB 'A'
	DB	00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'E', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, ':', 00H, ' ', 00H, 'M', 00H, 'P', 00H, '3', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17MGFFKIBC@?$AAM?$AAP?$AA3?$AA?$AA@
CONST	SEGMENT
??_C@_17MGFFKIBC@?$AAM?$AAP?$AA3?$AA?$AA@ DB 'M', 00H, 'P', 00H, '3', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@FAKNMOGL@?$AAM?$AAP?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@FAKNMOGL@?$AAM?$AAP?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AA@ DB 'M'
	DB	00H, 'P', 00H, '3', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@HOBDGIEI@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAm?$AAp?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HOBDGIEI@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAm?$AAp?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?$AA@ DB 'U'
	DB	00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 'm', 00H, 'p', 00H, '3', 00H, ' ', 00H, 'e', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H
	DB	00H						; `string'
PUBLIC	?CreateMP3Encoder@@YAPAVAudioEncoder@@I@Z	; CreateMP3Encoder
PUBLIC	??_GMP3Encoder@@UAEPAXI@Z			; MP3Encoder::`scalar deleting destructor'
PUBLIC	?GetInfoString@MP3Encoder@@UBE?AVString@@XZ	; MP3Encoder::GetInfoString
PUBLIC	?GetCodec@MP3Encoder@@UBEPB_WXZ			; MP3Encoder::GetCodec
PUBLIC	?GetBitRate@MP3Encoder@@UBEHXZ			; MP3Encoder::GetBitRate
PUBLIC	?GetHeaders@MP3Encoder@@UAEXAAUDataPacket@@@Z	; MP3Encoder::GetHeaders
PUBLIC	?GetFrameSize@MP3Encoder@@UBEIXZ		; MP3Encoder::GetFrameSize
PUBLIC	?Encode@MP3Encoder@@UAE_NPAMIAAUDataPacket@@AA_K@Z ; MP3Encoder::Encode
PUBLIC	??1MP3Encoder@@UAE@XZ				; MP3Encoder::~MP3Encoder
PUBLIC	??0MP3Encoder@@QAE@I@Z				; MP3Encoder::MP3Encoder
EXTRN	??_EMP3Encoder@@UAEPAXI@Z:PROC			; MP3Encoder::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ??0MP3Encoder@@QAE@I@Z
_TEXT	SEGMENT
$T1 = -16						; size = 8
tv225 = -8						; size = 4
_this$ = -4						; size = 4
_bitRate$ = 8						; size = 4
??0MP3Encoder@@QAE@I@Z PROC				; MP3Encoder::MP3Encoder, COMDAT
; _this$ = ecx

; 54   :     MP3Encoder(UINT bitRate)

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AudioEncoder@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MP3Encoder@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$List@E@@QAE@XZ			; List<unsigned char>::List<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$List@E@@QAE@XZ			; List<unsigned char>::List<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$List@_K@@QAE@XZ			; List<unsigned __int64>::List<unsigned __int64>

; 55   :     {
; 56   :         curBitRate = bitRate;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _bitRate$[ebp]
	mov	DWORD PTR [ecx+36], edx

; 57   : 
; 58   :         lgf = lame_init();

	call	_lame_init
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 59   :         if(!lgf)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	jne	SHORT $LN1@MP3Encoder

; 60   :             CrashError(TEXT("Unable to open mp3 encoder"));

	push	OFFSET ??_C@_1DG@HOBDGIEI@?$AAU?$AAn?$AAa?$AAb?$AAl?$AAe?$AA?5?$AAt?$AAo?$AA?5?$AAo?$AAp?$AAe?$AAn?$AA?5?$AAm?$AAp?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN1@MP3Encoder:

; 61   : 
; 62   :         lame_set_in_samplerate(lgf, App->GetSampleRateHz());

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetSampleRateHz@OBS@@QBEIXZ		; OBS::GetSampleRateHz
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_lame_set_in_samplerate
	add	esp, 8

; 63   :         lame_set_out_samplerate(lgf, App->GetSampleRateHz());

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetSampleRateHz@OBS@@QBEIXZ		; OBS::GetSampleRateHz
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_lame_set_out_samplerate
	add	esp, 8

; 64   :         lame_set_num_channels(lgf, App->NumAudioChannels());

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?NumAudioChannels@OBS@@QBEIXZ		; OBS::NumAudioChannels
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_lame_set_num_channels
	add	esp, 8

; 65   :         lame_set_disable_reservoir(lgf, TRUE); //bit reservoir has to be disabled for seamless streaming

	push	1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_lame_set_disable_reservoir
	add	esp, 8

; 66   :         lame_set_quality(lgf, 2);

	push	2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_lame_set_quality
	add	esp, 8

; 67   :         lame_set_VBR(lgf, vbr_off);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_lame_set_VBR
	add	esp, 8

; 68   :         lame_set_brate(lgf, bitRate);

	mov	eax, DWORD PTR _bitRate$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_lame_set_brate
	add	esp, 8

; 69   :         lame_init_params(lgf);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_lame_init_params
	add	esp, 4

; 70   : 
; 71   :         outputFrameSize = lame_get_framesize(lgf); //1152 usually

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	_lame_get_framesize
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], eax

; 72   :         dwMP3MaxSize = DWORD(1.25*double(outputFrameSize*audioBlockSize) + 7200.0);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	shl	eax, 2
	mov	DWORD PTR tv225[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv225[ebp]
	mov	ecx, DWORD PTR tv225[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@3ff4000000000000
	addsd	xmm0, QWORD PTR __real@40bc200000000000
	call	__dtoui3
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax

; 73   :         MP3OutputBuffer.SetSize(dwMP3MaxSize+1);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize

; 74   :         MP3OutputBuffer[0] = 0x2f;

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@E@@QAEAAEI@Z			; List<unsigned char>::operator[]
	mov	BYTE PTR [eax], 47			; 0000002fH

; 75   : 
; 76   :         bFirstPacket = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+28], 1

; 77   : 
; 78   :         Log(TEXT("------------------------------------------"));

	push	OFFSET ??_C@_1FG@KNBPKHHL@?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9?$AA?9@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 79   :         Log(TEXT("%s"), GetInfoString().Array());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetInfoString@MP3Encoder@@UBE?AVString@@XZ ; MP3Encoder::GetInfoString
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 80   :     }

	mov	eax, DWORD PTR _this$[ebp]
$LN3@MP3Encoder:
	mov	esp, ebp
	pop	ebp
	ret	4
??0MP3Encoder@@QAE@I@Z ENDP				; MP3Encoder::MP3Encoder
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ??1MP3Encoder@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MP3Encoder@@UAE@XZ PROC				; MP3Encoder::~MP3Encoder, COMDAT
; _this$ = ecx

; 83   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MP3Encoder@@6B@

; 84   :         lame_close(lgf);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	_lame_close
	add	esp, 4

; 85   :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$List@_K@@QAE@XZ			; List<unsigned __int64>::~List<unsigned __int64>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$List@E@@QAE@XZ			; List<unsigned char>::~List<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$List@E@@QAE@XZ			; List<unsigned char>::~List<unsigned char>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AudioEncoder@@UAE@XZ			; AudioEncoder::~AudioEncoder
	mov	esp, ebp
	pop	ebp
	ret	0
??1MP3Encoder@@UAE@XZ ENDP				; MP3Encoder::~MP3Encoder
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?Encode@MP3Encoder@@UAE_NPAMIAAUDataPacket@@AA_K@Z
_TEXT	SEGMENT
_lastSampleSize$ = -16					; size = 4
tv165 = -12						; size = 4
_ret$ = -8						; size = 4
_this$ = -4						; size = 4
_input$ = 8						; size = 4
_numInputFrames$ = 12					; size = 4
_packet$ = 16						; size = 4
_timestamp$ = 20					; size = 4
?Encode@MP3Encoder@@UAE_NPAMIAAUDataPacket@@AA_K@Z PROC	; MP3Encoder::Encode, COMDAT
; _this$ = ecx

; 88   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	DWORD PTR _this$[ebp], ecx

; 89   :         if(bFirstFrame)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN6@Encode

; 90   :         {
; 91   :             curEncodeTimestamp = timestamp;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _timestamp$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx+48], ecx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+52], eax

; 92   :             bFirstFrame = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+60], 0
$LN6@Encode:

; 93   :         }
; 94   : 
; 95   :         //------------------------------------------------
; 96   : 
; 97   :         UINT lastSampleSize = frameCounter;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _lastSampleSize$[ebp], eax

; 98   : 
; 99   :         frameCounter += numInputFrames;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	add	edx, DWORD PTR _numInputFrames$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], edx

; 100  :         if(frameCounter > outputFrameSize)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, DWORD PTR [edx+32]
	jbe	SHORT $LN5@Encode

; 101  :         {
; 102  :             frameCounter -= outputFrameSize;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	sub	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 103  : 
; 104  :             bufferedTimestamps << curEncodeTimestamp;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 48					; 00000030H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??6?$List@_K@@QAEAAV0@AB_K@Z		; List<unsigned __int64>::operator<<

; 105  :             curEncodeTimestamp = timestamp + ((outputFrameSize-lastSampleSize)*1000/App->GetSampleRateHz());

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	sub	ecx, DWORD PTR _lastSampleSize$[ebp]
	imul	esi, ecx, 1000
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetSampleRateHz@OBS@@QBEIXZ		; OBS::GetSampleRateHz
	mov	ecx, eax
	mov	eax, esi
	xor	edx, edx
	div	ecx
	xor	edx, edx
	mov	ecx, DWORD PTR _timestamp$[ebp]
	add	eax, DWORD PTR [ecx]
	adc	edx, DWORD PTR [ecx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], eax
	mov	DWORD PTR [ecx+52], edx
$LN5@Encode:

; 106  :         }
; 107  : 
; 108  :         int ret = lame_encode_buffer_interleaved_ieee_float(lgf, (float*)input, numInputFrames, MP3OutputBuffer.Array()+1, dwMP3MaxSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _numInputFrames$[ebp]
	push	ecx
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	_lame_encode_buffer_interleaved_ieee_float
	add	esp, 20					; 00000014H
	mov	DWORD PTR _ret$[ebp], eax

; 109  : 
; 110  :         if(ret < 0)

	cmp	DWORD PTR _ret$[ebp], 0
	jge	SHORT $LN4@Encode

; 111  :         {
; 112  :             AppWarning(TEXT("MP3 encode failed"));

	push	OFFSET ??_C@_1CE@FAKNMOGL@?$AAM?$AAP?$AA3?$AA?5?$AAe?$AAn?$AAc?$AAo?$AAd?$AAe?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$AA@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 113  :             return false;

	xor	al, al
	jmp	$LN7@Encode
$LN4@Encode:

; 114  :         }
; 115  : 
; 116  :         if(ret > 0)

	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN3@Encode

; 117  :         {
; 118  :             if(bFirstPacket)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	test	eax, eax
	je	SHORT $LN2@Encode

; 119  :             {
; 120  :                 header.CopyArray(MP3OutputBuffer.Array(), ret);

	mov	ecx, DWORD PTR _ret$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?CopyArray@?$List@E@@QAEXPBEI@Z		; List<unsigned char>::CopyArray

; 121  :                 bFirstPacket = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+28], 0

; 122  :                 ret = 0;

	mov	DWORD PTR _ret$[ebp], 0

; 123  :             }
; 124  :             else

	jmp	SHORT $LN3@Encode
$LN2@Encode:

; 125  :             {
; 126  :                 packet.lpPacket = MP3OutputBuffer.Array();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	ecx, DWORD PTR _packet$[ebp]
	mov	DWORD PTR [ecx], eax

; 127  :                 packet.size     = ret+1;

	mov	edx, DWORD PTR _ret$[ebp]
	add	edx, 1
	mov	eax, DWORD PTR _packet$[ebp]
	mov	DWORD PTR [eax+4], edx

; 128  : 
; 129  :                 timestamp = bufferedTimestamps[0];

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??A?$List@_K@@QAEAA_KI@Z		; List<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _timestamp$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax

; 130  :                 bufferedTimestamps.Remove(0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Remove@?$List@_K@@QAEXI@Z		; List<unsigned __int64>::Remove
$LN3@Encode:

; 131  :             }
; 132  :         }
; 133  : 
; 134  :         return ret > 0;

	cmp	DWORD PTR _ret$[ebp], 0
	jle	SHORT $LN9@Encode
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN10@Encode
$LN9@Encode:
	mov	DWORD PTR tv165[ebp], 0
$LN10@Encode:
	mov	al, BYTE PTR tv165[ebp]
$LN7@Encode:

; 135  :     }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Encode@MP3Encoder@@UAE_NPAMIAAUDataPacket@@AA_K@Z ENDP	; MP3Encoder::Encode
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?GetFrameSize@MP3Encoder@@UBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFrameSize@MP3Encoder@@UBEIXZ PROC			; MP3Encoder::GetFrameSize, COMDAT
; _this$ = ecx

; 138  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  :         return outputFrameSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+32]

; 140  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFrameSize@MP3Encoder@@UBEIXZ ENDP			; MP3Encoder::GetFrameSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?GetHeaders@MP3Encoder@@UAEXAAUDataPacket@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_packet$ = 8						; size = 4
?GetHeaders@MP3Encoder@@UAEXAAUDataPacket@@@Z PROC	; MP3Encoder::GetHeaders, COMDAT
; _this$ = ecx

; 143  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 144  :         packet.lpPacket = header.Array();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	ecx, DWORD PTR _packet$[ebp]
	mov	DWORD PTR [ecx], eax

; 145  :         packet.size = header.Num();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	mov	edx, DWORD PTR _packet$[ebp]
	mov	DWORD PTR [edx+4], eax

; 146  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetHeaders@MP3Encoder@@UAEXAAUDataPacket@@@Z ENDP	; MP3Encoder::GetHeaders
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?GetBitRate@MP3Encoder@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetBitRate@MP3Encoder@@UBEHXZ PROC			; MP3Encoder::GetBitRate, COMDAT
; _this$ = ecx

; 148  :     int GetBitRate() const {return curBitRate;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+36]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetBitRate@MP3Encoder@@UBEHXZ ENDP			; MP3Encoder::GetBitRate
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?GetCodec@MP3Encoder@@UBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCodec@MP3Encoder@@UBEPB_WXZ PROC			; MP3Encoder::GetCodec, COMDAT
; _this$ = ecx

; 149  :     CTSTR GetCodec() const {return TEXT("MP3");}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, OFFSET ??_C@_17MGFFKIBC@?$AAM?$AAP?$AA3?$AA?$AA@
	mov	esp, ebp
	pop	ebp
	ret	0
?GetCodec@MP3Encoder@@UBEPB_WXZ ENDP			; MP3Encoder::GetCodec
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?GetInfoString@MP3Encoder@@UBE?AVString@@XZ
_TEXT	SEGMENT
$T1 = -20						; size = 8
_strInfo$ = -12						; size = 8
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetInfoString@MP3Encoder@@UBE?AVString@@XZ PROC	; MP3Encoder::GetInfoString, COMDAT
; _this$ = ecx

; 152  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 153  :         String strInfo;

	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 154  :         strInfo << TEXT("Audio Encoding: MP3") <<
; 155  :                    TEXT("\r\n    bitrate: ") << IntString(curBitRate);

	push	10					; 0000000aH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET ??_C@_1CA@CBPMNIMK@?$AA?$AN?$AA?6?$AA?5?$AA?5?$AA?5?$AA?5?$AAb?$AAi?$AAt?$AAr?$AAa?$AAt?$AAe?$AA?3?$AA?5?$AA?$AA@
	push	OFFSET ??_C@_1CI@GDPDIGGB@?$AAA?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAE?$AAn?$AAc?$AAo?$AAd?$AAi?$AAn?$AAg?$AA?3?$AA?5?$AAM?$AAP?$AA3?$AA?$AA@
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 156  : 
; 157  :         return strInfo;

	lea	eax, DWORD PTR _strInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	lea	ecx, DWORD PTR _strInfo$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 158  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetInfoString@MP3Encoder@@UBE?AVString@@XZ ENDP	; MP3Encoder::GetInfoString
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMP3Encoder@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMP3Encoder@@UAEPAXI@Z PROC				; MP3Encoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MP3Encoder@@UAE@XZ			; MP3Encoder::~MP3Encoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMP3Encoder@@UAEPAXI@Z ENDP				; MP3Encoder::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\encoder_mp3.cpp
;	COMDAT ?CreateMP3Encoder@@YAPAVAudioEncoder@@I@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
$T1 = -4						; size = 4
_bitRate$ = 8						; size = 4
?CreateMP3Encoder@@YAPAVAudioEncoder@@I@Z PROC		; CreateMP3Encoder, COMDAT

; 163  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 164  :     return new MP3Encoder(bitRate);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@CreateMP3E
	mov	eax, DWORD PTR _bitRate$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0MP3Encoder@@QAE@I@Z			; MP3Encoder::MP3Encoder
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@CreateMP3E
$LN3@CreateMP3E:
	mov	DWORD PTR tv73[ebp], 0
$LN4@CreateMP3E:
	mov	eax, DWORD PTR tv73[ebp]

; 165  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateMP3Encoder@@YAPAVAudioEncoder@@I@Z ENDP		; CreateMP3Encoder
_TEXT	ENDS
END
