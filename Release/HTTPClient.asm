; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\HTTPClient.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__WinHttpReadData@16:PROC
EXTRN	__imp__WinHttpCreateUrl@16:PROC
EXTRN	__imp__WinHttpCrackUrl@16:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__imp__WinHttpOpenRequest@28:PROC
EXTRN	__imp__WinHttpOpen@20:PROC
EXTRN	__imp__WinHttpQueryDataAvailable@8:PROC
EXTRN	__imp__WinHttpQueryHeaders@24:PROC
EXTRN	__imp__WinHttpCloseHandle@4:PROC
EXTRN	__imp__WinHttpConnect@16:PROC
EXTRN	__imp__WinHttpSendRequest@28:PROC
EXTRN	_wcstoul:PROC
EXTRN	__imp__WinHttpReceiveResponse@8:PROC
$SG4294845607 DB 00H
	ORG $+2
$SG4294845611 DB '*', 00H, '/', 00H, '*', 00H, 00H, 00H
$SG4294845602 DB 'h', 00H, 't', 00H, 't', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG4294845610 DB 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'B', 00H
	DB	'r', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'c', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'S', 00H, 'o', 00H
	DB	'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'v', 00H, '0', 00H, '.', 00H, '6', 00H, '5', 00H, '7', 00H
	DB	'b', 00H, 00H, 00H
$SG4294845608 DB 'X', 00H, '-', 00H, 'S', 00H, 'i', 00H, 'g', 00H, 'n', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H
$SG4294845609 DB 'G', 00H, 'E', 00H, 'T', 00H, 00H, 00H
$SG4294845606 DB '*', 00H, '/', 00H, '*', 00H, 00H, 00H
$SG4294845604 DB 'G', 00H, 'E', 00H, 'T', 00H, 00H, 00H
$SG4294845603 DB 'h', 00H, 't', 00H, 't', 00H, 'p', 00H, 's', 00H, 00H, 00H
$SG4294845605 DB 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'B', 00H
	DB	'r', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'c', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'S', 00H, 'o', 00H
	DB	'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'v', 00H, '0', 00H, '.', 00H, '6', 00H, '5', 00H, '7', 00H
	DB	'b', 00H, 00H, 00H
PUBLIC	?CreateHTTPURL@@YA?AVString@@V1@00_N@Z		; CreateHTTPURL
PUBLIC	?HTTPGetString@@YA?AVString@@PB_W0PAH@Z		; HTTPGetString
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\httpclient.cpp
;	COMDAT ?HTTPGetString@@YA?AVString@@PB_W0PAH@Z
_TEXT	SEGMENT
_urlComponents$ = -16552				; size = 60
_b$1 = -16492						; size = 8
_acceptTypes$ = -16484					; size = 8
_statusCodeLen$ = -16476				; size = 4
_result$ = -16472					; size = 8
tv146 = -16464						; size = 4
tv163 = -16460						; size = 4
tv136 = -16456						; size = 4
$T2 = -16452						; size = 4
_hostName$ = -16448					; size = 8
_path$ = -16440						; size = 8
_dwOutSize$3 = -16432					; size = 4
_dwSize$4 = -16428					; size = 4
_bResults$ = -16424					; size = 4
_secure$ = -16420					; size = 4
_hSession$ = -16416					; size = 4
_hConnect$ = -16412					; size = 4
_hRequest$ = -16408					; size = 4
_buffer$5 = -16404					; size = 16384
_statusCode$ = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_url$ = 12						; size = 4
_extraHeaders$ = 16					; size = 4
_responseCode$ = 20					; size = 4
?HTTPGetString@@YA?AVString@@PB_W0PAH@Z PROC		; HTTPGetString, COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	mov	eax, 16552				; 000040a8H
	call	__chkstk
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 156  :     HINTERNET hSession = NULL;

	mov	DWORD PTR _hSession$[ebp], 0

; 157  :     HINTERNET hConnect = NULL;

	mov	DWORD PTR _hConnect$[ebp], 0

; 158  :     HINTERNET hRequest = NULL;

	mov	DWORD PTR _hRequest$[ebp], 0

; 159  :     URL_COMPONENTS  urlComponents;
; 160  :     BOOL secure = FALSE;

	mov	DWORD PTR _secure$[ebp], 0

; 161  : 	String result = "";

	push	OFFSET $SG4294845607
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z

; 162  : 
; 163  :     String hostName, path;

	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 164  : 
; 165  :     const TCHAR *acceptTypes[] = {
; 166  :         TEXT("*/*"),
; 167  :         NULL
; 168  :     };

	mov	DWORD PTR _acceptTypes$[ebp], OFFSET $SG4294845606
	mov	DWORD PTR _acceptTypes$[ebp+4], 0

; 169  : 
; 170  :     hostName.SetLength(256);

	push	256					; 00000100H
	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 171  :     path.SetLength(1024);

	push	1024					; 00000400H
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 172  : 
; 173  :     zero(&urlComponents, sizeof(urlComponents));

	push	60					; 0000003cH
	lea	eax, DWORD PTR _urlComponents$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 174  : 
; 175  :     urlComponents.dwStructSize = sizeof(urlComponents);

	mov	DWORD PTR _urlComponents$[ebp], 60	; 0000003cH

; 176  :     
; 177  :     urlComponents.lpszHostName = hostName;

	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	mov	DWORD PTR _urlComponents$[ebp+16], eax

; 178  :     urlComponents.dwHostNameLength = hostName.Length();

	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	mov	DWORD PTR _urlComponents$[ebp+20], eax

; 179  : 
; 180  :     urlComponents.lpszUrlPath = path;

	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	mov	DWORD PTR _urlComponents$[ebp+44], eax

; 181  :     urlComponents.dwUrlPathLength = path.Length();

	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	mov	DWORD PTR _urlComponents$[ebp+48], eax

; 182  : 
; 183  :     WinHttpCrackUrl(url, 0, 0, &urlComponents);

	lea	ecx, DWORD PTR _urlComponents$[ebp]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _url$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpCrackUrl@16

; 184  : 
; 185  :     if (urlComponents.nPort == 443)

	movzx	eax, WORD PTR _urlComponents$[ebp+24]
	cmp	eax, 443				; 000001bbH
	jne	SHORT $LN25@HTTPGetStr

; 186  :         secure = TRUE;

	mov	DWORD PTR _secure$[ebp], 1
$LN25@HTTPGetStr:

; 187  : 
; 188  :     hSession = WinHttpOpen(OBS_VERSION_STRING, WINHTTP_ACCESS_TYPE_DEFAULT_PROXY, WINHTTP_NO_PROXY_NAME, WINHTTP_NO_PROXY_BYPASS, 0);

	push	0
	push	0
	push	0
	push	0
	push	OFFSET $SG4294845605
	call	DWORD PTR __imp__WinHttpOpen@20
	mov	DWORD PTR _hSession$[ebp], eax

; 189  :     if (!hSession)

	cmp	DWORD PTR _hSession$[ebp], 0
	jne	SHORT $LN24@HTTPGetStr

; 190  :         goto failure;

	jmp	$failure$36
$LN24@HTTPGetStr:

; 191  : 
; 192  :     hConnect = WinHttpConnect(hSession, hostName, secure ? INTERNET_DEFAULT_HTTPS_PORT : INTERNET_DEFAULT_HTTP_PORT, 0);

	cmp	DWORD PTR _secure$[ebp], 0
	je	SHORT $LN28@HTTPGetStr
	mov	DWORD PTR tv136[ebp], 443		; 000001bbH
	jmp	SHORT $LN29@HTTPGetStr
$LN28@HTTPGetStr:
	mov	DWORD PTR tv136[ebp], 80		; 00000050H
$LN29@HTTPGetStr:
	push	0
	movzx	ecx, WORD PTR tv136[ebp]
	push	ecx
	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	edx, DWORD PTR _hSession$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpConnect@16
	mov	DWORD PTR _hConnect$[ebp], eax

; 193  :     if (!hConnect)

	cmp	DWORD PTR _hConnect$[ebp], 0
	jne	SHORT $LN22@HTTPGetStr

; 194  :         goto failure;

	jmp	$failure$36
$LN22@HTTPGetStr:

; 195  : 
; 196  :     hRequest = WinHttpOpenRequest(hConnect, TEXT("GET"), path, NULL, WINHTTP_NO_REFERER, acceptTypes, secure ? WINHTTP_FLAG_SECURE|WINHTTP_FLAG_REFRESH : WINHTTP_FLAG_REFRESH);

	cmp	DWORD PTR _secure$[ebp], 0
	je	SHORT $LN30@HTTPGetStr
	mov	DWORD PTR tv146[ebp], 8388864		; 00800100H
	jmp	SHORT $LN31@HTTPGetStr
$LN30@HTTPGetStr:
	mov	DWORD PTR tv146[ebp], 256		; 00000100H
$LN31@HTTPGetStr:
	mov	eax, DWORD PTR tv146[ebp]
	push	eax
	lea	ecx, DWORD PTR _acceptTypes$[ebp]
	push	ecx
	push	0
	push	0
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294845604
	mov	edx, DWORD PTR _hConnect$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpOpenRequest@28
	mov	DWORD PTR _hRequest$[ebp], eax

; 197  :     if (!hRequest)

	cmp	DWORD PTR _hRequest$[ebp], 0
	jne	SHORT $LN20@HTTPGetStr

; 198  :         goto failure;

	jmp	$failure$36
$LN20@HTTPGetStr:

; 199  : 
; 200  :     BOOL bResults = WinHttpSendRequest(hRequest, extraHeaders, extraHeaders ? -1 : 0, WINHTTP_NO_REQUEST_DATA, 0, 0, 0);

	cmp	DWORD PTR _extraHeaders$[ebp], 0
	je	SHORT $LN32@HTTPGetStr
	mov	DWORD PTR tv163[ebp], -1
	jmp	SHORT $LN33@HTTPGetStr
$LN32@HTTPGetStr:
	mov	DWORD PTR tv163[ebp], 0
$LN33@HTTPGetStr:
	push	0
	push	0
	push	0
	push	0
	mov	eax, DWORD PTR tv163[ebp]
	push	eax
	mov	ecx, DWORD PTR _extraHeaders$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hRequest$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpSendRequest@28
	mov	DWORD PTR _bResults$[ebp], eax

; 201  : 
; 202  :     // End the request.
; 203  :     if (bResults)

	cmp	DWORD PTR _bResults$[ebp], 0
	je	SHORT __unwind$?HTTPGetString@@YA?AVString@@PB_W0PAH@Z$3

; 204  :         bResults = WinHttpReceiveResponse(hRequest, NULL);

	push	0
	mov	eax, DWORD PTR _hRequest$[ebp]
	push	eax
	call	DWORD PTR __imp__WinHttpReceiveResponse@8
	mov	DWORD PTR _bResults$[ebp], eax

; 205  :     else

	jmp	SHORT $LN17@HTTPGetStr
__unwind$?HTTPGetString@@YA?AVString@@PB_W0PAH@Z$3:

; 206  :         goto failure;

	jmp	$failure$36
$LN17@HTTPGetStr:

; 207  : 
; 208  :     TCHAR statusCode[8];
; 209  :     DWORD statusCodeLen;
; 210  : 
; 211  :     statusCodeLen = sizeof(statusCode);

	mov	DWORD PTR _statusCodeLen$[ebp], 16	; 00000010H

; 212  :     if (!WinHttpQueryHeaders (hRequest, WINHTTP_QUERY_STATUS_CODE, WINHTTP_HEADER_NAME_BY_INDEX, &statusCode, &statusCodeLen, WINHTTP_NO_HEADER_INDEX))

	push	0
	lea	ecx, DWORD PTR _statusCodeLen$[ebp]
	push	ecx
	lea	edx, DWORD PTR _statusCode$[ebp]
	push	edx
	push	0
	push	19					; 00000013H
	mov	eax, DWORD PTR _hRequest$[ebp]
	push	eax
	call	DWORD PTR __imp__WinHttpQueryHeaders@24
	test	eax, eax
	jne	SHORT $LN15@HTTPGetStr

; 213  :         goto failure;

	jmp	$failure$36
$LN15@HTTPGetStr:

; 214  : 
; 215  :     *responseCode = wcstoul(statusCode, NULL, 10);	

	push	10					; 0000000aH
	push	0
	lea	ecx, DWORD PTR _statusCode$[ebp]
	push	ecx
	call	_wcstoul
	add	esp, 12					; 0000000cH
	mov	edx, DWORD PTR _responseCode$[ebp]
	mov	DWORD PTR [edx], eax

; 216  : 
; 217  :     if (bResults && *responseCode == 200)

	cmp	DWORD PTR _bResults$[ebp], 0
	je	$failure$36
	mov	eax, DWORD PTR _responseCode$[ebp]
	cmp	DWORD PTR [eax], 200			; 000000c8H
	jne	$failure$36
$LN12@HTTPGetStr:

; 218  :     {
; 219  :         CHAR buffer[16384];
; 220  :         DWORD dwSize, dwOutSize;
; 221  : 
; 222  :         do 
; 223  :         {
; 224  :             // Check for available data.
; 225  :             dwSize = 0;

	mov	DWORD PTR _dwSize$4[ebp], 0

; 226  :             if (!WinHttpQueryDataAvailable(hRequest, &dwSize))

	lea	ecx, DWORD PTR _dwSize$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _hRequest$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpQueryDataAvailable@8
	test	eax, eax
	jne	SHORT $LN9@HTTPGetStr

; 227  :                 goto failure;

	jmp	$failure$36
$LN9@HTTPGetStr:

; 228  : 
; 229  :             if (!WinHttpReadData(hRequest, (LPVOID)buffer, dwSize, &dwOutSize))

	lea	eax, DWORD PTR _dwOutSize$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwSize$4[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$5[ebp]
	push	edx
	mov	eax, DWORD PTR _hRequest$[ebp]
	push	eax
	call	DWORD PTR __imp__WinHttpReadData@16
	test	eax, eax
	jne	SHORT $LN7@HTTPGetStr

; 230  :             {
; 231  :                 goto failure;

	jmp	$failure$36

; 232  :             }
; 233  :             else

	jmp	SHORT $LN11@HTTPGetStr
$LN7@HTTPGetStr:

; 234  :             {
; 235  :                 if (!dwOutSize)

	cmp	DWORD PTR _dwOutSize$3[ebp], 0
	jne	SHORT $LN4@HTTPGetStr

; 236  :                     break;

	jmp	SHORT $failure$36
$LN4@HTTPGetStr:

; 237  : 
; 238  : 				// Ensure the string is terminated.
; 239  : 				buffer[dwOutSize] = 0;

	mov	ecx, DWORD PTR _dwOutSize$3[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 16384		; 00004000H
	jae	SHORT $LN34@HTTPGetStr
	jmp	SHORT $LN35@HTTPGetStr
$LN34@HTTPGetStr:
	call	___report_rangecheckfailure
$LN35@HTTPGetStr:
	mov	edx, DWORD PTR $T2[ebp]
	mov	BYTE PTR _buffer$5[ebp+edx], 0

; 240  : 
; 241  : 				String b = String((LPCSTR)buffer);

	lea	eax, DWORD PTR _buffer$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _b$1[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z

; 242  : 				result.AppendString(b);

	push	0
	lea	ecx, DWORD PTR _b$1[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_?AppendString@String@@QAEAAV1@PB_WI@Z

; 243  :             }

	lea	ecx, DWORD PTR _b$1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN11@HTTPGetStr:

; 244  :         } while (dwSize > 0);

	cmp	DWORD PTR _dwSize$4[ebp], 0
	ja	$LN12@HTTPGetStr
$failure$36:

; 245  :     }
; 246  : 
; 247  : failure:
; 248  :     if (hSession)

	cmp	DWORD PTR _hSession$[ebp], 0
	je	SHORT $LN3@HTTPGetStr

; 249  :         WinHttpCloseHandle(hSession);

	mov	ecx, DWORD PTR _hSession$[ebp]
	push	ecx
	call	DWORD PTR __imp__WinHttpCloseHandle@4
$LN3@HTTPGetStr:

; 250  :     if (hConnect)

	cmp	DWORD PTR _hConnect$[ebp], 0
	je	SHORT $LN2@HTTPGetStr

; 251  :         WinHttpCloseHandle(hConnect);

	mov	edx, DWORD PTR _hConnect$[ebp]
	push	edx
	call	DWORD PTR __imp__WinHttpCloseHandle@4
$LN2@HTTPGetStr:

; 252  :     if (hRequest)

	cmp	DWORD PTR _hRequest$[ebp], 0
	je	SHORT $LN1@HTTPGetStr

; 253  :         WinHttpCloseHandle(hRequest);

	mov	eax, DWORD PTR _hRequest$[ebp]
	push	eax
	call	DWORD PTR __imp__WinHttpCloseHandle@4
$LN1@HTTPGetStr:

; 254  : 
; 255  :     return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _hostName$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN27@HTTPGetStr:

; 256  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?HTTPGetString@@YA?AVString@@PB_W0PAH@Z ENDP		; HTTPGetString
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\httpclient.cpp
;	COMDAT ?CreateHTTPURL@@YA?AVString@@V1@00_N@Z
_TEXT	SEGMENT
_components$ = -88					; size = 60
_url$ = -28						; size = 8
_length$ = -20						; size = 4
tv82 = -16						; size = 4
tv75 = -12						; size = 4
tv72 = -8						; size = 4
tv69 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_host$ = 12						; size = 8
_path$ = 20						; size = 8
_extra$ = 28						; size = 8
_secure$ = 36						; size = 1
?CreateHTTPURL@@YA?AVString@@V1@00_N@Z PROC		; CreateHTTPURL, COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H

; 261  :     URL_COMPONENTS components = {
; 262  :         sizeof URL_COMPONENTS,
; 263  :         secure ? L"https" : L"http",
; 264  :         secure ? 5 : 4,
; 265  :         secure ? INTERNET_SCHEME_HTTPS : INTERNET_SCHEME_HTTP,
; 266  :         host.Array(), host.Length(),
; 267  :         secure ? INTERNET_DEFAULT_HTTPS_PORT : INTERNET_DEFAULT_HTTP_PORT,
; 268  :         nullptr, 0,
; 269  :         nullptr, 0,
; 270  :         path.Array(), path.Length(),
; 271  :         extra.Array(), extra.Length()
; 272  :     };

	mov	DWORD PTR _components$[ebp], 60		; 0000003cH
	movzx	eax, BYTE PTR _secure$[ebp]
	test	eax, eax
	je	SHORT $LN4@CreateHTTP
	mov	DWORD PTR tv69[ebp], OFFSET $SG4294845603
	jmp	SHORT $LN5@CreateHTTP
$LN4@CreateHTTP:
	mov	DWORD PTR tv69[ebp], OFFSET $SG4294845602
$LN5@CreateHTTP:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _components$[ebp+4], ecx
	movzx	edx, BYTE PTR _secure$[ebp]
	test	edx, edx
	je	SHORT $LN6@CreateHTTP
	mov	DWORD PTR tv72[ebp], 5
	jmp	SHORT $LN7@CreateHTTP
$LN6@CreateHTTP:
	mov	DWORD PTR tv72[ebp], 4
$LN7@CreateHTTP:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _components$[ebp+8], eax
	movzx	ecx, BYTE PTR _secure$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@CreateHTTP
	mov	DWORD PTR tv75[ebp], 2
	jmp	SHORT $LN9@CreateHTTP
$LN8@CreateHTTP:
	mov	DWORD PTR tv75[ebp], 1
$LN9@CreateHTTP:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _components$[ebp+12], edx
	lea	ecx, DWORD PTR _host$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	DWORD PTR _components$[ebp+16], eax
	lea	ecx, DWORD PTR _host$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	mov	DWORD PTR _components$[ebp+20], eax
	movzx	eax, BYTE PTR _secure$[ebp]
	test	eax, eax
	je	SHORT $LN10@CreateHTTP
	mov	DWORD PTR tv82[ebp], 443		; 000001bbH
	jmp	SHORT $LN11@CreateHTTP
$LN10@CreateHTTP:
	mov	DWORD PTR tv82[ebp], 80			; 00000050H
$LN11@CreateHTTP:
	mov	cx, WORD PTR tv82[ebp]
	mov	WORD PTR _components$[ebp+24], cx
	mov	DWORD PTR _components$[ebp+28], 0
	mov	DWORD PTR _components$[ebp+32], 0
	mov	DWORD PTR _components$[ebp+36], 0
	mov	DWORD PTR _components$[ebp+40], 0
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	DWORD PTR _components$[ebp+44], eax
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	mov	DWORD PTR _components$[ebp+48], eax
	lea	ecx, DWORD PTR _extra$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	DWORD PTR _components$[ebp+52], eax
	lea	ecx, DWORD PTR _extra$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	mov	DWORD PTR _components$[ebp+56], eax

; 273  : 
; 274  :     String url;

	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 275  :     url.SetLength(MAX_PATH);

	push	260					; 00000104H
	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 276  :     DWORD length = MAX_PATH;

	mov	DWORD PTR _length$[ebp], 260		; 00000104H

; 277  :     if (!WinHttpCreateUrl(&components, ICU_ESCAPE, url.Array(), &length))

	lea	edx, DWORD PTR _length$[ebp]
	push	edx
	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	-2147483648				; 80000000H
	lea	eax, DWORD PTR _components$[ebp]
	push	eax
	call	DWORD PTR __imp__WinHttpCreateUrl@16
	test	eax, eax
	jne	SHORT $LN1@CreateHTTP

; 278  :         return String();

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _host$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _extra$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@CreateHTTP
$LN1@CreateHTTP:

; 279  : 
; 280  :     url.SetLength(length);

	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 281  :     return url;

	lea	edx, DWORD PTR _url$[ebp]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	lea	ecx, DWORD PTR _url$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _host$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _path$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _extra$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@CreateHTTP:

; 282  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateHTTPURL@@YA?AVString@@V1@00_N@Z ENDP		; CreateHTTPURL
_TEXT	ENDS
END
