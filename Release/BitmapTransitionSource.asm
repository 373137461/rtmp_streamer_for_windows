; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\BitmapTransitionSource.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1CC@PJFPFLCG@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAl?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAh?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@OKNHHHMO@?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GG@MDAOKLJD@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAS?$AAe@ ; `string'
PUBLIC	??_C@_15PKPONJIK@?$AA?2?$AA?$CK?$AA?$AA@	; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@	; `string'
PUBLIC	??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@	; `string'
PUBLIC	??_C@_17HBEFHPHJ@?$AAg?$AAi?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_17NHEGDLEI@?$AAb?$AAm?$AAp?$AA?$AA@	; `string'
PUBLIC	??_C@_17CEJDMMOJ@?$AAd?$AAd?$AAs?$AA?$AA@	; `string'
PUBLIC	??_C@_1BO@CNKOKCCO@?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAi?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@GPLDFIDD@?$AAf?$AAa?$AAd?$AAe?$AAI?$AAn?$AAO?$AAn?$AAl?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@KFOOIGFF@?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAF?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@GGDHKCNG@?$AAr?$AAa?$AAn?$AAd?$AAo?$AAm?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GO@LOJBNFK@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAF?$AAi?$AAr?$AAs?$AAt@ ; `string'
PUBLIC	??_R2BitmapTransitionSource@@8			; BitmapTransitionSource::`RTTI Base Class Array'
PUBLIC	??_R0?AVBitmapTransitionSource@@@8		; BitmapTransitionSource `RTTI Type Descriptor'
PUBLIC	??_R4BitmapTransitionSource@@6B@		; BitmapTransitionSource::`RTTI Complete Object Locator'
PUBLIC	??_R0PAVBitmapImage@@@8				; BitmapImage * `RTTI Type Descriptor'
PUBLIC	??_7BitmapTransitionSource@@6B@			; BitmapTransitionSource::`vftable'
PUBLIC	??_R3BitmapTransitionSource@@8			; BitmapTransitionSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@BitmapTransitionSource@@8		; BitmapTransitionSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
EXTRN	__imp_??1StringList@@QAE@XZ:PROC
EXTRN	__imp_??6StringList@@QAEAAV0@ABVString@@@Z:PROC
EXTRN	__imp_??HVect2@@QBE?AU0@ABU0@@Z:PROC
EXTRN	__imp_??GVect2@@QBE?AU0@ABU0@@Z:PROC
EXTRN	__imp_??DVect2@@QBE?AU0@ABU0@@Z:PROC
EXTRN	__imp_??KVect2@@QBE?AU0@ABU0@@Z:PROC
EXTRN	__imp_??DVect2@@QBE?AU0@M@Z:PROC
EXTRN	__imp_??YVect2@@QAEAAU0@ABU0@@Z:PROC
EXTRN	__imp_??XVect2@@QAEAAU0@ABU0@@Z:PROC
EXTRN	__imp_??_0Vect2@@QAEAAU0@ABU0@@Z:PROC
EXTRN	__imp_??4Vect2@@QAEAAU0@ABU0@@Z:PROC
EXTRN	__imp_?Num@?$List@VString@@@@QBEIXZ:PROC
EXTRN	__imp_??A?$List@VString@@@@QAEAAVString@@I@Z:PROC
EXTRN	__time64:PROC
EXTRN	__imp_?scmp@@YGHPB_W0@Z:PROC
EXTRN	__imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z:PROC
EXTRN	__imp_??HString@@QBE?AV0@ABV0@@Z:PROC
EXTRN	__imp_??HString@@QBE?AV0@PB_W@Z:PROC
EXTRN	__imp_?AppendString@String@@QAEAAV1@PB_WI@Z:PROC
EXTRN	__imp__SHGetPathFromIDListW@8:PROC
EXTRN	__imp__CoTaskMemFree@4:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	__imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z:PROC
EXTRN	_roundf:PROC
EXTRN	__imp_?GetFloat@XElement@@QBEMPB_WM@Z:PROC
EXTRN	__imp_?GetStringList@XElement@@QBEXPB_WAAVStringList@@@Z:PROC
EXTRN	__imp_?SetStringList@XElement@@QAEXPB_WAAVStringList@@@Z:PROC
EXTRN	__imp_?GetLBText@@YA?AVString@@PAUHWND__@@I@Z:PROC
EXTRN	__imp_?slen@@YGIPB_W@Z:PROC
EXTRN	__imp_?OSFindClose@@YGXPAX@Z:PROC
EXTRN	__imp__SHBrowseForFolderW@4:PROC
EXTRN	__imp_?OSFileExists@@YGHPB_W@Z:PROC
EXTRN	__imp_?OSFileIsDirectory@@YG_NPB_W@Z:PROC
;	COMDAT ??_R1A@?0A@EA@BitmapTransitionSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BitmapTransitionSource@@8 DD FLAT:??_R0?AVBitmapTransitionSource@@@8 ; BitmapTransitionSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BitmapTransitionSource@@8
rdata$r	ENDS
;	COMDAT ??_R3BitmapTransitionSource@@8
rdata$r	SEGMENT
??_R3BitmapTransitionSource@@8 DD 00H			; BitmapTransitionSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BitmapTransitionSource@@8
rdata$r	ENDS
;	COMDAT ??_7BitmapTransitionSource@@6B@
CONST	SEGMENT
??_7BitmapTransitionSource@@6B@ DD FLAT:??_R4BitmapTransitionSource@@6B@ ; BitmapTransitionSource::`vftable'
	DD	FLAT:??_EBitmapTransitionSource@@UAEPAXI@Z
	DD	FLAT:?Preprocess@ImageSource@@UAEXXZ
	DD	FLAT:?Tick@BitmapTransitionSource@@UAEXM@Z
	DD	FLAT:?Render@BitmapTransitionSource@@UAEXABUVect2@@0@Z
	DD	FLAT:?GetSize@BitmapTransitionSource@@UBE?AUVect2@@XZ
	DD	FLAT:?UpdateSettings@BitmapTransitionSource@@UAEXXZ
	DD	FLAT:?BeginScene@ImageSource@@UAEXXZ
	DD	FLAT:?EndScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceLeaveScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceEnterScene@ImageSource@@UAEXXZ
	DD	FLAT:?SetFloat@ImageSource@@UAEXPB_WM@Z
	DD	FLAT:?SetInt@ImageSource@@UAEXPB_WH@Z
	DD	FLAT:?SetString@ImageSource@@UAEXPB_W0@Z
	DD	FLAT:?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z
	DD	FLAT:?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z
	DD	FLAT:?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z
	DD	FLAT:?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z
	DD	FLAT:?GetFloat@ImageSource@@UBE_NPB_WAAM@Z
	DD	FLAT:?GetInt@ImageSource@@UBE_NPB_WAAH@Z
	DD	FLAT:?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z
	DD	FLAT:?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z
	DD	FLAT:?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z
	DD	FLAT:?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z
	DD	FLAT:?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z
CONST	ENDS
;	COMDAT ??_R0PAVBitmapImage@@@8
data$r	SEGMENT
??_R0PAVBitmapImage@@@8 DD FLAT:??_7type_info@@6B@	; BitmapImage * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAVBitmapImage@@', 00H
data$r	ENDS
;	COMDAT ??_R4BitmapTransitionSource@@6B@
rdata$r	SEGMENT
??_R4BitmapTransitionSource@@6B@ DD 00H			; BitmapTransitionSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBitmapTransitionSource@@@8
	DD	FLAT:??_R3BitmapTransitionSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmapTransitionSource@@@8
data$r	SEGMENT
??_R0?AVBitmapTransitionSource@@@8 DD FLAT:??_7type_info@@6B@ ; BitmapTransitionSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBitmapTransitionSource@@', 00H
data$r	ENDS
;	COMDAT ??_R2BitmapTransitionSource@@8
rdata$r	SEGMENT
??_R2BitmapTransitionSource@@8 DD FLAT:??_R1A@?0A@EA@BitmapTransitionSource@@8 ; BitmapTransitionSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_C@_1GO@LOJBNFK@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAF?$AAi?$AAr?$AAs?$AAt@
CONST	SEGMENT
??_C@_1GO@LOJBNFK@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAF?$AAi?$AAr?$AAs?$AAt@ DB 'B'
	DB	00H, 'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'T', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'G', 00H, 'e', 00H, 't'
	DB	00H, 'F', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, 'B', 00H
	DB	'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'E', 00H, 'm', 00H
	DB	'p', 00H, 't', 00H, 'y', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GGDHKCNG@?$AAr?$AAa?$AAn?$AAd?$AAo?$AAm?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GGDHKCNG@?$AAr?$AAa?$AAn?$AAd?$AAo?$AAm?$AAi?$AAz?$AAe?$AA?$AA@ DB 'r'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@KFOOIGFF@?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAF?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@KFOOIGFF@?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAF?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'F', 00H, 'a', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GPLDFIDD@?$AAf?$AAa?$AAd?$AAe?$AAI?$AAn?$AAO?$AAn?$AAl?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@GPLDFIDD@?$AAf?$AAa?$AAd?$AAe?$AAI?$AAn?$AAO?$AAn?$AAl?$AAy?$AA?$AA@ DB 'f'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'O', 00H
	DB	'n', 00H, 'l', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@CNKOKCCO@?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAi?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@CNKOKCCO@?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAi?$AAm?$AAe?$AA?$AA@ DB 't'
	DB	00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_17CEJDMMOJ@?$AAd?$AAd?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_17CEJDMMOJ@?$AAd?$AAd?$AAs?$AA?$AA@ DB 'd', 00H, 'd', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17NHEGDLEI@?$AAb?$AAm?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_17NHEGDLEI@?$AAb?$AAm?$AAp?$AA?$AA@ DB 'b', 00H, 'm', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17HBEFHPHJ@?$AAg?$AAi?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_17HBEFHPHJ@?$AAg?$AAi?$AAf?$AA?$AA@ DB 'g', 00H, 'i', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@ DB 'p', 00H, 'n', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@ DB 'j', 00H, 'p', 00H, 'g', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15PKPONJIK@?$AA?2?$AA?$CK?$AA?$AA@
CONST	SEGMENT
??_C@_15PKPONJIK@?$AA?2?$AA?$CK?$AA?$AA@ DB '\', 00H, '*', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@MDAOKLJD@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAS?$AAe@
CONST	SEGMENT
??_C@_1GG@MDAOKLJD@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAS?$AAe@ DB 'B'
	DB	00H, 'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 'T', 00H
	DB	'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p', 00H, 'd'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 't', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 's', 00H, ':', 00H, ' '
	DB	00H, 'E', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@OKNHHHMO@?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1O@OKNHHHMO@?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?$AA@ DB 'b', 00H, 'i'
	DB	00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@PJFPFLCG@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAl?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAh?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@PJFPFLCG@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAl?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAh?$AAo?$AAw?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'S', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 'S', 00H, 'h'
	DB	00H, 'o', 00H, 'w', 00H, 00H, 00H		; `string'
	ORG $+2
$SG4294944705 DB 'd', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'F', 00H, 'a', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H
$SG4294944708 DB 'b', 00H, 'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4294944707 DB 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'T', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294944706 DB 'f', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'I', 00H, 'n', 00H
	DB	'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294944704 DB 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG4294944703 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294944701 DB '\', 00H, 00H, 00H
$SG4294944702 DB 'A', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'F', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 's', 00H, ' ', 00H, '('
	DB	00H, '*', 00H, '.', 00H, 'j', 00H, 'p', 00H, 'g', 00H, ';', 00H
	DB	'*', 00H, '.', 00H, 'p', 00H, 'n', 00H, 'g', 00H, ';', 00H, '*'
	DB	00H, '.', 00H, 'g', 00H, 'i', 00H, 'f', 00H, ';', 00H, '*', 00H
	DB	'.', 00H, 'b', 00H, 'm', 00H, 'p', 00H, ';', 00H, '*', 00H, '.'
	DB	00H, 'd', 00H, 'd', 00H, 's', 00H, ')', 00H, 00H, 00H, '*', 00H
	DB	'.', 00H, 'b', 00H, 'm', 00H, 'p', 00H, ';', 00H, '*', 00H, '.'
	DB	00H, 'd', 00H, 'd', 00H, 's', 00H, ';', 00H, '*', 00H, '.', 00H
	DB	'j', 00H, 'p', 00H, 'g', 00H, ';', 00H, '*', 00H, '.', 00H, 'p'
	DB	00H, 'n', 00H, 'g', 00H, ';', 00H, '*', 00H, '.', 00H, 'g', 00H
	DB	'i', 00H, 'f', 00H, 00H, 00H, 00H, 00H
	ORG $+2
$SG4294944700 DB 'B', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 's', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294944699 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294944698 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'E'
	DB	00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294944697 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ':', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, ' ', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 't'
	DB	00H, 'm', 00H, 'a', 00H, 'p', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, 00H, 00H
$SG4294944696 DB 'b', 00H, 'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H
	DB	00H, 00H
	ORG $+2
$SG4294944695 DB 't', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'T', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294944694 DB 'f', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'I', 00H, 'n', 00H
	DB	'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294944693 DB 'd', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'F', 00H, 'a', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H
$SG4294944692 DB 'r', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'm', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG4294944691 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294944689 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294944690 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H
	DB	's', 00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ':', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'e'
	DB	00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
$SG4294944688 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294944687 DB 'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG4294944686 DB 'c', 00H, 'y', 00H, 00H, 00H
	ORG $+2
_fadeTime DD	03fc00000r			; 1.5
PUBLIC	?Add@?$List@PAVBitmapImage@@@@QAEIABQAVBitmapImage@@@Z ; List<BitmapImage *>::Add
PUBLIC	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
PUBLIC	??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z ; List<BitmapImage *>::operator<<
PUBLIC	?Clear@?$List@PAVBitmapImage@@@@QAEXXZ		; List<BitmapImage *>::Clear
PUBLIC	?Num@?$List@PAVBitmapImage@@@@QBEIXZ		; List<BitmapImage *>::Num
PUBLIC	??1?$List@PAVBitmapImage@@@@QAE@XZ		; List<BitmapImage *>::~List<BitmapImage *>
PUBLIC	??0?$List@PAVBitmapImage@@@@QAE@XZ		; List<BitmapImage *>::List<BitmapImage *>
PUBLIC	?ConfigureBitmapTransitionSource@@YG_NPAVXElement@@_N@Z ; ConfigureBitmapTransitionSource
PUBLIC	?ConfigureBitmapTransitionProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureBitmapTransitionProc
PUBLIC	?CreateBitmapTransitionSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateBitmapTransitionSource
PUBLIC	??_GBitmapImage@@QAEPAXI@Z			; BitmapImage::`scalar deleting destructor'
PUBLIC	??_GBitmapTransitionSource@@UAEPAXI@Z		; BitmapTransitionSource::`scalar deleting destructor'
PUBLIC	?GetSize@BitmapTransitionSource@@UBE?AUVect2@@XZ ; BitmapTransitionSource::GetSize
PUBLIC	?GetFirstBitmapSize@BitmapTransitionSource@@SA?AUVect2@@AAVStringList@@@Z ; BitmapTransitionSource::GetFirstBitmapSize
PUBLIC	?UpdateSettings@BitmapTransitionSource@@UAEXXZ	; BitmapTransitionSource::UpdateSettings
PUBLIC	?Render@BitmapTransitionSource@@UAEXABUVect2@@0@Z ; BitmapTransitionSource::Render
PUBLIC	?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ; BitmapTransitionSource::DrawBitmap
PUBLIC	?Tick@BitmapTransitionSource@@UAEXM@Z		; BitmapTransitionSource::Tick
PUBLIC	??1BitmapTransitionSource@@UAE@XZ		; BitmapTransitionSource::~BitmapTransitionSource
PUBLIC	??0BitmapTransitionSource@@QAE@PAVXElement@@@Z	; BitmapTransitionSource::BitmapTransitionSource
PUBLIC	?lrand@BitmapTransitionSource@@AAEHH@Z		; BitmapTransitionSource::lrand
PUBLIC	?CloseDouble@@YAHNNN@Z				; CloseDouble
PUBLIC	?round@@YAMM@Z					; round
EXTRN	??_EBitmapTransitionSource@@UAEPAXI@Z:PROC	; BitmapTransitionSource::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\math.h
;	COMDAT ?round@@YAMM@Z
_TEXT	SEGMENT
__X$ = 8						; size = 4
?round@@YAMM@Z PROC					; round, COMDAT

; 1126 :         {return (roundf(_X)); }

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR __X$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	_roundf
	add	esp, 4
	pop	ebp
	ret	0
?round@@YAMM@Z ENDP					; round
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\time.inl
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp

; 133  :     return _time64(_Time);

	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4

; 134  : }

	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\obsapi.h
;	COMDAT ?CloseDouble@@YAHNNN@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_f1$ = 8						; size = 8
_f2$ = 16						; size = 8
_precision$ = 24					; size = 8
?CloseDouble@@YAHNNN@Z PROC				; CloseDouble, COMDAT

; 73   : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 74   :     return fabs(f1-f2) <= precision;

	movsd	xmm0, QWORD PTR _f1$[ebp]
	subsd	xmm0, QWORD PTR _f2$[ebp]
	andpd	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	movsd	xmm1, QWORD PTR _precision$[ebp]
	comisd	xmm1, xmm0
	jb	SHORT $LN3@CloseDoubl
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@CloseDoubl
$LN3@CloseDoubl:
	mov	DWORD PTR tv68[ebp], 0
$LN4@CloseDoubl:
	mov	eax, DWORD PTR tv68[ebp]

; 75   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CloseDouble@@YAHNNN@Z ENDP				; CloseDouble
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?lrand@BitmapTransitionSource@@AAEHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_limit$ = 8						; size = 4
?lrand@BitmapTransitionSource@@AAEHH@Z PROC		; BitmapTransitionSource::lrand, COMDAT
; _this$ = ecx

; 55   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   :         // return a random number in the interval [0 , limit)
; 57   :         return int( ( (double)rand() / (RAND_MAX + 1) ) * limit );

	call	_rand
	cvtsi2sd xmm0, eax
	divsd	xmm0, QWORD PTR __real@40e0000000000000
	cvtsi2sd xmm1, DWORD PTR _limit$[ebp]
	mulsd	xmm0, xmm1
	cvttsd2si eax, xmm0

; 58   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?lrand@BitmapTransitionSource@@AAEHH@Z ENDP		; BitmapTransitionSource::lrand
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ??0BitmapTransitionSource@@QAE@PAVXElement@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??0BitmapTransitionSource@@QAE@PAVXElement@@@Z PROC	; BitmapTransitionSource::BitmapTransitionSource, COMDAT
; _this$ = ecx

; 61   :     BitmapTransitionSource(XElement *data)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ImageSource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BitmapTransitionSource@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$List@PAVBitmapImage@@@@QAE@XZ	; List<BitmapImage *>::List<BitmapImage *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0Vect2@@QAE@XZ

; 62   :     {
; 63   :         this->data = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+32], edx

; 64   :         UpdateSettings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSettings@BitmapTransitionSource@@UAEXXZ ; BitmapTransitionSource::UpdateSettings

; 65   :         Log(TEXT("Using Slide Show"));

	push	OFFSET ??_C@_1CC@PJFPFLCG@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAS?$AAl?$AAi?$AAd?$AAe?$AA?5?$AAS?$AAh?$AAo?$AAw?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 66   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BitmapTransitionSource@@QAE@PAVXElement@@@Z ENDP	; BitmapTransitionSource::BitmapTransitionSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ??1BitmapTransitionSource@@UAE@XZ
_TEXT	SEGMENT
tv89 = -20						; size = 4
$T1 = -16						; size = 4
$T2 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1BitmapTransitionSource@@UAE@XZ PROC			; BitmapTransitionSource::~BitmapTransitionSource, COMDAT
; _this$ = ecx

; 69   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BitmapTransitionSource@@6B@

; 70   :         for(UINT i=0; i<bitmapImages.Num(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN3@BitmapTran
$LN2@BitmapTran:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN3@BitmapTran:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	DWORD PTR _i$3[ebp], eax
	jae	SHORT $LN4@BitmapTran

; 71   :             delete bitmapImages[i];

	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN6@BitmapTran
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GBitmapImage@@QAEPAXI@Z
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN7@BitmapTran
$LN6@BitmapTran:
	mov	DWORD PTR tv89[ebp], 0
$LN7@BitmapTran:
	jmp	SHORT $LN2@BitmapTran
$LN4@BitmapTran:

; 72   :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$List@PAVBitmapImage@@@@QAE@XZ	; List<BitmapImage *>::~List<BitmapImage *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ImageSource@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1BitmapTransitionSource@@UAE@XZ ENDP			; BitmapTransitionSource::~BitmapTransitionSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?Tick@BitmapTransitionSource@@UAEXM@Z
_TEXT	SEGMENT
tv156 = -20						; size = 4
tv141 = -16						; size = 4
tv132 = -12						; size = 4
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_fSeconds$ = 8						; size = 4
?Tick@BitmapTransitionSource@@UAEXM@Z PROC		; BitmapTransitionSource::Tick, COMDAT
; _this$ = ecx

; 75   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 76   :         for(UINT i=0; i<bitmapImages.Num(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN13@Tick
$LN12@Tick:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN13@Tick:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN11@Tick

; 77   :             bitmapImages[i]->Tick(fSeconds);

	push	ecx
	movss	xmm0, DWORD PTR _fSeconds$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?Tick@BitmapImage@@QAEXM@Z		; BitmapImage::Tick
	jmp	SHORT $LN12@Tick
$LN11@Tick:

; 78   : 
; 79   :         if(bTransitioning && bitmapImages.Num() > 1)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+60]
	test	eax, eax
	je	$LN3@Tick
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	eax, 1
	jbe	$LN3@Tick

; 80   :         {
; 81   :             if(bDisableFading)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+62]
	test	edx, edx
	je	SHORT $LN9@Tick

; 82   :                 curFadeValue = fadeTime;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fadeTime
	movss	DWORD PTR [eax+52], xmm0

; 83   :             else

	jmp	SHORT $LN8@Tick
$LN9@Tick:

; 84   :                 curFadeValue += fSeconds;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+52]
	addss	xmm0, DWORD PTR _fSeconds$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+52], xmm0
$LN8@Tick:

; 85   : 
; 86   :             if(curFadeValue >= fadeTime)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	comiss	xmm0, DWORD PTR _fadeTime
	jb	$LN3@Tick

; 87   :             {
; 88   :                 curFadeValue = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+52], xmm0

; 89   :                 bTransitioning = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+60], 0

; 90   :                 
; 91   :                 if(bRandomize)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	je	SHORT $LN6@Tick

; 92   :                 {
; 93   :                     curTexture = nextTexture;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+40], ecx
$LN5@Tick:

; 94   :                     while((nextTexture = lrand(bitmapImages.Num())) == curTexture);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lrand@BitmapTransitionSource@@AAEHH@Z	; BitmapTransitionSource::lrand
	mov	DWORD PTR tv132[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv132[ebp]
	mov	DWORD PTR [edx+44], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv132[ebp]
	cmp	edx, DWORD PTR [ecx+40]
	jne	SHORT $LN4@Tick
	jmp	SHORT $LN5@Tick
$LN4@Tick:

; 95   :                 }
; 96   :                 else

	jmp	SHORT $LN3@Tick
$LN6@Tick:

; 97   :                 {
; 98   :                     if(++curTexture == bitmapImages.Num())

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	DWORD PTR tv141[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv141[ebp]
	mov	DWORD PTR [edx+40], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	DWORD PTR tv141[ebp], eax
	jne	SHORT $LN2@Tick

; 99   :                         curTexture = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+40], 0
$LN2@Tick:

; 100  :                     
; 101  :                     nextTexture = (curTexture == bitmapImages.Num()-1) ? 0 : curTexture+1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	sub	eax, 1
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+40], eax
	jne	SHORT $LN16@Tick
	mov	DWORD PTR tv156[ebp], 0
	jmp	SHORT $LN17@Tick
$LN16@Tick:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	add	ecx, 1
	mov	DWORD PTR tv156[ebp], ecx
$LN17@Tick:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv156[ebp]
	mov	DWORD PTR [edx+44], eax
$LN3@Tick:

; 102  :                 }
; 103  :             }
; 104  :         }
; 105  : 
; 106  :         curTransitionTime += fSeconds;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+48]
	addss	xmm0, DWORD PTR _fSeconds$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+48], xmm0

; 107  :         if (!bTransitioning && curTransitionTime >= transitionTime)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	jne	SHORT $LN1@Tick
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+48]
	comiss	xmm0, DWORD PTR [eax+36]
	jb	SHORT $LN1@Tick

; 108  :         {
; 109  :             curTransitionTime = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+48], xmm0

; 110  : 
; 111  :             curFadeValue = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+52], xmm0

; 112  :             bTransitioning = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 1
$LN1@Tick:

; 113  :         }
; 114  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Tick@BitmapTransitionSource@@UAEXM@Z ENDP		; BitmapTransitionSource::Tick
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z
_TEXT	SEGMENT
$T1 = -88						; size = 8
$T2 = -80						; size = 8
$T3 = -72						; size = 8
$T4 = -64						; size = 8
$T5 = -56						; size = 8
_itemSize$ = -48					; size = 8
_lr$ = -40						; size = 8
_sourceAspect$ = -32					; size = 8
_size$ = -24						; size = 8
_pos$ = -16						; size = 8
_curAlpha$ = -8						; size = 4
_this$ = -4						; size = 4
_texID$ = 8						; size = 4
_alpha$ = 12						; size = 4
_startPos$ = 16						; size = 4
_startSize$ = 20					; size = 4
?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z PROC ; BitmapTransitionSource::DrawBitmap, COMDAT
; _this$ = ecx

; 117  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	mov	DWORD PTR _this$[ebp], ecx

; 118  :         DWORD curAlpha = DWORD(alpha*255.0f);

	movss	xmm0, DWORD PTR _alpha$[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	call	__ftoui3
	mov	DWORD PTR _curAlpha$[ebp], eax

; 119  : 
; 120  :         Vect2 pos = Vect2(0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 121  :         Vect2 size = fullSize;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _size$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@ABU0@@Z

; 122  : 
; 123  :         Vect2 itemSize = bitmapImages[texID]->GetSize();

	lea	ecx, DWORD PTR _itemSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetSize@BitmapImage@@QBE?AUVect2@@XZ	; BitmapImage::GetSize

; 124  : 
; 125  :         double sourceAspect = double(itemSize.x)/double(itemSize.y);

	cvtss2sd xmm0, DWORD PTR _itemSize$[ebp]
	cvtss2sd xmm1, DWORD PTR _itemSize$[ebp+4]
	divsd	xmm0, xmm1
	movsd	QWORD PTR _sourceAspect$[ebp], xmm0

; 126  :         if(!CloseDouble(baseAspect, sourceAspect))

	sub	esp, 8
	movsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR [esp], xmm0
	sub	esp, 8
	movsd	xmm0, QWORD PTR _sourceAspect$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	sub	esp, 8
	movsd	xmm0, QWORD PTR [eax+24]
	movsd	QWORD PTR [esp], xmm0
	call	?CloseDouble@@YAHNNN@Z			; CloseDouble
	add	esp, 24					; 00000018H
	test	eax, eax
	jne	$LN3@DrawBitmap

; 127  :         {
; 128  :             if(baseAspect < sourceAspect)

	mov	ecx, DWORD PTR _this$[ebp]
	movsd	xmm0, QWORD PTR _sourceAspect$[ebp]
	comisd	xmm0, QWORD PTR [ecx+24]
	jbe	SHORT $LN2@DrawBitmap

; 129  :                 size.y = float(double(size.x) / sourceAspect);

	cvtss2sd xmm0, DWORD PTR _size$[ebp]
	divsd	xmm0, QWORD PTR _sourceAspect$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _size$[ebp+4], xmm0

; 130  :             else

	jmp	SHORT $LN1@DrawBitmap
$LN2@DrawBitmap:

; 131  :                 size.x = float(double(size.y) * sourceAspect);

	cvtss2sd xmm0, DWORD PTR _size$[ebp+4]
	mulsd	xmm0, QWORD PTR _sourceAspect$[ebp]
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _size$[ebp], xmm0
$LN1@DrawBitmap:

; 132  : 
; 133  :             pos = (fullSize-size)*0.5f;

	push	ecx
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [esp], xmm0
	lea	edx, DWORD PTR $T5[ebp]
	push	edx
	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??GVect2@@QBE?AU0@ABU0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??DVect2@@QBE?AU0@M@Z
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??4Vect2@@QAEAAU0@ABU0@@Z

; 134  : 
; 135  :             pos.x = (float)round(pos.x);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?round@@YAMM@Z				; round
	add	esp, 4
	fstp	DWORD PTR _pos$[ebp]

; 136  :             pos.y = (float)round(pos.y);

	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?round@@YAMM@Z				; round
	add	esp, 4
	fstp	DWORD PTR _pos$[ebp+4]

; 137  : 
; 138  :             size.x = (float)round(size.x);

	push	ecx
	movss	xmm0, DWORD PTR _size$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	?round@@YAMM@Z				; round
	add	esp, 4
	fstp	DWORD PTR _size$[ebp]

; 139  :             size.y = (float)round(size.y);

	push	ecx
	movss	xmm0, DWORD PTR _size$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	call	?round@@YAMM@Z				; round
	add	esp, 4
	fstp	DWORD PTR _size$[ebp+4]
$LN3@DrawBitmap:

; 140  :         }
; 141  : 
; 142  :         pos /= fullSize;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??_0Vect2@@QAEAAU0@ABU0@@Z

; 143  :         pos *= startSize;

	mov	eax, DWORD PTR _startSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??XVect2@@QAEAAU0@ABU0@@Z

; 144  :         pos += startPos;

	mov	ecx, DWORD PTR _startPos$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??YVect2@@QAEAAU0@ABU0@@Z

; 145  :         Vect2 lr;

	lea	ecx, DWORD PTR _lr$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@XZ

; 146  :         lr = pos + (size/fullSize*startSize);

	mov	edx, DWORD PTR _startSize$[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	lea	ecx, DWORD PTR _size$[ebp]
	call	DWORD PTR __imp_??KVect2@@QBE?AU0@ABU0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??DVect2@@QBE?AU0@ABU0@@Z
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _pos$[ebp]
	call	DWORD PTR __imp_??HVect2@@QBE?AU0@ABU0@@Z
	push	eax
	lea	ecx, DWORD PTR _lr$[ebp]
	call	DWORD PTR __imp_??4Vect2@@QAEAAU0@ABU0@@Z

; 147  : 
; 148  :         DrawSprite(bitmapImages[texID]->GetTexture(), (curAlpha<<24) | 0xFFFFFF, pos.x, pos.y, lr.x, lr.y);

	push	ecx
	movss	xmm0, DWORD PTR _lr$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lr$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _pos$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _curAlpha$[ebp]
	shl	ecx, 24					; 00000018H
	or	ecx, 16777215				; 00ffffffH
	push	ecx
	mov	edx, DWORD PTR _texID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
	mov	ecx, DWORD PTR [eax]
	call	?GetTexture@BitmapImage@@QBEPAVTexture@@XZ ; BitmapImage::GetTexture
	push	eax
	call	?DrawSprite@@YAXPAVTexture@@KMMMM@Z	; DrawSprite
	add	esp, 24					; 00000018H

; 149  :     }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ENDP ; BitmapTransitionSource::DrawBitmap
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?Render@BitmapTransitionSource@@UAEXABUVect2@@0@Z
_TEXT	SEGMENT
tv157 = -28						; size = 8
_curAlpha$1 = -20					; size = 4
tv85 = -16						; size = 4
tv153 = -12						; size = 4
_fOpacity$2 = -8					; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_size$ = 12						; size = 4
?Render@BitmapTransitionSource@@UAEXABUVect2@@0@Z PROC	; BitmapTransitionSource::Render, COMDAT
; _this$ = ecx

; 152  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 153  :         if(bitmapImages.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	test	eax, eax
	je	$LN1@Render

; 154  :         {
; 155  :             float fOpacity = (float)opacity / 100.0f;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR tv153[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv153[ebp]
	mov	edx, DWORD PTR tv153[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv157[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv157[ebp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR _fOpacity$2[ebp], xmm0

; 156  : 
; 157  :             if(bTransitioning && bitmapImages.Num() > 1)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	$LN4@Render
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	eax, 1
	jbe	$LN4@Render

; 158  :             {
; 159  :                 float curAlpha = MIN(curFadeValue/fadeTime, 1.0f);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+52]
	divss	xmm0, DWORD PTR _fadeTime
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jbe	SHORT $LN8@Render
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+52]
	divss	xmm0, DWORD PTR _fadeTime
	movss	DWORD PTR tv85[ebp], xmm0
	jmp	SHORT $LN9@Render
$LN8@Render:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv85[ebp], xmm0
$LN9@Render:
	movss	xmm0, DWORD PTR tv85[ebp]
	movss	DWORD PTR _curAlpha$1[ebp], xmm0

; 160  :                 if(bFadeInOnly)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+61]
	test	edx, edx
	je	SHORT $LN3@Render

; 161  :                     DrawBitmap(curTexture, fOpacity, pos, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fOpacity$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ; BitmapTransitionSource::DrawBitmap

; 162  :                 else

	jmp	SHORT $LN2@Render
$LN3@Render:

; 163  :                     DrawBitmap(curTexture, fOpacity * (1.0f - curAlpha), pos, size);

	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR _curAlpha$1[ebp]
	mulss	xmm0, DWORD PTR _fOpacity$2[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ; BitmapTransitionSource::DrawBitmap
$LN2@Render:

; 164  : 
; 165  :                 DrawBitmap(nextTexture, fOpacity * curAlpha, pos, size);

	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	movss	xmm0, DWORD PTR _fOpacity$2[ebp]
	mulss	xmm0, DWORD PTR _curAlpha$1[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+44]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ; BitmapTransitionSource::DrawBitmap

; 166  :             }
; 167  :             else

	jmp	SHORT $LN1@Render
$LN4@Render:

; 168  :                 DrawBitmap(curTexture, fOpacity, pos, size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	ecx
	movss	xmm0, DWORD PTR _fOpacity$2[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawBitmap@BitmapTransitionSource@@QAEXIMABUVect2@@0@Z ; BitmapTransitionSource::DrawBitmap
$LN1@Render:

; 169  :         }
; 170  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?Render@BitmapTransitionSource@@UAEXABUVect2@@0@Z ENDP	; BitmapTransitionSource::Render
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?UpdateSettings@BitmapTransitionSource@@UAEXXZ
_TEXT	SEGMENT
$T1 = -680						; size = 8
$T2 = -672						; size = 8
$T3 = -664						; size = 8
$T4 = -656						; size = 8
_extStr$5 = -648					; size = 8
_fullPath$6 = -640					; size = 8
$T7 = -632						; size = 4
_searchPath$8 = -628					; size = 8
tv77 = -620						; size = 4
_bitmapList$ = -616					; size = 8
$T9 = -608						; size = 4
tv206 = -604						; size = 4
tv252 = -600						; size = 4
tv374 = -596						; size = 4
$T10 = -592						; size = 4
tv358 = -588						; size = 4
$T11 = -584						; size = 4
tv334 = -580						; size = 4
tv325 = -576						; size = 4
tv316 = -572						; size = 4
_hFind$12 = -568					; size = 4
_i$13 = -564						; size = 4
_i$14 = -560						; size = 4
_ext$15 = -556						; size = 4
_bitmapImage$16 = -552					; size = 4
_bitmapImage$17 = -548					; size = 4
_strBitmap$18 = -544					; size = 4
_bFirst$ = -537						; size = 1
_this$ = -536						; size = 4
_fd$19 = -532						; size = 528
__$ArrayPad$ = -4					; size = 4
?UpdateSettings@BitmapTransitionSource@@UAEXXZ PROC	; BitmapTransitionSource::UpdateSettings, COMDAT
; _this$ = ecx

; 173  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 680				; 000002a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 174  :         for(UINT i=0; i<bitmapImages.Num(); i++)

	mov	DWORD PTR _i$14[ebp], 0
	jmp	SHORT $LN27@UpdateSett
$LN26@UpdateSett:
	mov	eax, DWORD PTR _i$14[ebp]
	add	eax, 1
	mov	DWORD PTR _i$14[ebp], eax
$LN27@UpdateSett:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	DWORD PTR _i$14[ebp], eax
	jae	SHORT $LN25@UpdateSett

; 175  :             delete bitmapImages[i];

	mov	ecx, DWORD PTR _i$14[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ; List<BitmapImage *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T10[ebp], eax
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN30@UpdateSett
	push	1
	mov	ecx, DWORD PTR $T10[ebp]
	call	??_GBitmapImage@@QAEPAXI@Z
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN31@UpdateSett
$LN30@UpdateSett:
	mov	DWORD PTR tv77[ebp], 0
$LN31@UpdateSett:
	jmp	SHORT $LN26@UpdateSett
$LN25@UpdateSett:

; 176  :         bitmapImages.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Clear@?$List@PAVBitmapImage@@@@QAEXXZ	; List<BitmapImage *>::Clear

; 177  : 
; 178  :         //------------------------------------
; 179  : 
; 180  :         bool bFirst = true;

	mov	BYTE PTR _bFirst$[ebp], 1

; 181  : 
; 182  :         StringList bitmapList;

	lea	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ

; 183  :         data->GetStringList(TEXT("bitmap"), bitmapList);

	lea	ecx, DWORD PTR _bitmapList$[ebp]
	push	ecx
	push	OFFSET ??_C@_1O@OKNHHHMO@?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	call	DWORD PTR __imp_?GetStringList@XElement@@QBEXPB_WAAVStringList@@@Z

; 184  :         for(UINT i=0; i<bitmapList.Num(); i++)

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN24@UpdateSett
$LN23@UpdateSett:
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
$LN24@UpdateSett:
	lea	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _i$13[ebp], eax
	jae	$LN22@UpdateSett

; 185  :         {
; 186  :             String &strBitmap = bitmapList[i];

	mov	ecx, DWORD PTR _i$13[ebp]
	push	ecx
	lea	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	DWORD PTR _strBitmap$18[ebp], eax

; 187  :             if(strBitmap.IsEmpty())

	mov	ecx, DWORD PTR _strBitmap$18[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN21@UpdateSett

; 188  :             {
; 189  :                 AppWarning(TEXT("BitmapTransitionSource::UpdateSettings: Empty path"));

	push	OFFSET ??_C@_1GG@MDAOKLJD@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAS?$AAe@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 190  :                 continue;

	jmp	SHORT $LN23@UpdateSett
$LN21@UpdateSett:

; 191  :             }
; 192  : 
; 193  :             if (OSFileIsDirectory(strBitmap))

	mov	ecx, DWORD PTR _strBitmap$18[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileIsDirectory@@YG_NPB_W@Z
	movzx	edx, al
	test	edx, edx
	je	$LN20@UpdateSett

; 194  :             {
; 195  :                 OSFindData fd;
; 196  : 
; 197  :                 String searchPath = strBitmap;

	mov	eax, DWORD PTR _strBitmap$18[ebp]
	push	eax
	lea	ecx, DWORD PTR _searchPath$8[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z

; 198  :                 searchPath.AppendString(TEXT("\\*"));

	push	0
	push	OFFSET ??_C@_15PKPONJIK@?$AA?2?$AA?$CK?$AA?$AA@
	lea	ecx, DWORD PTR _searchPath$8[ebp]
	call	DWORD PTR __imp_?AppendString@String@@QAEAAV1@PB_WI@Z

; 199  : 
; 200  :                 HANDLE hFind = OSFindFirstFile(searchPath, fd);

	lea	ecx, DWORD PTR _fd$19[ebp]
	push	ecx
	lea	ecx, DWORD PTR _searchPath$8[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z
	mov	DWORD PTR _hFind$12[ebp], eax

; 201  : 
; 202  :                 if (hFind)

	cmp	DWORD PTR _hFind$12[ebp], 0
	je	$LN19@UpdateSett
$LN18@UpdateSett:

; 203  :                 {
; 204  :                     do
; 205  :                     {
; 206  :                         if (fd.bDirectory)

	cmp	DWORD PTR _fd$19[ebp+520], 0
	je	SHORT $LN15@UpdateSett

; 207  :                             continue;

	jmp	$LN17@UpdateSett
$LN15@UpdateSett:

; 208  : 
; 209  :                         String fullPath = strBitmap + "\\" + fd.fileName;

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	lea	edx, DWORD PTR _fd$19[ebp]
	push	edx
	lea	eax, DWORD PTR _fullPath$6[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR _strBitmap$18[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 210  : 
; 211  :                         String extStr = GetPathExtension(fullPath.Array());

	lea	ecx, DWORD PTR _fullPath$6[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	lea	eax, DWORD PTR _extStr$5[ebp]
	push	eax
	call	DWORD PTR __imp_?GetPathExtension@@YA?AVString@@PB_W@Z
	add	esp, 8

; 212  :                         CTSTR ext = extStr.Array();

	lea	ecx, DWORD PTR _extStr$5[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	DWORD PTR _ext$15[ebp], eax

; 213  :                         if (!scmp(ext, TEXT("jpg")) || !scmp(ext, TEXT("png")) || !scmp(ext, TEXT("gif")) || !scmp(ext, TEXT("bmp")) || !scmp(ext, TEXT("dds")))

	push	OFFSET ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
	mov	ecx, DWORD PTR _ext$15[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN13@UpdateSett
	push	OFFSET ??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@
	mov	edx, DWORD PTR _ext$15[ebp]
	push	edx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN13@UpdateSett
	push	OFFSET ??_C@_17HBEFHPHJ@?$AAg?$AAi?$AAf?$AA?$AA@
	mov	eax, DWORD PTR _ext$15[ebp]
	push	eax
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN13@UpdateSett
	push	OFFSET ??_C@_17NHEGDLEI@?$AAb?$AAm?$AAp?$AA?$AA@
	mov	ecx, DWORD PTR _ext$15[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN13@UpdateSett
	push	OFFSET ??_C@_17CEJDMMOJ@?$AAd?$AAd?$AAs?$AA?$AA@
	mov	edx, DWORD PTR _ext$15[ebp]
	push	edx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	jne	$LN14@UpdateSett
$LN13@UpdateSett:

; 214  :                         {
; 215  :                             BitmapImage *bitmapImage = new BitmapImage;

	push	41220					; 0000a104H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T9[ebp], eax
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN32@UpdateSett
	mov	ecx, DWORD PTR $T9[ebp]
	call	??0BitmapImage@@QAE@XZ			; BitmapImage::BitmapImage
	mov	DWORD PTR tv206[ebp], eax
	jmp	SHORT $LN33@UpdateSett
$LN32@UpdateSett:
	mov	DWORD PTR tv206[ebp], 0
$LN33@UpdateSett:
	mov	eax, DWORD PTR tv206[ebp]
	mov	DWORD PTR _bitmapImage$16[ebp], eax

; 216  :                             bitmapImage->SetPath(fullPath);

	sub	esp, 8
	mov	ecx, esp
	lea	edx, DWORD PTR _fullPath$6[ebp]
	push	edx
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _bitmapImage$16[ebp]
	call	?SetPath@BitmapImage@@QAEXVString@@@Z	; BitmapImage::SetPath

; 217  :                             bitmapImage->EnableFileMonitor(false);

	push	0
	mov	ecx, DWORD PTR _bitmapImage$16[ebp]
	call	?EnableFileMonitor@BitmapImage@@QAEX_N@Z ; BitmapImage::EnableFileMonitor

; 218  :                             bitmapImage->Init();

	mov	ecx, DWORD PTR _bitmapImage$16[ebp]
	call	?Init@BitmapImage@@QAEXXZ		; BitmapImage::Init

; 219  : 
; 220  :                             if (bFirst)

	movzx	eax, BYTE PTR _bFirst$[ebp]
	test	eax, eax
	je	SHORT $LN12@UpdateSett

; 221  :                             {
; 222  :                                 fullSize = bitmapImage->GetSize();

	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bitmapImage$16[ebp]
	call	?GetSize@BitmapImage@@QBE?AUVect2@@XZ	; BitmapImage::GetSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4Vect2@@QAEAAU0@ABU0@@Z

; 223  :                                 baseAspect = double(fullSize.x) / double(fullSize.y);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+16]
	divsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0

; 224  :                                 bFirst = false;

	mov	BYTE PTR _bFirst$[ebp], 0
$LN12@UpdateSett:

; 225  :                             }
; 226  : 
; 227  :                             bitmapImages << bitmapImage;

	lea	edx, DWORD PTR _bitmapImage$16[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z ; List<BitmapImage *>::operator<<
$LN14@UpdateSett:

; 228  :                         }
; 229  :                     } while (OSFindNextFile(hFind, fd));

	lea	ecx, DWORD PTR _extStr$5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _fullPath$6[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN17@UpdateSett:
	lea	eax, DWORD PTR _fd$19[ebp]
	push	eax
	mov	ecx, DWORD PTR _hFind$12[ebp]
	push	ecx
	call	DWORD PTR __imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z
	test	eax, eax
	jne	$LN18@UpdateSett

; 230  : 
; 231  :                     OSFindClose(hFind);

	mov	edx, DWORD PTR _hFind$12[ebp]
	push	edx
	call	DWORD PTR __imp_?OSFindClose@@YGXPAX@Z
$LN19@UpdateSett:

; 232  :                 }
; 233  :             }

	lea	ecx, DWORD PTR _searchPath$8[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 234  :             else

	jmp	$LN11@UpdateSett
$LN20@UpdateSett:

; 235  :             {
; 236  :                 BitmapImage *bitmapImage = new BitmapImage;

	push	41220					; 0000a104H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN34@UpdateSett
	mov	ecx, DWORD PTR $T11[ebp]
	call	??0BitmapImage@@QAE@XZ			; BitmapImage::BitmapImage
	mov	DWORD PTR tv252[ebp], eax
	jmp	SHORT $LN35@UpdateSett
$LN34@UpdateSett:
	mov	DWORD PTR tv252[ebp], 0
$LN35@UpdateSett:
	mov	eax, DWORD PTR tv252[ebp]
	mov	DWORD PTR _bitmapImage$17[ebp], eax

; 237  :                 bitmapImage->SetPath(strBitmap);

	sub	esp, 8
	mov	ecx, esp
	mov	edx, DWORD PTR _strBitmap$18[ebp]
	push	edx
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	mov	ecx, DWORD PTR _bitmapImage$17[ebp]
	call	?SetPath@BitmapImage@@QAEXVString@@@Z	; BitmapImage::SetPath

; 238  :                 bitmapImage->EnableFileMonitor(false);

	push	0
	mov	ecx, DWORD PTR _bitmapImage$17[ebp]
	call	?EnableFileMonitor@BitmapImage@@QAEX_N@Z ; BitmapImage::EnableFileMonitor

; 239  :                 bitmapImage->Init();

	mov	ecx, DWORD PTR _bitmapImage$17[ebp]
	call	?Init@BitmapImage@@QAEXXZ		; BitmapImage::Init

; 240  : 
; 241  :                 if(bFirst)

	movzx	eax, BYTE PTR _bFirst$[ebp]
	test	eax, eax
	je	SHORT $LN10@UpdateSett

; 242  :                 {
; 243  :                     fullSize = bitmapImage->GetSize();

	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bitmapImage$17[ebp]
	call	?GetSize@BitmapImage@@QBE?AUVect2@@XZ	; BitmapImage::GetSize
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??4Vect2@@QAEAAU0@ABU0@@Z

; 244  :                     baseAspect = double(fullSize.x)/double(fullSize.y);

	mov	edx, DWORD PTR _this$[ebp]
	cvtss2sd xmm0, DWORD PTR [edx+12]
	mov	eax, DWORD PTR _this$[ebp]
	cvtss2sd xmm1, DWORD PTR [eax+16]
	divsd	xmm0, xmm1
	mov	ecx, DWORD PTR _this$[ebp]
	movsd	QWORD PTR [ecx+24], xmm0

; 245  :                     bFirst = false;

	mov	BYTE PTR _bFirst$[ebp], 0
$LN10@UpdateSett:

; 246  :                 }
; 247  : 
; 248  :                 bitmapImages << bitmapImage;

	lea	edx, DWORD PTR _bitmapImage$17[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z ; List<BitmapImage *>::operator<<
$LN11@UpdateSett:

; 249  :             }
; 250  :         }

	jmp	$LN23@UpdateSett
$LN22@UpdateSett:

; 251  : 
; 252  :         //------------------------------------
; 253  : 
; 254  :         transitionTime = data->GetFloat(TEXT("transitionTime"));

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_1BO@CNKOKCCO@?$AAt?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAT?$AAi?$AAm?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+36]

; 255  :         if(transitionTime < MIN_TRANSITION_TIME)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [edx+36]
	jbe	SHORT $LN9@UpdateSett

; 256  :             transitionTime = MIN_TRANSITION_TIME;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [eax+36], xmm0
	jmp	SHORT $LN7@UpdateSett
$LN9@UpdateSett:

; 257  :         else if(transitionTime > MAX_TRANSITION_TIME)

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+36]
	comiss	xmm0, DWORD PTR __real@44160000
	jbe	SHORT $LN7@UpdateSett

; 258  :             transitionTime = MAX_TRANSITION_TIME;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@44160000
	movss	DWORD PTR [edx+36], xmm0
$LN7@UpdateSett:

; 259  : 
; 260  : 
; 261  :         opacity = data->GetInt(TEXT("opacity"),100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 262  :         if(opacity > 100)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+56], 100			; 00000064H
	jbe	SHORT $LN6@UpdateSett

; 263  :              opacity = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], 100			; 00000064H
$LN6@UpdateSett:

; 264  :         //------------------------------------
; 265  : 
; 266  :         bFadeInOnly = data->GetInt(TEXT("fadeInOnly"), 1) != 0;

	push	1
	push	OFFSET ??_C@_1BG@GPLDFIDD@?$AAf?$AAa?$AAd?$AAe?$AAI?$AAn?$AAO?$AAn?$AAl?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN36@UpdateSett
	mov	DWORD PTR tv316[ebp], 1
	jmp	SHORT $LN37@UpdateSett
$LN36@UpdateSett:
	mov	DWORD PTR tv316[ebp], 0
$LN37@UpdateSett:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv316[ebp]
	mov	BYTE PTR [edx+61], al

; 267  :         bDisableFading = data->GetInt(TEXT("disableFading")) != 0;

	push	0
	push	OFFSET ??_C@_1BM@KFOOIGFF@?$AAd?$AAi?$AAs?$AAa?$AAb?$AAl?$AAe?$AAF?$AAa?$AAd?$AAi?$AAn?$AAg?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN38@UpdateSett
	mov	DWORD PTR tv325[ebp], 1
	jmp	SHORT $LN39@UpdateSett
$LN38@UpdateSett:
	mov	DWORD PTR tv325[ebp], 0
$LN39@UpdateSett:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv325[ebp]
	mov	BYTE PTR [edx+62], al

; 268  :         bRandomize = data->GetInt(TEXT("randomize")) != 0;

	push	0
	push	OFFSET ??_C@_1BE@GGDHKCNG@?$AAr?$AAa?$AAn?$AAd?$AAo?$AAm?$AAi?$AAz?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN40@UpdateSett
	mov	DWORD PTR tv334[ebp], 1
	jmp	SHORT $LN41@UpdateSett
$LN40@UpdateSett:
	mov	DWORD PTR tv334[ebp], 0
$LN41@UpdateSett:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv334[ebp]
	mov	BYTE PTR [edx+63], al

; 269  : 
; 270  :         //------------------------------------
; 271  : 
; 272  :         curTransitionTime = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+48], xmm0

; 273  :         curTexture = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0

; 274  : 
; 275  :         if(bRandomize)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+63]
	test	ecx, ecx
	je	$LN5@UpdateSett

; 276  :         {
; 277  :             srand( (unsigned)time( NULL ) );

	push	0
	call	_time
	add	esp, 4
	push	eax
	call	_srand
	add	esp, 4

; 278  :             if(bitmapImages.Num() > 1)

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	cmp	eax, 1
	jbe	SHORT $LN2@UpdateSett

; 279  :             {
; 280  :                 curTexture = lrand(bitmapImages.Num());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lrand@BitmapTransitionSource@@AAEHH@Z	; BitmapTransitionSource::lrand
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax
$LN3@UpdateSett:

; 281  :                 while((nextTexture = lrand(bitmapImages.Num())) == curTexture);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?lrand@BitmapTransitionSource@@AAEHH@Z	; BitmapTransitionSource::lrand
	mov	DWORD PTR tv358[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv358[ebp]
	mov	DWORD PTR [eax+44], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv358[ebp]
	cmp	eax, DWORD PTR [edx+40]
	jne	SHORT $LN2@UpdateSett
	jmp	SHORT $LN3@UpdateSett
$LN2@UpdateSett:

; 282  :             }
; 283  :         }
; 284  :         else

	jmp	SHORT $LN1@UpdateSett
$LN5@UpdateSett:

; 285  :             nextTexture = (curTexture == bitmapImages.Num()-1) ? 0 : curTexture+1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Num@?$List@PAVBitmapImage@@@@QBEIXZ	; List<BitmapImage *>::Num
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+40], eax
	jne	SHORT $LN42@UpdateSett
	mov	DWORD PTR tv374[ebp], 0
	jmp	SHORT $LN43@UpdateSett
$LN42@UpdateSett:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	add	eax, 1
	mov	DWORD PTR tv374[ebp], eax
$LN43@UpdateSett:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv374[ebp]
	mov	DWORD PTR [ecx+44], edx
$LN1@UpdateSett:

; 286  : 
; 287  :         bTransitioning = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 0

; 288  :         curFadeValue = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+52], xmm0

; 289  :     }

	lea	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSettings@BitmapTransitionSource@@UAEXXZ ENDP	; BitmapTransitionSource::UpdateSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?GetFirstBitmapSize@BitmapTransitionSource@@SA?AUVect2@@AAVStringList@@@Z
_TEXT	SEGMENT
tv260 = -656						; size = 8
$T1 = -648						; size = 8
tv251 = -640						; size = 8
$T2 = -632						; size = 8
_searchPath$3 = -624					; size = 8
_extStr$4 = -616					; size = 8
_fullPath$5 = -608					; size = 8
tv256 = -600						; size = 4
tv247 = -596						; size = 4
_firstBitmapFile$ = -592				; size = 8
_hFind$6 = -584						; size = 4
_i$7 = -580						; size = 4
_ext$8 = -576						; size = 4
_strBitmap$9 = -572					; size = 4
_fd$10 = -568						; size = 528
_ii$ = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_bitmapList$ = 12					; size = 4
?GetFirstBitmapSize@BitmapTransitionSource@@SA?AUVect2@@AAVStringList@@@Z PROC ; BitmapTransitionSource::GetFirstBitmapSize, COMDAT

; 292  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 293  :         String firstBitmapFile;

	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 294  : 
; 295  :         for (UINT i = 0; i<bitmapList.Num(); i++)

	mov	DWORD PTR _i$7[ebp], 0
	jmp	SHORT $LN15@GetFirstBi
$LN14@GetFirstBi:
	mov	eax, DWORD PTR _i$7[ebp]
	add	eax, 1
	mov	DWORD PTR _i$7[ebp], eax
$LN15@GetFirstBi:
	mov	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _i$7[ebp], eax
	jae	$LN13@GetFirstBi

; 296  :         {
; 297  :             String &strBitmap = bitmapList[i];

	mov	ecx, DWORD PTR _i$7[ebp]
	push	ecx
	mov	ecx, DWORD PTR _bitmapList$[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	DWORD PTR _strBitmap$9[ebp], eax

; 298  :             if (strBitmap.IsEmpty())

	mov	ecx, DWORD PTR _strBitmap$9[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN12@GetFirstBi

; 299  :             {
; 300  :                 AppWarning(TEXT("BitmapTransitionSource::GetFirstBitmapSize: Empty path"));

	push	OFFSET ??_C@_1GO@LOJBNFK@?$AAB?$AAi?$AAt?$AAm?$AAa?$AAp?$AAT?$AAr?$AAa?$AAn?$AAs?$AAi?$AAt?$AAi?$AAo?$AAn?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAF?$AAi?$AAr?$AAs?$AAt@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 301  :                 continue;

	jmp	SHORT $LN14@GetFirstBi
$LN12@GetFirstBi:

; 302  :             }
; 303  : 
; 304  :             if (OSFileIsDirectory(strBitmap))

	mov	ecx, DWORD PTR _strBitmap$9[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileIsDirectory@@YG_NPB_W@Z
	movzx	edx, al
	test	edx, edx
	je	$LN11@GetFirstBi

; 305  :             {
; 306  :                 OSFindData fd;
; 307  : 
; 308  :                 String searchPath = strBitmap;

	mov	eax, DWORD PTR _strBitmap$9[ebp]
	push	eax
	lea	ecx, DWORD PTR _searchPath$3[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z

; 309  :                 searchPath.AppendString(TEXT("\\*"));

	push	0
	push	OFFSET ??_C@_15PKPONJIK@?$AA?2?$AA?$CK?$AA?$AA@
	lea	ecx, DWORD PTR _searchPath$3[ebp]
	call	DWORD PTR __imp_?AppendString@String@@QAEAAV1@PB_WI@Z

; 310  : 
; 311  :                 HANDLE hFind = OSFindFirstFile(searchPath, fd);

	lea	ecx, DWORD PTR _fd$10[ebp]
	push	ecx
	lea	ecx, DWORD PTR _searchPath$3[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z
	mov	DWORD PTR _hFind$6[ebp], eax

; 312  : 
; 313  :                 if (hFind)

	cmp	DWORD PTR _hFind$6[ebp], 0
	je	$LN10@GetFirstBi
$LN9@GetFirstBi:

; 314  :                 {
; 315  :                     do
; 316  :                     {
; 317  :                         if (fd.bDirectory)

	cmp	DWORD PTR _fd$10[ebp+520], 0
	je	SHORT $LN6@GetFirstBi

; 318  :                             continue;

	jmp	$LN8@GetFirstBi
$LN6@GetFirstBi:

; 319  : 
; 320  :                         String fullPath = strBitmap + "\\" + fd.fileName;

	push	OFFSET ??_C@_01KICIPPFI@?2?$AA@
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z
	lea	edx, DWORD PTR _fd$10[ebp]
	push	edx
	lea	eax, DWORD PTR _fullPath$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	mov	ecx, DWORD PTR _strBitmap$9[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 321  : 
; 322  :                         String extStr = GetPathExtension(fullPath.Array());

	lea	ecx, DWORD PTR _fullPath$5[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	lea	eax, DWORD PTR _extStr$4[ebp]
	push	eax
	call	DWORD PTR __imp_?GetPathExtension@@YA?AVString@@PB_W@Z
	add	esp, 8

; 323  :                         CTSTR ext = extStr.Array();

	lea	ecx, DWORD PTR _extStr$4[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	DWORD PTR _ext$8[ebp], eax

; 324  :                         if (!scmp(ext, TEXT("jpg")) || !scmp(ext, TEXT("png")) || !scmp(ext, TEXT("gif")) || !scmp(ext, TEXT("bmp")) || !scmp(ext, TEXT("dds")))

	push	OFFSET ??_C@_17HGCFFOJO@?$AAj?$AAp?$AAg?$AA?$AA@
	mov	ecx, DWORD PTR _ext$8[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN4@GetFirstBi
	push	OFFSET ??_C@_17KCICBAJG@?$AAp?$AAn?$AAg?$AA?$AA@
	mov	edx, DWORD PTR _ext$8[ebp]
	push	edx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN4@GetFirstBi
	push	OFFSET ??_C@_17HBEFHPHJ@?$AAg?$AAi?$AAf?$AA?$AA@
	mov	eax, DWORD PTR _ext$8[ebp]
	push	eax
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN4@GetFirstBi
	push	OFFSET ??_C@_17NHEGDLEI@?$AAb?$AAm?$AAp?$AA?$AA@
	mov	ecx, DWORD PTR _ext$8[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	je	SHORT $LN4@GetFirstBi
	push	OFFSET ??_C@_17CEJDMMOJ@?$AAd?$AAd?$AAs?$AA?$AA@
	mov	edx, DWORD PTR _ext$8[ebp]
	push	edx
	call	DWORD PTR __imp_?scmp@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN5@GetFirstBi
$LN4@GetFirstBi:

; 325  :                         {
; 326  :                             firstBitmapFile = fullPath;

	lea	eax, DWORD PTR _fullPath$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z

; 327  :                             break;

	lea	ecx, DWORD PTR _extStr$4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _fullPath$5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN7@GetFirstBi
$LN5@GetFirstBi:

; 328  :                         }
; 329  :                     } while (OSFindNextFile(hFind, fd));

	lea	ecx, DWORD PTR _extStr$4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _fullPath$5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN8@GetFirstBi:
	lea	ecx, DWORD PTR _fd$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _hFind$6[ebp]
	push	edx
	call	DWORD PTR __imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z
	test	eax, eax
	jne	$LN9@GetFirstBi
$LN7@GetFirstBi:

; 330  : 
; 331  :                     OSFindClose(hFind);

	mov	eax, DWORD PTR _hFind$6[ebp]
	push	eax
	call	DWORD PTR __imp_?OSFindClose@@YGXPAX@Z
$LN10@GetFirstBi:

; 332  :                 }
; 333  :             }

	lea	ecx, DWORD PTR _searchPath$3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 334  :             else

	jmp	SHORT $LN3@GetFirstBi
$LN11@GetFirstBi:

; 335  :             {
; 336  :                 firstBitmapFile = strBitmap;

	mov	ecx, DWORD PTR _strBitmap$9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN3@GetFirstBi:

; 337  :             }
; 338  : 
; 339  :             if (!firstBitmapFile.IsEmpty())

	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	jne	SHORT $LN2@GetFirstBi

; 340  :                 break;

	jmp	SHORT $LN13@GetFirstBi
$LN2@GetFirstBi:

; 341  :         }

	jmp	$LN14@GetFirstBi
$LN13@GetFirstBi:

; 342  : 
; 343  :         D3DX10_IMAGE_INFO ii;
; 344  :         if (SUCCEEDED(D3DX10GetImageInfoFromFile(firstBitmapFile.Array(), NULL, &ii, NULL)))

	push	0
	lea	edx, DWORD PTR _ii$[ebp]
	push	edx
	push	0
	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__D3DX10GetImageInfoFromFileW@16
	test	eax, eax
	jl	$LN1@GetFirstBi

; 345  :         {
; 346  :             return Vect2((float)ii.Width, (float)ii.Height);

	mov	eax, DWORD PTR _ii$[ebp+4]
	mov	DWORD PTR tv247[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv247[ebp]
	mov	ecx, DWORD PTR tv247[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv251[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv251[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _ii$[ebp]
	mov	DWORD PTR tv256[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv256[ebp]
	mov	eax, DWORD PTR tv256[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv260[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv260[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z
	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN16@GetFirstBi
$LN1@GetFirstBi:

; 347  :         }
; 348  : 
; 349  :         return Vect2(0, 0);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z
	lea	ecx, DWORD PTR _firstBitmapFile$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN16@GetFirstBi:

; 350  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFirstBitmapSize@BitmapTransitionSource@@SA?AUVect2@@AAVStringList@@@Z ENDP ; BitmapTransitionSource::GetFirstBitmapSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?GetSize@BitmapTransitionSource@@UBE?AUVect2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetSize@BitmapTransitionSource@@UBE?AUVect2@@XZ PROC	; BitmapTransitionSource::GetSize, COMDAT
; _this$ = ecx

; 352  :     Vect2 GetSize() const {return fullSize;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@ABU0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSize@BitmapTransitionSource@@UBE?AUVect2@@XZ ENDP	; BitmapTransitionSource::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBitmapTransitionSource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBitmapTransitionSource@@UAEPAXI@Z PROC		; BitmapTransitionSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BitmapTransitionSource@@UAE@XZ	; BitmapTransitionSource::~BitmapTransitionSource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBitmapTransitionSource@@UAEPAXI@Z ENDP		; BitmapTransitionSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBitmapImage@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBitmapImage@@QAEPAXI@Z PROC				; BitmapImage::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BitmapImage@@QAE@XZ			; BitmapImage::~BitmapImage
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBitmapImage@@QAEPAXI@Z ENDP				; BitmapImage::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?CreateBitmapTransitionSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
$T1 = -4						; size = 4
_data$ = 8						; size = 4
?CreateBitmapTransitionSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateBitmapTransitionSource, COMDAT

; 357  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 358  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN1@CreateBitm

; 359  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CreateBitm
$LN1@CreateBitm:

; 360  : 
; 361  :     return new BitmapTransitionSource(data);

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@CreateBitm
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0BitmapTransitionSource@@QAE@PAVXElement@@@Z ; BitmapTransitionSource::BitmapTransitionSource
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@CreateBitm
$LN4@CreateBitm:
	mov	DWORD PTR tv74[ebp], 0
$LN5@CreateBitm:
	mov	eax, DWORD PTR tv74[ebp]
$LN2@CreateBitm:

; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateBitmapTransitionSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateBitmapTransitionSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?ConfigureBitmapTransitionProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_ofn$1 = -1412						; size = 88
$T2 = -1324						; size = 8
_bi$3 = -1316						; size = 32
_strText$4 = -1284					; size = 8
_strText$5 = -1276					; size = 8
_bDisableFading$6 = -1268				; size = 4
$T7 = -1264						; size = 4
_bRandomize$8 = -1260					; size = 4
_val$9 = -1256						; size = 4
_bDisableFading$10 = -1252				; size = 4
_bRandomize$11 = -1248					; size = 4
_transitionTime$12 = -1244				; size = 4
_bOpenFile$13 = -1240					; size = 4
_bFadeInOnly$14 = -1236					; size = 4
_strPath$15 = -1232					; size = 8
_bFadeInOnly$16 = -1224					; size = 4
_numBitmaps$17 = -1220					; size = 4
_path$18 = -1216					; size = 8
_size$19 = -1208					; size = 8
_bitmapList$20 = -1200					; size = 8
tv64 = -1192						; size = 4
_lpBitmap$21 = -1188					; size = 4
tv492 = -1184						; size = 4
tv209 = -1180						; size = 4
tv237 = -1176						; size = 4
_bitmapList$22 = -1172					; size = 8
_numBitmaps$23 = -1164					; size = 4
tv200 = -1160						; size = 4
tv495 = -1156						; size = 4
tv689 = -1152						; size = 4
_curSel$24 = -1148					; size = 4
tv679 = -1144						; size = 4
_bDisableFading$25 = -1140				; size = 4
tv669 = -1136						; size = 4
tv191 = -1132						; size = 4
_hwndBitmaps$26 = -1128					; size = 4
_configData$27 = -1124					; size = 4
_transitionTime$28 = -1120				; size = 4
_hwndVal$29 = -1116					; size = 4
_opacity$30 = -1112					; size = 4
_source$31 = -1108					; size = 4
_pidl$32 = -1104					; size = 4
_i$33 = -1100						; size = 4
_lpFile$34 = -1096					; size = 4
_i$35 = -1092						; size = 4
_hwndTemp$36 = -1088					; size = 4
_hwndBitmaps$37 = -1084					; size = 4
_hwndBitmaps$38 = -1080					; size = 4
_lpCurFile$39 = -1076					; size = 4
_configInfo$40 = -1072					; size = 4
_curSel$41 = -1068					; size = 4
_curSel$42 = -1064					; size = 4
tv243 = -1060						; size = 4
_configInfo$43 = -1056					; size = 4
_curDirectory$44 = -1052				; size = 522
_newDirectory$45 = -528					; size = 522
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigureBitmapTransitionProc@@YGHPAUHWND__@@IIJ@Z PROC ; ConfigureBitmapTransitionProc, COMDAT

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1412				; 00000584H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 373  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN41@ConfigureB
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN34@ConfigureB
	jmp	$LN42@ConfigureB
$LN41@ConfigureB:

; 374  :     {
; 375  :         case WM_INITDIALOG:
; 376  :             {
; 377  :                 ConfigBitmapInfo *configInfo = (ConfigBitmapInfo*)lParam;

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _configInfo$40[ebp], ecx

; 378  :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)configInfo);

	mov	edx, DWORD PTR _configInfo$40[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12

; 379  :                 LocalizeWindow(hwnd);

	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 380  : 
; 381  :                 //--------------------------
; 382  : 
; 383  :                 HWND hwndTemp = GetDlgItem(hwnd, IDC_BITMAPS);

	push	1090					; 00000442H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$36[ebp], eax

; 384  : 
; 385  :                 StringList bitmapList;

	lea	ecx, DWORD PTR _bitmapList$20[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ

; 386  :                 configInfo->data->GetStringList(TEXT("bitmap"), bitmapList);

	lea	eax, DWORD PTR _bitmapList$20[ebp]
	push	eax
	push	OFFSET $SG4294944708
	mov	ecx, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	DWORD PTR __imp_?GetStringList@XElement@@QBEXPB_WAAVStringList@@@Z

; 387  :                 for(UINT i=0; i<bitmapList.Num(); i++)

	mov	DWORD PTR _i$33[ebp], 0
	jmp	SHORT $LN40@ConfigureB
$LN39@ConfigureB:
	mov	edx, DWORD PTR _i$33[ebp]
	add	edx, 1
	mov	DWORD PTR _i$33[ebp], edx
$LN40@ConfigureB:
	lea	ecx, DWORD PTR _bitmapList$20[ebp]
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _i$33[ebp], eax
	jae	SHORT $LN38@ConfigureB

; 388  :                 {
; 389  :                     CTSTR lpBitmap = bitmapList[i];

	mov	eax, DWORD PTR _i$33[ebp]
	push	eax
	lea	ecx, DWORD PTR _bitmapList$20[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	mov	DWORD PTR _lpBitmap$21[ebp], eax

; 390  : 
; 391  :                     if(OSFileExists(lpBitmap))

	mov	ecx, DWORD PTR _lpBitmap$21[ebp]
	push	ecx
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	je	SHORT $LN37@ConfigureB

; 392  :                         SendMessage(hwndTemp, LB_ADDSTRING, 0, (LPARAM)lpBitmap);

	mov	edx, DWORD PTR _lpBitmap$21[ebp]
	push	edx
	push	0
	push	384					; 00000180H
	mov	eax, DWORD PTR _hwndTemp$36[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN37@ConfigureB:

; 393  :                 }

	jmp	SHORT $LN39@ConfigureB
$LN38@ConfigureB:

; 394  : 
; 395  :                 //--------------------------
; 396  : 
; 397  :                 hwndTemp = GetDlgItem(hwnd, IDC_TRANSITIONTIME);

	push	1078					; 00000436H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$36[ebp], eax

; 398  : 
; 399  :                 UINT transitionTime = configInfo->data->GetInt(TEXT("transitionTime"));

	push	0
	push	OFFSET $SG4294944707
	mov	edx, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _transitionTime$28[ebp], eax

; 400  :                 SendMessage(hwndTemp, UDM_SETRANGE32, MIN_TRANSITION_TIME, MAX_TRANSITION_TIME);

	push	600					; 00000258H
	push	1
	push	1135					; 0000046fH
	mov	eax, DWORD PTR _hwndTemp$36[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 401  : 
; 402  :                 if(!transitionTime)

	cmp	DWORD PTR _transitionTime$28[ebp], 0
	jne	SHORT $LN36@ConfigureB

; 403  :                     transitionTime = 10;

	mov	DWORD PTR _transitionTime$28[ebp], 10	; 0000000aH
$LN36@ConfigureB:

; 404  : 
; 405  :                 SendMessage(hwndTemp, UDM_SETPOS32, 0, transitionTime);

	mov	ecx, DWORD PTR _transitionTime$28[ebp]
	push	ecx
	push	0
	push	1137					; 00000471H
	mov	edx, DWORD PTR _hwndTemp$36[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 406  : 
; 407  :                 EnableWindow(GetDlgItem(hwnd, IDC_REPLACE), FALSE);

	push	0
	push	1056					; 00000420H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 408  :                 EnableWindow(GetDlgItem(hwnd, IDC_REMOVE), FALSE);

	push	0
	push	1055					; 0000041fH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 409  :                 EnableWindow(GetDlgItem(hwnd, IDC_MOVEUPWARD), FALSE);

	push	0
	push	1057					; 00000421H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 410  :                 EnableWindow(GetDlgItem(hwnd, IDC_MOVEDOWNWARD), FALSE);

	push	0
	push	1058					; 00000422H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 411  : 
; 412  :                 //--------------------------
; 413  : 
; 414  :                 BOOL bFadeInOnly = configInfo->data->GetInt(TEXT("fadeInOnly"), 1);

	push	1
	push	OFFSET $SG4294944706
	mov	ecx, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bFadeInOnly$16[ebp], eax

; 415  :                 BOOL bDisableFading = configInfo->data->GetInt(TEXT("disableFading"));

	push	0
	push	OFFSET $SG4294944705
	mov	edx, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bDisableFading$25[ebp], eax

; 416  :                 BOOL bRandomize = configInfo->data->GetInt(TEXT("randomize"));

	push	0
	push	OFFSET $SG4294944704
	mov	eax, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bRandomize$11[ebp], eax

; 417  :                 SendMessage(GetDlgItem(hwnd, IDC_FADEINONLY), BM_SETCHECK, bFadeInOnly ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bFadeInOnly$16[ebp], 0
	je	SHORT $LN46@ConfigureB
	mov	DWORD PTR tv191[ebp], 1
	jmp	SHORT $LN47@ConfigureB
$LN46@ConfigureB:
	mov	DWORD PTR tv191[ebp], 0
$LN47@ConfigureB:
	push	0
	mov	ecx, DWORD PTR tv191[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1041					; 00000411H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 418  :                 SendMessage(GetDlgItem(hwnd, IDC_DISABLEFADING), BM_SETCHECK, bDisableFading ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bDisableFading$25[ebp], 0
	je	SHORT $LN48@ConfigureB
	mov	DWORD PTR tv200[ebp], 1
	jmp	SHORT $LN49@ConfigureB
$LN48@ConfigureB:
	mov	DWORD PTR tv200[ebp], 0
$LN49@ConfigureB:
	push	0
	mov	eax, DWORD PTR tv200[ebp]
	push	eax
	push	241					; 000000f1H
	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 419  :                 SendMessage(GetDlgItem(hwnd, IDC_RANDOMIZE), BM_SETCHECK, bRandomize ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bRandomize$11[ebp], 0
	je	SHORT $LN50@ConfigureB
	mov	DWORD PTR tv209[ebp], 1
	jmp	SHORT $LN51@ConfigureB
$LN50@ConfigureB:
	mov	DWORD PTR tv209[ebp], 0
$LN51@ConfigureB:
	push	0
	mov	edx, DWORD PTR tv209[ebp]
	push	edx
	push	241					; 000000f1H
	push	1043					; 00000413H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 420  : 
; 421  :                 UINT opacity = configInfo->data->GetInt(TEXT("opacity"), 100);

	push	100					; 00000064H
	push	OFFSET $SG4294944703
	mov	ecx, DWORD PTR _configInfo$40[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _opacity$30[ebp], eax

; 422  :                 if(opacity > 100)

	cmp	DWORD PTR _opacity$30[ebp], 100		; 00000064H
	jbe	SHORT $LN35@ConfigureB

; 423  : 	                opacity = 100;

	mov	DWORD PTR _opacity$30[ebp], 100		; 00000064H
$LN35@ConfigureB:

; 424  : 
; 425  :                 SendMessage(GetDlgItem(hwnd, IDC_TSRCOPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1210					; 000004baH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 426  :                 SendMessage(GetDlgItem(hwnd, IDC_TSRCOPACITY), UDM_SETPOS32, 0, opacity);

	mov	eax, DWORD PTR _opacity$30[ebp]
	push	eax
	push	0
	push	1137					; 00000471H
	push	1210					; 000004baH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 427  :                 
; 428  :                 EnableWindow(GetDlgItem(hwnd, IDC_FADEINONLY), !bDisableFading);

	cmp	DWORD PTR _bDisableFading$25[ebp], 0
	jne	SHORT $LN52@ConfigureB
	mov	DWORD PTR tv237[ebp], 1
	jmp	SHORT $LN53@ConfigureB
$LN52@ConfigureB:
	mov	DWORD PTR tv237[ebp], 0
$LN53@ConfigureB:
	mov	edx, DWORD PTR tv237[ebp]
	push	edx
	push	1041					; 00000411H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 429  : 
; 430  :                 return TRUE;

	mov	DWORD PTR $T7[ebp], 1
	lea	ecx, DWORD PTR _bitmapList$20[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	eax, DWORD PTR $T7[ebp]
	jmp	$LN44@ConfigureB
$LN34@ConfigureB:

; 431  :             }
; 432  : 
; 433  :         case WM_COMMAND:
; 434  :             switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv243[ebp], ecx
	cmp	DWORD PTR tv243[ebp], 1054		; 0000041eH
	jg	SHORT $LN64@ConfigureB
	cmp	DWORD PTR tv243[ebp], 1054		; 0000041eH
	je	SHORT $LN31@ConfigureB
	cmp	DWORD PTR tv243[ebp], 1
	je	$LN8@ConfigureB
	cmp	DWORD PTR tv243[ebp], 2
	je	$LN1@ConfigureB
	cmp	DWORD PTR tv243[ebp], 1042		; 00000412H
	je	$LN14@ConfigureB
	jmp	$LN32@ConfigureB
$LN64@ConfigureB:
	mov	edx, DWORD PTR tv243[ebp]
	sub	edx, 1055				; 0000041fH
	mov	DWORD PTR tv243[ebp], edx
	cmp	DWORD PTR tv243[ebp], 156		; 0000009cH
	ja	$LN32@ConfigureB
	mov	eax, DWORD PTR tv243[ebp]
	movzx	ecx, BYTE PTR $LN65@ConfigureB[eax]
	jmp	DWORD PTR $LN66@ConfigureB[ecx*4]
$LN31@ConfigureB:

; 435  :             {
; 436  :                 case IDC_ADD:
; 437  :                     {
; 438  :                         TSTR lpFile = (TSTR)Allocate(32*1024*sizeof(TCHAR));

	push	65536					; 00010000H
	mov	edx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR _lpFile$34[ebp], eax

; 439  :                         zero(lpFile, 32*1024*sizeof(TCHAR));

	push	65536					; 00010000H
	mov	ecx, DWORD PTR _lpFile$34[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 440  : 
; 441  :                         OPENFILENAME ofn;
; 442  :                         zero(&ofn, sizeof(ofn));

	push	88					; 00000058H
	lea	edx, DWORD PTR _ofn$1[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 443  :                         ofn.lStructSize = sizeof(ofn);

	mov	DWORD PTR _ofn$1[ebp], 88		; 00000058H

; 444  :                         ofn.lpstrFile = lpFile;

	mov	eax, DWORD PTR _lpFile$34[ebp]
	mov	DWORD PTR _ofn$1[ebp+28], eax

; 445  :                         ofn.hwndOwner = hwnd;

	mov	ecx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _ofn$1[ebp+4], ecx

; 446  :                         ofn.nMaxFile = 32*1024*sizeof(TCHAR);

	mov	DWORD PTR _ofn$1[ebp+32], 65536		; 00010000H

; 447  :                         ofn.lpstrFilter = TEXT("All Formats (*.jpg;*.png;*.gif;*.bmp;*.dds)\0*.bmp;*.dds;*.jpg;*.png;*.gif\0");

	mov	DWORD PTR _ofn$1[ebp+12], OFFSET $SG4294944702

; 448  :                         ofn.nFilterIndex = 1;

	mov	DWORD PTR _ofn$1[ebp+24], 1

; 449  :                         ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST | OFN_ALLOWMULTISELECT | OFN_EXPLORER | OFN_HIDEREADONLY;

	mov	DWORD PTR _ofn$1[ebp+52], 530948	; 00081a04H

; 450  : 
; 451  :                         TCHAR curDirectory[MAX_PATH+1];
; 452  :                         GetCurrentDirectory(MAX_PATH, curDirectory);

	lea	edx, DWORD PTR _curDirectory$44[ebp]
	push	edx
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryW@8

; 453  : 
; 454  :                         BOOL bOpenFile = GetOpenFileName(&ofn);

	lea	eax, DWORD PTR _ofn$1[ebp]
	push	eax
	call	_IsolationAwareGetOpenFileNameW@4
	mov	DWORD PTR _bOpenFile$13[ebp], eax

; 455  : 
; 456  :                         TCHAR newDirectory[MAX_PATH+1];
; 457  :                         GetCurrentDirectory(MAX_PATH, newDirectory);

	lea	ecx, DWORD PTR _newDirectory$45[ebp]
	push	ecx
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryW@8

; 458  : 
; 459  :                         SetCurrentDirectory(curDirectory);

	lea	edx, DWORD PTR _curDirectory$44[ebp]
	push	edx
	call	DWORD PTR __imp__SetCurrentDirectoryW@4

; 460  : 
; 461  :                         if(bOpenFile)

	cmp	DWORD PTR _bOpenFile$13[ebp], 0
	je	$LN28@ConfigureB

; 462  :                         {
; 463  :                             TSTR lpCurFile = lpFile+ofn.nFileOffset;

	movzx	eax, WORD PTR _ofn$1[ebp+56]
	mov	ecx, DWORD PTR _lpFile$34[ebp]
	lea	edx, DWORD PTR [ecx+eax*2]
	mov	DWORD PTR _lpCurFile$39[ebp], edx
$LN29@ConfigureB:

; 464  : 
; 465  :                             while(lpCurFile && *lpCurFile)

	cmp	DWORD PTR _lpCurFile$39[ebp], 0
	je	$LN28@ConfigureB
	mov	eax, DWORD PTR _lpCurFile$39[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	je	$LN28@ConfigureB

; 466  :                             {
; 467  :                                 String strPath;

	lea	ecx, DWORD PTR _strPath$15[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 468  :                                 strPath << newDirectory << TEXT("\\") << lpCurFile;

	mov	edx, DWORD PTR _lpCurFile$39[ebp]
	push	edx
	push	OFFSET $SG4294944701
	lea	eax, DWORD PTR _newDirectory$45[ebp]
	push	eax
	lea	ecx, DWORD PTR _strPath$15[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 469  : 
; 470  :                                 SendMessage(GetDlgItem(hwnd, IDC_BITMAPS), LB_ADDSTRING, 0, (LPARAM)strPath.Array());

	lea	ecx, DWORD PTR _strPath$15[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	384					; 00000180H
	push	1090					; 00000442H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 471  : 
; 472  :                                 lpCurFile += slen(lpCurFile)+1;

	mov	edx, DWORD PTR _lpCurFile$39[ebp]
	push	edx
	call	DWORD PTR __imp_?slen@@YGIPB_W@Z
	mov	ecx, DWORD PTR _lpCurFile$39[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _lpCurFile$39[ebp], edx

; 473  :                             }

	lea	ecx, DWORD PTR _strPath$15[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN29@ConfigureB
$LN28@ConfigureB:

; 474  :                         }
; 475  : 
; 476  :                         Free(lpFile);

	mov	eax, DWORD PTR _lpFile$34[ebp]
	push	eax
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 477  : 
; 478  :                         break;

	jmp	$LN32@ConfigureB
$LN27@ConfigureB:

; 479  :                     }
; 480  : 
; 481  :                 case IDC_ADDFOLDER:
; 482  :                     {
; 483  :                         BROWSEINFO bi = { 0 };

	mov	DWORD PTR _bi$3[ebp], 0
	xor	ecx, ecx
	mov	DWORD PTR _bi$3[ebp+4], ecx
	mov	DWORD PTR _bi$3[ebp+8], ecx
	mov	DWORD PTR _bi$3[ebp+12], ecx
	mov	DWORD PTR _bi$3[ebp+16], ecx
	mov	DWORD PTR _bi$3[ebp+20], ecx
	mov	DWORD PTR _bi$3[ebp+24], ecx
	mov	DWORD PTR _bi$3[ebp+28], ecx

; 484  :                         bi.lpszTitle = Str("Browse");

	push	OFFSET $SG4294944700
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _bi$3[ebp+12], eax

; 485  :                         bi.ulFlags = BIF_RETURNONLYFSDIRS | BIF_NEWDIALOGSTYLE;

	mov	DWORD PTR _bi$3[ebp+16], 65		; 00000041H

; 486  : 
; 487  :                         LPITEMIDLIST pidl = SHBrowseForFolder(&bi);

	lea	eax, DWORD PTR _bi$3[ebp]
	push	eax
	call	DWORD PTR __imp__SHBrowseForFolderW@4
	mov	DWORD PTR _pidl$32[ebp], eax

; 488  :                         if (pidl)

	cmp	DWORD PTR _pidl$32[ebp], 0
	je	SHORT $LN26@ConfigureB

; 489  :                         {
; 490  :                             String path;

	lea	ecx, DWORD PTR _path$18[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 491  :                             path.SetLength(MAX_PATH);

	push	260					; 00000104H
	lea	ecx, DWORD PTR _path$18[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 492  : 
; 493  :                             if (SHGetPathFromIDList(pidl, path.Array()))

	lea	ecx, DWORD PTR _path$18[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _pidl$32[ebp]
	push	ecx
	call	DWORD PTR __imp__SHGetPathFromIDListW@8
	test	eax, eax
	je	SHORT $LN25@ConfigureB

; 494  :                             {
; 495  :                                 SendMessage(GetDlgItem(hwnd, IDC_BITMAPS), LB_ADDSTRING, 0, (LPARAM)path.Array());

	lea	ecx, DWORD PTR _path$18[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	384					; 00000180H
	push	1090					; 00000442H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN25@ConfigureB:

; 496  :                             }
; 497  : 
; 498  :                             CoTaskMemFree(pidl);

	mov	eax, DWORD PTR _pidl$32[ebp]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4

; 499  :                         }

	lea	ecx, DWORD PTR _path$18[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN26@ConfigureB:

; 500  : 
; 501  :                         break;

	jmp	$LN32@ConfigureB
$LN24@ConfigureB:

; 502  :                     }
; 503  : 
; 504  :                 case IDC_BITMAPS:
; 505  :                     if(HIWORD(wParam) == LBN_SELCHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 1
	jne	SHORT $LN23@ConfigureB

; 506  :                     {
; 507  :                         EnableWindow(GetDlgItem(hwnd, IDC_REPLACE), TRUE);

	push	1
	push	1056					; 00000420H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 508  :                         EnableWindow(GetDlgItem(hwnd, IDC_REMOVE), TRUE);

	push	1
	push	1055					; 0000041fH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 509  :                         EnableWindow(GetDlgItem(hwnd, IDC_MOVEUPWARD), TRUE);

	push	1
	push	1057					; 00000421H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 510  :                         EnableWindow(GetDlgItem(hwnd, IDC_MOVEDOWNWARD), TRUE);

	push	1
	push	1058					; 00000422H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN23@ConfigureB:

; 511  :                     }
; 512  :                     break;

	jmp	$LN32@ConfigureB
$LN22@ConfigureB:

; 513  : 
; 514  :                 case IDC_REMOVE:
; 515  :                     {
; 516  :                         UINT curSel = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BITMAPS), LB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	392					; 00000188H
	push	1090					; 00000442H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSel$24[ebp], eax

; 517  :                         if(curSel != LB_ERR)

	cmp	DWORD PTR _curSel$24[ebp], -1
	je	$LN21@ConfigureB

; 518  :                         {
; 519  :                             SendMessage(GetDlgItem(hwnd, IDC_BITMAPS), LB_DELETESTRING, curSel, 0);

	push	0
	mov	edx, DWORD PTR _curSel$24[ebp]
	push	edx
	push	386					; 00000182H
	push	1090					; 00000442H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 520  :                             EnableWindow(GetDlgItem(hwnd, IDC_REPLACE), FALSE);

	push	0
	push	1056					; 00000420H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 521  :                             EnableWindow(GetDlgItem(hwnd, IDC_REMOVE), FALSE);

	push	0
	push	1055					; 0000041fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 522  :                             EnableWindow(GetDlgItem(hwnd, IDC_MOVEUPWARD), FALSE);

	push	0
	push	1057					; 00000421H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 523  :                             EnableWindow(GetDlgItem(hwnd, IDC_MOVEDOWNWARD), FALSE);

	push	0
	push	1058					; 00000422H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN21@ConfigureB:

; 524  :                         }
; 525  :                     }
; 526  :                     break;

	jmp	$LN32@ConfigureB
$LN20@ConfigureB:

; 527  : 
; 528  :                 case IDC_MOVEUPWARD:
; 529  :                     {
; 530  :                         HWND hwndBitmaps = GetDlgItem(hwnd, IDC_BITMAPS);

	push	1090					; 00000442H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndBitmaps$37[ebp], eax

; 531  :                         UINT curSel = (UINT)SendMessage(hwndBitmaps, LB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	392					; 00000188H
	mov	eax, DWORD PTR _hwndBitmaps$37[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSel$42[ebp], eax

; 532  :                         if(curSel != LB_ERR)

	cmp	DWORD PTR _curSel$42[ebp], -1
	je	$LN18@ConfigureB

; 533  :                         {
; 534  :                             if(curSel > 0)

	cmp	DWORD PTR _curSel$42[ebp], 0
	jbe	$LN18@ConfigureB

; 535  :                             {
; 536  :                                 String strText = GetLBText(hwndBitmaps, curSel);

	mov	ecx, DWORD PTR _curSel$42[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwndBitmaps$37[ebp]
	push	edx
	lea	eax, DWORD PTR _strText$5[ebp]
	push	eax
	call	DWORD PTR __imp_?GetLBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH

; 537  : 
; 538  :                                 SendMessage(hwndBitmaps, LB_DELETESTRING, curSel, 0);

	push	0
	mov	ecx, DWORD PTR _curSel$42[ebp]
	push	ecx
	push	386					; 00000182H
	mov	edx, DWORD PTR _hwndBitmaps$37[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 539  :                                 SendMessage(hwndBitmaps, LB_INSERTSTRING, --curSel, (LPARAM)strText.Array());

	mov	eax, DWORD PTR _curSel$42[ebp]
	sub	eax, 1
	mov	DWORD PTR _curSel$42[ebp], eax
	lea	ecx, DWORD PTR _strText$5[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _curSel$42[ebp]
	push	ecx
	push	385					; 00000181H
	mov	edx, DWORD PTR _hwndBitmaps$37[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 540  :                                 PostMessage(hwndBitmaps, LB_SETCURSEL, curSel, 0);

	push	0
	mov	eax, DWORD PTR _curSel$42[ebp]
	push	eax
	push	390					; 00000186H
	mov	ecx, DWORD PTR _hwndBitmaps$37[ebp]
	push	ecx
	call	DWORD PTR __imp__PostMessageW@16

; 541  :                             }

	lea	ecx, DWORD PTR _strText$5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN18@ConfigureB:

; 542  :                         }
; 543  :                     }
; 544  :                     break;

	jmp	$LN32@ConfigureB
$LN17@ConfigureB:

; 545  : 
; 546  :                 case IDC_MOVEDOWNWARD:
; 547  :                     {
; 548  :                         HWND hwndBitmaps = GetDlgItem(hwnd, IDC_BITMAPS);

	push	1090					; 00000442H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndBitmaps$38[ebp], eax

; 549  : 
; 550  :                         UINT numBitmaps = (UINT)SendMessage(hwndBitmaps, LB_GETCOUNT, 0, 0);

	push	0
	push	0
	push	395					; 0000018bH
	mov	eax, DWORD PTR _hwndBitmaps$38[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _numBitmaps$17[ebp], eax

; 551  :                         UINT curSel = (UINT)SendMessage(hwndBitmaps, LB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	392					; 00000188H
	mov	ecx, DWORD PTR _hwndBitmaps$38[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSel$41[ebp], eax

; 552  :                         if(curSel != LB_ERR)

	cmp	DWORD PTR _curSel$41[ebp], -1
	je	$LN15@ConfigureB

; 553  :                         {
; 554  :                             if(curSel < (numBitmaps-1))

	mov	edx, DWORD PTR _numBitmaps$17[ebp]
	sub	edx, 1
	cmp	DWORD PTR _curSel$41[ebp], edx
	jae	$LN15@ConfigureB

; 555  :                             {
; 556  :                                 String strText = GetLBText(hwndBitmaps, curSel);

	mov	eax, DWORD PTR _curSel$41[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndBitmaps$38[ebp]
	push	ecx
	lea	edx, DWORD PTR _strText$4[ebp]
	push	edx
	call	DWORD PTR __imp_?GetLBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH

; 557  : 
; 558  :                                 SendMessage(hwndBitmaps, LB_DELETESTRING, curSel, 0);

	push	0
	mov	eax, DWORD PTR _curSel$41[ebp]
	push	eax
	push	386					; 00000182H
	mov	ecx, DWORD PTR _hwndBitmaps$38[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 559  :                                 SendMessage(hwndBitmaps, LB_INSERTSTRING, ++curSel, (LPARAM)strText.Array());

	mov	edx, DWORD PTR _curSel$41[ebp]
	add	edx, 1
	mov	DWORD PTR _curSel$41[ebp], edx
	lea	ecx, DWORD PTR _strText$4[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _curSel$41[ebp]
	push	eax
	push	385					; 00000181H
	mov	ecx, DWORD PTR _hwndBitmaps$38[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 560  :                                 PostMessage(hwndBitmaps, LB_SETCURSEL, curSel, 0);

	push	0
	mov	edx, DWORD PTR _curSel$41[ebp]
	push	edx
	push	390					; 00000186H
	mov	eax, DWORD PTR _hwndBitmaps$38[ebp]
	push	eax
	call	DWORD PTR __imp__PostMessageW@16

; 561  :                             }

	lea	ecx, DWORD PTR _strText$4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN15@ConfigureB:

; 562  :                         }
; 563  :                     }
; 564  :                     break;

	jmp	$LN32@ConfigureB
$LN14@ConfigureB:

; 565  : 
; 566  :                 case IDC_DISABLEFADING:
; 567  :                     {
; 568  :                         BOOL bDisableFading = SendMessage(GetDlgItem(hwnd, IDC_DISABLEFADING), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN54@ConfigureB
	mov	DWORD PTR tv492[ebp], 1
	jmp	SHORT $LN55@ConfigureB
$LN54@ConfigureB:
	mov	DWORD PTR tv492[ebp], 0
$LN55@ConfigureB:
	mov	edx, DWORD PTR tv492[ebp]
	mov	DWORD PTR _bDisableFading$6[ebp], edx

; 569  :                         EnableWindow(GetDlgItem(hwnd, IDC_FADEINONLY), !bDisableFading);

	cmp	DWORD PTR _bDisableFading$6[ebp], 0
	jne	SHORT $LN56@ConfigureB
	mov	DWORD PTR tv495[ebp], 1
	jmp	SHORT $LN57@ConfigureB
$LN56@ConfigureB:
	mov	DWORD PTR tv495[ebp], 0
$LN57@ConfigureB:
	mov	eax, DWORD PTR tv495[ebp]
	push	eax
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 570  :                     }
; 571  :                     break;

	jmp	$LN32@ConfigureB
$LN13@ConfigureB:

; 572  : 
; 573  :                 case IDC_TSRCOPACITY_EDIT:
; 574  :                     if(HIWORD(wParam) == EN_CHANGE)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	cmp	eax, 768				; 00000300H
	jne	$LN9@ConfigureB

; 575  :                     {
; 576  :                         ConfigBitmapInfo *configData = (ConfigBitmapInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$27[ebp], eax

; 577  :                         if(configData)

	cmp	DWORD PTR _configData$27[ebp], 0
	je	$LN9@ConfigureB

; 578  :                         {
; 579  :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR _configData$27[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$31[ebp], eax

; 580  :                             if(source)

	cmp	DWORD PTR _source$31[ebp], 0
	je	SHORT $LN9@ConfigureB

; 581  :                             {
; 582  :                                 HWND hwndVal = NULL;

	mov	DWORD PTR _hwndVal$29[ebp], 0

; 583  :                                 hwndVal = GetDlgItem(hwnd, IDC_TSRCOPACITY);

	push	1210					; 000004baH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$29[ebp], eax

; 584  : 
; 585  :                                 if(hwndVal)

	cmp	DWORD PTR _hwndVal$29[ebp], 0
	je	SHORT $LN9@ConfigureB

; 586  :                                 {
; 587  :                                     int val = (int)SendMessage(hwndVal, UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	mov	eax, DWORD PTR _hwndVal$29[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _val$9[ebp], eax

; 588  :                                     source->SetInt(TEXT("opacity"), val);

	mov	ecx, DWORD PTR _val$9[ebp]
	push	ecx
	push	OFFSET $SG4294944699
	mov	edx, DWORD PTR _source$31[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$31[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN9@ConfigureB:

; 589  :                                 }
; 590  :                             }
; 591  :                         }
; 592  :                     }
; 593  :                     break;

	jmp	$LN32@ConfigureB
$LN8@ConfigureB:

; 594  : 
; 595  :                 case IDOK:
; 596  :                     {
; 597  :                         HWND hwndBitmaps = GetDlgItem(hwnd, IDC_BITMAPS);

	push	1090					; 00000442H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndBitmaps$26[ebp], eax

; 598  : 
; 599  :                         UINT numBitmaps = (UINT)SendMessage(hwndBitmaps, LB_GETCOUNT, 0, 0);

	push	0
	push	0
	push	395					; 0000018bH
	mov	ecx, DWORD PTR _hwndBitmaps$26[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _numBitmaps$23[ebp], eax

; 600  :                         if(!numBitmaps)

	cmp	DWORD PTR _numBitmaps$23[ebp], 0
	jne	SHORT $LN7@ConfigureB

; 601  :                         {
; 602  :                             OBSMessageBox(hwnd, Str("Sources.TransitionSource.Empty"), NULL, 0);

	push	0
	push	0
	push	OFFSET $SG4294944698
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 603  :                             break;

	jmp	$LN32@ConfigureB
$LN7@ConfigureB:

; 604  :                         }
; 605  : 
; 606  :                         //---------------------------
; 607  : 
; 608  :                         StringList bitmapList;

	lea	ecx, DWORD PTR _bitmapList$22[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ

; 609  :                         for(UINT i=0; i<numBitmaps; i++)

	mov	DWORD PTR _i$35[ebp], 0
	jmp	SHORT $LN6@ConfigureB
$LN5@ConfigureB:
	mov	ecx, DWORD PTR _i$35[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$35[ebp], ecx
$LN6@ConfigureB:
	mov	edx, DWORD PTR _i$35[ebp]
	cmp	edx, DWORD PTR _numBitmaps$23[ebp]
	jae	SHORT $LN4@ConfigureB

; 610  :                             bitmapList << GetLBText(hwndBitmaps, i);

	mov	eax, DWORD PTR _i$35[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndBitmaps$26[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	DWORD PTR __imp_?GetLBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _bitmapList$22[ebp]
	call	DWORD PTR __imp_??6StringList@@QAEAAV0@ABVString@@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN5@ConfigureB
$LN4@ConfigureB:

; 611  : 
; 612  :                         ConfigBitmapInfo *configInfo = (ConfigBitmapInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$43[ebp], eax

; 613  : 
; 614  :                         Vect2 size = BitmapTransitionSource::GetFirstBitmapSize(bitmapList);

	lea	ecx, DWORD PTR _bitmapList$22[ebp]
	push	ecx
	lea	edx, DWORD PTR _size$19[ebp]
	push	edx
	call	?GetFirstBitmapSize@BitmapTransitionSource@@SA?AUVect2@@AAVStringList@@@Z ; BitmapTransitionSource::GetFirstBitmapSize
	add	esp, 8

; 615  : 
; 616  :                         if (size.x && size.y)

	movss	xmm0, DWORD PTR _size$19[ebp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@ConfigureB
	movss	xmm0, DWORD PTR _size$19[ebp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN3@ConfigureB

; 617  :                         {
; 618  :                             configInfo->cx = (UINT)size.x;

	movss	xmm0, DWORD PTR _size$19[ebp]
	call	__ftoui3
	mov	ecx, DWORD PTR _configInfo$43[ebp]
	mov	DWORD PTR [ecx+8], eax

; 619  :                             configInfo->cy = (UINT)size.y;

	movss	xmm0, DWORD PTR _size$19[ebp+4]
	call	__ftoui3
	mov	edx, DWORD PTR _configInfo$43[ebp]
	mov	DWORD PTR [edx+12], eax

; 620  :                         }
; 621  :                         else

	jmp	SHORT $LN2@ConfigureB
$LN3@ConfigureB:

; 622  :                         {
; 623  :                             configInfo->cx = configInfo->cy = 32;

	mov	eax, DWORD PTR _configInfo$43[ebp]
	mov	DWORD PTR [eax+12], 32			; 00000020H
	mov	ecx, DWORD PTR _configInfo$43[ebp]
	mov	DWORD PTR [ecx+8], 32			; 00000020H

; 624  :                             AppWarning(TEXT("ConfigureBitmapTransitionSource: could not get image info for bitmap '%s'"), bitmapList[0].Array());

	push	0
	lea	ecx, DWORD PTR _bitmapList$22[ebp]
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294944697
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN2@ConfigureB:

; 625  :                         }
; 626  : 
; 627  :                         configInfo->data->SetStringList(TEXT("bitmap"), bitmapList);

	lea	edx, DWORD PTR _bitmapList$22[ebp]
	push	edx
	push	OFFSET $SG4294944696
	mov	eax, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	DWORD PTR __imp_?SetStringList@XElement@@QAEXPB_WAAVStringList@@@Z

; 628  : 
; 629  :                         UINT transitionTime = (UINT)SendMessage(GetDlgItem(hwnd, IDC_TRANSITIONTIME), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1078					; 00000436H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _transitionTime$12[ebp], eax

; 630  :                         configInfo->data->SetInt(TEXT("transitionTime"), transitionTime);

	mov	edx, DWORD PTR _transitionTime$12[ebp]
	push	edx
	push	OFFSET $SG4294944695
	mov	eax, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 631  : 
; 632  :                         BOOL bFadeInOnly = SendMessage(GetDlgItem(hwnd, IDC_FADEINONLY), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN58@ConfigureB
	mov	DWORD PTR tv669[ebp], 1
	jmp	SHORT $LN59@ConfigureB
$LN58@ConfigureB:
	mov	DWORD PTR tv669[ebp], 0
$LN59@ConfigureB:
	mov	edx, DWORD PTR tv669[ebp]
	mov	DWORD PTR _bFadeInOnly$14[ebp], edx

; 633  :                         BOOL bDisableFading = SendMessage(GetDlgItem(hwnd, IDC_DISABLEFADING), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN60@ConfigureB
	mov	DWORD PTR tv679[ebp], 1
	jmp	SHORT $LN61@ConfigureB
$LN60@ConfigureB:
	mov	DWORD PTR tv679[ebp], 0
$LN61@ConfigureB:
	mov	ecx, DWORD PTR tv679[ebp]
	mov	DWORD PTR _bDisableFading$10[ebp], ecx

; 634  :                         BOOL bRandomize = SendMessage(GetDlgItem(hwnd, IDC_RANDOMIZE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1043					; 00000413H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN62@ConfigureB
	mov	DWORD PTR tv689[ebp], 1
	jmp	SHORT $LN63@ConfigureB
$LN62@ConfigureB:
	mov	DWORD PTR tv689[ebp], 0
$LN63@ConfigureB:
	mov	eax, DWORD PTR tv689[ebp]
	mov	DWORD PTR _bRandomize$8[ebp], eax

; 635  :                         configInfo->data->SetInt(TEXT("fadeInOnly"), bFadeInOnly);

	mov	ecx, DWORD PTR _bFadeInOnly$14[ebp]
	push	ecx
	push	OFFSET $SG4294944694
	mov	edx, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 636  :                         configInfo->data->SetInt(TEXT("disableFading"), bDisableFading);

	mov	eax, DWORD PTR _bDisableFading$10[ebp]
	push	eax
	push	OFFSET $SG4294944693
	mov	ecx, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 637  :                         configInfo->data->SetInt(TEXT("randomize"), bRandomize);

	mov	edx, DWORD PTR _bRandomize$8[ebp]
	push	edx
	push	OFFSET $SG4294944692
	mov	eax, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [eax+4]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 638  :                         configInfo->data->SetInt(TEXT("opacity"), (UINT)SendMessage(GetDlgItem(hwnd, IDC_TSRCOPACITY), UDM_GETPOS32, 0, 0));

	push	0
	push	0
	push	1138					; 00000472H
	push	1210					; 000004baH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294944691
	mov	edx, DWORD PTR _configInfo$43[ebp]
	mov	ecx, DWORD PTR [edx+4]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 639  :                     }

	lea	ecx, DWORD PTR _bitmapList$22[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
$LN1@ConfigureB:

; 640  : 
; 641  :                 case IDCANCEL:
; 642  :                     EndDialog(hwnd, LOWORD(wParam));

	movzx	eax, WORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndDialog@8
$LN32@ConfigureB:
$LN42@ConfigureB:

; 643  :                     break;
; 644  :             }
; 645  :             break;
; 646  :     }
; 647  : 
; 648  :     return 0;

	xor	eax, eax
$LN44@ConfigureB:

; 649  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN66@ConfigureB:
	DD	$LN22@ConfigureB
	DD	$LN20@ConfigureB
	DD	$LN17@ConfigureB
	DD	$LN24@ConfigureB
	DD	$LN13@ConfigureB
	DD	$LN27@ConfigureB
	DD	$LN32@ConfigureB
$LN65@ConfigureB:
	DB	0
	DB	6
	DB	1
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	5
?ConfigureBitmapTransitionProc@@YGHPAUHWND__@@IIJ@Z ENDP ; ConfigureBitmapTransitionProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmaptransitionsource.cpp
;	COMDAT ?ConfigureBitmapTransitionSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_configInfo$ = -20					; size = 16
_data$ = -4						; size = 4
_element$ = 8						; size = 4
_bCreating$ = 12					; size = 1
?ConfigureBitmapTransitionSource@@YG_NPAVXElement@@_N@Z PROC ; ConfigureBitmapTransitionSource, COMDAT

; 652  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 653  :     if(!element)

	cmp	DWORD PTR _element$[ebp], 0
	jne	SHORT $LN3@ConfigureB

; 654  :     {
; 655  :         AppWarning(TEXT("ConfigureBitmapTransitionSource: NULL element"));

	push	OFFSET $SG4294944690
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 656  :         return false;

	xor	al, al
	jmp	$LN4@ConfigureB
$LN3@ConfigureB:

; 657  :     }
; 658  : 
; 659  :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG4294944689
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax

; 660  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@ConfigureB

; 661  :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG4294944688
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax
$LN2@ConfigureB:

; 662  : 
; 663  :     ConfigBitmapInfo configInfo;
; 664  :     configInfo.data = data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _configInfo$[ebp+4], eax

; 665  :     configInfo.lpName = element->GetName();

	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetName@XBaseItem@@QBEPB_WXZ
	mov	DWORD PTR _configInfo$[ebp], eax

; 666  : 
; 667  :     if (OBSDialogBox(hinstMain, MAKEINTRESOURCE(IDD_CONFIGURETRANSITIONSOURCE), hwndMain, ConfigureBitmapTransitionProc, (LPARAM)&configInfo) == IDOK)

	lea	ecx, DWORD PTR _configInfo$[ebp]
	push	ecx
	push	OFFSET ?ConfigureBitmapTransitionProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureBitmapTransitionProc
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	push	135					; 00000087H
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSDialogBox@@YAHPAUHINSTANCE__@@PB_WPAUHWND__@@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN1@ConfigureB

; 668  :     {
; 669  :         element->SetInt(TEXT("cx"), configInfo.cx);

	mov	ecx, DWORD PTR _configInfo$[ebp+8]
	push	ecx
	push	OFFSET $SG4294944687
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 670  :         element->SetInt(TEXT("cy"), configInfo.cy);

	mov	edx, DWORD PTR _configInfo$[ebp+12]
	push	edx
	push	OFFSET $SG4294944686
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 671  :         return true;

	mov	al, 1
	jmp	SHORT $LN4@ConfigureB
$LN1@ConfigureB:

; 672  :     }
; 673  : 
; 674  :     return false;

	xor	al, al
$LN4@ConfigureB:

; 675  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ConfigureBitmapTransitionSource@@YG_NPAVXElement@@_N@Z ENDP ; ConfigureBitmapTransitionSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@PAVBitmapImage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@PAVBitmapImage@@@@QAE@XZ PROC			; List<BitmapImage *>::List<BitmapImage *>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@PAVBitmapImage@@@@QAE@XZ ENDP			; List<BitmapImage *>::List<BitmapImage *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@PAVBitmapImage@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@PAVBitmapImage@@@@QAE@XZ PROC			; List<BitmapImage *>::~List<BitmapImage *>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@PAVBitmapImage@@@@QAEXXZ	; List<BitmapImage *>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@PAVBitmapImage@@@@QAE@XZ ENDP			; List<BitmapImage *>::~List<BitmapImage *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@PAVBitmapImage@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@PAVBitmapImage@@@@QBEIXZ PROC		; List<BitmapImage *>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@PAVBitmapImage@@@@QBEIXZ ENDP		; List<BitmapImage *>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@PAVBitmapImage@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@PAVBitmapImage@@@@QAEXXZ PROC		; List<BitmapImage *>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@PAVBitmapImage@@@@QAEXXZ ENDP		; List<BitmapImage *>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z PROC ; List<BitmapImage *>::operator<<, COMDAT
; _this$ = ecx

; 366  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 367  :         Add(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$List@PAVBitmapImage@@@@QAEIABQAVBitmapImage@@@Z ; List<BitmapImage *>::Add

; 368  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 369  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??6?$List@PAVBitmapImage@@@@QAEAAV0@ABQAVBitmapImage@@@Z ENDP ; List<BitmapImage *>::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z PROC ; List<BitmapImage *>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0PAVBitmapImage@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAVBitmapImage@@@@QAEAAPAVBitmapImage@@I@Z ENDP ; List<BitmapImage *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Add@?$List@PAVBitmapImage@@@@QAEIABQAVBitmapImage@@@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?Add@?$List@PAVBitmapImage@@@@QAEIABQAVBitmapImage@@@Z PROC ; List<BitmapImage *>::Add, COMDAT
; _this$ = ecx

; 45   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 46   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR tv73[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 47   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx

; 48   :         return num-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1

; 49   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$List@PAVBitmapImage@@@@QAEIABQAVBitmapImage@@@Z ENDP ; List<BitmapImage *>::Add
_TEXT	ENDS
END
