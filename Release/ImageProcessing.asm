; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\ImageProcessing.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

$SG4294841170 DB 'C', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, '4', 00H, '4', 00H, '4', 00H, 't', 00H, 'o', 00H, 'I'
	DB	00H, '4', 00H, '2', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294841169 DB 'C', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, '4', 00H, '4', 00H, '4', 00H, 't', 00H, 'o', 00H, 'N'
	DB	00H, 'V', 00H, '1', 00H, '2', 00H, 00H, 00H
PUBLIC	?Convert444toNV12@@YAXPAEHHHHHHPAPAE@Z		; Convert444toNV12
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\imageprocessing.cpp
;	COMDAT ?Convert444toNV12@@YAXPAEHHHHHHPAPAE@Z
_TEXT	SEGMENT
__curProfiler$ = -496					; size = 48
$T1 = -448						; size = 16
$T2 = -432						; size = 16
$T3 = -416						; size = 16
$T4 = -400						; size = 16
$T5 = -384						; size = 16
$T6 = -368						; size = 16
$T7 = -352						; size = 16
$T8 = -336						; size = 16
$T9 = -320						; size = 16
$T10 = -304						; size = 16
$T11 = -288						; size = 16
$T12 = -272						; size = 16
$T13 = -256						; size = 16
$T14 = -240						; size = 16
$T15 = -224						; size = 16
$T16 = -208						; size = 16
$T17 = -192						; size = 16
$T18 = -176						; size = 16
_addVal$19 = -160					; size = 16
_lumMask$ = -144					; size = 16
_uvMask$ = -128						; size = 16
_line1$20 = -112					; size = 16
_line2$21 = -96						; size = 16
_avgVal$22 = -80					; size = 16
_packVal$23 = -64					; size = 16
_uvPos$24 = -44						; size = 4
_lumYPos$25 = -40					; size = 4
_uvPlane$ = -36						; size = 4
_uvYPos$26 = -32					; size = 4
_yPos$27 = -28						; size = 4
_lumPos1$28 = -24					; size = 4
_lumPlane$ = -20					; size = 4
_lumPos0$29 = -16					; size = 4
_lpImagePos$30 = -12					; size = 4
_x$31 = -8						; size = 4
_y$32 = -4						; size = 4
_input$ = 8						; size = 4
_width$ = 12						; size = 4
_inPitch$ = 16						; size = 4
_outPitch$ = 20						; size = 4
_height$ = 24						; size = 4
_startY$ = 28						; size = 4
_endY$ = 32						; size = 4
_output$ = 36						; size = 4
?Convert444toNV12@@YAXPAEHHHHHHPAPAE@Z PROC		; Convert444toNV12, COMDAT

; 76   : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 496				; 000001f0H

; 77   :     profileSegment("Convert444toNV12");

	push	0
	push	OFFSET $SG4294841169
	lea	ecx, DWORD PTR __curProfiler$[ebp]
	call	DWORD PTR __imp_??0ProfilerNode@@QAE@PB_W_N@Z

; 78   :     LPBYTE lumPlane     = output[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _output$[ebx]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _lumPlane$[ebp], eax

; 79   :     LPBYTE uvPlane		= output[1];

	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _output$[ebx]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _uvPlane$[ebp], eax

; 80   : 
; 81   :     __m128i lumMask = _mm_set1_epi32(0x0000FF00);

	movdqa	xmm0, XMMWORD PTR __xmm@0000ff000000ff000000ff000000ff00
	movdqa	XMMWORD PTR $T18[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T18[ebp]
	movdqa	XMMWORD PTR _lumMask$[ebp], xmm0

; 82   :     __m128i uvMask = _mm_set1_epi16(0x00FF);

	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR $T1[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T1[ebp]
	movdqa	XMMWORD PTR _uvMask$[ebp], xmm0

; 83   : 
; 84   :     for(int y=startY; y<endY; y+=2)

	mov	ecx, DWORD PTR _startY$[ebx]
	mov	DWORD PTR _y$32[ebp], ecx
	jmp	SHORT $LN6@Convert444
$LN5@Convert444:
	mov	edx, DWORD PTR _y$32[ebp]
	add	edx, 2
	mov	DWORD PTR _y$32[ebp], edx
$LN6@Convert444:
	mov	eax, DWORD PTR _y$32[ebp]
	cmp	eax, DWORD PTR _endY$[ebx]
	jge	$LN4@Convert444

; 85   :     {
; 86   :         int yPos    = y*inPitch;

	mov	ecx, DWORD PTR _y$32[ebp]
	imul	ecx, DWORD PTR _inPitch$[ebx]
	mov	DWORD PTR _yPos$27[ebp], ecx

; 87   :         int uvYPos = (y>>1)*outPitch;

	mov	edx, DWORD PTR _y$32[ebp]
	sar	edx, 1
	imul	edx, DWORD PTR _outPitch$[ebx]
	mov	DWORD PTR _uvYPos$26[ebp], edx

; 88   :         int lumYPos = y*outPitch;

	mov	eax, DWORD PTR _y$32[ebp]
	imul	eax, DWORD PTR _outPitch$[ebx]
	mov	DWORD PTR _lumYPos$25[ebp], eax

; 89   : 
; 90   :         for(int x=0; x<width; x+=4)

	mov	DWORD PTR _x$31[ebp], 0
	jmp	SHORT $LN3@Convert444
$LN2@Convert444:
	mov	ecx, DWORD PTR _x$31[ebp]
	add	ecx, 4
	mov	DWORD PTR _x$31[ebp], ecx
$LN3@Convert444:
	mov	edx, DWORD PTR _x$31[ebp]
	cmp	edx, DWORD PTR _width$[ebx]
	jge	$LN1@Convert444

; 91   :         {
; 92   :             LPBYTE lpImagePos = input+yPos+(x*4);

	mov	eax, DWORD PTR _input$[ebx]
	add	eax, DWORD PTR _yPos$27[ebp]
	mov	ecx, DWORD PTR _x$31[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _lpImagePos$30[ebp], edx

; 93   :             int uvPos  = uvYPos + x;

	mov	eax, DWORD PTR _uvYPos$26[ebp]
	add	eax, DWORD PTR _x$31[ebp]
	mov	DWORD PTR _uvPos$24[ebp], eax

; 94   :             int lumPos0 = lumYPos + x;

	mov	ecx, DWORD PTR _lumYPos$25[ebp]
	add	ecx, DWORD PTR _x$31[ebp]
	mov	DWORD PTR _lumPos0$29[ebp], ecx

; 95   :             int lumPos1 = lumPos0 + outPitch;

	mov	edx, DWORD PTR _lumPos0$29[ebp]
	add	edx, DWORD PTR _outPitch$[ebx]
	mov	DWORD PTR _lumPos1$28[ebp], edx

; 96   : 
; 97   :             __m128i line1 = _mm_load_si128((__m128i*)lpImagePos);

	mov	eax, DWORD PTR _lpImagePos$30[ebp]
	movdqa	xmm0, XMMWORD PTR [eax]
	movdqa	XMMWORD PTR $T15[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T15[ebp]
	movdqa	XMMWORD PTR _line1$20[ebp], xmm0

; 98   :             __m128i line2 = _mm_load_si128((__m128i*)(lpImagePos+inPitch));

	mov	ecx, DWORD PTR _lpImagePos$30[ebp]
	add	ecx, DWORD PTR _inPitch$[ebx]
	movdqa	xmm0, XMMWORD PTR [ecx]
	movdqa	XMMWORD PTR $T7[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T7[ebp]
	movdqa	XMMWORD PTR _line2$21[ebp], xmm0

; 99   : 
; 100  :             //pack lum vals
; 101  :             {
; 102  :                 __m128i packVal = _mm_packs_epi32(_mm_srli_si128(_mm_and_si128(line1, lumMask), 1), _mm_srli_si128(_mm_and_si128(line2, lumMask), 1));

	movdqa	xmm0, XMMWORD PTR _line2$21[ebp]
	pand	xmm0, XMMWORD PTR _lumMask$[ebp]
	movdqa	XMMWORD PTR $T13[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T13[ebp]
	psrldq	xmm0, 1
	movdqa	XMMWORD PTR $T5[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR _line1$20[ebp]
	pand	xmm0, XMMWORD PTR _lumMask$[ebp]
	movdqa	XMMWORD PTR $T3[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T3[ebp]
	psrldq	xmm0, 1
	movdqa	XMMWORD PTR $T11[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T11[ebp]
	packssdw xmm0, XMMWORD PTR $T5[ebp]
	movdqa	XMMWORD PTR $T9[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T9[ebp]
	movdqa	XMMWORD PTR _packVal$23[ebp], xmm0

; 103  :                 packVal = _mm_packus_epi16(packVal, packVal);

	movdqa	xmm0, XMMWORD PTR _packVal$23[ebp]
	packuswb xmm0, XMMWORD PTR _packVal$23[ebp]
	movdqa	XMMWORD PTR $T17[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T17[ebp]
	movdqa	XMMWORD PTR _packVal$23[ebp], xmm0

; 104  : 
; 105  :                 *(LPUINT)(lumPlane+lumPos0) = packVal.m128i_u32[0];

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _lumPlane$[ebp]
	add	ecx, DWORD PTR _lumPos0$29[ebp]
	mov	edx, DWORD PTR _packVal$23[ebp+eax]
	mov	DWORD PTR [ecx], edx

; 106  :                 *(LPUINT)(lumPlane+lumPos1) = packVal.m128i_u32[1];

	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _lumPlane$[ebp]
	add	ecx, DWORD PTR _lumPos1$28[ebp]
	mov	edx, DWORD PTR _packVal$23[ebp+eax]
	mov	DWORD PTR [ecx], edx

; 107  :             }
; 108  : 
; 109  :             //do average, pack UV vals
; 110  :             {
; 111  :                 __m128i addVal = _mm_add_epi64(_mm_and_si128(line1, uvMask), _mm_and_si128(line2, uvMask));

	movdqa	xmm0, XMMWORD PTR _line2$21[ebp]
	pand	xmm0, XMMWORD PTR _uvMask$[ebp]
	movdqa	XMMWORD PTR $T14[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR _line1$20[ebp]
	pand	xmm0, XMMWORD PTR _uvMask$[ebp]
	movdqa	XMMWORD PTR $T16[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T16[ebp]
	paddq	xmm0, XMMWORD PTR $T14[ebp]
	movdqa	XMMWORD PTR $T12[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T12[ebp]
	movdqa	XMMWORD PTR _addVal$19[ebp], xmm0

; 112  :                 __m128i avgVal = _mm_srai_epi16(_mm_add_epi64(addVal, _mm_shuffle_epi32(addVal, _MM_SHUFFLE(2, 3, 0, 1))), 2);

	pshufd	xmm0, XMMWORD PTR _addVal$19[ebp], 177	; 000000b1H
	movdqa	XMMWORD PTR $T10[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR _addVal$19[ebp]
	paddq	xmm0, XMMWORD PTR $T10[ebp]
	movdqa	XMMWORD PTR $T8[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T8[ebp]
	psraw	xmm0, 2
	movdqa	XMMWORD PTR $T6[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T6[ebp]
	movdqa	XMMWORD PTR _avgVal$22[ebp], xmm0

; 113  :                 avgVal = _mm_shuffle_epi32(avgVal, _MM_SHUFFLE(3, 1, 2, 0));

	pshufd	xmm0, XMMWORD PTR _avgVal$22[ebp], 216	; 000000d8H
	movdqa	XMMWORD PTR $T4[ebp], xmm0
	movdqa	xmm0, XMMWORD PTR $T4[ebp]
	movdqa	XMMWORD PTR _avgVal$22[ebp], xmm0

; 114  : 
; 115  :                 *(LPUINT)(uvPlane+uvPos) = _mm_packus_epi16(avgVal, avgVal).m128i_u32[0];

	movdqa	xmm0, XMMWORD PTR _avgVal$22[ebp]
	packuswb xmm0, XMMWORD PTR _avgVal$22[ebp]
	movdqa	XMMWORD PTR $T2[ebp], xmm0
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _uvPlane$[ebp]
	add	edx, DWORD PTR _uvPos$24[ebp]
	mov	eax, DWORD PTR $T2[ebp+ecx]
	mov	DWORD PTR [edx], eax

; 116  :             }
; 117  :         }

	jmp	$LN2@Convert444
$LN1@Convert444:

; 118  :     }

	jmp	$LN5@Convert444
$LN4@Convert444:

; 119  : }

	lea	ecx, DWORD PTR __curProfiler$[ebp]
	call	DWORD PTR __imp_??1ProfilerNode@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?Convert444toNV12@@YAXPAEHHHHHHPAPAE@Z ENDP		; Convert444toNV12
_TEXT	ENDS
END
