; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\OBSHotkeyHandlers.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp_?OSDebugOut@@YAXPB_WZZ:PROC
EXTRN	__imp_?ToggleVolumeControlMute@@YAMPAUHWND__@@@Z:PROC
	ORG $+2
$SG4294785783 DB 'A', 00H, 'c', 00H, 't', 00H, 'u', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 'a', 00H, 'y', 00H, ':'
	DB	00H, ' ', 00H, '%', 00H, 'd', 00H, 00H, 00H
PUBLIC	?MuteDesktopHotkey@OBS@@CGXKK_N@Z		; OBS::MuteDesktopHotkey
PUBLIC	?MuteMicHotkey@OBS@@CGXKK_N@Z			; OBS::MuteMicHotkey
PUBLIC	?PushToTalkHotkey@OBS@@CGXKK_N@Z		; OBS::PushToTalkHotkey
PUBLIC	?RecordFromReplayBufferHotkey@OBS@@CGXKK_N@Z	; OBS::RecordFromReplayBufferHotkey
PUBLIC	?SaveReplayBufferHotkey@OBS@@CGXKK_N@Z		; OBS::SaveReplayBufferHotkey
PUBLIC	?StopReplayBufferHotkey@OBS@@CGXKK_N@Z		; OBS::StopReplayBufferHotkey
PUBLIC	?StartReplayBufferHotkey@OBS@@CGXKK_N@Z		; OBS::StartReplayBufferHotkey
PUBLIC	?StopRecordingHotkey@OBS@@CGXKK_N@Z		; OBS::StopRecordingHotkey
PUBLIC	?StartRecordingHotkey@OBS@@CGXKK_N@Z		; OBS::StartRecordingHotkey
PUBLIC	?StopStreamHotkey@OBS@@CGXKK_N@Z		; OBS::StopStreamHotkey
PUBLIC	?StartStreamHotkey@OBS@@CGXKK_N@Z		; OBS::StartStreamHotkey
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StartStreamHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StartStreamHotkey@OBS@@CGXKK_N@Z PROC			; OBS::StartStreamHotkey, COMDAT

; 24   : {

	push	ebp
	mov	ebp, esp

; 25   :     if(App->bStopStreamHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1313]
	test	ecx, ecx
	je	SHORT $LN6@StartStrea

; 26   :         return;

	jmp	SHORT $LN7@StartStrea
$LN6@StartStrea:

; 27   : 
; 28   :     if(App->bStartStreamHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1312]
	test	eax, eax
	je	SHORT $LN5@StartStrea
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@StartStrea

; 29   :         App->bStartStreamHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1312], 0
	jmp	SHORT $LN7@StartStrea
$LN5@StartStrea:

; 30   :     else if(!App->bRunning || !App->bStreaming)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+622]
	test	ecx, ecx
	je	SHORT $LN2@StartStrea
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+627]
	test	eax, eax
	jne	SHORT $LN7@StartStrea
$LN2@StartStrea:

; 31   :     {
; 32   :         if(App->bStartStreamHotkeyDown = bDown)

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	dl, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [ecx+1312], dl
	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	je	SHORT $LN7@StartStrea

; 33   :             App->Start();

	push	0
	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?Start@OBS@@AAEX_N0@Z			; OBS::Start
$LN7@StartStrea:

; 34   :     }
; 35   : }

	pop	ebp
	ret	12					; 0000000cH
?StartStreamHotkey@OBS@@CGXKK_N@Z ENDP			; OBS::StartStreamHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StopStreamHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StopStreamHotkey@OBS@@CGXKK_N@Z PROC			; OBS::StopStreamHotkey, COMDAT

; 38   : {

	push	ebp
	mov	ebp, esp

; 39   :     if(App->bStartStreamHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1312]
	test	ecx, ecx
	je	SHORT $LN5@StopStream

; 40   :         return;

	jmp	SHORT $LN6@StopStream
$LN5@StopStream:

; 41   : 
; 42   :     if(App->bStopStreamHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1313]
	test	eax, eax
	je	SHORT $LN4@StopStream
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@StopStream

; 43   :         App->bStopStreamHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1313], 0
	jmp	SHORT $LN6@StopStream
$LN4@StopStream:

; 44   :     else if(App->bRunning)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+622]
	test	ecx, ecx
	je	SHORT $LN6@StopStream

; 45   :     {
; 46   :         if(App->bStopStreamHotkeyDown = bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	al, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [edx+1313], al
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@StopStream

; 47   :             App->Stop();

	push	0
	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?Stop@OBS@@AAEX_N0@Z			; OBS::Stop
$LN6@StopStream:

; 48   :     }
; 49   : }

	pop	ebp
	ret	12					; 0000000cH
?StopStreamHotkey@OBS@@CGXKK_N@Z ENDP			; OBS::StopStreamHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StartRecordingHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StartRecordingHotkey@OBS@@CGXKK_N@Z PROC		; OBS::StartRecordingHotkey, COMDAT

; 52   : {

	push	ebp
	mov	ebp, esp

; 53   :     if (App->bStopRecordingHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1315]
	test	ecx, ecx
	je	SHORT $LN6@StartRecor

; 54   :         return;

	jmp	$LN7@StartRecor
$LN6@StartRecor:

; 55   : 
; 56   :     if (App->bStartRecordingHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1314]
	test	eax, eax
	je	SHORT $LN5@StartRecor
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@StartRecor

; 57   :         App->bStartRecordingHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1314], 0
	jmp	SHORT $LN7@StartRecor
$LN5@StartRecor:

; 58   :     else if (!App->bRecording && App->canRecord)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+623]
	test	ecx, ecx
	jne	SHORT $LN7@StartRecor
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+630]
	test	eax, eax
	je	SHORT $LN7@StartRecor

; 59   :     {
; 60   :         if (!(App->bStartRecordingHotkeyDown = bDown))

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	dl, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [ecx+1314], dl
	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	jne	SHORT $LN2@StartRecor

; 61   :             return;

	jmp	SHORT $LN7@StartRecor
$LN2@StartRecor:

; 62   : 
; 63   :         if (!App->bRunning && !App->bStreaming)

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	edx, BYTE PTR [ecx+622]
	test	edx, edx
	jne	SHORT $LN1@StartRecor
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+627]
	test	ecx, ecx
	jne	SHORT $LN1@StartRecor

; 64   :             App->Start(true);

	push	0
	push	1
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?Start@OBS@@AAEX_N0@Z			; OBS::Start
$LN1@StartRecor:

; 65   : 
; 66   :         App->StartRecording(true);

	push	1
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?StartRecording@OBS@@AAE_N_N@Z		; OBS::StartRecording
$LN7@StartRecor:

; 67   :     }
; 68   : }

	pop	ebp
	ret	12					; 0000000cH
?StartRecordingHotkey@OBS@@CGXKK_N@Z ENDP		; OBS::StartRecordingHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StopRecordingHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StopRecordingHotkey@OBS@@CGXKK_N@Z PROC		; OBS::StopRecordingHotkey, COMDAT

; 71   : {

	push	ebp
	mov	ebp, esp

; 72   :     if (App->bStartRecordingHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1314]
	test	ecx, ecx
	je	SHORT $LN5@StopRecord

; 73   :         return;

	jmp	SHORT $LN6@StopRecord
$LN5@StopRecord:

; 74   : 
; 75   :     if (App->bStopRecordingHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1315]
	test	eax, eax
	je	SHORT $LN4@StopRecord
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@StopRecord

; 76   :         App->bStopRecordingHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1315], 0
	jmp	SHORT $LN6@StopRecord
$LN4@StopRecord:

; 77   :     else if (App->bRunning)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+622]
	test	ecx, ecx
	je	SHORT $LN6@StopRecord

; 78   :     {
; 79   :         if (App->bStopRecordingHotkeyDown = bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	al, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [edx+1315], al
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@StopRecord

; 80   :             App->StopRecording();

	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?StopRecording@OBS@@AAEX_N@Z		; OBS::StopRecording
$LN6@StopRecord:

; 81   :     }
; 82   : }

	pop	ebp
	ret	12					; 0000000cH
?StopRecordingHotkey@OBS@@CGXKK_N@Z ENDP		; OBS::StopRecordingHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StartReplayBufferHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StartReplayBufferHotkey@OBS@@CGXKK_N@Z PROC		; OBS::StartReplayBufferHotkey, COMDAT

; 85   : {

	push	ebp
	mov	ebp, esp

; 86   :     if (App->bStopReplayBufferHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1317]
	test	ecx, ecx
	je	SHORT $LN5@StartRepla

; 87   :         return;

	jmp	SHORT $LN6@StartRepla
$LN5@StartRepla:

; 88   : 
; 89   :     if (App->bStartReplayBufferHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1316]
	test	eax, eax
	je	SHORT $LN4@StartRepla
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@StartRepla

; 90   :         App->bStartReplayBufferHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1316], 0
	jmp	SHORT $LN6@StartRepla
$LN4@StartRepla:

; 91   :     else if (!App->bRecordingReplayBuffer && App->canRecord)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+624]
	test	ecx, ecx
	jne	SHORT $LN6@StartRepla
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+630]
	test	eax, eax
	je	SHORT $LN6@StartRepla

; 92   :     {
; 93   :         if (!(App->bStartReplayBufferHotkeyDown = bDown))

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	dl, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [ecx+1316], dl
	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	jne	SHORT $LN1@StartRepla

; 94   :             return;

	jmp	SHORT $LN6@StartRepla
$LN1@StartRepla:

; 95   : 
; 96   :         App->StartReplayBuffer();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?StartReplayBuffer@OBS@@AAEXXZ		; OBS::StartReplayBuffer
$LN6@StartRepla:

; 97   :     }
; 98   : }

	pop	ebp
	ret	12					; 0000000cH
?StartReplayBufferHotkey@OBS@@CGXKK_N@Z ENDP		; OBS::StartReplayBufferHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?StopReplayBufferHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?StopReplayBufferHotkey@OBS@@CGXKK_N@Z PROC		; OBS::StopReplayBufferHotkey, COMDAT

; 101  : {

	push	ebp
	mov	ebp, esp

; 102  :     if (App->bStartReplayBufferHotkeyDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1316]
	test	ecx, ecx
	je	SHORT $LN5@StopReplay

; 103  :         return;

	jmp	SHORT $LN6@StopReplay
$LN5@StopReplay:

; 104  : 
; 105  :     if (App->bStopReplayBufferHotkeyDown && !bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+1317]
	test	eax, eax
	je	SHORT $LN4@StopReplay
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	jne	SHORT $LN4@StopReplay

; 106  :         App->bStopReplayBufferHotkeyDown = false;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [edx+1317], 0
	jmp	SHORT $LN6@StopReplay
$LN4@StopReplay:

; 107  :     else if (App->bRunning)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+622]
	test	ecx, ecx
	je	SHORT $LN6@StopReplay

; 108  :     {
; 109  :         if (App->bStopReplayBufferHotkeyDown = bDown)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	al, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [edx+1317], al
	movzx	ecx, BYTE PTR _bDown$[ebp]
	test	ecx, ecx
	je	SHORT $LN6@StopReplay

; 110  :             App->StopReplayBuffer();

	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?StopReplayBuffer@OBS@@AAEX_N@Z		; OBS::StopReplayBuffer
$LN6@StopReplay:

; 111  :     }
; 112  : }

	pop	ebp
	ret	12					; 0000000cH
?StopReplayBufferHotkey@OBS@@CGXKK_N@Z ENDP		; OBS::StopReplayBufferHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?SaveReplayBufferHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?SaveReplayBufferHotkey@OBS@@CGXKK_N@Z PROC		; OBS::SaveReplayBufferHotkey, COMDAT

; 115  : {

	push	ebp
	mov	ebp, esp

; 116  :     if (App->bSaveReplayBufferHotkeyDown && !bDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1318]
	test	ecx, ecx
	je	SHORT $LN4@SaveReplay
	movzx	edx, BYTE PTR _bDown$[ebp]
	test	edx, edx
	jne	SHORT $LN4@SaveReplay

; 117  :         App->bSaveReplayBufferHotkeyDown = false;

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [eax+1318], 0
	jmp	SHORT $LN5@SaveReplay
$LN4@SaveReplay:

; 118  :     else if (App->bRunning)

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	edx, BYTE PTR [ecx+622]
	test	edx, edx
	je	SHORT $LN5@SaveReplay

; 119  :     {
; 120  :         if (App->bSaveReplayBufferHotkeyDown = bDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	cl, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [eax+1318], cl
	movzx	edx, BYTE PTR _bDown$[ebp]
	test	edx, edx
	je	SHORT $LN5@SaveReplay

; 121  :             SaveReplayBuffer(App->replayBuffer, (DWORD)(App->GetVideoTime() - App->firstFrameTimestamp));

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoTime@OBS@@QBE_KXZ		; OBS::GetVideoTime
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	sub	eax, DWORD PTR [ecx+1112]
	sbb	edx, DWORD PTR [ecx+1116]
	push	eax
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+1068]
	push	eax
	call	?SaveReplayBuffer@@YAXPAUReplayBuffer@@K@Z ; SaveReplayBuffer
	add	esp, 8
$LN5@SaveReplay:

; 122  :     }
; 123  : }

	pop	ebp
	ret	12					; 0000000cH
?SaveReplayBufferHotkey@OBS@@CGXKK_N@Z ENDP		; OBS::SaveReplayBufferHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?RecordFromReplayBufferHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?RecordFromReplayBufferHotkey@OBS@@CGXKK_N@Z PROC	; OBS::RecordFromReplayBufferHotkey, COMDAT

; 128  : {

	push	ebp
	mov	ebp, esp

; 129  :     if (App->bRecordFromReplayBufferHotkeyDown && !bDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	ecx, BYTE PTR [eax+1319]
	test	ecx, ecx
	je	SHORT $LN4@RecordFrom
	movzx	edx, BYTE PTR _bDown$[ebp]
	test	edx, edx
	jne	SHORT $LN4@RecordFrom

; 130  :         App->bRecordFromReplayBufferHotkeyDown = false;

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [eax+1319], 0
	jmp	SHORT $LN5@RecordFrom
$LN4@RecordFrom:

; 131  :     else if (App->bRunning)

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	edx, BYTE PTR [ecx+622]
	test	edx, edx
	je	SHORT $LN5@RecordFrom

; 132  :     {
; 133  :         if (App->bRecordFromReplayBufferHotkeyDown = bDown)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	cl, BYTE PTR _bDown$[ebp]
	mov	BYTE PTR [eax+1319], cl
	movzx	edx, BYTE PTR _bDown$[ebp]
	test	edx, edx
	je	SHORT $LN5@RecordFrom

; 134  :             StartRecordingFromReplayBuffer(App->replayBuffer);

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	ecx, DWORD PTR [eax+1068]
	push	ecx
	call	?StartRecordingFromReplayBuffer@@YAXPAUReplayBuffer@@@Z ; StartRecordingFromReplayBuffer
	add	esp, 4
$LN5@RecordFrom:

; 135  :     }
; 136  : }

	pop	ebp
	ret	12					; 0000000cH
?RecordFromReplayBufferHotkey@OBS@@CGXKK_N@Z ENDP	; OBS::RecordFromReplayBufferHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?PushToTalkHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
tv95 = -4						; size = 4
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?PushToTalkHotkey@OBS@@CGXKK_N@Z PROC			; OBS::PushToTalkHotkey, COMDAT

; 139  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 140  :     if(bDown)

	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	je	SHORT $LN3@PushToTalk

; 141  :     {
; 142  :         App->pushToTalkDown++;

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	edx, DWORD PTR [ecx+1240]
	add	edx, 1
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [eax+1240], edx

; 143  :         App->bPushToTalkOn = true;

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [ecx+1245], 1

; 144  :     }
; 145  :     else

	jmp	SHORT $LN2@PushToTalk
$LN3@PushToTalk:

; 146  :     {
; 147  :         App->pushToTalkDown--;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+1240]
	sub	eax, 1
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [ecx+1240], eax

; 148  :         if(!App->pushToTalkDown && App->pushToTalkDelay <= 0)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	cmp	DWORD PTR [edx+1240], 0
	jne	SHORT $LN2@PushToTalk
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR tv95[ebp], eax
	mov	ecx, DWORD PTR tv95[ebp]
	cmp	DWORD PTR [ecx+1252], 0
	jg	SHORT $LN2@PushToTalk
	jl	SHORT $LN6@PushToTalk
	mov	edx, DWORD PTR tv95[ebp]
	cmp	DWORD PTR [edx+1248], 0
	ja	SHORT $LN2@PushToTalk
$LN6@PushToTalk:

; 149  :             App->bPushToTalkOn = false;

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	BYTE PTR [eax+1245], 0
$LN2@PushToTalk:

; 150  :     }
; 151  : 
; 152  :     App->pushToTalkTimeLeft = App->pushToTalkDelay*1000000;

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	push	0
	push	1000000					; 000f4240H
	mov	edx, DWORD PTR [ecx+1252]
	push	edx
	mov	eax, DWORD PTR [ecx+1248]
	push	eax
	call	__allmul
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [ecx+1256], eax
	mov	DWORD PTR [ecx+1260], edx

; 153  :     OSDebugOut(TEXT("Actual delay: %d"), App->pushToTalkDelay);

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+1252]
	push	eax
	mov	ecx, DWORD PTR [edx+1248]
	push	ecx
	push	OFFSET $SG4294785783
	call	DWORD PTR __imp_?OSDebugOut@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 154  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?PushToTalkHotkey@OBS@@CGXKK_N@Z ENDP			; OBS::PushToTalkHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?MuteMicHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
tv80 = -1						; size = 1
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?MuteMicHotkey@OBS@@CGXKK_N@Z PROC			; OBS::MuteMicHotkey, COMDAT

; 158  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 159  :     if(!bDown) return;

	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	jne	SHORT $LN2@MuteMicHot
	jmp	$LN3@MuteMicHot
$LN2@MuteMicHot:

; 160  : 
; 161  :     if(App->micAudio)

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	cmp	DWORD PTR [ecx+116], 0
	je	SHORT $LN1@MuteMicHot

; 162  :     {
; 163  :         App->micVol = ToggleVolumeControlMute(GetDlgItem(hwndMain, ID_MICVOLUME));

	push	5007					; 0000138fH
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?ToggleVolumeControlMute@@YAMPAUHWND__@@@Z
	add	esp, 4
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	fstp	DWORD PTR [eax+1172]

; 164  :         App->ReportMicVolumeChange(App->micVol, App->micVol < VOLN_MUTELEVEL, true);

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [ecx+1172]
	jbe	SHORT $LN5@MuteMicHot
	mov	BYTE PTR tv80[ebp], 1
	jmp	SHORT $LN6@MuteMicHot
$LN5@MuteMicHot:
	mov	BYTE PTR tv80[ebp], 0
$LN6@MuteMicHot:
	push	1
	movzx	edx, BYTE PTR tv80[ebp]
	push	edx
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	push	ecx
	movss	xmm0, DWORD PTR [eax+1172]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+140]
	call	eax
$LN1@MuteMicHot:
$LN3@MuteMicHot:

; 165  :     }
; 166  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MuteMicHotkey@OBS@@CGXKK_N@Z ENDP			; OBS::MuteMicHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obshotkeyhandlers.cpp
;	COMDAT ?MuteDesktopHotkey@OBS@@CGXKK_N@Z
_TEXT	SEGMENT
tv78 = -1						; size = 1
_hotkey$ = 8						; size = 4
_param$ = 12						; size = 4
_bDown$ = 16						; size = 1
?MuteDesktopHotkey@OBS@@CGXKK_N@Z PROC			; OBS::MuteDesktopHotkey, COMDAT

; 169  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 170  :     if(!bDown) return;

	movzx	eax, BYTE PTR _bDown$[ebp]
	test	eax, eax
	jne	SHORT $LN1@MuteDeskto
	jmp	SHORT $LN2@MuteDeskto
$LN1@MuteDeskto:

; 171  : 
; 172  :     App->desktopVol = ToggleVolumeControlMute(GetDlgItem(hwndMain, ID_DESKTOPVOLUME));

	push	5006					; 0000138eH
	mov	ecx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?ToggleVolumeControlMute@@YAMPAUHWND__@@@Z
	add	esp, 4
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	fstp	DWORD PTR [edx+1168]

; 173  :     App->ReportDesktopVolumeChange(App->desktopVol, App->desktopVol < VOLN_MUTELEVEL, true);

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	movss	xmm0, DWORD PTR __real@3d4ccccd
	comiss	xmm0, DWORD PTR [eax+1168]
	jbe	SHORT $LN4@MuteDeskto
	mov	BYTE PTR tv78[ebp], 1
	jmp	SHORT $LN5@MuteDeskto
$LN4@MuteDeskto:
	mov	BYTE PTR tv78[ebp], 0
$LN5@MuteDeskto:
	push	1
	movzx	ecx, BYTE PTR tv78[ebp]
	push	ecx
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	push	ecx
	movss	xmm0, DWORD PTR [edx+1168]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+144]
	call	eax
$LN2@MuteDeskto:

; 174  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MuteDesktopHotkey@OBS@@CGXKK_N@Z ENDP			; OBS::MuteDesktopHotkey
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
END
