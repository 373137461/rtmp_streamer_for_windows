; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\SettingsEncoding.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R1A@?0A@EA@SettingsEncoding@@8		; SettingsEncoding::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SettingsEncoding@@6B@			; SettingsEncoding::`RTTI Complete Object Locator'
PUBLIC	??_7SettingsEncoding@@6B@			; SettingsEncoding::`vftable'
PUBLIC	??_R2SettingsEncoding@@8			; SettingsEncoding::`RTTI Base Class Array'
PUBLIC	??_R3SettingsEncoding@@8			; SettingsEncoding::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVSettingsEncoding@@@8			; SettingsEncoding `RTTI Type Descriptor'
EXTRN	__imp_?SetAbortApplySettings@SettingsPane@@IAEX_N@Z:PROC
;	COMDAT ??_R0?AVSettingsEncoding@@@8
data$r	SEGMENT
??_R0?AVSettingsEncoding@@@8 DD FLAT:??_7type_info@@6B@	; SettingsEncoding `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSettingsEncoding@@', 00H
data$r	ENDS
;	COMDAT ??_R3SettingsEncoding@@8
rdata$r	SEGMENT
??_R3SettingsEncoding@@8 DD 00H				; SettingsEncoding::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SettingsEncoding@@8
rdata$r	ENDS
;	COMDAT ??_R2SettingsEncoding@@8
rdata$r	SEGMENT
??_R2SettingsEncoding@@8 DD FLAT:??_R1A@?0A@EA@SettingsEncoding@@8 ; SettingsEncoding::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SettingsPane@@8
rdata$r	ENDS
;	COMDAT ??_7SettingsEncoding@@6B@
CONST	SEGMENT
??_7SettingsEncoding@@6B@ DD FLAT:??_R4SettingsEncoding@@6B@ ; SettingsEncoding::`vftable'
	DD	FLAT:??_ESettingsEncoding@@UAEPAXI@Z
	DD	FLAT:?GetCategory@SettingsEncoding@@UBEPB_WXZ
	DD	FLAT:?CreatePane@SettingsEncoding@@UAEPAUHWND__@@PAU2@@Z
	DD	FLAT:?DestroyPane@SettingsEncoding@@UAEXXZ
	DD	FLAT:?ProcMessage@SettingsEncoding@@UAEHIIJ@Z
	DD	FLAT:?ApplySettings@SettingsEncoding@@UAEXXZ
	DD	FLAT:?CancelSettings@SettingsEncoding@@UAEXXZ
	DD	FLAT:?HasDefaults@SettingsEncoding@@UBE_NXZ
	DD	FLAT:?SetDefaults@SettingsPane@@UAEXXZ
	DD	FLAT:?OptimizeSettings@SettingsPane@@UAEXXZ
CONST	ENDS
;	COMDAT ?minBitRate@?9??ApplySettings@SettingsEncoding@@UAEXXZ@4HB
CONST	SEGMENT
?minBitRate@?9??ApplySettings@SettingsEncoding@@UAEXXZ@4HB DD 040H ; `SettingsEncoding::ApplySettings'::`10'::minBitRate
CONST	ENDS
;	COMDAT ??_R4SettingsEncoding@@6B@
rdata$r	SEGMENT
??_R4SettingsEncoding@@6B@ DD 00H			; SettingsEncoding::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSettingsEncoding@@@8
	DD	FLAT:??_R3SettingsEncoding@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SettingsEncoding@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SettingsEncoding@@8 DD FLAT:??_R0?AVSettingsEncoding@@@8 ; SettingsEncoding::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SettingsEncoding@@8
$SG4294750536 DB 'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG4294750537 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG4294750532 DB 'M', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a', 00H, 'g', 00H
	DB	'e', 00H, 'B', 00H, 'o', 00H, 'x', 00H, 'W', 00H, 'a', 00H, 'r'
	DB	00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'C', 00H, 'a', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294750533 DB 'N', 00H, 'V', 00H, 'E', 00H, 'N', 00H, 'C', 00H, 00H, 00H
$SG4294750534 DB 'Q', 00H, 'S', 00H, 'V', 00H, 00H, 00H
$SG4294750535 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750528 DB 'Q', 00H, 'S', 00H, 'V', 00H, 00H, 00H
$SG4294750529 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'V', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'E', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'N', 00H
	DB	'V', 00H, 'E', 00H, 'N', 00H, 'C', 00H, 'D', 00H, 'i', 00H, 's'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 'A', 00H
	DB	'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'A', 00H, 'p', 00H, 'p'
	DB	00H, 'l', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294750530 DB 'M', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a', 00H, 'g', 00H
	DB	'e', 00H, 'B', 00H, 'o', 00H, 'x', 00H, 'W', 00H, 'a', 00H, 'r'
	DB	00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'C', 00H, 'a', 00H
	DB	'p', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294750525 DB 'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG4294750526 DB 'x', 00H, '2', 00H, '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294750531 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'V', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'E', 00H, 'n'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'Q', 00H
	DB	'S', 00H, 'V', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 'd', 00H, 'A', 00H, 'f', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'A', 00H, 'p', 00H, 'p', 00H, 'l', 00H, 'y'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294750524 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750527 DB 'N', 00H, 'V', 00H, 'E', 00H, 'N', 00H, 'C', 00H, 00H, 00H
$SG4294750520 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750521 DB 'M', 00H, 'a', 00H, 'x', 00H, 'B', 00H, 'i', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294750522 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750523 DB 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294750516 DB 'C', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 00H, 00H
$SG4294750510 DB 'i', 00H, 's', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294750517 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, ':', 00H, ':', 00H, 'E', 00H, 'n', 00H, 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'r'
	DB	00H, 'o', 00H, 'm', 00H, ' ', 00H, '%', 00H, 'd', 00H, 'k', 00H
	DB	'b', 00H, '/', 00H, 's', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, 'k', 00H, 'b', 00H, '/', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750518 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750519 DB 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294750512 DB 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750513 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750514 DB 'B', 00H, 'i', 00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 00H, 00H
$SG4294750515 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750508 DB 'U', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'B', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750509 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750511 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750504 DB 'U', 00H, 's', 00H, 'e', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H
$SG4294750505 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750506 DB 'P', 00H, 'a', 00H, 'd', 00H, 'C', 00H, 'B', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750507 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750500 DB 'Q', 00H, 'S', 00H, 'V', 00H, 00H, 00H
$SG4294750501 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750502 DB 'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, 00H, 00H
$SG4294750503 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750496 DB 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294750497 DB '8', 00H, 00H, 00H
$SG4294750498 DB 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 't', 00H, 'i', 00H
	DB	'p', 00H, 's', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, '3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294750499 DB 'N', 00H, 'V', 00H, 'E', 00H, 'N', 00H, 'C', 00H, 00H, 00H
$SG4294750492 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750493 DB 'U', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'B', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750494 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'V', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'Q', 00H, 'u'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 'T', 00H
	DB	'o', 00H, 'o', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 00H
	DB	00H
	ORG $+2
$SG4294750495 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750488 DB 'M', 00H, 'a', 00H, 'x', 00H, 'B', 00H, 'i', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294750489 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'A', 00H, 'd', 00H, 'v', 00H, 'a'
	DB	00H, 'n', 00H, 'c', 00H, 'e', 00H, 'd', 00H, '.', 00H, 'P', 00H
	DB	'a', 00H, 'd', 00H, 'C', 00H, 'B', 00H, 'R', 00H, 'T', 00H, 'o'
	DB	00H, 'o', 00H, 'l', 00H, 'T', 00H, 'i', 00H, 'p', 00H, 00H, 00H
$SG4294750490 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750491 DB 'P', 00H, 'a', 00H, 'd', 00H, 'C', 00H, 'B', 00H, 'R', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750484 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'V', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'M', 00H, 'a'
	DB	00H, 'x', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'R', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 't'
	DB	00H, 'i', 00H, 'p', 00H, 00H, 00H
$SG4294750485 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750486 DB 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294750487 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750480 DB 'M', 00H, 'P', 00H, '3', 00H, 00H, 00H
$SG4294750481 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750482 DB 'U', 00H, 's', 00H, 'e', 00H, 'B', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H
$SG4294750483 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, '.', 00H, 'V', 00H
	DB	'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, '.', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'T', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 't'
	DB	00H, 'i', 00H, 'p', 00H, 00H, 00H
$SG4294750476 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750477 DB 'C', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 00H, 00H
$SG4294750478 DB 'A', 00H, 'A', 00H, 'C', 00H, 00H, 00H
$SG4294750479 DB 'A', 00H, 'A', 00H, 'C', 00H, 00H, 00H
$SG4294750472 DB '4', 00H, '4', 00H, '.', 00H, '1', 00H, 'k', 00H, 'H', 00H
	DB	'z', 00H, 00H, 00H
$SG4294750473 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750474 DB 'C', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 00H, 00H
$SG4294750475 DB 'M', 00H, 'P', 00H, '3', 00H, 00H, 00H
$SG4294750468 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750469 DB 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750470 DB '4', 00H, '4', 00H, '.', 00H, '1', 00H, 'k', 00H, 'H', 00H
	DB	'z', 00H, 00H, 00H
$SG4294750471 DB '4', 00H, '8', 00H, 'k', 00H, 'H', 00H, 'z', 00H, 00H, 00H
$SG4294750464 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750465 DB 'i', 00H, 's', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294750466 DB 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'o', 00H
	DB	00H, 00H
	ORG $+2
$SG4294750467 DB 'm', 00H, 'o', 00H, 'n', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294750460 DB '9', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750461 DB '8', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750462 DB '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294750463 DB '4', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG4294750456 DB '1', 00H, '9', 00H, '2', 00H, 00H, 00H
$SG4294750457 DB '1', 00H, '6', 00H, '0', 00H, 00H, 00H
$SG4294750458 DB '1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG4294750459 DB '1', 00H, '1', 00H, '2', 00H, 00H, 00H
$SG4294750452 DB '4', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750453 DB '3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294750454 DB '3', 00H, '2', 00H, '0', 00H, 00H, 00H
$SG4294750455 DB '2', 00H, '5', 00H, '6', 00H, 00H, 00H
$SG4294750448 DB '8', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750449 DB '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294750450 DB '5', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750451 DB '4', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG4294750444 DB '9', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750445 DB '1', 00H, '6', 00H, '0', 00H, 00H, 00H
$SG4294750446 DB '1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG4294750447 DB '9', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750440 DB '4', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG4294750441 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294750442 DB 'B', 00H, 'i', 00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 00H, 00H
$SG4294750443 DB '4', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG4294750436 DB '1', 00H, '1', 00H, '2', 00H, 00H, 00H
$SG4294750437 DB '9', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750438 DB '8', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750439 DB '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294750432 DB '2', 00H, '5', 00H, '6', 00H, 00H, 00H
$SG4294750433 DB '1', 00H, '9', 00H, '2', 00H, 00H, 00H
$SG4294750434 DB '1', 00H, '6', 00H, '0', 00H, 00H, 00H
$SG4294750435 DB '1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG4294750428 DB '4', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG4294750429 DB '4', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750430 DB '3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294750431 DB '3', 00H, '2', 00H, '0', 00H, 00H, 00H
$SG4294750424 DB '9', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750425 DB '8', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG4294750426 DB '6', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG4294750427 DB '5', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG4294750420 DB '4', 00H, '8', 00H, 'k', 00H, 'H', 00H, 'z', 00H, 00H, 00H
$SG4294750421 DB '4', 00H, '4', 00H, '.', 00H, '1', 00H, 'k', 00H, 'H', 00H
	DB	'z', 00H, 00H, 00H
$SG4294750422 DB '1', 00H, '6', 00H, '0', 00H, 00H, 00H
$SG4294750423 DB '1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG4294750419 DB '4', 00H, '4', 00H, '.', 00H, '1', 00H, 'k', 00H, 'H', 00H
	DB	'z', 00H, 00H, 00H
PUBLIC	?ProcMessage@SettingsEncoding@@UAEHIIJ@Z	; SettingsEncoding::ProcMessage
PUBLIC	?HasDefaults@SettingsEncoding@@UBE_NXZ		; SettingsEncoding::HasDefaults
PUBLIC	?CancelSettings@SettingsEncoding@@UAEXXZ	; SettingsEncoding::CancelSettings
PUBLIC	?ApplySettings@SettingsEncoding@@UAEXXZ		; SettingsEncoding::ApplySettings
PUBLIC	?DestroyPane@SettingsEncoding@@UAEXXZ		; SettingsEncoding::DestroyPane
PUBLIC	?CreatePane@SettingsEncoding@@UAEPAUHWND__@@PAU2@@Z ; SettingsEncoding::CreatePane
PUBLIC	?GetCategory@SettingsEncoding@@UBEPB_WXZ	; SettingsEncoding::GetCategory
PUBLIC	??1SettingsEncoding@@UAE@XZ			; SettingsEncoding::~SettingsEncoding
PUBLIC	??_GSettingsEncoding@@UAEPAXI@Z			; SettingsEncoding::`scalar deleting destructor'
PUBLIC	??0SettingsEncoding@@QAE@XZ			; SettingsEncoding::SettingsEncoding
EXTRN	??_ESettingsEncoding@@UAEPAXI@Z:PROC		; SettingsEncoding::`vector deleting destructor'
;	COMDAT ?$S1@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4IA
_BSS	SEGMENT
?$S1@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4IA DD 01H DUP (?) ; S1<`template-parameter-2',SettingsEncoding::tCategory,unsigned int, ?? &>
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?name@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4PB_WB
_BSS	SEGMENT
?name@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4PB_WB DD 01H DUP (?) ; `SettingsEncoding::GetCategory'::`2'::name
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ??0SettingsEncoding@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SettingsEncoding@@QAE@XZ PROC			; SettingsEncoding::SettingsEncoding, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0SettingsPane@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SettingsEncoding@@6B@

; 32   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SettingsEncoding@@QAE@XZ ENDP			; SettingsEncoding::SettingsEncoding
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSettingsEncoding@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSettingsEncoding@@UAEPAXI@Z PROC			; SettingsEncoding::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SettingsEncoding@@UAE@XZ		; SettingsEncoding::~SettingsEncoding
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSettingsEncoding@@UAEPAXI@Z ENDP			; SettingsEncoding::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ??1SettingsEncoding@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SettingsEncoding@@UAE@XZ PROC			; SettingsEncoding::~SettingsEncoding, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SettingsEncoding@@6B@

; 36   : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1SettingsPane@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1SettingsEncoding@@UAE@XZ ENDP			; SettingsEncoding::~SettingsEncoding
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?GetCategory@SettingsEncoding@@UBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCategory@SettingsEncoding@@UBEPB_WXZ PROC		; SettingsEncoding::GetCategory, COMDAT
; _this$ = ecx

; 39   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 40   :     static CTSTR name = Str("Settings.Encoding");

	mov	eax, DWORD PTR ?$S1@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4IA
	and	eax, 1
	jne	SHORT $LN1@GetCategor
	mov	ecx, DWORD PTR ?$S1@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4IA, ecx
	push	OFFSET $SG4294750537
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR ?name@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4PB_WB, eax
$LN1@GetCategor:

; 41   :     return name;

	mov	eax, DWORD PTR ?name@?1??GetCategory@SettingsEncoding@@UBEPB_WXZ@4PB_WB

; 42   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCategory@SettingsEncoding@@UBEPB_WXZ ENDP		; SettingsEncoding::GetCategory
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?CreatePane@SettingsEncoding@@UAEPAUHWND__@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parentHwnd$ = 8					; size = 4
?CreatePane@SettingsEncoding@@UAEPAUHWND__@@PAU2@@Z PROC ; SettingsEncoding::CreatePane, COMDAT
; _this$ = ecx

; 45   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 46   :     hwnd = OBSCreateDialog(hinstMain, MAKEINTRESOURCE(IDD_SETTINGS_ENCODING), parentHwnd, (DLGPROC)DialogProc, (LPARAM)this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?DialogProc@SettingsPane@@SGHPAUHWND__@@IIJ@Z
	push	ecx
	mov	edx, DWORD PTR _parentHwnd$[ebp]
	push	edx
	push	115					; 00000073H
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSCreateDialog@@YAPAUHWND__@@PAUHINSTANCE__@@PB_WPAU1@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 47   :     return hwnd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]

; 48   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreatePane@SettingsEncoding@@UAEPAUHWND__@@PAU2@@Z ENDP ; SettingsEncoding::CreatePane
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?DestroyPane@SettingsEncoding@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DestroyPane@SettingsEncoding@@UAEXXZ PROC		; SettingsEncoding::DestroyPane, COMDAT
; _this$ = ecx

; 51   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :     DestroyWindow(hwnd);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4

; 53   :     hwnd = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 54   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyPane@SettingsEncoding@@UAEXXZ ENDP		; SettingsEncoding::DestroyPane
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?ApplySettings@SettingsEncoding@@UAEXXZ
_TEXT	SEGMENT
$T1 = -148						; size = 8
$T2 = -140						; size = 8
$T3 = -132						; size = 8
$T4 = -124						; size = 8
_strTemp$ = -116					; size = 8
tv251 = -108						; size = 4
tv320 = -104						; size = 4
tv151 = -100						; size = 4
_bufSize$ = -96						; size = 4
tv235 = -92						; size = 4
_vcodec$ = -88						; size = 8
tv132 = -80						; size = 4
tv517 = -76						; size = 4
tv329 = -72						; size = 4
tv464 = -68						; size = 4
_quality$ = -64						; size = 4
tv443 = -60						; size = 4
tv78 = -56						; size = 4
_curSelCh$ = -52					; size = 4
tv219 = -48						; size = 4
_curSel$ = -44						; size = 4
tv145 = -40						; size = 4
_oldBitrate$5 = -36					; size = 4
tv94 = -32						; size = 4
tv336 = -28						; size = 4
tv248 = -24						; size = 4
_usex264$ = -17						; size = 1
_bitrate$ = -16						; size = 4
_useNVENC_prev$ = -11					; size = 1
_bPadCBR$ = -10						; size = 1
_useQSV_prev$ = -9					; size = 1
_bCustomBuffer$ = -8					; size = 1
_bUseCBR$ = -7						; size = 1
_useQSV$ = -6						; size = 1
_useNVENC$ = -5						; size = 1
_this$ = -4						; size = 4
?ApplySettings@SettingsEncoding@@UAEXXZ PROC		; SettingsEncoding::ApplySettings, COMDAT
; _this$ = ecx

; 57   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 148				; 00000094H
	mov	DWORD PTR _this$[ebp], ecx

; 58   :     bool useQSV   = SendMessage(GetDlgItem(hwnd, IDC_ENCODERQSV), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1176					; 00000498H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN12@ApplySetti
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN13@ApplySetti
$LN12@ApplySetti:
	mov	DWORD PTR tv78[ebp], 0
$LN13@ApplySetti:
	mov	dl, BYTE PTR tv78[ebp]
	mov	BYTE PTR _useQSV$[ebp], dl

; 59   :     bool useNVENC = SendMessage(GetDlgItem(hwnd, IDC_ENCODERNVENC), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1177					; 00000499H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN14@ApplySetti
	mov	DWORD PTR tv94[ebp], 1
	jmp	SHORT $LN15@ApplySetti
$LN14@ApplySetti:
	mov	DWORD PTR tv94[ebp], 0
$LN15@ApplySetti:
	mov	dl, BYTE PTR tv94[ebp]
	mov	BYTE PTR _useNVENC$[ebp], dl

; 60   :     bool usex264 = !useQSV && !useNVENC;

	movzx	eax, BYTE PTR _useQSV$[ebp]
	test	eax, eax
	jne	SHORT $LN16@ApplySetti
	movzx	ecx, BYTE PTR _useNVENC$[ebp]
	test	ecx, ecx
	jne	SHORT $LN16@ApplySetti
	mov	DWORD PTR tv132[ebp], 1
	jmp	SHORT $LN17@ApplySetti
$LN16@ApplySetti:
	mov	DWORD PTR tv132[ebp], 0
$LN17@ApplySetti:
	mov	dl, BYTE PTR tv132[ebp]
	mov	BYTE PTR _usex264$[ebp], dl

; 61   : 
; 62   :     String vcodec = AppConfig->GetString(L"Video Encoding", L"Encoder");

	push	0
	push	OFFSET $SG4294750536
	push	OFFSET $SG4294750535
	lea	eax, DWORD PTR _vcodec$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z

; 63   : 
; 64   :     bool useQSV_prev   = !!(vcodec == L"QSV");

	push	OFFSET $SG4294750534
	lea	ecx, DWORD PTR _vcodec$[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN18@ApplySetti
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN19@ApplySetti
$LN18@ApplySetti:
	mov	DWORD PTR tv145[ebp], 0
$LN19@ApplySetti:
	mov	cl, BYTE PTR tv145[ebp]
	mov	BYTE PTR _useQSV_prev$[ebp], cl

; 65   :     bool useNVENC_prev = !!(vcodec == L"NVENC");

	push	OFFSET $SG4294750533
	lea	ecx, DWORD PTR _vcodec$[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN20@ApplySetti
	mov	DWORD PTR tv151[ebp], 1
	jmp	SHORT $LN21@ApplySetti
$LN20@ApplySetti:
	mov	DWORD PTR tv151[ebp], 0
$LN21@ApplySetti:
	mov	dl, BYTE PTR tv151[ebp]
	mov	BYTE PTR _useNVENC_prev$[ebp], dl

; 66   : 
; 67   :     if (!hasQSV && !useQSV && useQSV_prev &&
; 68   :         OBSMessageBox(hwnd, Str("Settings.Encoding.Video.EncoderQSVDisabledAfterApply"), Str("MessageBoxWarningCaption"), MB_ICONEXCLAMATION | MB_OKCANCEL) != IDOK)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN9@ApplySetti
	movzx	edx, BYTE PTR _useQSV$[ebp]
	test	edx, edx
	jne	SHORT $LN9@ApplySetti
	movzx	eax, BYTE PTR _useQSV_prev$[ebp]
	test	eax, eax
	je	SHORT $LN9@ApplySetti
	push	49					; 00000031H
	push	OFFSET $SG4294750532
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	OFFSET $SG4294750531
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN9@ApplySetti

; 69   :     {
; 70   :         SetAbortApplySettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetAbortApplySettings@SettingsPane@@IAEX_N@Z

; 71   :         return;

	lea	ecx, DWORD PTR _vcodec$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN10@ApplySetti
$LN9@ApplySetti:

; 72   :     }
; 73   : 
; 74   :     if (!hasNVENC && !useNVENC && useNVENC_prev &&
; 75   :         OBSMessageBox(hwnd, Str("Settings.Encoding.Video.EncoderNVENCDisabledAfterApply"), Str("MessageBoxWarningCaption"), MB_ICONEXCLAMATION | MB_OKCANCEL) != IDOK)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	jne	SHORT $LN8@ApplySetti
	movzx	ecx, BYTE PTR _useNVENC$[ebp]
	test	ecx, ecx
	jne	SHORT $LN8@ApplySetti
	movzx	edx, BYTE PTR _useNVENC_prev$[ebp]
	test	edx, edx
	je	SHORT $LN8@ApplySetti
	push	49					; 00000031H
	push	OFFSET $SG4294750530
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	OFFSET $SG4294750529
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H
	cmp	eax, 1
	je	SHORT $LN8@ApplySetti

; 76   :     {
; 77   :         SetAbortApplySettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetAbortApplySettings@SettingsPane@@IAEX_N@Z

; 78   :         return;

	lea	ecx, DWORD PTR _vcodec$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN10@ApplySetti
$LN8@ApplySetti:

; 79   :     }
; 80   : 
; 81   :     EnableWindow(GetDlgItem(hwnd, IDC_ENCODERQSV), hasQSV || useQSV);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN22@ApplySetti
	movzx	eax, BYTE PTR _useQSV$[ebp]
	test	eax, eax
	jne	SHORT $LN22@ApplySetti
	mov	DWORD PTR tv219[ebp], 0
	jmp	SHORT $LN23@ApplySetti
$LN22@ApplySetti:
	mov	DWORD PTR tv219[ebp], 1
$LN23@ApplySetti:
	mov	ecx, DWORD PTR tv219[ebp]
	push	ecx
	push	1176					; 00000498H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 82   :     EnableWindow(GetDlgItem(hwnd, IDC_ENCODERNVENC), hasNVENC || useNVENC);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+9]
	test	edx, edx
	jne	SHORT $LN24@ApplySetti
	movzx	eax, BYTE PTR _useNVENC$[ebp]
	test	eax, eax
	jne	SHORT $LN24@ApplySetti
	mov	DWORD PTR tv235[ebp], 0
	jmp	SHORT $LN25@ApplySetti
$LN24@ApplySetti:
	mov	DWORD PTR tv235[ebp], 1
$LN25@ApplySetti:
	mov	ecx, DWORD PTR tv235[ebp]
	push	ecx
	push	1177					; 00000499H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 83   : 
; 84   :     AppConfig->SetString(L"Video Encoding", L"Encoder", useQSV ? L"QSV" : useNVENC ? L"NVENC" : L"x264");

	movzx	ecx, BYTE PTR _useQSV$[ebp]
	test	ecx, ecx
	je	SHORT $LN28@ApplySetti
	mov	DWORD PTR tv251[ebp], OFFSET $SG4294750528
	jmp	SHORT $LN29@ApplySetti
$LN28@ApplySetti:
	movzx	edx, BYTE PTR _useNVENC$[ebp]
	test	edx, edx
	je	SHORT $LN26@ApplySetti
	mov	DWORD PTR tv248[ebp], OFFSET $SG4294750527
	jmp	SHORT $LN27@ApplySetti
$LN26@ApplySetti:
	mov	DWORD PTR tv248[ebp], OFFSET $SG4294750526
$LN27@ApplySetti:
	mov	eax, DWORD PTR tv248[ebp]
	mov	DWORD PTR tv251[ebp], eax
$LN29@ApplySetti:
	mov	ecx, DWORD PTR tv251[ebp]
	push	ecx
	push	OFFSET $SG4294750525
	push	OFFSET $SG4294750524
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 85   : 
; 86   :     int quality = (int)SendMessage(GetDlgItem(hwnd, IDC_QUALITY), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1012					; 000003f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _quality$[ebp], eax

; 87   :     if(quality != CB_ERR)

	cmp	DWORD PTR _quality$[ebp], -1
	je	SHORT $LN7@ApplySetti

; 88   :         AppConfig->SetInt(TEXT("Video Encoding"), TEXT("Quality"), quality);

	mov	ecx, DWORD PTR _quality$[ebp]
	push	ecx
	push	OFFSET $SG4294750523
	push	OFFSET $SG4294750522
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z
$LN7@ApplySetti:

; 89   : 
; 90   :     static const int minBitRate = 64;
; 91   : 
; 92   :     UINT bitrate = GetEditText(GetDlgItem(hwnd, IDC_MAXBITRATE)).ToInt();

	push	10					; 0000000aH
	push	1015					; 000003f7H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _bitrate$[ebp], eax
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 93   :     if (bitrate < minBitRate) bitrate = minBitRate;

	cmp	DWORD PTR _bitrate$[ebp], 64		; 00000040H
	jae	SHORT $LN6@ApplySetti
	mov	DWORD PTR _bitrate$[ebp], 64		; 00000040H
$LN6@ApplySetti:

; 94   :     AppConfig->SetInt(TEXT("Video Encoding"), TEXT("MaxBitrate"), bitrate);

	mov	edx, DWORD PTR _bitrate$[ebp]
	push	edx
	push	OFFSET $SG4294750521
	push	OFFSET $SG4294750520
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 95   : 
; 96   :     UINT bufSize = GetEditText(GetDlgItem(hwnd, IDC_BUFFERSIZE)).ToInt();

	push	10					; 0000000aH
	push	1016					; 000003f8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _bufSize$[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 97   :     //if(bufSize < minBitRate) bufSize = bitrate;  //R1CH: Allow users to enter 0 buffer size to disable VBV, its protected by checkbox anyway
; 98   :     AppConfig->SetInt(TEXT("Video Encoding"), TEXT("BufferSize"), bufSize);

	mov	eax, DWORD PTR _bufSize$[ebp]
	push	eax
	push	OFFSET $SG4294750519
	push	OFFSET $SG4294750518
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 99   : 
; 100  :     if(App->GetVideoEncoder() != NULL) {

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	test	eax, eax
	je	$LN5@ApplySetti

; 101  :         if(App->GetVideoEncoder()->DynamicBitrateSupported())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	mov	DWORD PTR tv320[ebp], eax
	mov	ecx, DWORD PTR tv320[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv320[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	$LN5@ApplySetti

; 102  :         {
; 103  :             int oldBitrate = App->GetVideoEncoder()->GetBitRate();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	mov	DWORD PTR tv329[ebp], eax
	mov	edx, DWORD PTR tv329[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv329[ebp]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	mov	DWORD PTR _oldBitrate$5[ebp], eax

; 104  :             App->GetVideoEncoder()->SetBitRate(bitrate, bufSize);

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	mov	DWORD PTR tv336[ebp], eax
	mov	eax, DWORD PTR _bufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bitrate$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv336[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv336[ebp]
	mov	edx, DWORD PTR [eax+20]
	call	edx

; 105  :             if(oldBitrate != bitrate)

	mov	eax, DWORD PTR _oldBitrate$5[ebp]
	cmp	eax, DWORD PTR _bitrate$[ebp]
	je	SHORT $LN5@ApplySetti

; 106  :                 Log(FormattedString(TEXT("Settings::Encoding: Changing bitrate from %dkb/s to %dkb/s"), oldBitrate, bitrate));

	mov	ecx, DWORD PTR _bitrate$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldBitrate$5[ebp]
	push	edx
	push	OFFSET $SG4294750517
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	DWORD PTR __imp_?FormattedString@@YA?AVString@@PB_WZZ
	add	esp, 16					; 00000010H
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN5@ApplySetti:

; 107  :         }
; 108  :     }
; 109  : 
; 110  :     String strTemp = GetCBText(GetDlgItem(hwnd, IDC_AUDIOCODEC));

	push	-1
	push	1017					; 000003f9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR _strTemp$[ebp]
	push	eax
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH

; 111  :     AppConfig->SetString(TEXT("Audio Encoding"), TEXT("Codec"), strTemp);

	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294750516
	push	OFFSET $SG4294750515
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 112  : 
; 113  :     strTemp = GetCBText(GetDlgItem(hwnd, IDC_AUDIOBITRATE));

	push	-1
	push	1019					; 000003fbH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 114  :     AppConfig->SetString(TEXT("Audio Encoding"), TEXT("Bitrate"), strTemp);

	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294750514
	push	OFFSET $SG4294750513
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 115  : 
; 116  :     int curSel = (int)SendMessage(GetDlgItem(hwnd, IDC_AUDIOFORMAT), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1018					; 000003faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSel$[ebp], eax

; 117  :     if(curSel != CB_ERR)

	cmp	DWORD PTR _curSel$[ebp], -1
	je	SHORT $LN2@ApplySetti

; 118  :         AppConfig->SetInt(TEXT("Audio Encoding"), TEXT("Format"), curSel);

	mov	eax, DWORD PTR _curSel$[ebp]
	push	eax
	push	OFFSET $SG4294750512
	push	OFFSET $SG4294750511
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z
$LN2@ApplySetti:

; 119  : 
; 120  :     int curSelCh = (int)SendMessage(GetDlgItem(hwnd, IDC_AUDIOCHANNEL), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1021					; 000003fdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _curSelCh$[ebp], eax

; 121  :     if(curSelCh != CB_ERR)

	cmp	DWORD PTR _curSelCh$[ebp], -1
	je	SHORT $LN1@ApplySetti

; 122  :         AppConfig->SetInt(TEXT("Audio Encoding"), TEXT("isStereo"), curSelCh);

	mov	eax, DWORD PTR _curSelCh$[ebp]
	push	eax
	push	OFFSET $SG4294750510
	push	OFFSET $SG4294750509
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z
$LN1@ApplySetti:

; 123  : 
; 124  :     bool bUseCBR = SendMessage(GetDlgItem(hwnd, IDC_USECBR), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1133					; 0000046dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN30@ApplySetti
	mov	DWORD PTR tv443[ebp], 1
	jmp	SHORT $LN31@ApplySetti
$LN30@ApplySetti:
	mov	DWORD PTR tv443[ebp], 0
$LN31@ApplySetti:
	mov	al, BYTE PTR tv443[ebp]
	mov	BYTE PTR _bUseCBR$[ebp], al

; 125  :     AppConfig->SetInt(TEXT("Video Encoding"), TEXT("UseCBR"), bUseCBR);

	movzx	ecx, BYTE PTR _bUseCBR$[ebp]
	push	ecx
	push	OFFSET $SG4294750508
	push	OFFSET $SG4294750507
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 126  : 
; 127  :     bool bPadCBR = SendMessage(GetDlgItem(hwnd, IDC_PADCBR), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1134					; 0000046eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN32@ApplySetti
	mov	DWORD PTR tv464[ebp], 1
	jmp	SHORT $LN33@ApplySetti
$LN32@ApplySetti:
	mov	DWORD PTR tv464[ebp], 0
$LN33@ApplySetti:
	mov	cl, BYTE PTR tv464[ebp]
	mov	BYTE PTR _bPadCBR$[ebp], cl

; 128  :     AppConfig->SetInt(TEXT("Video Encoding"), TEXT("PadCBR"), bPadCBR);

	movzx	edx, BYTE PTR _bPadCBR$[ebp]
	push	edx
	push	OFFSET $SG4294750506
	push	OFFSET $SG4294750505
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 129  : 
; 130  :     bool bCustomBuffer = SendMessage(GetDlgItem(hwnd, IDC_CUSTOMBUFFER), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN34@ApplySetti
	mov	DWORD PTR tv517[ebp], 1
	jmp	SHORT $LN35@ApplySetti
$LN34@ApplySetti:
	mov	DWORD PTR tv517[ebp], 0
$LN35@ApplySetti:
	mov	dl, BYTE PTR tv517[ebp]
	mov	BYTE PTR _bCustomBuffer$[ebp], dl

; 131  :     AppConfig->SetInt(TEXT("Video Encoding"), TEXT("UseBufferSize"), bCustomBuffer);

	movzx	eax, BYTE PTR _bCustomBuffer$[ebp]
	push	eax
	push	OFFSET $SG4294750504
	push	OFFSET $SG4294750503
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 132  : }

	lea	ecx, DWORD PTR _strTemp$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _vcodec$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN10@ApplySetti:
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplySettings@SettingsEncoding@@UAEXXZ ENDP		; SettingsEncoding::ApplySettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?CancelSettings@SettingsEncoding@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CancelSettings@SettingsEncoding@@UAEXXZ PROC		; SettingsEncoding::CancelSettings, COMDAT
; _this$ = ecx

; 135  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CancelSettings@SettingsEncoding@@UAEXXZ ENDP		; SettingsEncoding::CancelSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?HasDefaults@SettingsEncoding@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDefaults@SettingsEncoding@@UBE_NXZ PROC		; SettingsEncoding::HasDefaults, COMDAT
; _this$ = ecx

; 139  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 140  :     return false;

	xor	al, al

; 141  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasDefaults@SettingsEncoding@@UBE_NXZ ENDP		; SettingsEncoding::HasDefaults
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsencoding.cpp
;	COMDAT ?ProcMessage@SettingsEncoding@@UAEHIIJ@Z
_TEXT	SEGMENT
_bitrate$1 = -332					; size = 4
$T2 = -328						; size = 8
$T3 = -320						; size = 8
_buffersize$4 = -312					; size = 4
$T5 = -308						; size = 8
$T6 = -300						; size = 8
$T7 = -292						; size = 8
_strText$8 = -284					; size = 8
_vcodec$9 = -276					; size = 8
$T10 = -268						; size = 4
tv354 = -264						; size = 4
tv64 = -260						; size = 4
tv333 = -256						; size = 4
_isAAC$11 = -252					; size = 4
tv215 = -248						; size = 4
tv685 = -244						; size = 4
tv128 = -240						; size = 4
tv482 = -236						; size = 4
tv850 = -232						; size = 4
tv90 = -228						; size = 4
tv765 = -224						; size = 4
tv235 = -220						; size = 4
tv1215 = -216						; size = 4
tv181 = -212						; size = 4
tv1198 = -208						; size = 4
tv856 = -204						; size = 4
tv1174 = -200						; size = 4
tv834 = -196						; size = 4
tv1154 = -192						; size = 4
_isStereo$12 = -188					; size = 4
tv1137 = -184						; size = 4
tv637 = -180						; size = 4
tv1114 = -176						; size = 4
tv621 = -172						; size = 4
tv1092 = -168						; size = 4
tv476 = -164						; size = 4
tv1066 = -160						; size = 4
tv372 = -156						; size = 4
tv1045 = -152						; size = 4
tv339 = -148						; size = 4
_isAAC$13 = -144					; size = 4
tv325 = -140						; size = 4
tv1028 = -136						; size = 4
tv220 = -132						; size = 4
tv995 = -128						; size = 4
tv197 = -124						; size = 4
_isStereo$14 = -120					; size = 4
tv134 = -116						; size = 4
tv914 = -112						; size = 4
tv872 = -108						; size = 4
tv389 = -104						; size = 4
_i$15 = -100						; size = 4
tv875 = -96						; size = 4
_hwndAudioFormat$16 = -92				; size = 4
_hwndToolTip$17 = -88					; size = 4
_bCustomBuffer$18 = -84					; size = 1
_useQSV$19 = -83					; size = 1
_bPadCBR$20 = -82					; size = 1
_showQSVConfigurationWarning$21 = -81			; size = 1
_bUseBufferSize$22 = -80				; size = 1
_QSVOnUnsupportedWinVer$23 = -79			; size = 1
_useCBR$24 = -78					; size = 1
_useQSV$25 = -77					; size = 1
_usex264$26 = -76					; size = 1
_bChecked$27 = -75					; size = 1
_bUseCBR$28 = -74					; size = 1
_usex264$29 = -73					; size = 1
_hwndAudioBitrate$30 = -72				; size = 4
_useNVENC$31 = -66					; size = 1
_useNVENC$32 = -65					; size = 1
_hwndTemp$33 = -64					; size = 4
_bDataChanged$34 = -57					; size = 1
_this$ = -56						; size = 4
_ti$35 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?ProcMessage@SettingsEncoding@@UAEHIIJ@Z PROC		; SettingsEncoding::ProcMessage, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 145  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN44@ProcMessag
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN33@ProcMessag
	jmp	$LN45@ProcMessag
$LN44@ProcMessag:

; 146  :     {
; 147  :         case WM_INITDIALOG:
; 148  :             {
; 149  :                 HWND hwndTemp;
; 150  :                 LocalizeWindow(hwnd);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 151  : 
; 152  :                 //--------------------------------------------
; 153  : 
; 154  :                 bool showQSVConfigurationWarning = false;

	mov	BYTE PTR _showQSVConfigurationWarning$21[ebp], 0

; 155  : 
; 156  :                 hasQSV = CheckQSVHardwareSupport(false, &showQSVConfigurationWarning);

	lea	eax, DWORD PTR _showQSVConfigurationWarning$21[ebp]
	push	eax
	push	0
	call	?CheckQSVHardwareSupport@@YA_N_NPA_N@Z	; CheckQSVHardwareSupport
	add	esp, 8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], al

; 157  :                 hasNVENC = CheckNVENCHardwareSupport(false);

	push	0
	call	?CheckNVENCHardwareSupport@@YA_N_N@Z	; CheckNVENCHardwareSupport
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+9], al

; 158  : 
; 159  :                 String vcodec = AppConfig->GetString(L"Video Encoding", L"Encoder");

	push	0
	push	OFFSET $SG4294750502
	push	OFFSET $SG4294750501
	lea	eax, DWORD PTR _vcodec$9[ebp]
	push	eax
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z

; 160  : 
; 161  :                 bool useQSV   = !!(vcodec == L"QSV");

	push	OFFSET $SG4294750500
	lea	ecx, DWORD PTR _vcodec$9[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN49@ProcMessag
	mov	DWORD PTR tv90[ebp], 1
	jmp	SHORT $LN50@ProcMessag
$LN49@ProcMessag:
	mov	DWORD PTR tv90[ebp], 0
$LN50@ProcMessag:
	mov	cl, BYTE PTR tv90[ebp]
	mov	BYTE PTR _useQSV$25[ebp], cl

; 162  :                 bool useNVENC = !!(vcodec == L"NVENC");

	push	OFFSET $SG4294750499
	lea	ecx, DWORD PTR _vcodec$9[ebp]
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN51@ProcMessag
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN52@ProcMessag
$LN51@ProcMessag:
	mov	DWORD PTR tv128[ebp], 0
$LN52@ProcMessag:
	mov	dl, BYTE PTR tv128[ebp]
	mov	BYTE PTR _useNVENC$31[ebp], dl

; 163  :                 bool usex264  = !useQSV && !useNVENC;

	movzx	eax, BYTE PTR _useQSV$25[ebp]
	test	eax, eax
	jne	SHORT $LN53@ProcMessag
	movzx	ecx, BYTE PTR _useNVENC$31[ebp]
	test	ecx, ecx
	jne	SHORT $LN53@ProcMessag
	mov	DWORD PTR tv134[ebp], 1
	jmp	SHORT $LN54@ProcMessag
$LN53@ProcMessag:
	mov	DWORD PTR tv134[ebp], 0
$LN54@ProcMessag:
	mov	dl, BYTE PTR tv134[ebp]
	mov	BYTE PTR _usex264$26[ebp], dl

; 164  : 
; 165  :                 SendMessage(GetDlgItem(hwnd, IDC_ENCODERX264),  BM_SETCHECK, usex264,  0);

	push	0
	movzx	eax, BYTE PTR _usex264$26[ebp]
	push	eax
	push	241					; 000000f1H
	push	1175					; 00000497H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 166  :                 SendMessage(GetDlgItem(hwnd, IDC_ENCODERQSV),   BM_SETCHECK, useQSV,   0);

	push	0
	movzx	eax, BYTE PTR _useQSV$25[ebp]
	push	eax
	push	241					; 000000f1H
	push	1176					; 00000498H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 167  :                 SendMessage(GetDlgItem(hwnd, IDC_ENCODERNVENC), BM_SETCHECK, useNVENC, 0);

	push	0
	movzx	eax, BYTE PTR _useNVENC$31[ebp]
	push	eax
	push	241					; 000000f1H
	push	1177					; 00000499H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 168  : 
; 169  :                 EnableWindow(GetDlgItem(hwnd, IDC_ENCODERQSV), hasQSV || useQSV);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN55@ProcMessag
	movzx	edx, BYTE PTR _useQSV$25[ebp]
	test	edx, edx
	jne	SHORT $LN55@ProcMessag
	mov	DWORD PTR tv181[ebp], 0
	jmp	SHORT $LN56@ProcMessag
$LN55@ProcMessag:
	mov	DWORD PTR tv181[ebp], 1
$LN56@ProcMessag:
	mov	eax, DWORD PTR tv181[ebp]
	push	eax
	push	1176					; 00000498H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 170  :                 EnableWindow(GetDlgItem(hwnd, IDC_ENCODERNVENC), hasNVENC || useNVENC);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	jne	SHORT $LN57@ProcMessag
	movzx	edx, BYTE PTR _useNVENC$31[ebp]
	test	edx, edx
	jne	SHORT $LN57@ProcMessag
	mov	DWORD PTR tv197[ebp], 0
	jmp	SHORT $LN58@ProcMessag
$LN57@ProcMessag:
	mov	DWORD PTR tv197[ebp], 1
$LN58@ProcMessag:
	mov	eax, DWORD PTR tv197[ebp]
	push	eax
	push	1177					; 00000499H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 171  : 
; 172  :                 bool QSVOnUnsupportedWinVer = OSGetVersion() < 7 && IsKnownQSVCPUPlatform() && !hasQSV;

	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 7
	jge	SHORT $LN59@ProcMessag
	call	?IsKnownQSVCPUPlatform@@YA_NXZ		; IsKnownQSVCPUPlatform
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@ProcMessag
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	test	edx, edx
	jne	SHORT $LN59@ProcMessag
	mov	DWORD PTR tv215[ebp], 1
	jmp	SHORT $LN60@ProcMessag
$LN59@ProcMessag:
	mov	DWORD PTR tv215[ebp], 0
$LN60@ProcMessag:
	mov	al, BYTE PTR tv215[ebp]
	mov	BYTE PTR _QSVOnUnsupportedWinVer$23[ebp], al

; 173  :                 ShowWindow(GetDlgItem(hwnd, IDC_QSV_WINVER_WARNING), QSVOnUnsupportedWinVer ? SW_SHOW : SW_HIDE);

	movzx	ecx, BYTE PTR _QSVOnUnsupportedWinVer$23[ebp]
	test	ecx, ecx
	je	SHORT $LN61@ProcMessag
	mov	DWORD PTR tv220[ebp], 5
	jmp	SHORT $LN62@ProcMessag
$LN61@ProcMessag:
	mov	DWORD PTR tv220[ebp], 0
$LN62@ProcMessag:
	mov	edx, DWORD PTR tv220[ebp]
	push	edx
	push	1031					; 00000407H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 174  :                 ShowWindow(GetDlgItem(hwnd, IDC_QSV_CONFIG_WARNING), !QSVOnUnsupportedWinVer && showQSVConfigurationWarning ? SW_SHOW : SW_HIDE);

	movzx	edx, BYTE PTR _QSVOnUnsupportedWinVer$23[ebp]
	test	edx, edx
	jne	SHORT $LN63@ProcMessag
	movzx	eax, BYTE PTR _showQSVConfigurationWarning$21[ebp]
	test	eax, eax
	je	SHORT $LN63@ProcMessag
	mov	DWORD PTR tv235[ebp], 5
	jmp	SHORT $LN64@ProcMessag
$LN63@ProcMessag:
	mov	DWORD PTR tv235[ebp], 0
$LN64@ProcMessag:
	mov	ecx, DWORD PTR tv235[ebp]
	push	ecx
	push	1030					; 00000406H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 175  : 
; 176  :                 //--------------------------------------------
; 177  : 
; 178  :                 HWND hwndToolTip = CreateWindowEx(NULL, TOOLTIPS_CLASS, NULL, WS_POPUP|TTS_NOPREFIX|TTS_ALWAYSTIP,
; 179  :                                                   CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
; 180  :                                                   hwnd, NULL, hinstMain, NULL);

	push	0
	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483645				; 80000003H
	push	0
	push	OFFSET $SG4294750498
	push	0
	call	_IsolationAwareCreateWindowExW@48
	mov	DWORD PTR _hwndToolTip$17[ebp], eax

; 181  : 
; 182  :                 TOOLINFO ti;
; 183  :                 zero(&ti, sizeof(ti));

	push	48					; 00000030H
	lea	ecx, DWORD PTR _ti$35[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 184  :                 ti.cbSize = sizeof(ti);

	mov	DWORD PTR _ti$35[ebp], 48		; 00000030H

; 185  :                 ti.uFlags = TTF_SUBCLASS|TTF_IDISHWND;

	mov	DWORD PTR _ti$35[ebp+4], 17		; 00000011H

; 186  :                 ti.hwnd = hwnd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _ti$35[ebp+8], eax

; 187  : 
; 188  :                 if (LocaleIsRTL())

	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp_?LocaleIsRTL@@YA_NPAVLocaleStringLookup@@@Z
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@ProcMessag

; 189  :                     ti.uFlags |= TTF_RTLREADING;

	mov	ecx, DWORD PTR _ti$35[ebp+4]
	or	ecx, 4
	mov	DWORD PTR _ti$35[ebp+4], ecx
$LN43@ProcMessag:

; 190  : 
; 191  :                 SendMessage(hwndToolTip, TTM_SETMAXTIPWIDTH, 0, 500);

	push	500					; 000001f4H
	push	0
	push	1048					; 00000418H
	mov	edx, DWORD PTR _hwndToolTip$17[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 192  :                 SendMessage(hwndToolTip, TTM_SETDELAYTIME, TTDT_AUTOPOP, 8000);

	push	8000					; 00001f40H
	push	2
	push	1027					; 00000403H
	mov	eax, DWORD PTR _hwndToolTip$17[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 193  : 
; 194  :                 //--------------------------------------------
; 195  : 
; 196  :                 hwndTemp = GetDlgItem(hwnd, IDC_QUALITY);

	push	1012					; 000003f4H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$33[ebp], eax

; 197  :                 for(int i=0; i<=10; i++)

	mov	DWORD PTR _i$15[ebp], 0
	jmp	SHORT $LN42@ProcMessag
$LN41@ProcMessag:
	mov	eax, DWORD PTR _i$15[ebp]
	add	eax, 1
	mov	DWORD PTR _i$15[ebp], eax
$LN42@ProcMessag:
	cmp	DWORD PTR _i$15[ebp], 10		; 0000000aH
	jg	SHORT $LN40@ProcMessag

; 198  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)IntString(i).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _i$15[ebp]
	push	ecx
	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN41@ProcMessag
$LN40@ProcMessag:

; 199  : 
; 200  :                 LoadSettingComboString(hwndTemp, TEXT("Video Encoding"), TEXT("Quality"), TEXT("8"));

	push	OFFSET $SG4294750497
	push	OFFSET $SG4294750496
	push	OFFSET $SG4294750495
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	?LoadSettingComboString@@YA?AVString@@PAUHWND__@@PB_W11@Z ; LoadSettingComboString
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR $T7[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 201  : 
; 202  :                 ti.lpszText = (LPWSTR)Str("Settings.Encoding.Video.QualityTooltip");

	push	OFFSET $SG4294750494
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$35[ebp+36], eax

; 203  :                 ti.uId = (UINT_PTR)hwndTemp;

	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	mov	DWORD PTR _ti$35[ebp+12], ecx

; 204  :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	edx, DWORD PTR _ti$35[ebp]
	push	edx
	push	0
	push	1074					; 00000432H
	mov	eax, DWORD PTR _hwndToolTip$17[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 205  : 
; 206  :                 //--------------------------------------------
; 207  : 
; 208  :                 bool bUseCBR = AppConfig->GetInt(TEXT("Video Encoding"), TEXT("UseCBR"), 1) != 0;

	push	1
	push	OFFSET $SG4294750493
	push	OFFSET $SG4294750492
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN65@ProcMessag
	mov	DWORD PTR tv325[ebp], 1
	jmp	SHORT $LN66@ProcMessag
$LN65@ProcMessag:
	mov	DWORD PTR tv325[ebp], 0
$LN66@ProcMessag:
	mov	cl, BYTE PTR tv325[ebp]
	mov	BYTE PTR _bUseCBR$28[ebp], cl

; 209  :                 bool bPadCBR = AppConfig->GetInt(TEXT("Video Encoding"), TEXT("PadCBR"), 1) != 0;

	push	1
	push	OFFSET $SG4294750491
	push	OFFSET $SG4294750490
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN67@ProcMessag
	mov	DWORD PTR tv333[ebp], 1
	jmp	SHORT $LN68@ProcMessag
$LN67@ProcMessag:
	mov	DWORD PTR tv333[ebp], 0
$LN68@ProcMessag:
	mov	dl, BYTE PTR tv333[ebp]
	mov	BYTE PTR _bPadCBR$20[ebp], dl

; 210  :                 SendMessage(GetDlgItem(hwnd, IDC_USECBR), BM_SETCHECK, bUseCBR ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	eax, BYTE PTR _bUseCBR$28[ebp]
	test	eax, eax
	je	SHORT $LN69@ProcMessag
	mov	DWORD PTR tv339[ebp], 1
	jmp	SHORT $LN70@ProcMessag
$LN69@ProcMessag:
	mov	DWORD PTR tv339[ebp], 0
$LN70@ProcMessag:
	push	0
	mov	ecx, DWORD PTR tv339[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1133					; 0000046dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 211  :                 SendMessage(GetDlgItem(hwnd, IDC_PADCBR), BM_SETCHECK, bPadCBR ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	ecx, BYTE PTR _bPadCBR$20[ebp]
	test	ecx, ecx
	je	SHORT $LN71@ProcMessag
	mov	DWORD PTR tv354[ebp], 1
	jmp	SHORT $LN72@ProcMessag
$LN71@ProcMessag:
	mov	DWORD PTR tv354[ebp], 0
$LN72@ProcMessag:
	push	0
	mov	edx, DWORD PTR tv354[ebp]
	push	edx
	push	241					; 000000f1H
	push	1134					; 0000046eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 212  :                 EnableWindow(GetDlgItem(hwnd, IDC_QUALITY), !bUseCBR && (usex264 || useNVENC));

	movzx	edx, BYTE PTR _bUseCBR$28[ebp]
	test	edx, edx
	jne	SHORT $LN74@ProcMessag
	movzx	eax, BYTE PTR _usex264$26[ebp]
	test	eax, eax
	jne	SHORT $LN73@ProcMessag
	movzx	ecx, BYTE PTR _useNVENC$31[ebp]
	test	ecx, ecx
	je	SHORT $LN74@ProcMessag
$LN73@ProcMessag:
	mov	DWORD PTR tv372[ebp], 1
	jmp	SHORT $LN75@ProcMessag
$LN74@ProcMessag:
	mov	DWORD PTR tv372[ebp], 0
$LN75@ProcMessag:
	mov	edx, DWORD PTR tv372[ebp]
	push	edx
	push	1012					; 000003f4H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 213  :                 EnableWindow(GetDlgItem(hwnd, IDC_PADCBR), bUseCBR && (usex264 || useNVENC));

	movzx	edx, BYTE PTR _bUseCBR$28[ebp]
	test	edx, edx
	je	SHORT $LN77@ProcMessag
	movzx	eax, BYTE PTR _usex264$26[ebp]
	test	eax, eax
	jne	SHORT $LN76@ProcMessag
	movzx	ecx, BYTE PTR _useNVENC$31[ebp]
	test	ecx, ecx
	je	SHORT $LN77@ProcMessag
$LN76@ProcMessag:
	mov	DWORD PTR tv389[ebp], 1
	jmp	SHORT $LN78@ProcMessag
$LN77@ProcMessag:
	mov	DWORD PTR tv389[ebp], 0
$LN78@ProcMessag:
	mov	edx, DWORD PTR tv389[ebp]
	push	edx
	push	1134					; 0000046eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 214  : 
; 215  :                 ti.lpszText = (LPWSTR)Str("Settings.Advanced.PadCBRToolTip");

	push	OFFSET $SG4294750489
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$35[ebp+36], eax

; 216  :                 ti.uId = (UINT_PTR)GetDlgItem(hwnd, IDC_PADCBR);

	push	1134					; 0000046eH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _ti$35[ebp+12], eax

; 217  :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	edx, DWORD PTR _ti$35[ebp]
	push	edx
	push	0
	push	1074					; 00000432H
	mov	eax, DWORD PTR _hwndToolTip$17[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 218  : 
; 219  :                 //--------------------------------------------
; 220  : 
; 221  :                 int bitrate    = LoadSettingEditInt(GetDlgItem(hwnd, IDC_MAXBITRATE), TEXT("Video Encoding"), TEXT("MaxBitrate"), 1000);

	push	1000					; 000003e8H
	push	OFFSET $SG4294750488
	push	OFFSET $SG4294750487
	push	1015					; 000003f7H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	?LoadSettingEditInt@@YAHPAUHWND__@@PB_W1H@Z ; LoadSettingEditInt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _bitrate$1[ebp], eax

; 222  :                 int buffersize = LoadSettingEditInt(GetDlgItem(hwnd, IDC_BUFFERSIZE), TEXT("Video Encoding"), TEXT("BufferSize"), 1000);

	push	1000					; 000003e8H
	push	OFFSET $SG4294750486
	push	OFFSET $SG4294750485
	push	1016					; 000003f8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	?LoadSettingEditInt@@YAHPAUHWND__@@PB_W1H@Z ; LoadSettingEditInt
	add	esp, 16					; 00000010H
	mov	DWORD PTR _buffersize$4[ebp], eax

; 223  : 
; 224  :                 ti.lpszText = (LPWSTR)Str("Settings.Encoding.Video.MaxBitRateTooltip");

	push	OFFSET $SG4294750484
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$35[ebp+36], eax

; 225  :                 ti.uId = (UINT_PTR)GetDlgItem(hwnd, IDC_MAXBITRATE);

	push	1015					; 000003f7H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _ti$35[ebp+12], eax

; 226  :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	edx, DWORD PTR _ti$35[ebp]
	push	edx
	push	0
	push	1074					; 00000432H
	mov	eax, DWORD PTR _hwndToolTip$17[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 227  : 
; 228  :                 ti.lpszText = (LPWSTR)Str("Settings.Encoding.Video.BufferSizeTooltip");

	push	OFFSET $SG4294750483
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$35[ebp+36], eax

; 229  :                 ti.uId = (UINT_PTR)GetDlgItem(hwnd, IDC_BUFFERSIZE);

	push	1016					; 000003f8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _ti$35[ebp+12], eax

; 230  :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	ecx, DWORD PTR _ti$35[ebp]
	push	ecx
	push	0
	push	1074					; 00000432H
	mov	edx, DWORD PTR _hwndToolTip$17[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 231  : 
; 232  :                 //--------------------------------------------
; 233  : 
; 234  :                 bool bUseBufferSize = AppConfig->GetInt(TEXT("Video Encoding"), TEXT("UseBufferSize"), 0) != 0;

	push	0
	push	OFFSET $SG4294750482
	push	OFFSET $SG4294750481
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN79@ProcMessag
	mov	DWORD PTR tv476[ebp], 1
	jmp	SHORT $LN80@ProcMessag
$LN79@ProcMessag:
	mov	DWORD PTR tv476[ebp], 0
$LN80@ProcMessag:
	mov	al, BYTE PTR tv476[ebp]
	mov	BYTE PTR _bUseBufferSize$22[ebp], al

; 235  : 
; 236  :                 SendMessage(GetDlgItem(hwnd, IDC_CUSTOMBUFFER), BM_SETCHECK, bUseBufferSize ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	ecx, BYTE PTR _bUseBufferSize$22[ebp]
	test	ecx, ecx
	je	SHORT $LN81@ProcMessag
	mov	DWORD PTR tv482[ebp], 1
	jmp	SHORT $LN82@ProcMessag
$LN81@ProcMessag:
	mov	DWORD PTR tv482[ebp], 0
$LN82@ProcMessag:
	push	0
	mov	edx, DWORD PTR tv482[ebp]
	push	edx
	push	241					; 000000f1H
	push	1041					; 00000411H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 237  :                 EnableWindow(GetDlgItem(hwnd, IDC_BUFFERSIZE), bUseBufferSize);

	movzx	edx, BYTE PTR _bUseBufferSize$22[ebp]
	push	edx
	push	1016					; 000003f8H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 238  : 
; 239  :                 //--------------------------------------------
; 240  : 
; 241  :                 hwndTemp = GetDlgItem(hwnd, IDC_AUDIOCODEC);

	push	1017					; 000003f9H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$33[ebp], eax

; 242  : 
; 243  :                 SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("MP3"));

	push	OFFSET $SG4294750480
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 244  : #ifdef USE_AAC
; 245  :                 if(1)//OSGetVersion() >= 7)

	mov	edx, 1
	test	edx, edx
	je	SHORT $LN39@ProcMessag

; 246  :                 {
; 247  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("AAC"));

	push	OFFSET $SG4294750479
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 248  :                     LoadSettingComboString(hwndTemp, TEXT("Audio Encoding"), TEXT("Codec"), TEXT("AAC"));

	push	OFFSET $SG4294750478
	push	OFFSET $SG4294750477
	push	OFFSET $SG4294750476
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	lea	edx, DWORD PTR $T6[ebp]
	push	edx
	call	?LoadSettingComboString@@YA?AVString@@PAUHWND__@@PB_W11@Z ; LoadSettingComboString
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR $T6[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 249  :                 }
; 250  :                 else

	jmp	SHORT $LN38@ProcMessag
$LN39@ProcMessag:

; 251  :                     LoadSettingComboString(hwndTemp, TEXT("Audio Encoding"), TEXT("Codec"), TEXT("MP3"));

	push	OFFSET $SG4294750475
	push	OFFSET $SG4294750474
	push	OFFSET $SG4294750473
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	?LoadSettingComboString@@YA?AVString@@PAUHWND__@@PB_W11@Z ; LoadSettingComboString
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN38@ProcMessag:

; 252  : #else
; 253  :                 LoadSettingComboString(hwndTemp, TEXT("Audio Encoding"), TEXT("Codec"), TEXT("MP3"));
; 254  : #endif
; 255  : 
; 256  :                 //--------------------------------------------
; 257  : 
; 258  :                 hwndTemp = GetDlgItem(hwnd, IDC_AUDIOFORMAT);

	push	1018					; 000003faH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$33[ebp], eax

; 259  : 
; 260  :                 BOOL isAAC = SendMessage(GetDlgItem(hwnd, IDC_AUDIOCODEC), CB_GETCURSEL, 0, 0) == 1;

	push	0
	push	0
	push	327					; 00000147H
	push	1017					; 000003f9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN83@ProcMessag
	mov	DWORD PTR tv621[ebp], 1
	jmp	SHORT $LN84@ProcMessag
$LN83@ProcMessag:
	mov	DWORD PTR tv621[ebp], 0
$LN84@ProcMessag:
	mov	eax, DWORD PTR tv621[ebp]
	mov	DWORD PTR _isAAC$11[ebp], eax

; 261  : 
; 262  :                 if (isAAC)

	cmp	DWORD PTR _isAAC$11[ebp], 0
	je	SHORT $LN37@ProcMessag

; 263  :                 {
; 264  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("44.1kHz"));

	push	OFFSET $SG4294750472
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 265  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("48kHz"));

	push	OFFSET $SG4294750471
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 266  :                 } else {

	jmp	SHORT $LN36@ProcMessag
$LN37@ProcMessag:

; 267  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("44.1kHz"));

	push	OFFSET $SG4294750470
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN36@ProcMessag:

; 268  :                 }
; 269  : 
; 270  :                 LoadSettingComboInt(hwndTemp, TEXT("Audio Encoding"), TEXT("Format"), 1, isAAC ? 1 : 0);

	cmp	DWORD PTR _isAAC$11[ebp], 0
	je	SHORT $LN85@ProcMessag
	mov	DWORD PTR tv637[ebp], 1
	jmp	SHORT $LN86@ProcMessag
$LN85@ProcMessag:
	mov	DWORD PTR tv637[ebp], 0
$LN86@ProcMessag:
	mov	ecx, DWORD PTR tv637[ebp]
	push	ecx
	push	1
	push	OFFSET $SG4294750469
	push	OFFSET $SG4294750468
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	?LoadSettingComboInt@@YAHPAUHWND__@@PB_W1HH@Z ; LoadSettingComboInt
	add	esp, 20					; 00000014H

; 271  : 
; 272  :                 //--------------------------------------------
; 273  : 
; 274  :                 hwndTemp = GetDlgItem(hwnd, IDC_AUDIOCHANNEL);

	push	1021					; 000003fdH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$33[ebp], eax

; 275  : 
; 276  :                 SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("mono"));

	push	OFFSET $SG4294750467
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 277  :                 SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("stereo"));

	push	OFFSET $SG4294750466
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 278  : 
; 279  :                 LoadSettingComboInt(hwndTemp, TEXT("Audio Encoding"), TEXT("isStereo"), 1, 1);

	push	1
	push	1
	push	OFFSET $SG4294750465
	push	OFFSET $SG4294750464
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	?LoadSettingComboInt@@YAHPAUHWND__@@PB_W1HH@Z ; LoadSettingComboInt
	add	esp, 20					; 00000014H

; 280  : 
; 281  :                 //--------------------------------------------
; 282  : 
; 283  :                 hwndTemp = GetDlgItem(hwnd, IDC_AUDIOBITRATE);

	push	1019					; 000003fbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$33[ebp], eax

; 284  : 
; 285  :                 BOOL isStereo = SendMessage(GetDlgItem(hwnd, IDC_AUDIOCHANNEL), CB_GETCURSEL, 0, 0) == 1;

	push	0
	push	0
	push	327					; 00000147H
	push	1021					; 000003fdH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN87@ProcMessag
	mov	DWORD PTR tv685[ebp], 1
	jmp	SHORT $LN88@ProcMessag
$LN87@ProcMessag:
	mov	DWORD PTR tv685[ebp], 0
$LN88@ProcMessag:
	mov	eax, DWORD PTR tv685[ebp]
	mov	DWORD PTR _isStereo$12[ebp], eax

; 286  : 
; 287  :                 if (isStereo)

	cmp	DWORD PTR _isStereo$12[ebp], 0
	je	$LN35@ProcMessag

; 288  :                 {
; 289  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("48"));

	push	OFFSET $SG4294750463
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 290  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("64"));

	push	OFFSET $SG4294750462
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 291  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("80"));

	push	OFFSET $SG4294750461
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 292  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("96"));//default

	push	OFFSET $SG4294750460
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 293  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("112"));

	push	OFFSET $SG4294750459
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 294  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("128"));

	push	OFFSET $SG4294750458
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 295  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("160"));

	push	OFFSET $SG4294750457
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 296  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("192"));

	push	OFFSET $SG4294750456
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 297  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("256"));

	push	OFFSET $SG4294750455
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 298  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("320"));

	push	OFFSET $SG4294750454
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 299  :                 }else{

	jmp	$LN34@ProcMessag
$LN35@ProcMessag:

; 300  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("32"));

	push	OFFSET $SG4294750453
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 301  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("40"));

	push	OFFSET $SG4294750452
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 302  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("48"));//default

	push	OFFSET $SG4294750451
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 303  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("56"));

	push	OFFSET $SG4294750450
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 304  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("64"));

	push	OFFSET $SG4294750449
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 305  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("80"));

	push	OFFSET $SG4294750448
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 306  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("96"));

	push	OFFSET $SG4294750447
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndTemp$33[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 307  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("128"));

	push	OFFSET $SG4294750446
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 308  :                     SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)TEXT("160"));

	push	OFFSET $SG4294750445
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndTemp$33[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
$LN34@ProcMessag:

; 309  :                 }
; 310  : 
; 311  :                 LoadSettingComboString(hwndTemp, TEXT("Audio Encoding"), TEXT("Bitrate"), isStereo ? TEXT("96") : TEXT("48"));

	cmp	DWORD PTR _isStereo$12[ebp], 0
	je	SHORT $LN89@ProcMessag
	mov	DWORD PTR tv765[ebp], OFFSET $SG4294750444
	jmp	SHORT $LN90@ProcMessag
$LN89@ProcMessag:
	mov	DWORD PTR tv765[ebp], OFFSET $SG4294750443
$LN90@ProcMessag:
	mov	edx, DWORD PTR tv765[ebp]
	push	edx
	push	OFFSET $SG4294750442
	push	OFFSET $SG4294750441
	mov	eax, DWORD PTR _hwndTemp$33[ebp]
	push	eax
	lea	ecx, DWORD PTR $T3[ebp]
	push	ecx
	call	?LoadSettingComboString@@YA?AVString@@PAUHWND__@@PB_W11@Z ; LoadSettingComboString
	add	esp, 20					; 00000014H
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 312  : 
; 313  :                 //--------------------------------------------
; 314  : 
; 315  :                 ShowWindow(GetDlgItem(hwnd, IDC_INFO), SW_HIDE);

	push	0
	push	1029					; 00000405H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 316  :                 SetChangedSettings(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z

; 317  :                 return TRUE;

	mov	DWORD PTR $T10[ebp], 1
	lea	ecx, DWORD PTR _vcodec$9[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR $T10[ebp]
	jmp	$LN47@ProcMessag
$LN33@ProcMessag:

; 318  :             }
; 319  : 
; 320  :         case WM_COMMAND:
; 321  :             {
; 322  :                 bool bDataChanged = false;

	mov	BYTE PTR _bDataChanged$34[ebp], 0

; 323  : 
; 324  :                 bool useQSV = SendMessage(GetDlgItem(hwnd, IDC_ENCODERQSV), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1176					; 00000498H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN91@ProcMessag
	mov	DWORD PTR tv834[ebp], 1
	jmp	SHORT $LN92@ProcMessag
$LN91@ProcMessag:
	mov	DWORD PTR tv834[ebp], 0
$LN92@ProcMessag:
	mov	al, BYTE PTR tv834[ebp]
	mov	BYTE PTR _useQSV$19[ebp], al

; 325  :                 bool useNVENC = SendMessage(GetDlgItem(hwnd, IDC_ENCODERNVENC), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1177					; 00000499H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN93@ProcMessag
	mov	DWORD PTR tv850[ebp], 1
	jmp	SHORT $LN94@ProcMessag
$LN93@ProcMessag:
	mov	DWORD PTR tv850[ebp], 0
$LN94@ProcMessag:
	mov	al, BYTE PTR tv850[ebp]
	mov	BYTE PTR _useNVENC$32[ebp], al

; 326  :                 bool usex264 = !useQSV && !useNVENC;

	movzx	ecx, BYTE PTR _useQSV$19[ebp]
	test	ecx, ecx
	jne	SHORT $LN95@ProcMessag
	movzx	edx, BYTE PTR _useNVENC$32[ebp]
	test	edx, edx
	jne	SHORT $LN95@ProcMessag
	mov	DWORD PTR tv856[ebp], 1
	jmp	SHORT $LN96@ProcMessag
$LN95@ProcMessag:
	mov	DWORD PTR tv856[ebp], 0
$LN96@ProcMessag:
	mov	al, BYTE PTR tv856[ebp]
	mov	BYTE PTR _usex264$29[ebp], al

; 327  : 
; 328  :                 bool useCBR = SendMessage(GetDlgItem(hwnd, IDC_USECBR), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1133					; 0000046dH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN97@ProcMessag
	mov	DWORD PTR tv872[ebp], 1
	jmp	SHORT $LN98@ProcMessag
$LN97@ProcMessag:
	mov	DWORD PTR tv872[ebp], 0
$LN98@ProcMessag:
	mov	al, BYTE PTR tv872[ebp]
	mov	BYTE PTR _useCBR$24[ebp], al

; 329  : 
; 330  :                 switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv875[ebp], ecx
	mov	edx, DWORD PTR tv875[ebp]
	sub	edx, 1012				; 000003f4H
	mov	DWORD PTR tv875[ebp], edx
	cmp	DWORD PTR tv875[ebp], 165		; 000000a5H
	ja	$LN31@ProcMessag
	mov	eax, DWORD PTR tv875[ebp]
	movzx	ecx, BYTE PTR $LN123@ProcMessag[eax]
	jmp	DWORD PTR $LN124@ProcMessag[ecx*4]
$LN30@ProcMessag:

; 331  :                 {
; 332  :                     case IDC_QUALITY:
; 333  :                     case IDC_AUDIOBITRATE:
; 334  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	cmp	eax, 1
	jne	SHORT $LN29@ProcMessag

; 335  :                         {
; 336  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN29@ProcMessag:

; 337  :                         }
; 338  :                         break;

	jmp	$LN31@ProcMessag
$LN28@ProcMessag:

; 339  : 
; 340  :                     case IDC_AUDIOFORMAT:
; 341  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 1
	jne	SHORT $LN27@ProcMessag

; 342  :                         {
; 343  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN27@ProcMessag:

; 344  :                         }
; 345  :                         break;

	jmp	$LN31@ProcMessag
$LN26@ProcMessag:

; 346  : 
; 347  :                     case IDC_AUDIOCHANNEL:
; 348  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 1
	jne	$LN25@ProcMessag

; 349  :                         {
; 350  :                             HWND hwndAudioBitrate = GetDlgItem(hwnd, IDC_AUDIOBITRATE);

	push	1019					; 000003fbH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndAudioBitrate$30[ebp], eax

; 351  :                             SendMessage(hwndAudioBitrate, CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 352  : 
; 353  :                             BOOL isStereo = SendMessage(GetDlgItem(hwnd, IDC_AUDIOCHANNEL), CB_GETCURSEL, 0, 0) == 1;

	push	0
	push	0
	push	327					; 00000147H
	push	1021					; 000003fdH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN99@ProcMessag
	mov	DWORD PTR tv914[ebp], 1
	jmp	SHORT $LN100@ProcMessag
$LN99@ProcMessag:
	mov	DWORD PTR tv914[ebp], 0
$LN100@ProcMessag:
	mov	ecx, DWORD PTR tv914[ebp]
	mov	DWORD PTR _isStereo$14[ebp], ecx

; 354  : 
; 355  :                             if (isStereo)

	cmp	DWORD PTR _isStereo$14[ebp], 0
	je	$LN24@ProcMessag

; 356  :                             {
; 357  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("48"));

	push	OFFSET $SG4294750440
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 358  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("64"));

	push	OFFSET $SG4294750439
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 359  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("80"));

	push	OFFSET $SG4294750438
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 360  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("96"));//default

	push	OFFSET $SG4294750437
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 361  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("112"));

	push	OFFSET $SG4294750436
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 362  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("128"));

	push	OFFSET $SG4294750435
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 363  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("160"));

	push	OFFSET $SG4294750434
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 364  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("192"));

	push	OFFSET $SG4294750433
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 365  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("256"));

	push	OFFSET $SG4294750432
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 366  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("320"));

	push	OFFSET $SG4294750431
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 367  :                             }else{

	jmp	$LN23@ProcMessag
$LN24@ProcMessag:

; 368  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("32"));

	push	OFFSET $SG4294750430
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 369  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("40"));

	push	OFFSET $SG4294750429
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 370  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("48"));//default

	push	OFFSET $SG4294750428
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 371  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("56"));

	push	OFFSET $SG4294750427
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 372  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("64"));

	push	OFFSET $SG4294750426
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 373  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("80"));

	push	OFFSET $SG4294750425
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 374  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("96"));

	push	OFFSET $SG4294750424
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 375  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("128"));

	push	OFFSET $SG4294750423
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 376  :                                 SendMessage(hwndAudioBitrate, CB_ADDSTRING, 0, (LPARAM)TEXT("160"));

	push	OFFSET $SG4294750422
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
$LN23@ProcMessag:

; 377  :                             }
; 378  : 
; 379  :                             SendMessage(hwndAudioBitrate, CB_SETCURSEL, isStereo ? 3 : 2, 0);

	cmp	DWORD PTR _isStereo$14[ebp], 0
	je	SHORT $LN101@ProcMessag
	mov	DWORD PTR tv995[ebp], 3
	jmp	SHORT $LN102@ProcMessag
$LN101@ProcMessag:
	mov	DWORD PTR tv995[ebp], 2
$LN102@ProcMessag:
	push	0
	mov	eax, DWORD PTR tv995[ebp]
	push	eax
	push	334					; 0000014eH
	mov	ecx, DWORD PTR _hwndAudioBitrate$30[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 380  : 
; 381  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN25@ProcMessag:

; 382  :                         }
; 383  :                         break;

	jmp	$LN31@ProcMessag
$LN22@ProcMessag:

; 384  : 
; 385  :                     case IDC_AUDIOCODEC:
; 386  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	cmp	eax, 1
	jne	$LN21@ProcMessag

; 387  :                         {
; 388  :                             HWND hwndAudioFormat = GetDlgItem(hwnd, IDC_AUDIOFORMAT);

	push	1018					; 000003faH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndAudioFormat$16[ebp], eax

; 389  :                             SendMessage(hwndAudioFormat, CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	mov	eax, DWORD PTR _hwndAudioFormat$16[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 390  : 
; 391  :                             BOOL isAAC = SendMessage(GetDlgItem(hwnd, IDC_AUDIOCODEC), CB_GETCURSEL, 0, 0) == 1;

	push	0
	push	0
	push	327					; 00000147H
	push	1017					; 000003f9H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN103@ProcMessag
	mov	DWORD PTR tv1028[ebp], 1
	jmp	SHORT $LN104@ProcMessag
$LN103@ProcMessag:
	mov	DWORD PTR tv1028[ebp], 0
$LN104@ProcMessag:
	mov	eax, DWORD PTR tv1028[ebp]
	mov	DWORD PTR _isAAC$13[ebp], eax

; 392  : 
; 393  :                             if (isAAC){

	cmp	DWORD PTR _isAAC$13[ebp], 0
	je	SHORT $LN20@ProcMessag

; 394  :                                 SendMessage(hwndAudioFormat, CB_ADDSTRING, 0, (LPARAM)TEXT("44.1kHz"));

	push	OFFSET $SG4294750421
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAudioFormat$16[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 395  :                                 SendMessage(hwndAudioFormat, CB_ADDSTRING, 0, (LPARAM)TEXT("48kHz"));

	push	OFFSET $SG4294750420
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAudioFormat$16[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 396  :                             }else{

	jmp	SHORT $LN19@ProcMessag
$LN20@ProcMessag:

; 397  :                                 SendMessage(hwndAudioFormat, CB_ADDSTRING, 0, (LPARAM)TEXT("44.1kHz"));

	push	OFFSET $SG4294750419
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAudioFormat$16[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN19@ProcMessag:

; 398  :                             }
; 399  : 
; 400  :                             SendMessage(hwndAudioFormat, CB_SETCURSEL, isAAC ? 1 : 0, 0);

	cmp	DWORD PTR _isAAC$13[ebp], 0
	je	SHORT $LN105@ProcMessag
	mov	DWORD PTR tv1045[ebp], 1
	jmp	SHORT $LN106@ProcMessag
$LN105@ProcMessag:
	mov	DWORD PTR tv1045[ebp], 0
$LN106@ProcMessag:
	push	0
	mov	ecx, DWORD PTR tv1045[ebp]
	push	ecx
	push	334					; 0000014eH
	mov	edx, DWORD PTR _hwndAudioFormat$16[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 401  : 
; 402  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN21@ProcMessag:

; 403  :                         }
; 404  :                         break;

	jmp	$LN31@ProcMessag
$LN18@ProcMessag:

; 405  : 
; 406  :                     case IDC_MAXBITRATE:
; 407  :                         if(HIWORD(wParam) == EN_CHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 768				; 00000300H
	jne	$LN17@ProcMessag

; 408  :                         {
; 409  :                             bool bCustomBuffer = SendMessage(GetDlgItem(hwnd, IDC_CUSTOMBUFFER), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN107@ProcMessag
	mov	DWORD PTR tv1066[ebp], 1
	jmp	SHORT $LN108@ProcMessag
$LN107@ProcMessag:
	mov	DWORD PTR tv1066[ebp], 0
$LN108@ProcMessag:
	mov	cl, BYTE PTR tv1066[ebp]
	mov	BYTE PTR _bCustomBuffer$18[ebp], cl

; 410  :                             if (!bCustomBuffer)

	movzx	edx, BYTE PTR _bCustomBuffer$18[ebp]
	test	edx, edx
	jne	SHORT $LN16@ProcMessag

; 411  :                             {
; 412  :                                 String strText = GetEditText((HWND)lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strText$8[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 413  :                                 SetWindowText(GetDlgItem(hwnd, IDC_BUFFERSIZE), strText);

	lea	ecx, DWORD PTR _strText$8[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	1016					; 000003f8H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 414  :                             }

	lea	ecx, DWORD PTR _strText$8[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN16@ProcMessag:

; 415  : 
; 416  :                             if (App->GetVideoEncoder() && App->GetVideoEncoder()->DynamicBitrateSupported())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	test	eax, eax
	je	SHORT $LN15@ProcMessag
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	mov	DWORD PTR tv1092[ebp], eax
	mov	ecx, DWORD PTR tv1092[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1092[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@ProcMessag

; 417  :                                 SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z

; 418  :                             else

	jmp	SHORT $LN17@ProcMessag
$LN15@ProcMessag:

; 419  :                                 bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN17@ProcMessag:

; 420  :                         }
; 421  :                         break;

	jmp	$LN31@ProcMessag
$LN13@ProcMessag:

; 422  : 
; 423  :                     case IDC_BUFFERSIZE:
; 424  :                         if (HIWORD(wParam) == EN_CHANGE)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	cmp	eax, 768				; 00000300H
	jne	SHORT $LN12@ProcMessag

; 425  :                         {
; 426  :                             if (App->GetVideoEncoder() && App->GetVideoEncoder()->DynamicBitrateSupported())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	test	eax, eax
	je	SHORT $LN11@ProcMessag
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	mov	DWORD PTR tv1114[ebp], eax
	mov	ecx, DWORD PTR tv1114[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR tv1114[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN11@ProcMessag

; 427  :                                 SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z

; 428  :                             else

	jmp	SHORT $LN12@ProcMessag
$LN11@ProcMessag:

; 429  :                                 bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN12@ProcMessag:

; 430  :                         }
; 431  :                         break;

	jmp	$LN31@ProcMessag
$LN9@ProcMessag:

; 432  : 
; 433  :                     case IDC_ENCODERX264:
; 434  :                     case IDC_ENCODERQSV:
; 435  :                     case IDC_ENCODERNVENC:
; 436  :                         if (HIWORD(wParam) == BN_CLICKED)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	test	eax, eax
	jne	SHORT $LN8@ProcMessag

; 437  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN8@ProcMessag:

; 438  : 
; 439  :                         EnableWindow(GetDlgItem(hwnd, IDC_QUALITY), !useCBR && (usex264 || useNVENC));

	movzx	ecx, BYTE PTR _useCBR$24[ebp]
	test	ecx, ecx
	jne	SHORT $LN110@ProcMessag
	movzx	edx, BYTE PTR _usex264$29[ebp]
	test	edx, edx
	jne	SHORT $LN109@ProcMessag
	movzx	eax, BYTE PTR _useNVENC$32[ebp]
	test	eax, eax
	je	SHORT $LN110@ProcMessag
$LN109@ProcMessag:
	mov	DWORD PTR tv1137[ebp], 1
	jmp	SHORT $LN111@ProcMessag
$LN110@ProcMessag:
	mov	DWORD PTR tv1137[ebp], 0
$LN111@ProcMessag:
	mov	ecx, DWORD PTR tv1137[ebp]
	push	ecx
	push	1012					; 000003f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 440  :                         EnableWindow(GetDlgItem(hwnd, IDC_PADCBR), useCBR && (usex264 || useNVENC));

	movzx	ecx, BYTE PTR _useCBR$24[ebp]
	test	ecx, ecx
	je	SHORT $LN113@ProcMessag
	movzx	edx, BYTE PTR _usex264$29[ebp]
	test	edx, edx
	jne	SHORT $LN112@ProcMessag
	movzx	eax, BYTE PTR _useNVENC$32[ebp]
	test	eax, eax
	je	SHORT $LN113@ProcMessag
$LN112@ProcMessag:
	mov	DWORD PTR tv1154[ebp], 1
	jmp	SHORT $LN114@ProcMessag
$LN113@ProcMessag:
	mov	DWORD PTR tv1154[ebp], 0
$LN114@ProcMessag:
	mov	ecx, DWORD PTR tv1154[ebp]
	push	ecx
	push	1134					; 0000046eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 441  :                         break;

	jmp	$LN31@ProcMessag
$LN7@ProcMessag:

; 442  : 
; 443  :                     case IDC_CUSTOMBUFFER:
; 444  :                     case IDC_USECBR:
; 445  :                     case IDC_PADCBR:
; 446  :                         if (HIWORD(wParam) == BN_CLICKED)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	test	edx, edx
	jne	$LN31@ProcMessag

; 447  :                         {
; 448  :                             bool bChecked = SendMessage((HWND)lParam, BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN115@ProcMessag
	mov	DWORD PTR tv1174[ebp], 1
	jmp	SHORT $LN116@ProcMessag
$LN115@ProcMessag:
	mov	DWORD PTR tv1174[ebp], 0
$LN116@ProcMessag:
	mov	cl, BYTE PTR tv1174[ebp]
	mov	BYTE PTR _bChecked$27[ebp], cl

; 449  :                             if(LOWORD(wParam) == IDC_CUSTOMBUFFER)

	movzx	edx, WORD PTR _wParam$[ebp]
	cmp	edx, 1041				; 00000411H
	jne	SHORT $LN5@ProcMessag

; 450  :                                 EnableWindow(GetDlgItem(hwnd, IDC_BUFFERSIZE), bChecked);

	movzx	eax, BYTE PTR _bChecked$27[ebp]
	push	eax
	push	1016					; 000003f8H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	jmp	$LN4@ProcMessag
$LN5@ProcMessag:

; 451  :                             else if(LOWORD(wParam) == IDC_USECBR)

	movzx	eax, WORD PTR _wParam$[ebp]
	cmp	eax, 1133				; 0000046dH
	jne	$LN4@ProcMessag

; 452  :                             {
; 453  :                                 EnableWindow(GetDlgItem(hwnd, IDC_QUALITY), !bChecked && (usex264 || useNVENC));

	movzx	ecx, BYTE PTR _bChecked$27[ebp]
	test	ecx, ecx
	jne	SHORT $LN118@ProcMessag
	movzx	edx, BYTE PTR _usex264$29[ebp]
	test	edx, edx
	jne	SHORT $LN117@ProcMessag
	movzx	eax, BYTE PTR _useNVENC$32[ebp]
	test	eax, eax
	je	SHORT $LN118@ProcMessag
$LN117@ProcMessag:
	mov	DWORD PTR tv1198[ebp], 1
	jmp	SHORT $LN119@ProcMessag
$LN118@ProcMessag:
	mov	DWORD PTR tv1198[ebp], 0
$LN119@ProcMessag:
	mov	ecx, DWORD PTR tv1198[ebp]
	push	ecx
	push	1012					; 000003f4H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 454  :                                 EnableWindow(GetDlgItem(hwnd, IDC_PADCBR), bChecked && (usex264 || useNVENC));

	movzx	ecx, BYTE PTR _bChecked$27[ebp]
	test	ecx, ecx
	je	SHORT $LN121@ProcMessag
	movzx	edx, BYTE PTR _usex264$29[ebp]
	test	edx, edx
	jne	SHORT $LN120@ProcMessag
	movzx	eax, BYTE PTR _useNVENC$32[ebp]
	test	eax, eax
	je	SHORT $LN121@ProcMessag
$LN120@ProcMessag:
	mov	DWORD PTR tv1215[ebp], 1
	jmp	SHORT $LN122@ProcMessag
$LN121@ProcMessag:
	mov	DWORD PTR tv1215[ebp], 0
$LN122@ProcMessag:
	mov	ecx, DWORD PTR tv1215[ebp]
	push	ecx
	push	1134					; 0000046eH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN4@ProcMessag:

; 455  :                             }
; 456  : 
; 457  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$34[ebp], 1
$LN31@ProcMessag:

; 458  :                         }
; 459  :                         break;
; 460  :                 }
; 461  : 
; 462  :                 if(bDataChanged)

	movzx	ecx, BYTE PTR _bDataChanged$34[ebp]
	test	ecx, ecx
	je	SHORT $LN45@ProcMessag

; 463  :                 {
; 464  :                     if (App->GetVideoEncoder())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	test	eax, eax
	je	SHORT $LN1@ProcMessag

; 465  :                         ShowWindow(GetDlgItem(hwnd, IDC_INFO), SW_SHOW);

	push	5
	push	1029					; 00000405H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
$LN1@ProcMessag:

; 466  :                     SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN45@ProcMessag:

; 467  :                 }
; 468  :                 break;
; 469  :             }
; 470  :     }
; 471  :     return FALSE;

	xor	eax, eax
$LN47@ProcMessag:

; 472  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN124@ProcMessag:
	DD	$LN30@ProcMessag
	DD	$LN18@ProcMessag
	DD	$LN13@ProcMessag
	DD	$LN22@ProcMessag
	DD	$LN28@ProcMessag
	DD	$LN26@ProcMessag
	DD	$LN7@ProcMessag
	DD	$LN9@ProcMessag
	DD	$LN31@ProcMessag
$LN123@ProcMessag:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	3
	DB	4
	DB	0
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
	DB	7
	DB	7
?ProcMessage@SettingsEncoding@@UAEHIIJ@Z ENDP		; SettingsEncoding::ProcMessage
_TEXT	ENDS
END
