; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\D3D10VertexBuffer.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4D3D10VertexBuffer@@6B@			; D3D10VertexBuffer::`RTTI Complete Object Locator'
PUBLIC	??_R3VertexBuffer@@8				; VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0I@8					; unsigned int `RTTI Type Descriptor'
PUBLIC	??_R0?AVD3D10VertexBuffer@@@8			; D3D10VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_R2VertexBuffer@@8				; VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R3D3D10VertexBuffer@@8			; D3D10VertexBuffer::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@VertexBuffer@@8			; VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@D3D10VertexBuffer@@8		; D3D10VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVVertexBuffer@@@8			; VertexBuffer `RTTI Type Descriptor'
PUBLIC	??_7D3D10VertexBuffer@@6B@			; D3D10VertexBuffer::`vftable'
PUBLIC	??_R2D3D10VertexBuffer@@8			; D3D10VertexBuffer::`RTTI Base Class Array'
PUBLIC	??_R0PAUID3D10Buffer@@@8			; ID3D10Buffer * `RTTI Type Descriptor'
EXTRN	__imp_??1VertexBuffer@@UAE@XZ:PROC
EXTRN	__imp_??0VertexBuffer@@QAE@XZ:PROC
;	COMDAT ??_R0PAUID3D10Buffer@@@8
data$r	SEGMENT
??_R0PAUID3D10Buffer@@@8 DD FLAT:??_7type_info@@6B@	; ID3D10Buffer * `RTTI Type Descriptor'
	DD	00H
	DB	'.PAUID3D10Buffer@@', 00H
data$r	ENDS
;	COMDAT ??_R2D3D10VertexBuffer@@8
rdata$r	SEGMENT
??_R2D3D10VertexBuffer@@8 DD FLAT:??_R1A@?0A@EA@D3D10VertexBuffer@@8 ; D3D10VertexBuffer::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@VertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_7D3D10VertexBuffer@@6B@
CONST	SEGMENT
??_7D3D10VertexBuffer@@6B@ DD FLAT:??_R4D3D10VertexBuffer@@6B@ ; D3D10VertexBuffer::`vftable'
	DD	FLAT:??_ED3D10VertexBuffer@@UAEPAXI@Z
	DD	FLAT:?FlushBuffers@D3D10VertexBuffer@@UAEXXZ
	DD	FLAT:?GetData@D3D10VertexBuffer@@UAEPAUVBData@@XZ
CONST	ENDS
;	COMDAT ??_R0?AVVertexBuffer@@@8
data$r	SEGMENT
??_R0?AVVertexBuffer@@@8 DD FLAT:??_7type_info@@6B@	; VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVVertexBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10VertexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10VertexBuffer@@8 DD FLAT:??_R0?AVD3D10VertexBuffer@@@8 ; D3D10VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10VertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@VertexBuffer@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@VertexBuffer@@8 DD FLAT:??_R0?AVVertexBuffer@@@8 ; VertexBuffer::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3VertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R3D3D10VertexBuffer@@8
rdata$r	SEGMENT
??_R3D3D10VertexBuffer@@8 DD 00H			; D3D10VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2D3D10VertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R2VertexBuffer@@8
rdata$r	SEGMENT
??_R2VertexBuffer@@8 DD FLAT:??_R1A@?0A@EA@VertexBuffer@@8 ; VertexBuffer::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10VertexBuffer@@@8
data$r	SEGMENT
??_R0?AVD3D10VertexBuffer@@@8 DD FLAT:??_7type_info@@6B@ ; D3D10VertexBuffer `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10VertexBuffer@@', 00H
data$r	ENDS
;	COMDAT ??_R0I@8
data$r	SEGMENT
??_R0I@8 DD	FLAT:??_7type_info@@6B@			; unsigned int `RTTI Type Descriptor'
	DD	00H
	DB	'.I', 00H
data$r	ENDS
;	COMDAT ??_R3VertexBuffer@@8
rdata$r	SEGMENT
??_R3VertexBuffer@@8 DD 00H				; VertexBuffer::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2VertexBuffer@@8
rdata$r	ENDS
;	COMDAT ??_R4D3D10VertexBuffer@@6B@
rdata$r	SEGMENT
??_R4D3D10VertexBuffer@@6B@ DD 00H			; D3D10VertexBuffer::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10VertexBuffer@@@8
	DD	FLAT:??_R3D3D10VertexBuffer@@8
	ORG $+2
$SG4294899694 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'v', 00H, 'b', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG4294899692 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H
	DB	'X', 00H, 00H, 00H
$SG4294899693 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' '
	DB	00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H
	DB	'X', 00H, 00H, 00H
$SG4294899690 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H
$SG4294899691 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H
	DB	00H, 00H
	ORG $+2
$SG4294899688 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H
	DB	' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, 's', 00H, ' ', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'a', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 'n', 00H, '-', 00H, 'd', 00H, 'y'
	DB	00H, 'n', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'c', 00H, ' ', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' '
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG4294899689 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'C', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'V'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '%', 00H, 'd', 00H, ' '
	DB	00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294899686 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294899687 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294899684 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
$SG4294899685 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H
	DB	'0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294899682 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, ':', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	'n', 00H, '-', 00H, 'd', 00H, 'y', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'i', 00H, 'c', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294899683 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'V', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':', 00H
	DB	'F', 00H, 'l', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 's', 00H, ':', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H
	DB	'p', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '%', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H
	DB	'8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294899680 DB 'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, ' ', 00H, 'a', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H
	DB	' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H
	DB	'r', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294899681 DB 'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'n'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 'l', 00H, 's', 00H
	DB	' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, ' ', 00H, 'a'
	DB	00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 'l', 00H, 's', 00H, 00H, 00H
$SG4294899678 DB 'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 's', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'i', 00H, 'c', 00H, 'i', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'o', 00H, 'r', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H
	DB	'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' '
	DB	00H, 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i', 00H, 'r'
	DB	00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG4294899679 DB 'T', 00H, 'r', 00H, 'y', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, ' ', 00H, 'a', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 't'
	DB	00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	's', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, 'a', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H
	DB	't', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, ' ', 00H, 't', 00H, 'a', 00H
	DB	'n', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
PUBLIC	?Add@?$List@PAUID3D10Buffer@@@@QAEIABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::Add
PUBLIC	?Add@?$List@I@@QAEIABI@Z			; List<unsigned int>::Add
PUBLIC	??A?$List@PAUID3D10Buffer@@@@QBEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
PUBLIC	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
PUBLIC	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<
PUBLIC	?Num@?$List@VUVCoordList@@@@QBEIXZ		; List<UVCoordList>::Num
PUBLIC	?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ		; List<Vect2>::Array
PUBLIC	?Num@?$List@K@@QBEIXZ				; List<unsigned long>::Num
PUBLIC	?Array@?$List@K@@QBEPAKXZ			; List<unsigned long>::Array
PUBLIC	?Num@?$List@UVect@@@@QBEIXZ			; List<Vect>::Num
PUBLIC	?Array@?$List@UVect@@@@QBEPAUVect@@XZ		; List<Vect>::Array
PUBLIC	??A?$List@I@@QBEAAII@Z				; List<unsigned int>::operator[]
PUBLIC	??A?$List@I@@QAEAAII@Z				; List<unsigned int>::operator[]
PUBLIC	??6?$List@I@@QAEAAV0@ABI@Z			; List<unsigned int>::operator<<
PUBLIC	?GetData@D3D10VertexBuffer@@UAEPAUVBData@@XZ	; D3D10VertexBuffer::GetData
PUBLIC	?FlushBuffers@D3D10VertexBuffer@@UAEXXZ		; D3D10VertexBuffer::FlushBuffers
PUBLIC	??1D3D10VertexBuffer@@UAE@XZ			; D3D10VertexBuffer::~D3D10VertexBuffer
PUBLIC	??_GD3D10VertexBuffer@@UAEPAXI@Z		; D3D10VertexBuffer::`scalar deleting destructor'
PUBLIC	??_GVBData@@QAEPAXI@Z				; VBData::`scalar deleting destructor'
PUBLIC	??0D3D10VertexBuffer@@QAE@XZ			; D3D10VertexBuffer::D3D10VertexBuffer
PUBLIC	?Clear@VBData@@QAEXXZ				; VBData::Clear
PUBLIC	??1VBData@@QAE@XZ				; VBData::~VBData
PUBLIC	?MakeBufferList@D3D10VertexBuffer@@ABEXPAVD3D10VertexShader@@AAV?$List@PAUID3D10Buffer@@@@AAV?$List@I@@@Z ; D3D10VertexBuffer::MakeBufferList
PUBLIC	?CreateVertexBuffer@D3D10VertexBuffer@@CAPAVVertexBuffer@@PAUVBData@@H@Z ; D3D10VertexBuffer::CreateVertexBuffer
EXTRN	??_ED3D10VertexBuffer@@UAEPAXI@Z:PROC		; D3D10VertexBuffer::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10vertexbuffer.cpp
;	COMDAT ?CreateVertexBuffer@D3D10VertexBuffer@@CAPAVVertexBuffer@@PAUVBData@@H@Z
_TEXT	SEGMENT
$T1 = -168						; size = 4
$T2 = -164						; size = 4
tv145 = -160						; size = 4
_textureVerts$3 = -156					; size = 4
tv325 = -152						; size = 4
$T4 = -148						; size = 4
$T5 = -144						; size = 4
tv247 = -140						; size = 4
_tvBuffer$6 = -136					; size = 4
tv213 = -132						; size = 4
tv312 = -128						; size = 4
$T7 = -124						; size = 4
$T8 = -120						; size = 4
tv179 = -116						; size = 4
tv71 = -112						; size = 4
tv81 = -108						; size = 4
tv83 = -104						; size = 4
tv158 = -100						; size = 4
$T9 = -96						; size = 4
tv192 = -92						; size = 4
$T10 = -88						; size = 4
tv92 = -84						; size = 4
tv291 = -80						; size = 4
tv226 = -76						; size = 4
tv319 = -72						; size = 4
_srd$ = -68						; size = 12
$T11 = -56						; size = 4
$T12 = -52						; size = 4
$T13 = -48						; size = 4
$T14 = -44						; size = 4
$T15 = -40						; size = 4
_i$16 = -36						; size = 4
_err$ = -32						; size = 4
_buf$ = -28						; size = 4
_bd$ = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_vbData$ = 8						; size = 4
_bStatic$ = 12						; size = 4
?CreateVertexBuffer@D3D10VertexBuffer@@CAPAVVertexBuffer@@PAUVBData@@H@Z PROC ; D3D10VertexBuffer::CreateVertexBuffer, COMDAT

; 24   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 168				; 000000a8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 25   :     if(!vbData)

	cmp	DWORD PTR _vbData$[ebp], 0
	jne	SHORT $LN15@CreateVert

; 26   :     {
; 27   :         AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: vbData NULL"));

	push	OFFSET $SG4294899694
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 28   :         return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN15@CreateVert:

; 29   :     }
; 30   : 
; 31   :     HRESULT err;
; 32   : 
; 33   :     D3D10VertexBuffer *buf = new D3D10VertexBuffer;

	push	64					; 00000040H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T10[ebp], eax
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN18@CreateVert
	mov	ecx, DWORD PTR $T10[ebp]
	call	??0D3D10VertexBuffer@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN19@CreateVert
$LN18@CreateVert:
	mov	DWORD PTR tv71[ebp], 0
$LN19@CreateVert:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR _buf$[ebp], eax

; 34   :     buf->numVerts = vbData->VertList.Num();

	mov	ecx, DWORD PTR _vbData$[ebp]
	call	?Num@?$List@UVect@@@@QBEIXZ		; List<Vect>::Num
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 35   : 
; 36   :     D3D10_BUFFER_DESC bd;
; 37   :     D3D10_SUBRESOURCE_DATA srd;
; 38   :     zero(&bd, sizeof(bd));

	push	20					; 00000014H
	lea	edx, DWORD PTR _bd$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 39   :     zero(&srd, sizeof(srd));

	push	12					; 0000000cH
	lea	eax, DWORD PTR _srd$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 40   : 
; 41   :     bd.Usage = bStatic ? D3D10_USAGE_DEFAULT : D3D10_USAGE_DYNAMIC;

	cmp	DWORD PTR _bStatic$[ebp], 0
	je	SHORT $LN20@CreateVert
	mov	DWORD PTR tv81[ebp], 0
	jmp	SHORT $LN21@CreateVert
$LN20@CreateVert:
	mov	DWORD PTR tv81[ebp], 2
$LN21@CreateVert:
	mov	ecx, DWORD PTR tv81[ebp]
	mov	DWORD PTR _bd$[ebp+4], ecx

; 42   :     bd.CPUAccessFlags = bStatic ? 0 : D3D10_CPU_ACCESS_WRITE;

	cmp	DWORD PTR _bStatic$[ebp], 0
	je	SHORT $LN22@CreateVert
	mov	DWORD PTR tv83[ebp], 0
	jmp	SHORT $LN23@CreateVert
$LN22@CreateVert:
	mov	DWORD PTR tv83[ebp], 65536		; 00010000H
$LN23@CreateVert:
	mov	edx, DWORD PTR tv83[ebp]
	mov	DWORD PTR _bd$[ebp+12], edx

; 43   :     bd.BindFlags = D3D10_BIND_VERTEX_BUFFER;

	mov	DWORD PTR _bd$[ebp+8], 1

; 44   : 
; 45   :     //----------------------------------------
; 46   : 
; 47   :     buf->vertexSize = sizeof(Vect);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+28], 16			; 00000010H

; 48   :     bd.ByteWidth = sizeof(Vect)*buf->numVerts;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	shl	edx, 4
	mov	DWORD PTR _bd$[ebp], edx

; 49   :     srd.pSysMem = vbData->VertList.Array();

	mov	ecx, DWORD PTR _vbData$[ebp]
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	mov	DWORD PTR _srd$[ebp], eax

; 50   : 
; 51   :     err = GetD3D()->CreateBuffer(&bd, &srd, &buf->vertexBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv92[ebp], eax
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 4
	push	eax
	lea	ecx, DWORD PTR _srd$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$[ebp]
	push	edx
	mov	eax, DWORD PTR tv92[ebp]
	push	eax
	mov	ecx, DWORD PTR tv92[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+284]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 52   :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN14@CreateVert

; 53   :     {
; 54   :         AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: Failed to create the vertex portion of the vertex buffer, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294899693
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 55   :         delete buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T7[ebp], edx
	mov	eax, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T12[ebp], eax
	cmp	DWORD PTR $T12[ebp], 0
	je	SHORT $LN24@CreateVert
	push	1
	mov	ecx, DWORD PTR $T12[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T12[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv145[ebp], eax
	jmp	SHORT $LN25@CreateVert
$LN24@CreateVert:
	mov	DWORD PTR tv145[ebp], 0
$LN25@CreateVert:

; 56   :         return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN14@CreateVert:

; 57   :     }
; 58   : 
; 59   :     //----------------------------------------
; 60   : 
; 61   :     if(vbData->NormalList.Num())

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 8
	call	?Num@?$List@UVect@@@@QBEIXZ		; List<Vect>::Num
	test	eax, eax
	je	$LN13@CreateVert

; 62   :     {
; 63   :         buf->normalSize = sizeof(Vect);

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+32], 16			; 00000010H

; 64   :         bd.ByteWidth = sizeof(Vect)*buf->numVerts;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+56]
	shl	eax, 4
	mov	DWORD PTR _bd$[ebp], eax

; 65   :         srd.pSysMem = vbData->NormalList.Array();

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 8
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	mov	DWORD PTR _srd$[ebp], eax

; 66   :         err = GetD3D()->CreateBuffer(&bd, &srd, &buf->normalBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv158[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 8
	push	ecx
	lea	edx, DWORD PTR _srd$[ebp]
	push	edx
	lea	eax, DWORD PTR _bd$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv158[ebp]
	push	ecx
	mov	edx, DWORD PTR tv158[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+284]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 67   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN13@CreateVert

; 68   :         {
; 69   :             AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: Failed to create the normal portion of the vertex buffer, result = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294899692
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 70   :             delete buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T15[ebp], ecx
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN26@CreateVert
	push	1
	mov	edx, DWORD PTR $T15[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T15[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv179[ebp], eax
	jmp	SHORT $LN27@CreateVert
$LN26@CreateVert:
	mov	DWORD PTR tv179[ebp], 0
$LN27@CreateVert:

; 71   :             return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN13@CreateVert:

; 72   :         }
; 73   :     }
; 74   : 
; 75   :     //----------------------------------------
; 76   : 
; 77   :     if(vbData->ColorList.Num())

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 16					; 00000010H
	call	?Num@?$List@K@@QBEIXZ			; List<unsigned long>::Num
	test	eax, eax
	je	$LN11@CreateVert

; 78   :     {
; 79   :         buf->colorSize = sizeof(DWORD);

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+36], 4

; 80   :         bd.ByteWidth = sizeof(DWORD)*buf->numVerts;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	shl	edx, 2
	mov	DWORD PTR _bd$[ebp], edx

; 81   :         srd.pSysMem = vbData->ColorList.Array();

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 16					; 00000010H
	call	?Array@?$List@K@@QBEPAKXZ		; List<unsigned long>::Array
	mov	DWORD PTR _srd$[ebp], eax

; 82   :         err = GetD3D()->CreateBuffer(&bd, &srd, &buf->colorBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv192[ebp], eax
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _srd$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$[ebp]
	push	edx
	mov	eax, DWORD PTR tv192[ebp]
	push	eax
	mov	ecx, DWORD PTR tv192[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+284]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 83   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN11@CreateVert

; 84   :         {
; 85   :             AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: Failed to create the color portion of the vertex buffer, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294899691
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 86   :             delete buf;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T13[ebp], eax
	cmp	DWORD PTR $T13[ebp], 0
	je	SHORT $LN28@CreateVert
	push	1
	mov	ecx, DWORD PTR $T13[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T13[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN29@CreateVert
$LN28@CreateVert:
	mov	DWORD PTR tv213[ebp], 0
$LN29@CreateVert:

; 87   :             return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN11@CreateVert:

; 88   :         }
; 89   :     }
; 90   : 
; 91   :     //----------------------------------------
; 92   : 
; 93   :     if(vbData->TangentList.Num())

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 24					; 00000018H
	call	?Num@?$List@UVect@@@@QBEIXZ		; List<Vect>::Num
	test	eax, eax
	je	$LN9@CreateVert

; 94   :     {
; 95   :         buf->tangentSize = sizeof(Vect);

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [ecx+40], 16			; 00000010H

; 96   :         bd.ByteWidth = sizeof(Vect)*buf->numVerts;

	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR [edx+56]
	shl	eax, 4
	mov	DWORD PTR _bd$[ebp], eax

; 97   :         srd.pSysMem = vbData->TangentList.Array();

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	mov	DWORD PTR _srd$[ebp], eax

; 98   :         err = GetD3D()->CreateBuffer(&bd, &srd, &buf->tangentBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv226[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	lea	edx, DWORD PTR _srd$[ebp]
	push	edx
	lea	eax, DWORD PTR _bd$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv226[ebp]
	push	ecx
	mov	edx, DWORD PTR tv226[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+284]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 99   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN9@CreateVert

; 100  :         {
; 101  :             AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: Failed to create the tangent portion of the vertex buffer, result = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294899690
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 102  :             delete buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T11[ebp], ecx
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN30@CreateVert
	push	1
	mov	edx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv247[ebp], eax
	jmp	SHORT $LN31@CreateVert
$LN30@CreateVert:
	mov	DWORD PTR tv247[ebp], 0
$LN31@CreateVert:

; 103  :             return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN9@CreateVert:

; 104  :         }
; 105  :     }
; 106  : 
; 107  :     //----------------------------------------
; 108  : 
; 109  :     if(vbData->UVList.Num())

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@VUVCoordList@@@@QBEIXZ	; List<UVCoordList>::Num
	test	eax, eax
	je	$LN7@CreateVert

; 110  :     {
; 111  :         buf->UVBuffers.SetSize(vbData->UVList.Num());

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@VUVCoordList@@@@QBEIXZ	; List<UVCoordList>::Num
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 20					; 00000014H
	call	?SetSize@?$List@PAUID3D10Buffer@@@@QAEHI@Z ; List<ID3D10Buffer *>::SetSize

; 112  :         buf->UVSizes.SetSize(vbData->UVList.Num());

	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@VUVCoordList@@@@QBEIXZ	; List<UVCoordList>::Num
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 44					; 0000002cH
	call	?SetSize@?$List@I@@QAEHI@Z		; List<unsigned int>::SetSize

; 113  : 
; 114  :         for(UINT i=0; i<vbData->UVList.Num(); i++)

	mov	DWORD PTR _i$16[ebp], 0
	jmp	SHORT $LN6@CreateVert
$LN5@CreateVert:
	mov	eax, DWORD PTR _i$16[ebp]
	add	eax, 1
	mov	DWORD PTR _i$16[ebp], eax
$LN6@CreateVert:
	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@VUVCoordList@@@@QBEIXZ	; List<UVCoordList>::Num
	cmp	DWORD PTR _i$16[ebp], eax
	jae	$LN7@CreateVert

; 115  :         {
; 116  :             List<UVCoord> &textureVerts = vbData->UVList[i];

	mov	ecx, DWORD PTR _i$16[ebp]
	push	ecx
	mov	ecx, DWORD PTR _vbData$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$List@VUVCoordList@@@@QAEAAVUVCoordList@@I@Z ; List<UVCoordList>::operator[]
	mov	DWORD PTR _textureVerts$3[ebp], eax

; 117  : 
; 118  :             buf->UVSizes[i] = sizeof(UVCoord);

	mov	edx, DWORD PTR _i$16[ebp]
	push	edx
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$List@I@@QAEAAII@Z			; List<unsigned int>::operator[]
	mov	DWORD PTR [eax], 8

; 119  :             bd.ByteWidth = buf->UVSizes[i]*buf->numVerts;

	mov	eax, DWORD PTR _i$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$List@I@@QAEAAII@Z			; List<unsigned int>::operator[]
	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR [eax]
	imul	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _bd$[ebp], edx

; 120  :             srd.pSysMem = textureVerts.Array();

	mov	ecx, DWORD PTR _textureVerts$3[ebp]
	call	?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ	; List<Vect2>::Array
	mov	DWORD PTR _srd$[ebp], eax

; 121  : 
; 122  :             ID3D10Buffer *tvBuffer;
; 123  :             err = GetD3D()->CreateBuffer(&bd, &srd, &tvBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv291[ebp], eax
	lea	eax, DWORD PTR _tvBuffer$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _srd$[ebp]
	push	ecx
	lea	edx, DWORD PTR _bd$[ebp]
	push	edx
	mov	eax, DWORD PTR tv291[ebp]
	push	eax
	mov	ecx, DWORD PTR tv291[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+284]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 124  :             if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateVert

; 125  :             {
; 126  :                 AppWarning(TEXT("D3D10VertexBuffer::CreateVertexBuffer: Failed to create the texture vertex %d portion of the vertex buffer, result = %08lX"), i, err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i$16[ebp]
	push	edx
	push	OFFSET $SG4294899689
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 127  :                 delete buf;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T14[ebp], ecx
	cmp	DWORD PTR $T14[ebp], 0
	je	SHORT $LN32@CreateVert
	push	1
	mov	edx, DWORD PTR $T14[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T14[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv312[ebp], eax
	jmp	SHORT $LN33@CreateVert
$LN32@CreateVert:
	mov	DWORD PTR tv312[ebp], 0
$LN33@CreateVert:

; 128  :                 return NULL;

	xor	eax, eax
	jmp	$LN16@CreateVert
$LN3@CreateVert:

; 129  :             }
; 130  : 
; 131  :             buf->UVBuffers[i] = tvBuffer;

	mov	eax, DWORD PTR _i$16[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	mov	ecx, DWORD PTR _tvBuffer$6[ebp]
	mov	DWORD PTR [eax], ecx

; 132  :         }

	jmp	$LN5@CreateVert
$LN7@CreateVert:

; 133  :     }
; 134  : 
; 135  :     //----------------------------------------
; 136  : 
; 137  :     buf->bDynamic = !bStatic;

	cmp	DWORD PTR _bStatic$[ebp], 0
	jne	SHORT $LN34@CreateVert
	mov	DWORD PTR tv319[ebp], 1
	jmp	SHORT $LN35@CreateVert
$LN34@CreateVert:
	mov	DWORD PTR tv319[ebp], 0
$LN35@CreateVert:
	mov	edx, DWORD PTR _buf$[ebp]
	mov	eax, DWORD PTR tv319[ebp]
	mov	DWORD PTR [edx+52], eax

; 138  : 
; 139  :     if(bStatic)

	cmp	DWORD PTR _bStatic$[ebp], 0
	je	SHORT $LN2@CreateVert

; 140  :     {
; 141  :         delete vbData;

	mov	ecx, DWORD PTR _vbData$[ebp]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN36@CreateVert
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	call	??_GVBData@@QAEPAXI@Z
	mov	DWORD PTR tv325[ebp], eax
	jmp	SHORT $LN37@CreateVert
$LN36@CreateVert:
	mov	DWORD PTR tv325[ebp], 0
$LN37@CreateVert:

; 142  :         buf->data = NULL;

	mov	eax, DWORD PTR _buf$[ebp]
	mov	DWORD PTR [eax+60], 0

; 143  :     }
; 144  :     else

	jmp	SHORT $LN1@CreateVert
$LN2@CreateVert:

; 145  :         buf->data = vbData;

	mov	ecx, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _vbData$[ebp]
	mov	DWORD PTR [ecx+60], edx
$LN1@CreateVert:

; 146  : 
; 147  :     return buf;

	mov	eax, DWORD PTR _buf$[ebp]
$LN16@CreateVert:

; 148  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateVertexBuffer@D3D10VertexBuffer@@CAPAVVertexBuffer@@PAUVBData@@H@Z ENDP ; D3D10VertexBuffer::CreateVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10vertexbuffer.cpp
;	COMDAT ?MakeBufferList@D3D10VertexBuffer@@ABEXPAVD3D10VertexShader@@AAV?$List@PAUID3D10Buffer@@@@AAV?$List@I@@@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
_vShader$ = 8						; size = 4
_bufferList$ = 12					; size = 4
_strides$ = 16						; size = 4
?MakeBufferList@D3D10VertexBuffer@@ABEXPAVD3D10VertexShader@@AAV?$List@PAUID3D10Buffer@@@@AAV?$List@I@@@Z PROC ; D3D10VertexBuffer::MakeBufferList, COMDAT
; _this$ = ecx

; 263  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 264  :     assert(vShader);
; 265  : 
; 266  :     bufferList << vertexBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _bufferList$[ebp]
	call	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<

; 267  :     strides << vertexSize;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _strides$[ebp]
	call	??6?$List@I@@QAEAAV0@ABI@Z		; List<unsigned int>::operator<<

; 268  : 
; 269  :     if(vShader->bHasNormals)

	mov	edx, DWORD PTR _vShader$[ebp]
	movzx	eax, BYTE PTR [edx+40]
	test	eax, eax
	je	SHORT $LN14@MakeBuffer

; 270  :     {
; 271  :         if(normalBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN13@MakeBuffer

; 272  :         {
; 273  :             bufferList << normalBuffer;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	ecx, DWORD PTR _bufferList$[ebp]
	call	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<

; 274  :             strides << normalSize;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _strides$[ebp]
	call	??6?$List@I@@QAEAAV0@ABI@Z		; List<unsigned int>::operator<<

; 275  :         }
; 276  :         else

	jmp	SHORT $LN14@MakeBuffer
$LN13@MakeBuffer:

; 277  :             AppWarning(TEXT("Trying to use a vertex buffer without normals with a vertex shader that requires normals"));

	push	OFFSET $SG4294899681
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN14@MakeBuffer:

; 278  :     }
; 279  : 
; 280  :     if(vShader->bHasColors)

	mov	ecx, DWORD PTR _vShader$[ebp]
	movzx	edx, BYTE PTR [ecx+41]
	test	edx, edx
	je	SHORT $LN11@MakeBuffer

; 281  :     {
; 282  :         if(colorBuffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN10@MakeBuffer

; 283  :         {
; 284  :             bufferList << colorBuffer;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _bufferList$[ebp]
	call	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<

; 285  :             strides << colorSize;

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	mov	ecx, DWORD PTR _strides$[ebp]
	call	??6?$List@I@@QAEAAV0@ABI@Z		; List<unsigned int>::operator<<

; 286  :         }
; 287  :         else

	jmp	SHORT $LN11@MakeBuffer
$LN10@MakeBuffer:

; 288  :             AppWarning(TEXT("Trying to use a vertex buffer without colors with a vertex shader that requires colors"));

	push	OFFSET $SG4294899680
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN11@MakeBuffer:

; 289  :     }
; 290  : 
; 291  :     if(vShader->bHasTangents)

	mov	eax, DWORD PTR _vShader$[ebp]
	movzx	ecx, BYTE PTR [eax+42]
	test	ecx, ecx
	je	SHORT $LN8@MakeBuffer

; 292  :     {
; 293  :         if(tangentBuffer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	je	SHORT $LN7@MakeBuffer

; 294  :         {
; 295  :             bufferList << tangentBuffer;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 16					; 00000010H
	push	eax
	mov	ecx, DWORD PTR _bufferList$[ebp]
	call	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<

; 296  :             strides << tangentSize;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	ecx, DWORD PTR _strides$[ebp]
	call	??6?$List@I@@QAEAAV0@ABI@Z		; List<unsigned int>::operator<<

; 297  :         }
; 298  :         else

	jmp	SHORT $LN8@MakeBuffer
$LN7@MakeBuffer:

; 299  :             AppWarning(TEXT("Trying to use a vertex buffer without tangents with a vertex shader that requires tangents"));

	push	OFFSET $SG4294899679
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN8@MakeBuffer:

; 300  :     }
; 301  : 
; 302  :     if(vShader->nTextureCoords <= UVBuffers.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@PAUID3D10Buffer@@@@QBEIXZ	; List<ID3D10Buffer *>::Num
	mov	edx, DWORD PTR _vShader$[ebp]
	cmp	DWORD PTR [edx+44], eax
	ja	SHORT $LN5@MakeBuffer

; 303  :     {
; 304  :         for(UINT i=0; i<vShader->nTextureCoords; i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@MakeBuffer
$LN3@MakeBuffer:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@MakeBuffer:
	mov	ecx, DWORD PTR _vShader$[ebp]
	mov	edx, DWORD PTR _i$1[ebp]
	cmp	edx, DWORD PTR [ecx+44]
	jae	SHORT $LN2@MakeBuffer

; 305  :         {
; 306  :             bufferList << UVBuffers[i];

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QBEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	push	eax
	mov	ecx, DWORD PTR _bufferList$[ebp]
	call	??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::operator<<

; 307  :             strides << UVSizes[i];

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??A?$List@I@@QBEAAII@Z			; List<unsigned int>::operator[]
	push	eax
	mov	ecx, DWORD PTR _strides$[ebp]
	call	??6?$List@I@@QAEAAV0@ABI@Z		; List<unsigned int>::operator<<

; 308  :         }

	jmp	SHORT $LN3@MakeBuffer
$LN2@MakeBuffer:

; 309  :     }
; 310  :     else

	jmp	SHORT $LN15@MakeBuffer
$LN5@MakeBuffer:

; 311  :         AppWarning(TEXT("Trying to use a vertex buffer with insufficient texture coordinates compared to the vertex shader requirements"));

	push	OFFSET $SG4294899678
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN15@MakeBuffer:

; 312  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?MakeBufferList@D3D10VertexBuffer@@ABEXPAVD3D10VertexShader@@AAV?$List@PAUID3D10Buffer@@@@AAV?$List@I@@@Z ENDP ; D3D10VertexBuffer::MakeBufferList
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ??1VBData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1VBData@@QAE@XZ PROC					; VBData::~VBData, COMDAT
; _this$ = ecx

; 101  :     inline ~VBData() {Clear();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@VBData@@QAEXXZ			; VBData::Clear
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1?$List@VUVCoordList@@@@QAE@XZ	; List<UVCoordList>::~List<UVCoordList>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$List@UVect@@@@QAE@XZ		; List<Vect>::~List<Vect>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$List@K@@QAE@XZ			; List<unsigned long>::~List<unsigned long>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$List@UVect@@@@QAE@XZ		; List<Vect>::~List<Vect>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@UVect@@@@QAE@XZ		; List<Vect>::~List<Vect>
	mov	esp, ebp
	pop	ebp
	ret	0
??1VBData@@QAE@XZ ENDP					; VBData::~VBData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?Clear@VBData@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@VBData@@QAEXXZ PROC				; VBData::Clear, COMDAT
; _this$ = ecx

; 104  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 105  :         VertList.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UVect@@@@QAEXXZ		; List<Vect>::Clear

; 106  :         NormalList.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Clear@?$List@UVect@@@@QAEXXZ		; List<Vect>::Clear

; 107  :         ColorList.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Clear@?$List@K@@QAEXXZ			; List<unsigned long>::Clear

; 108  :         TangentList.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$List@UVect@@@@QAEXXZ		; List<Vect>::Clear

; 109  : 
; 110  :         for(DWORD i=0;i<UVList.Num();i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN3@Clear
$LN2@Clear:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN3@Clear:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@VUVCoordList@@@@QBEIXZ	; List<UVCoordList>::Num
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN1@Clear

; 111  :             UVList[i].Clear();

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??A?$List@VUVCoordList@@@@QAEAAVUVCoordList@@I@Z ; List<UVCoordList>::operator[]
	mov	ecx, eax
	call	?Clear@?$List@UVect2@@@@QAEXXZ		; List<Vect2>::Clear
	jmp	SHORT $LN2@Clear
$LN1@Clear:

; 112  : 
; 113  :         UVList.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Clear@?$List@VUVCoordList@@@@QAEXXZ	; List<UVCoordList>::Clear

; 114  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@VBData@@QAEXXZ ENDP				; VBData::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10VertexBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10VertexBuffer@@QAE@XZ PROC			; D3D10VertexBuffer::D3D10VertexBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0VertexBuffer@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10VertexBuffer@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$List@PAUID3D10Buffer@@@@QAE@XZ	; List<ID3D10Buffer *>::List<ID3D10Buffer *>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$List@I@@QAE@XZ			; List<unsigned int>::List<unsigned int>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10VertexBuffer@@QAE@XZ ENDP			; D3D10VertexBuffer::D3D10VertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GVBData@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GVBData@@QAEPAXI@Z PROC				; VBData::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1VBData@@QAE@XZ			; VBData::~VBData
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GVBData@@QAEPAXI@Z ENDP				; VBData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10VertexBuffer@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10VertexBuffer@@UAEPAXI@Z PROC			; D3D10VertexBuffer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10VertexBuffer@@UAE@XZ		; D3D10VertexBuffer::~D3D10VertexBuffer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10VertexBuffer@@UAEPAXI@Z ENDP			; D3D10VertexBuffer::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10vertexbuffer.cpp
;	COMDAT ??1D3D10VertexBuffer@@UAE@XZ
_TEXT	SEGMENT
tv198 = -24						; size = 4
$T1 = -20						; size = 4
$T2 = -16						; size = 4
tv130 = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
??1D3D10VertexBuffer@@UAE@XZ PROC			; D3D10VertexBuffer::~D3D10VertexBuffer, COMDAT
; _this$ = ecx

; 152  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10VertexBuffer@@6B@

; 153  :     for(UINT i=0; i<UVBuffers.Num(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN8@D3D10Verte
$LN7@D3D10Verte:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN8@D3D10Verte:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@PAUID3D10Buffer@@@@QBEIXZ	; List<ID3D10Buffer *>::Num
	cmp	DWORD PTR _i$3[ebp], eax
	jae	SHORT $LN6@D3D10Verte

; 154  :         SafeRelease(UVBuffers[i]);

	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@D3D10Verte
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv130[ebp], ecx
	mov	edx, DWORD PTR tv130[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR tv130[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	call	edx
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	mov	DWORD PTR [eax], 0
$LN5@D3D10Verte:
	jmp	SHORT $LN7@D3D10Verte
$LN6@D3D10Verte:

; 155  : 
; 156  :     SafeRelease(tangentBuffer);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN4@D3D10Verte
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
$LN4@D3D10Verte:

; 157  :     SafeRelease(colorBuffer);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN3@D3D10Verte
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN3@D3D10Verte:

; 158  :     SafeRelease(normalBuffer);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN2@D3D10Verte
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN2@D3D10Verte:

; 159  :     SafeRelease(vertexBuffer);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@D3D10Verte
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN1@D3D10Verte:

; 160  : 
; 161  :     delete data;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN11@D3D10Verte
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GVBData@@QAEPAXI@Z
	mov	DWORD PTR tv198[ebp], eax
	jmp	SHORT $LN9@D3D10Verte
$LN11@D3D10Verte:
	mov	DWORD PTR tv198[ebp], 0
$LN9@D3D10Verte:

; 162  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$List@I@@QAE@XZ			; List<unsigned int>::~List<unsigned int>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$List@PAUID3D10Buffer@@@@QAE@XZ	; List<ID3D10Buffer *>::~List<ID3D10Buffer *>
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1VertexBuffer@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10VertexBuffer@@UAE@XZ ENDP			; D3D10VertexBuffer::~D3D10VertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10vertexbuffer.cpp
;	COMDAT ?FlushBuffers@D3D10VertexBuffer@@UAEXXZ
_TEXT	SEGMENT
_textureVerts$1 = -24					; size = 4
_buffer$2 = -20						; size = 4
_i$3 = -16						; size = 4
_outData$ = -12						; size = 4
_err$ = -8						; size = 4
_this$ = -4						; size = 4
?FlushBuffers@D3D10VertexBuffer@@UAEXXZ PROC		; D3D10VertexBuffer::FlushBuffers, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	DWORD PTR _this$[ebp], ecx

; 166  :     if(!bDynamic)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN13@FlushBuffe

; 167  :     {
; 168  :         AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: Cannot flush buffers on a non-dynamic vertex buffer"));

	push	OFFSET $SG4294899688
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 169  :         return;

	jmp	$LN14@FlushBuffe
$LN13@FlushBuffe:

; 170  :     }
; 171  : 
; 172  :     HRESULT err;
; 173  : 
; 174  :     //---------------------------------------------------
; 175  : 
; 176  :     BYTE *outData;
; 177  :     if(FAILED(err = vertexBuffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN12@FlushBuffe

; 178  :     {
; 179  :         AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: failed to map vertex buffer, result = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294899687
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 180  :         return;

	jmp	$LN14@FlushBuffe
$LN12@FlushBuffe:

; 181  :     }
; 182  : 
; 183  :     mcpy(outData, data->VertList.Array(), sizeof(Vect)*numVerts);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	push	eax
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 184  : 
; 185  :     vertexBuffer->Unmap();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax

; 186  : 
; 187  :     //---------------------------------------------------
; 188  : 
; 189  :     if(normalBuffer)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+8], 0
	je	SHORT $LN11@FlushBuffe

; 190  :     {
; 191  :         if(FAILED(err = normalBuffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	edx, DWORD PTR _outData$[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN10@FlushBuffe

; 192  :         {
; 193  :             AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: failed to map normal buffer, result = %08lX"), err);

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	push	OFFSET $SG4294899686
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 194  :             return;

	jmp	$LN14@FlushBuffe
$LN10@FlushBuffe:

; 195  :         }
; 196  : 
; 197  :         mcpy(outData, data->NormalList.Array(), sizeof(Vect)*numVerts);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	shl	edx, 4
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 8
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	push	eax
	mov	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 198  :         normalBuffer->Unmap();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
$LN11@FlushBuffe:

; 199  :     }
; 200  : 
; 201  :     //---------------------------------------------------
; 202  : 
; 203  :     if(colorBuffer)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	je	SHORT $LN9@FlushBuffe

; 204  :     {
; 205  :         if(FAILED(err = colorBuffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	eax, DWORD PTR _outData$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN8@FlushBuffe

; 206  :         {
; 207  :             AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: failed to map color buffer, result = %08lX"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET $SG4294899685
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 208  :             return;

	jmp	$LN14@FlushBuffe
$LN8@FlushBuffe:

; 209  :         }
; 210  : 
; 211  :         mcpy(outData, data->ColorList.Array(), sizeof(Vect)*numVerts);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+60]
	add	ecx, 16					; 00000010H
	call	?Array@?$List@K@@QBEPAKXZ		; List<unsigned long>::Array
	push	eax
	mov	edx, DWORD PTR _outData$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 212  :         colorBuffer->Unmap();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx
$LN9@FlushBuffe:

; 213  :     }
; 214  : 
; 215  :     //---------------------------------------------------
; 216  : 
; 217  :     if(tangentBuffer)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN7@FlushBuffe

; 218  :     {
; 219  :         if(FAILED(err = tangentBuffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	ecx, DWORD PTR _outData$[ebp]
	push	ecx
	push	0
	push	4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN6@FlushBuffe

; 220  :         {
; 221  :             AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: failed to map tangent buffer, result = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET $SG4294899684
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 222  :             return;

	jmp	$LN14@FlushBuffe
$LN6@FlushBuffe:

; 223  :         }
; 224  : 
; 225  :         mcpy(outData, data->TangentList.Array(), sizeof(Vect)*numVerts);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@UVect@@@@QBEPAUVect@@XZ	; List<Vect>::Array
	push	eax
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 226  :         tangentBuffer->Unmap();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN7@FlushBuffe:

; 227  :     }
; 228  : 
; 229  :     //---------------------------------------------------
; 230  : 
; 231  :     if(UVBuffers.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@PAUID3D10Buffer@@@@QBEIXZ	; List<ID3D10Buffer *>::Num
	test	eax, eax
	je	$LN14@FlushBuffe

; 232  :     {
; 233  :         for(UINT i=0; i<UVBuffers.Num(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN4@FlushBuffe
$LN3@FlushBuffe:
	mov	ecx, DWORD PTR _i$3[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$3[ebp], ecx
$LN4@FlushBuffe:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@PAUID3D10Buffer@@@@QBEIXZ	; List<ID3D10Buffer *>::Num
	cmp	DWORD PTR _i$3[ebp], eax
	jae	$LN14@FlushBuffe

; 234  :         {
; 235  :             List<UVCoord> &textureVerts = data->UVList[i];

	mov	edx, DWORD PTR _i$3[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	add	ecx, 32					; 00000020H
	call	??A?$List@VUVCoordList@@@@QAEAAVUVCoordList@@I@Z ; List<UVCoordList>::operator[]
	mov	DWORD PTR _textureVerts$1[ebp], eax

; 236  : 
; 237  :             ID3D10Buffer *buffer = UVBuffers[i];

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ; List<ID3D10Buffer *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _buffer$2[ebp], edx

; 238  : 
; 239  :             if(FAILED(err = buffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	eax, DWORD PTR _outData$[ebp]
	push	eax
	push	0
	push	4
	mov	ecx, DWORD PTR _buffer$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _buffer$2[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+40]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax
	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN1@FlushBuffe

; 240  :             {
; 241  :                 AppWarning(TEXT("D3D10VertexBuffer::FlushBuffers: failed to map texture vertex buffer %d, result = %08lX"), i, err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	push	OFFSET $SG4294899683
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 242  :                 return;

	jmp	SHORT $LN14@FlushBuffe
$LN1@FlushBuffe:

; 243  :             }
; 244  : 
; 245  :             mcpy(outData, textureVerts.Array(), sizeof(UVCoord)*numVerts);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	shl	edx, 3
	push	edx
	mov	ecx, DWORD PTR _textureVerts$1[ebp]
	call	?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ	; List<Vect2>::Array
	push	eax
	mov	eax, DWORD PTR _outData$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 246  :             buffer->Unmap();

	mov	ecx, DWORD PTR _buffer$2[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _buffer$2[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+44]
	call	ecx

; 247  :         }

	jmp	$LN3@FlushBuffe
$LN14@FlushBuffe:

; 248  :     }
; 249  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FlushBuffers@D3D10VertexBuffer@@UAEXXZ ENDP		; D3D10VertexBuffer::FlushBuffers
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10vertexbuffer.cpp
;	COMDAT ?GetData@D3D10VertexBuffer@@UAEPAUVBData@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetData@D3D10VertexBuffer@@UAEPAUVBData@@XZ PROC	; D3D10VertexBuffer::GetData, COMDAT
; _this$ = ecx

; 252  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 253  :     if(!bDynamic)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+52], 0
	jne	SHORT $LN1@GetData

; 254  :     {
; 255  :         AppWarning(TEXT("D3D10VertexBuffer::GetData: Cannot get vertex data of a non-dynamic vertex buffer"));

	push	OFFSET $SG4294899682
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 256  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetData
$LN1@GetData:

; 257  :     }
; 258  : 
; 259  :     return data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+60]
$LN2@GetData:

; 260  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetData@D3D10VertexBuffer@@UAEPAUVBData@@XZ ENDP	; D3D10VertexBuffer::GetData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??6?$List@I@@QAEAAV0@ABI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
??6?$List@I@@QAEAAV0@ABI@Z PROC				; List<unsigned int>::operator<<, COMDAT
; _this$ = ecx

; 366  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 367  :         Add(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$List@I@@QAEIABI@Z		; List<unsigned int>::Add

; 368  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 369  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??6?$List@I@@QAEAAV0@ABI@Z ENDP				; List<unsigned int>::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@I@@QAEAAII@Z PROC				; List<unsigned int>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0I@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@I@@QAEAAII@Z ENDP				; List<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@I@@QBEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@I@@QBEAAII@Z PROC				; List<unsigned int>::operator[], COMDAT
; _this$ = ecx

; 386  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  :         assert(index < num);
; 388  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0]; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0I@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 389  :         return array[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN3@operator:

; 390  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@I@@QBEAAII@Z ENDP				; List<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@UVect@@@@QBEPAUVect@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@UVect@@@@QBEPAUVect@@XZ PROC		; List<Vect>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@UVect@@@@QBEPAUVect@@XZ ENDP		; List<Vect>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UVect@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UVect@@@@QBEIXZ PROC			; List<Vect>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UVect@@@@QBEIXZ ENDP			; List<Vect>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@K@@QBEPAKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@K@@QBEPAKXZ PROC				; List<unsigned long>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@K@@QBEPAKXZ ENDP				; List<unsigned long>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@K@@QBEIXZ PROC				; List<unsigned long>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@K@@QBEIXZ ENDP				; List<unsigned long>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ PROC		; List<Vect2>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@UVect2@@@@QBEPAUVect2@@XZ ENDP		; List<Vect2>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@VUVCoordList@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@VUVCoordList@@@@QBEIXZ PROC			; List<UVCoordList>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@VUVCoordList@@@@QBEIXZ ENDP			; List<UVCoordList>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_val$ = 8						; size = 4
??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z PROC ; List<ID3D10Buffer *>::operator<<, COMDAT
; _this$ = ecx

; 366  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 367  :         Add(val);

	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$List@PAUID3D10Buffer@@@@QAEIABQAUID3D10Buffer@@@Z ; List<ID3D10Buffer *>::Add

; 368  :         return *this;

	mov	eax, DWORD PTR _this$[ebp]

; 369  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??6?$List@PAUID3D10Buffer@@@@QAEAAV0@ABQAUID3D10Buffer@@@Z ENDP ; List<ID3D10Buffer *>::operator<<
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z PROC ; List<ID3D10Buffer *>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0PAUID3D10Buffer@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAUID3D10Buffer@@@@QAEAAPAUID3D10Buffer@@I@Z ENDP ; List<ID3D10Buffer *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@PAUID3D10Buffer@@@@QBEAAPAUID3D10Buffer@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@PAUID3D10Buffer@@@@QBEAAPAUID3D10Buffer@@I@Z PROC ; List<ID3D10Buffer *>::operator[], COMDAT
; _this$ = ecx

; 386  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  :         assert(index < num);
; 388  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0]; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0PAUID3D10Buffer@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 4
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 389  :         return array[index];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [eax+ecx*4]
$LN3@operator:

; 390  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@PAUID3D10Buffer@@@@QBEAAPAUID3D10Buffer@@I@Z ENDP ; List<ID3D10Buffer *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Add@?$List@I@@QAEIABI@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?Add@?$List@I@@QAEIABI@Z PROC				; List<unsigned int>::Add, COMDAT
; _this$ = ecx

; 45   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 46   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR tv73[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 47   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx

; 48   :         return num-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1

; 49   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$List@I@@QAEIABI@Z ENDP				; List<unsigned int>::Add
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Add@?$List@PAUID3D10Buffer@@@@QAEIABQAUID3D10Buffer@@@Z
_TEXT	SEGMENT
tv73 = -8						; size = 4
_this$ = -4						; size = 4
_val$ = 8						; size = 4
?Add@?$List@PAUID3D10Buffer@@@@QAEIABQAUID3D10Buffer@@@Z PROC ; List<ID3D10Buffer *>::Add, COMDAT
; _this$ = ecx

; 45   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 46   :         array = (T*)ReAllocate(array, sizeof(T)*++num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv73[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	ecx, DWORD PTR tv73[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 47   :         mcpy(&array[(num-1)], (void*)&val, sizeof(T));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _val$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [edx+eax*4-4], ecx

; 48   :         return num-1;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1

; 49   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$List@PAUID3D10Buffer@@@@QAEIABQAUID3D10Buffer@@@Z ENDP ; List<ID3D10Buffer *>::Add
_TEXT	ENDS
END
