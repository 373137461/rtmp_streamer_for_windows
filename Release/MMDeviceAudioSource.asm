; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\MMDeviceAudioSource.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1OK@PEJOCJKG@?$AAU?$AAs?$AAe?$AAr?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AAl?$AAy?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@ ; `string'
PUBLIC	??_R2AudioSource@@8				; AudioSource::`RTTI Base Class Array'
PUBLIC	__GUID_c8adbd64_e71e_48a0_a4de_185c395cd317
PUBLIC	??_R3AudioSource@@8				; AudioSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@AudioSource@@8			; AudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	__GUID_00000003_0000_0010_8000_00aa00389b71
PUBLIC	??_R1A@?0A@EA@MMDeviceAudioSource@@8		; MMDeviceAudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4MMDeviceAudioSource@@6B@			; MMDeviceAudioSource::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVAudioSource@@@8				; AudioSource `RTTI Type Descriptor'
PUBLIC	??_7MMDeviceAudioSource@@6B@			; MMDeviceAudioSource::`vftable'
PUBLIC	??_R0?AVMMDeviceAudioSource@@@8			; MMDeviceAudioSource `RTTI Type Descriptor'
PUBLIC	??_R3MMDeviceAudioSource@@8			; MMDeviceAudioSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	__GUID_cd63314f_3fba_4a1b_812c_ef96358728e7
PUBLIC	??_R2MMDeviceAudioSource@@8			; MMDeviceAudioSource::`RTTI Base Class Array'
EXTRN	__imp_?InitAudioData@AudioSource@@IAEX_NIIIIK@Z:PROC
EXTRN	__imp_??1AudioSource@@UAE@XZ:PROC
EXTRN	__imp_??0AudioSource@@QAE@XZ:PROC
EXTRN	?GetEarliestTimestamp@AudioSource@@UAE_NAA_K@Z:PROC ; AudioSource::GetEarliestTimestamp
EXTRN	__imp_?GetEarliestTimestamp@AudioSource@@UAE_NAA_K@Z:PROC
EXTRN	?QueryAudio@AudioSource@@UAEIM@Z:PROC		; AudioSource::QueryAudio
EXTRN	__imp_?QueryAudio@AudioSource@@UAEIM@Z:PROC
EXTRN	?GetNewestFrame@AudioSource@@UAE_NPAPAM@Z:PROC	; AudioSource::GetNewestFrame
EXTRN	__imp_?GetNewestFrame@AudioSource@@UAE_NPAPAM@Z:PROC
EXTRN	?GetBuffer@AudioSource@@UAE_NPAPAM_K@Z:PROC	; AudioSource::GetBuffer
EXTRN	__imp_?GetBuffer@AudioSource@@UAE_NPAPAM_K@Z:PROC
EXTRN	__imp_?GetChannelCount@AudioSource@@QBEIXZ:PROC
EXTRN	?GetBufferedTime@AudioSource@@UAE_KXZ:PROC	; AudioSource::GetBufferedTime
EXTRN	__imp_?GetBufferedTime@AudioSource@@UAE_KXZ:PROC
EXTRN	__imp_?GetTimeOffset@AudioSource@@QBEHXZ:PROC
EXTRN	__imp_?GetSamplesPerSec@AudioSource@@QBEIXZ:PROC
EXTRN	?GetLatestTimestamp@AudioSource@@UAE_NAA_K@Z:PROC ; AudioSource::GetLatestTimestamp
EXTRN	__imp_?GetLatestTimestamp@AudioSource@@UAE_NAA_K@Z:PROC
EXTRN	__imp_?SetTimeOffset@AudioSource@@QAEXH@Z:PROC
;	COMDAT ?bRunOnce@?BI@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
_BSS	SEGMENT
?bRunOnce@?BI@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA DB 01H DUP (?) ; `MMDeviceAudioSource::GetNextBuffer'::`24'::bRunOnce
_BSS	ENDS
;	COMDAT ?bRunOnce@?BP@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
_BSS	SEGMENT
?bRunOnce@?BP@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA DB 01H DUP (?) ; `MMDeviceAudioSource::GetNextBuffer'::`31'::bRunOnce
_BSS	ENDS
;	COMDAT ??_R2MMDeviceAudioSource@@8
rdata$r	SEGMENT
??_R2MMDeviceAudioSource@@8 DD FLAT:??_R1A@?0A@EA@MMDeviceAudioSource@@8 ; MMDeviceAudioSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@AudioSource@@8
rdata$r	ENDS
;	COMDAT __GUID_cd63314f_3fba_4a1b_812c_ef96358728e7
CONST	SEGMENT
__GUID_cd63314f_3fba_4a1b_812c_ef96358728e7 DD 0cd63314fH
	DW	03fbaH
	DW	04a1bH
	DB	081H
	DB	02cH
	DB	0efH
	DB	096H
	DB	035H
	DB	087H
	DB	028H
	DB	0e7H
CONST	ENDS
;	COMDAT ??_R3MMDeviceAudioSource@@8
rdata$r	SEGMENT
??_R3MMDeviceAudioSource@@8 DD 00H			; MMDeviceAudioSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2MMDeviceAudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVMMDeviceAudioSource@@@8
data$r	SEGMENT
??_R0?AVMMDeviceAudioSource@@@8 DD FLAT:??_7type_info@@6B@ ; MMDeviceAudioSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVMMDeviceAudioSource@@', 00H
data$r	ENDS
;	COMDAT ??_7MMDeviceAudioSource@@6B@
CONST	SEGMENT
??_7MMDeviceAudioSource@@6B@ DD FLAT:??_R4MMDeviceAudioSource@@6B@ ; MMDeviceAudioSource::`vftable'
	DD	FLAT:?GetDeviceName@MMDeviceAudioSource@@MBEPB_WXZ
	DD	FLAT:?GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z
	DD	FLAT:?ReleaseBuffer@MMDeviceAudioSource@@MAEXXZ
	DD	FLAT:??_EMMDeviceAudioSource@@UAEPAXI@Z
	DD	FLAT:?QueryAudio@AudioSource@@UAEIM@Z
	DD	FLAT:?GetEarliestTimestamp@AudioSource@@UAE_NAA_K@Z
	DD	FLAT:?GetBuffer@AudioSource@@UAE_NPAPAM_K@Z
	DD	FLAT:?GetNewestFrame@AudioSource@@UAE_NPAPAM@Z
	DD	FLAT:?GetBufferedTime@AudioSource@@UAE_KXZ
	DD	FLAT:?StartCapture@MMDeviceAudioSource@@UAEXXZ
	DD	FLAT:?StopCapture@MMDeviceAudioSource@@UAEXXZ
	DD	FLAT:?GetLatestTimestamp@AudioSource@@UAE_NAA_K@Z
CONST	ENDS
;	COMDAT ??_R0?AVAudioSource@@@8
data$r	SEGMENT
??_R0?AVAudioSource@@@8 DD FLAT:??_7type_info@@6B@	; AudioSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVAudioSource@@', 00H
data$r	ENDS
;	COMDAT ??_R4MMDeviceAudioSource@@6B@
rdata$r	SEGMENT
??_R4MMDeviceAudioSource@@6B@ DD 00H			; MMDeviceAudioSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVMMDeviceAudioSource@@@8
	DD	FLAT:??_R3MMDeviceAudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@MMDeviceAudioSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@MMDeviceAudioSource@@8 DD FLAT:??_R0?AVMMDeviceAudioSource@@@8 ; MMDeviceAudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3MMDeviceAudioSource@@8
rdata$r	ENDS
;	COMDAT __GUID_00000003_0000_0010_8000_00aa00389b71
CONST	SEGMENT
__GUID_00000003_0000_0010_8000_00aa00389b71 DD 03H
	DW	00H
	DW	010H
	DB	080H
	DB	00H
	DB	00H
	DB	0aaH
	DB	00H
	DB	038H
	DB	09bH
	DB	071H
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@AudioSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@AudioSource@@8 DD FLAT:??_R0?AVAudioSource@@@8 ; AudioSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3AudioSource@@8
rdata$r	ENDS
;	COMDAT ??_R3AudioSource@@8
rdata$r	SEGMENT
??_R3AudioSource@@8 DD 00H				; AudioSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2AudioSource@@8
rdata$r	ENDS
;	COMDAT __GUID_c8adbd64_e71e_48a0_a4de_185c395cd317
CONST	SEGMENT
__GUID_c8adbd64_e71e_48a0_a4de_185c395cd317 DD 0c8adbd64H
	DW	0e71eH
	DW	048a0H
	DB	0a4H
	DB	0deH
	DB	018H
	DB	05cH
	DB	039H
	DB	05cH
	DB	0d3H
	DB	017H
CONST	ENDS
;	COMDAT ??_R2AudioSource@@8
rdata$r	SEGMENT
??_R2AudioSource@@8 DD FLAT:??_R1A@?0A@EA@AudioSource@@8 ; AudioSource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_C@_1OK@PEJOCJKG@?$AAU?$AAs?$AAe?$AAr?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AAl?$AAy?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1OK@PEJOCJKG@?$AAU?$AAs?$AAe?$AAr?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AAl?$AAy?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@ DB 'U'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'p', 00H, 'u', 00H
	DB	'r', 00H, 'p', 00H, 'o', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'y'
	DB	00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '''', 00H
	DB	'%', 00H, 's', 00H, '''', 00H, '.', 00H, ' ', 00H, ' ', 00H, 'D'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'i', 00H, 't', 00H, ' ', 00H
	DB	'g', 00H, 'o', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'w', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, ' ', 00H, 'i', 00H, 's', 00H, 's', 00H, 'u', 00H, 'e'
	DB	00H, 's', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'm', 00H, 'a', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'd', 00H, 'o', 00H, ' ', 00H
	DB	't', 00H, 'h', 00H, 'i', 00H, 's', 00H, '?', 00H, 00H, 00H ; `string'
	ORG $+2
$SG4294814444 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'R'
	DB	00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'N', 00H
	DB	'O', 00H, 'T', 00H, '_', 00H, 'R', 00H, 'U', 00H, 'N', 00H, 'N'
	DB	00H, 'I', 00H, 'N', 00H, 'G', 00H, 00H, 00H
$SG4294814441 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'S', 00H, 'I', 00H
	DB	'Z', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_'
	DB	00H, 'A', 00H, 'L', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'E', 00H
	DB	'D', 00H, 00H, 00H
$SG4294814440 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'S', 00H, 'I', 00H
	DB	'Z', 00H, 'E', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O'
	DB	00H, 'R', 00H, 00H, 00H
$SG4294814443 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'A', 00H, 'L', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '_', 00H, 'I', 00H
	DB	'N', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'A', 00H, 'L', 00H, 'I'
	DB	00H, 'Z', 00H, 'E', 00H, 'D', 00H, 00H, 00H
$SG4294814442 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'W', 00H, 'R', 00H, 'O'
	DB	00H, 'N', 00H, 'G', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'D', 00H
	DB	'P', 00H, 'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '_', 00H, 'T'
	DB	00H, 'Y', 00H, 'P', 00H, 'E', 00H, 00H, 00H
$SG4294814437 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H
	DB	'_', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 00H, 00H
$SG4294814438 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H
	DB	'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H, 'D', 00H, 'A', 00H, 'T'
	DB	00H, 'E', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG4294814436 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'D'
	DB	00H, 'P', 00H, 'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '_', 00H
	DB	'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '_'
	DB	00H, 'F', 00H, 'A', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'D', 00H
	DB	00H, 00H
	ORG $+2
$SG4294814439 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'P', 00H, 'U'
	DB	00H, 'U', 00H, 'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, '_', 00H
	DB	'E', 00H, 'X', 00H, 'C', 00H, 'E', 00H, 'E', 00H, 'D', 00H, 'E'
	DB	00H, 'D', 00H, 00H, 00H
$SG4294814434 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'S'
	DB	00H, 'U', 00H, 'P', 00H, 'P', 00H, 'O', 00H, 'R', 00H, 'T', 00H
	DB	'E', 00H, 'D', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, 00H, 00H
	ORG $+2
$SG4294814433 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'C'
	DB	00H, 'L', 00H, 'U', 00H, 'S', 00H, 'I', 00H, 'V', 00H, 'E', 00H
	DB	'_', 00H, 'M', 00H, 'O', 00H, 'D', 00H, 'E', 00H, '_', 00H, 'N'
	DB	00H, 'O', 00H, 'T', 00H, '_', 00H, 'A', 00H, 'L', 00H, 'L', 00H
	DB	'O', 00H, 'W', 00H, 'E', 00H, 'D', 00H, 00H, 00H
	ORG $+2
$SG4294814429 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'E', 00H, 'V', 00H, 'E'
	DB	00H, 'N', 00H, 'T', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'D', 00H
	DB	'L', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'T', 00H, 00H, 00H
$SG4294814432 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'D', 00H, 'U', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'I', 00H
	DB	'O', 00H, 'N', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'R', 00H, 'I'
	DB	00H, 'O', 00H, 'D', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'_', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'A', 00H, 'L', 00H, 00H
	DB	00H
	ORG $+2
$SG4294814435 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'V'
	DB	00H, 'A', 00H, 'L', 00H, 'I', 00H, 'D', 00H, '_', 00H, 'D', 00H
	DB	'E', 00H, 'V', 00H, 'I', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'P'
	DB	00H, 'E', 00H, 'R', 00H, 'I', 00H, 'O', 00H, 'D', 00H, 00H, 00H
$SG4294814428 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'B', 00H, 'U', 00H, 'F'
	DB	00H, 'F', 00H, 'E', 00H, 'R', 00H, '_', 00H, 'O', 00H, 'P', 00H
	DB	'E', 00H, 'R', 00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H
	DB	'N', 00H, 'G', 00H, 00H, 00H
	ORG $+2
$SG4294814431 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H, 'T', 00H, 'I', 00H
	DB	'A', 00H, 'L', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'D', 00H, 00H
	DB	00H
$SG4294814430 DB 'A', 00H, 'U', 00H, 'D', 00H, 'C', 00H, 'L', 00H, 'N', 00H
	DB	'T', 00H, '_', 00H, 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T'
	DB	00H, '_', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'P', 00H, 'P', 00H
	DB	'E', 00H, 'D', 00H, 00H, 00H
$SG4294814425 DB 'E', 00H, '_', 00H, 'O', 00H, 'U', 00H, 'T', 00H, 'O', 00H
	DB	'F', 00H, 'M', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'R', 00H, 'Y'
	DB	00H, 00H, 00H
$SG4294814424 DB 'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'I', 00H, 'N', 00H
	DB	'T', 00H, 'E', 00H, 'R', 00H, 'F', 00H, 'A', 00H, 'C', 00H, 'E'
	DB	00H, 00H, 00H
$SG4294814427 DB 'E', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H, 'N', 00H
	DB	'T', 00H, 'E', 00H, 'R', 00H, 00H, 00H
$SG4294814426 DB 'E', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'V', 00H, 'A', 00H
	DB	'L', 00H, 'I', 00H, 'D', 00H, 'A', 00H, 'R', 00H, 'G', 00H, 00H
	DB	00H
	ORG $+2
$SG4294814421 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294814420 DB 'U', 00H, 's', 00H, 'e', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 'F', 00H, 'i', 00H, 'x'
	DB	00H, 'H', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H
$SG4294814423 DB '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294814422 DB 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 'd', 00H, 00H, 00H
$SG4294814419 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294814417 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'I', 00H, 'M', 00H, 'M', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294814418 DB 'D', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 00H, 00H
$SG4294814413 DB 'U', 00H, 's', 00H, 'e', 00H, 'M', 00H, 'i', 00H, 'c', 00H
	DB	'Q', 00H, 'P', 00H, 'C', 00H, 00H, 00H
$SG4294814416 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'I', 00H, 'A', 00H, 'u', 00H, 'd', 00H
	DB	'i', 00H, 'o', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
$SG4294814412 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294814409 DB 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H
	DB	' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, ':'
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG4294814415 DB '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, 00H, 00H
	ORG $+2
$SG4294814414 DB 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'x', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294814408 DB 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 'T', 00H, 'o', 00H
	DB	'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG4294814411 DB 'U', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'M', 00H, 'i', 00H, 'c', 00H, ' ', 00H, 'Q', 00H, 'P', 00H, 'C'
	DB	00H, ' ', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294814405 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294814410 DB '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, 00H, 00H
	ORG $+2
$SG4294814404 DB 'G', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H
	DB	' ', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'a', 00H
	DB	'd', 00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294814407 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294814406 DB 'G', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H
	DB	'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 'T', 00H, 'i'
	DB	00H, 'm', 00H, 'e', 00H, 'A', 00H, 'd', 00H, 'j', 00H, 'u', 00H
	DB	's', 00H, 't', 00H, 00H, 00H
$SG4294814400 DB 'R', 00H, 'a', 00H, 'z', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'K', 00H, 'r', 00H, 'a', 00H, 'k', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+2
$SG4294814401 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'U', 00H, 'n'
	DB	00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 'v'
	DB	00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294814392 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 'a', 00H, 'c', 00H, 'q', 00H, 'u', 00H, 'i', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, '.', 00H, 00H, 00H
$SG4294814403 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'm'
	DB	00H, 'i', 00H, 'x', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'm', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG4294814402 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'U', 00H, 'n'
	DB	00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'a', 00H, 'v'
	DB	00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, 00H, 00H
	ORG $+1
$SG4294814397 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'a'
	DB	00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
$SG4294814396 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'a'
	DB	00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c', 00H
	DB	'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG4294814399 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, '%', 00H, 's', 00H, 0dH, 00H, 0aH, 00H
	DB	0dH, 00H, 0aH, 00H, 'T', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'K'
	DB	00H, 'r', 00H, 'a', 00H, 'k', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'L', 00H, 'a', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 't', 00H, 'h', 00H, ' ', 00H, 'O', 00H, 'B', 00H, 'S'
	DB	00H, '.', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'e', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 's', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 't', 00H
	DB	' ', 00H, '(', 00H, 'r', 00H, 'u', 00H, 'n', 00H, ' ', 00H, 'm'
	DB	00H, 's', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H
	DB	'g', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'd'
	DB	00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'i', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'm', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H
	DB	't', 00H, 'u', 00H, 'p', 00H, ')', 00H, ' ', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 't', 00H
	DB	'h', 00H, 'e', 00H, ' ', 00H, '6', 00H, '4', 00H, ' ', 00H, 'b'
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, ' ', 00H, 'O', 00H, 'B', 00H, 'S', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'w', 00H, 'o', 00H, 'r', 00H, 'k', 00H, ' '
	DB	00H, 'a', 00H, 'r', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 's', 00H, 's', 00H, 'u', 00H, 'e', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG4294814398 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 'c'
	DB	00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H, ',', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG4294814393 DB 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'v', 00H, 'i', 00H
	DB	'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, '(', 00H, 'W', 00H, 'A', 00H, 'R', 00H
	DB	'N', 00H, 'I', 00H, 'N', 00H, 'G', 00H, ':', 00H, ' ', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'o', 00H
	DB	'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'o', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'i', 00H, 'f', 00H, ' ', 00H, 'y', 00H
	DB	'o', 00H, 'u', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'j', 00H, 'u', 00H, 's', 00H, 't', 00H, ' ', 00H, 'h', 00H
	DB	'a', 00H, 'v', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w'
	DB	00H, 'e', 00H, 'b', 00H, 'c', 00H, 'a', 00H, 'm', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 's', 00H, 'y', 00H, 'n', 00H, 'c', 00H, ','
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H, '''', 00H
	DB	's', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, 's', 00H, 'u', 00H, 'e', 00H, ')', 00H, 00H
	DB	00H
$SG4294814395 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '(', 00H
	DB	'%', 00H, 'd', 00H, ')', 00H, ':', 00H, ' ', 00H, 'C', 00H, 'o'
	DB	00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'I', 00H, 'M', 00H, 'M', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'E', 00H, 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294814394 DB 'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 't', 00H, 'i', 00H
	DB	'm', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a', 00H, 'm', 00H, 'p'
	DB	00H, ' ', 00H, 'd', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 's', 00H, 'y'
	DB	00H, 'n', 00H, 'c', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H
	DB	'o', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
$SG4294814389 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+1
$SG4294814391 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, ' ', 00H, 'h', 00H
	DB	'a', 00H, 's', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 'l', 00H, 'o', 00H, 's', 00H, 't', 00H, ',', 00H
	DB	' ', 00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H
$SG4294814390 DB 'M', 00H, 'M', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ':', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ':', 00H, ' ', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, 'N', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'P', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
PUBLIC	?ResetWASAPIAudioDevice@@YAXPAVAudioSource@@@Z	; ResetWASAPIAudioDevice
PUBLIC	?ReleaseBuffer@MMDeviceAudioSource@@MAEXXZ	; MMDeviceAudioSource::ReleaseBuffer
PUBLIC	?GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z ; MMDeviceAudioSource::GetNextBuffer
PUBLIC	?GetTimestamp@MMDeviceAudioSource@@AAE_K_K@Z	; MMDeviceAudioSource::GetTimestamp
PUBLIC	?StopCapture@MMDeviceAudioSource@@UAEXXZ	; MMDeviceAudioSource::StopCapture
PUBLIC	?StartCapture@MMDeviceAudioSource@@UAEXXZ	; MMDeviceAudioSource::StartCapture
PUBLIC	?Initialize@MMDeviceAudioSource@@QAE_N_NPB_W@Z	; MMDeviceAudioSource::Initialize
PUBLIC	?Reinitialize@MMDeviceAudioSource@@AAE_NXZ	; MMDeviceAudioSource::Reinitialize
PUBLIC	??0MMDeviceAudioSource@@QAE@XZ			; MMDeviceAudioSource::MMDeviceAudioSource
PUBLIC	?CreateAudioSource@@YAPAVAudioSource@@_NPB_W@Z	; CreateAudioSource
PUBLIC	??_GMMDeviceAudioSource@@UAEPAXI@Z		; MMDeviceAudioSource::`scalar deleting destructor'
PUBLIC	?Reset@MMDeviceAudioSource@@QAEXXZ		; MMDeviceAudioSource::Reset
PUBLIC	??1MMDeviceAudioSource@@UAE@XZ			; MMDeviceAudioSource::~MMDeviceAudioSource
PUBLIC	?GetDeviceName@MMDeviceAudioSource@@MBEPB_WXZ	; MMDeviceAudioSource::GetDeviceName
PUBLIC	?FreeData@MMDeviceAudioSource@@AAEXXZ		; MMDeviceAudioSource::FreeData
PUBLIC	?GetSceneTimestamp@OBS@@QAE_KXZ			; OBS::GetSceneTimestamp
PUBLIC	_!=
PUBLIC	_==
PUBLIC	_IsEqualGUID
EXTRN	??_EMMDeviceAudioSource@@UAEPAXI@Z:PROC		; MMDeviceAudioSource::`vector deleting destructor'
;	COMDAT ?hResultCode@?1??IAudioHRESULTToString@@YAPB_WJ@Z@4PA_WA
_TLS	SEGMENT
?hResultCode@?1??IAudioHRESULTToString@@YAPB_WJ@Z@4PA_WA DW 010H DUP (?) ; `IAudioHRESULTToString'::`2'::hResultCode
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _IsEqualGUID
_TEXT	SEGMENT
tv68 = -8						; size = 4
tv70 = -4						; size = 4
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID PROC					; COMDAT

; 160  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 161  :     return !memcmp(&rguid1, &rguid2, sizeof(GUID));

	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 0
	jne	SHORT $LN3@IsEqualGUI
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@IsEqualGUI
$LN3@IsEqualGUI:
	mov	DWORD PTR tv70[ebp], 0
$LN4@IsEqualGUI:
	mov	eax, DWORD PTR tv70[ebp]

; 162  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_IsEqualGUID ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _==
_TEXT	SEGMENT
tv68 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==	PROC						; COMDAT

; 193  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 194  :     return !!IsEqualGUID(guidOne,guidOther);

	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID
	add	esp, 8
	test	eax, eax
	je	SHORT $LN3@
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN4@
$LN3@:
	mov	DWORD PTR tv68[ebp], 0
$LN4@:
	mov	al, BYTE PTR tv68[ebp]

; 195  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_==	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\shared\guiddef.h
;	COMDAT _!=
_TEXT	SEGMENT
tv69 = -4						; size = 4
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_!=	PROC						; COMDAT

; 198  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 199  :     return !(guidOne == guidOther);

	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_==
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN3@
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN4@
$LN3@:
	mov	DWORD PTR tv69[ebp], 0
$LN4@:
	mov	al, BYTE PTR tv69[ebp]

; 200  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_!=	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?GetSceneTimestamp@OBS@@QAE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSceneTimestamp@OBS@@QAE_KXZ PROC			; OBS::GetSceneTimestamp, COMDAT
; _this$ = ecx

; 1259 :     inline QWORD GetSceneTimestamp() {return firstSceneTimestamp;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+1000]
	mov	edx, DWORD PTR [ecx+1004]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSceneTimestamp@OBS@@QAE_KXZ ENDP			; OBS::GetSceneTimestamp
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?FreeData@MMDeviceAudioSource@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeData@MMDeviceAudioSource@@AAEXXZ PROC		; MMDeviceAudioSource::FreeData, COMDAT
; _this$ = ecx

; 73   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   :         SafeRelease(mmCapture);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+140], 0
	je	SHORT $LN4@FreeData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], 0
$LN4@FreeData:

; 75   :         SafeRelease(mmClient);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+136], 0
	je	SHORT $LN3@FreeData
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+136], 0
$LN3@FreeData:

; 76   :         SafeRelease(mmDevice);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+132], 0
	je	SHORT $LN2@FreeData
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+132], 0
$LN2@FreeData:

; 77   :         SafeRelease(mmClock);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+144], 0
	je	SHORT $LN5@FreeData
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0
$LN5@FreeData:

; 78   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeData@MMDeviceAudioSource@@AAEXXZ ENDP		; MMDeviceAudioSource::FreeData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?GetDeviceName@MMDeviceAudioSource@@MBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDeviceName@MMDeviceAudioSource@@MBEPB_WXZ PROC	; MMDeviceAudioSource::GetDeviceName, COMDAT
; _this$ = ecx

; 84   :     virtual CTSTR GetDeviceName() const {return strDeviceName.Array();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDeviceName@MMDeviceAudioSource@@MBEPB_WXZ ENDP	; MMDeviceAudioSource::GetDeviceName
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ??1MMDeviceAudioSource@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1MMDeviceAudioSource@@UAE@XZ PROC			; MMDeviceAudioSource::~MMDeviceAudioSource, COMDAT
; _this$ = ecx

; 90   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MMDeviceAudioSource@@6B@

; 91   :         StopCapture();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?StopCapture@MMDeviceAudioSource@@UAEXXZ ; MMDeviceAudioSource::StopCapture

; 92   :         FreeData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeData@MMDeviceAudioSource@@AAEXXZ	; MMDeviceAudioSource::FreeData

; 93   :         SafeRelease(mmEnumerator);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+128], 0
	je	SHORT $LN2@MMDeviceAu
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+128], 0
$LN2@MMDeviceAu:

; 94   :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??1?$List@M@@QAE@XZ			; List<float>::~List<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	??1?$List@M@@QAE@XZ			; List<float>::~List<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1AudioSource@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1MMDeviceAudioSource@@UAE@XZ ENDP			; MMDeviceAudioSource::~MMDeviceAudioSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?Reset@MMDeviceAudioSource@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Reset@MMDeviceAudioSource@@QAEXXZ PROC			; MMDeviceAudioSource::Reset, COMDAT
; _this$ = ecx

; 97   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   :         Log(L"User purposely reset the device '%s'.  Did it go out, or were there audio issues that made the user want to do this?", GetDeviceName());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	push	eax
	push	OFFSET ??_C@_1OK@PEJOCJKG@?$AAU?$AAs?$AAe?$AAr?$AA?5?$AAp?$AAu?$AAr?$AAp?$AAo?$AAs?$AAe?$AAl?$AAy?$AA?5?$AAr?$AAe?$AAs?$AAe?$AAt?$AA?5?$AAt?$AAh?$AAe?$AA?5?$AAd?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?5@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 99   :         deviceLost = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+150], 1

; 100  :         reinitTimer = GetQPCTimeMS();

	call	DWORD PTR __imp_?GetQPCTimeMS@@YA_KXZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax
	mov	DWORD PTR [ecx+156], edx

; 101  :         //fakeAudioTimer = GetQPCTimeMS();
; 102  :         FreeData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeData@MMDeviceAudioSource@@AAEXXZ	; MMDeviceAudioSource::FreeData

; 103  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Reset@MMDeviceAudioSource@@QAEXXZ ENDP			; MMDeviceAudioSource::Reset
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GMMDeviceAudioSource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GMMDeviceAudioSource@@UAEPAXI@Z PROC			; MMDeviceAudioSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1MMDeviceAudioSource@@UAE@XZ		; MMDeviceAudioSource::~MMDeviceAudioSource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GMMDeviceAudioSource@@UAEPAXI@Z ENDP			; MMDeviceAudioSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?CreateAudioSource@@YAPAVAudioSource@@_NPB_W@Z
_TEXT	SEGMENT
tv90 = -24						; size = 4
$T1 = -20						; size = 4
tv69 = -16						; size = 4
$T2 = -12						; size = 4
$T3 = -8						; size = 4
_source$ = -4						; size = 4
_bMic$ = 8						; size = 1
_lpID$ = 12						; size = 4
?CreateAudioSource@@YAPAVAudioSource@@_NPB_W@Z PROC	; CreateAudioSource, COMDAT

; 110  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H

; 111  :     MMDeviceAudioSource *source = new MMDeviceAudioSource;

	push	248					; 000000f8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN5@CreateAudi
	mov	ecx, DWORD PTR $T2[ebp]
	call	??0MMDeviceAudioSource@@QAE@XZ
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN6@CreateAudi
$LN5@CreateAudi:
	mov	DWORD PTR tv69[ebp], 0
$LN6@CreateAudi:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR _source$[ebp], eax

; 112  :     if(source->Initialize(bMic, lpID))

	mov	ecx, DWORD PTR _lpID$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _bMic$[ebp]
	push	edx
	mov	ecx, DWORD PTR _source$[ebp]
	call	?Initialize@MMDeviceAudioSource@@QAE_N_NPB_W@Z ; MMDeviceAudioSource::Initialize
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@CreateAudi

; 113  :         return source;

	mov	eax, DWORD PTR _source$[ebp]
	jmp	SHORT $LN3@CreateAudi

; 114  :     else

	jmp	SHORT $LN3@CreateAudi
$LN2@CreateAudi:

; 115  :     {
; 116  :         delete source;

	mov	ecx, DWORD PTR _source$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], edx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@CreateAudi
	push	1
	mov	eax, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN8@CreateAudi
$LN7@CreateAudi:
	mov	DWORD PTR tv90[ebp], 0
$LN8@CreateAudi:

; 117  :         return NULL;

	xor	eax, eax
$LN3@CreateAudi:

; 118  :     }
; 119  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateAudioSource@@YAPAVAudioSource@@_NPB_W@Z ENDP	; CreateAudioSource
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0MMDeviceAudioSource@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MMDeviceAudioSource@@QAE@XZ PROC			; MMDeviceAudioSource::MMDeviceAudioSource, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0AudioSource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7MMDeviceAudioSource@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	??0?$List@M@@QAE@XZ			; List<float>::List<float>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 212				; 000000d4H
	call	??0?$List@M@@QAE@XZ			; List<float>::List<float>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MMDeviceAudioSource@@QAE@XZ ENDP			; MMDeviceAudioSource::MMDeviceAudioSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?IAudioHRESULTToString@@YAPB_WJ@Z
_TEXT	SEGMENT
tv64 = -4						; size = 4
_hr$ = 8						; size = 4
?IAudioHRESULTToString@@YAPB_WJ@Z PROC			; IAudioHRESULTToString, COMDAT

; 122  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 123  :     __declspec(thread) static TCHAR hResultCode[16];
; 124  : 
; 125  :     switch (hr)

	mov	eax, DWORD PTR _hr$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], -2004287487	; 88890001H
	jg	SHORT $LN27@IAudioHRES
	cmp	DWORD PTR tv64[ebp], -2004287487	; 88890001H
	je	$LN9@IAudioHRES
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	jg	SHORT $LN28@IAudioHRES
	cmp	DWORD PTR tv64[ebp], -2147024882	; 8007000eH
	je	$LN3@IAudioHRES
	cmp	DWORD PTR tv64[ebp], -2147467262	; 80004002H
	je	$LN2@IAudioHRES
	cmp	DWORD PTR tv64[ebp], -2147467261	; 80004003H
	je	$LN5@IAudioHRES
	jmp	$LN1@IAudioHRES
$LN28@IAudioHRES:
	cmp	DWORD PTR tv64[ebp], -2147024809	; 80070057H
	je	$LN4@IAudioHRES
	jmp	$LN1@IAudioHRES
$LN27@IAudioHRES:
	mov	ecx, DWORD PTR tv64[ebp]
	add	ecx, 2004287486				; 7776fffeH
	mov	DWORD PTR tv64[ebp], ecx
	cmp	DWORD PTR tv64[ebp], 30			; 0000001eH
	ja	$LN1@IAudioHRES
	mov	edx, DWORD PTR tv64[ebp]
	movzx	eax, BYTE PTR $LN29@IAudioHRES[edx]
	jmp	DWORD PTR $LN30@IAudioHRES[eax*4]
$LN22@IAudioHRES:

; 126  :     {
; 127  :     case AUDCLNT_E_SERVICE_NOT_RUNNING:
; 128  :         return TEXT("AUDCLNT_E_SERVICE_NOT_RUNNING");

	mov	eax, OFFSET $SG4294814444
	jmp	$LN25@IAudioHRES
$LN21@IAudioHRES:

; 129  :     case AUDCLNT_E_ALREADY_INITIALIZED:
; 130  :         return TEXT("AUDCLNT_E_ALREADY_INITIALIZED");

	mov	eax, OFFSET $SG4294814443
	jmp	$LN25@IAudioHRES
$LN20@IAudioHRES:

; 131  :     case AUDCLNT_E_WRONG_ENDPOINT_TYPE:
; 132  :         return TEXT("AUDCLNT_E_WRONG_ENDPOINT_TYPE");

	mov	eax, OFFSET $SG4294814442
	jmp	$LN25@IAudioHRES
$LN19@IAudioHRES:

; 133  :     case AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED:
; 134  :         return TEXT("AUDCLNT_E_BUFFER_SIZE_NOT_ALIGNED");

	mov	eax, OFFSET $SG4294814441
	jmp	$LN25@IAudioHRES
$LN18@IAudioHRES:

; 135  :     case AUDCLNT_E_BUFFER_SIZE_ERROR:
; 136  :         return TEXT("AUDCLNT_E_BUFFER_SIZE_ERROR");

	mov	eax, OFFSET $SG4294814440
	jmp	$LN25@IAudioHRES
$LN17@IAudioHRES:

; 137  :     case AUDCLNT_E_CPUUSAGE_EXCEEDED:
; 138  :         return TEXT("AUDCLNT_E_CPUUSAGE_EXCEEDED");

	mov	eax, OFFSET $SG4294814439
	jmp	$LN25@IAudioHRES
$LN16@IAudioHRES:

; 139  :     case AUDCLNT_E_DEVICE_INVALIDATED:
; 140  :         return TEXT("AUDCLNT_E_DEVICE_INVALIDATED");

	mov	eax, OFFSET $SG4294814438
	jmp	$LN25@IAudioHRES
$LN15@IAudioHRES:

; 141  :     case AUDCLNT_E_DEVICE_IN_USE:
; 142  :         return TEXT("AUDCLNT_E_DEVICE_IN_USE");

	mov	eax, OFFSET $SG4294814437
	jmp	$LN25@IAudioHRES
$LN14@IAudioHRES:

; 143  :     case AUDCLNT_E_ENDPOINT_CREATE_FAILED:
; 144  :         return TEXT("AUDCLNT_E_ENDPOINT_CREATE_FAILED");

	mov	eax, OFFSET $SG4294814436
	jmp	$LN25@IAudioHRES
$LN13@IAudioHRES:

; 145  :     case AUDCLNT_E_INVALID_DEVICE_PERIOD:
; 146  :         return TEXT("AUDCLNT_E_INVALID_DEVICE_PERIOD");

	mov	eax, OFFSET $SG4294814435
	jmp	SHORT $LN25@IAudioHRES
$LN12@IAudioHRES:

; 147  :     case AUDCLNT_E_UNSUPPORTED_FORMAT:
; 148  :         return TEXT("AUDCLNT_E_UNSUPPORTED_FORMAT");

	mov	eax, OFFSET $SG4294814434
	jmp	SHORT $LN25@IAudioHRES
$LN11@IAudioHRES:

; 149  :     case AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED:
; 150  :         return TEXT("AUDCLNT_E_EXCLUSIVE_MODE_NOT_ALLOWED");

	mov	eax, OFFSET $SG4294814433
	jmp	SHORT $LN25@IAudioHRES
$LN10@IAudioHRES:

; 151  :     case AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL:
; 152  :         return TEXT("AUDCLNT_E_BUFDURATION_PERIOD_NOT_EQUAL");

	mov	eax, OFFSET $SG4294814432
	jmp	SHORT $LN25@IAudioHRES
$LN9@IAudioHRES:

; 153  :     case AUDCLNT_E_NOT_INITIALIZED:
; 154  :         return TEXT("AUDCLNT_E_NOT_INITIALIZED");

	mov	eax, OFFSET $SG4294814431
	jmp	SHORT $LN25@IAudioHRES
$LN8@IAudioHRES:

; 155  :     case AUDCLNT_E_NOT_STOPPED:
; 156  :         return TEXT("AUDCLNT_E_NOT_STOPPED");

	mov	eax, OFFSET $SG4294814430
	jmp	SHORT $LN25@IAudioHRES
$LN7@IAudioHRES:

; 157  :     case AUDCLNT_E_EVENTHANDLE_NOT_SET:
; 158  :         return TEXT("AUDCLNT_E_EVENTHANDLE_NOT_SET");

	mov	eax, OFFSET $SG4294814429
	jmp	SHORT $LN25@IAudioHRES
$LN6@IAudioHRES:

; 159  :     case AUDCLNT_E_BUFFER_OPERATION_PENDING:
; 160  :         return TEXT("AUDCLNT_E_BUFFER_OPERATION_PENDING");

	mov	eax, OFFSET $SG4294814428
	jmp	SHORT $LN25@IAudioHRES
$LN5@IAudioHRES:

; 161  : 
; 162  :     case E_POINTER:
; 163  :         return TEXT("E_POINTER");

	mov	eax, OFFSET $SG4294814427
	jmp	SHORT $LN25@IAudioHRES
$LN4@IAudioHRES:

; 164  :     case E_INVALIDARG:
; 165  :         return TEXT("E_INVALIDARG");

	mov	eax, OFFSET $SG4294814426
	jmp	SHORT $LN25@IAudioHRES
$LN3@IAudioHRES:

; 166  :     case E_OUTOFMEMORY:
; 167  :         return TEXT("E_OUTOFMEMORY");

	mov	eax, OFFSET $SG4294814425
	jmp	SHORT $LN25@IAudioHRES
$LN2@IAudioHRES:

; 168  :     case E_NOINTERFACE:
; 169  :         return TEXT("E_NOINTERFACE");

	mov	eax, OFFSET $SG4294814424
	jmp	SHORT $LN25@IAudioHRES
$LN1@IAudioHRES:

; 170  : 
; 171  :     default:
; 172  :         tsprintf_s(hResultCode, _countof(hResultCode), TEXT("%08lX"), hr);

	mov	ecx, DWORD PTR _hr$[ebp]
	push	ecx
	push	OFFSET $SG4294814423
	push	16					; 00000010H
	mov	edx, DWORD PTR fs:__tls_array
	mov	eax, DWORD PTR [edx]
	add	eax, OFFSET ?hResultCode@?1??IAudioHRESULTToString@@YAPB_WJ@Z@4PA_WA
	push	eax
	call	DWORD PTR __imp_?tsprintf_s@@YAHPA_WIPB_WZZ
	add	esp, 16					; 00000010H

; 173  :         return hResultCode;

	mov	ecx, DWORD PTR fs:__tls_array
	mov	eax, DWORD PTR [ecx]
	add	eax, OFFSET ?hResultCode@?1??IAudioHRESULTToString@@YAPB_WJ@Z@4PA_WA
$LN25@IAudioHRES:

; 174  :     }
; 175  : }

	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN30@IAudioHRES:
	DD	$LN21@IAudioHRES
	DD	$LN20@IAudioHRES
	DD	$LN16@IAudioHRES
	DD	$LN8@IAudioHRES
	DD	$LN12@IAudioHRES
	DD	$LN15@IAudioHRES
	DD	$LN6@IAudioHRES
	DD	$LN11@IAudioHRES
	DD	$LN14@IAudioHRES
	DD	$LN22@IAudioHRES
	DD	$LN10@IAudioHRES
	DD	$LN7@IAudioHRES
	DD	$LN18@IAudioHRES
	DD	$LN17@IAudioHRES
	DD	$LN19@IAudioHRES
	DD	$LN13@IAudioHRES
	DD	$LN1@IAudioHRES
$LN29@IAudioHRES:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	4
	DB	16					; 00000010H
	DB	5
	DB	6
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	7
	DB	8
	DB	9
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	10					; 0000000aH
	DB	11					; 0000000bH
	DB	16					; 00000010H
	DB	12					; 0000000cH
	DB	13					; 0000000dH
	DB	16					; 00000010H
	DB	14					; 0000000eH
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	16					; 00000010H
	DB	15					; 0000000fH
?IAudioHRESULTToString@@YAPB_WJ@Z ENDP			; IAudioHRESULTToString
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?Reinitialize@MMDeviceAudioSource@@AAE_NXZ
_TEXT	SEGMENT
_varName$1 = -152					; size = 16
$T2 = -136						; size = 8
_bMicSyncFixHack$3 = -128				; size = 4
_inputBitsPerSample$ = -124				; size = 4
_inputBlockSize$ = -120					; size = 4
_flags$ = -116						; size = 4
_inputChannels$ = -112					; size = 4
_wstrName$4 = -108					; size = 4
tv85 = -104						; size = 4
tv73 = -100						; size = 4
tv141 = -96						; size = 4
tv245 = -92						; size = 4
_inputSamplesPerSec$ = -88				; size = 4
tv272 = -84						; size = 4
_inputChannelMask$ = -80				; size = 4
tv137 = -76						; size = 4
tv345 = -72						; size = 4
_globalAdjust$5 = -68					; size = 4
_wfext$ = -64						; size = 4
_store$ = -60						; size = 4
_bFloat$ = -53						; size = 1
_pwfx$ = -52						; size = 4
_useInputDevice$ = -45					; size = 1
_err$ = -44						; size = 4
_this$ = -40						; size = 4
_IID_IAudioCaptureClient$ = -36				; size = 16
_IID_IAudioClient$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
?Reinitialize@MMDeviceAudioSource@@AAE_NXZ PROC		; MMDeviceAudioSource::Reinitialize, COMDAT
; _this$ = ecx

; 180  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 181  :     const IID IID_IAudioClient           = __uuidof(IAudioClient);

	mov	eax, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
	mov	DWORD PTR _IID_IAudioClient$[ebp], eax
	mov	ecx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+4
	mov	DWORD PTR _IID_IAudioClient$[ebp+4], ecx
	mov	edx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+8
	mov	DWORD PTR _IID_IAudioClient$[ebp+8], edx
	mov	eax, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+12
	mov	DWORD PTR _IID_IAudioClient$[ebp+12], eax

; 182  :     const IID IID_IAudioCaptureClient    = __uuidof(IAudioCaptureClient);

	mov	ecx, DWORD PTR __GUID_c8adbd64_e71e_48a0_a4de_185c395cd317
	mov	DWORD PTR _IID_IAudioCaptureClient$[ebp], ecx
	mov	edx, DWORD PTR __GUID_c8adbd64_e71e_48a0_a4de_185c395cd317+4
	mov	DWORD PTR _IID_IAudioCaptureClient$[ebp+4], edx
	mov	eax, DWORD PTR __GUID_c8adbd64_e71e_48a0_a4de_185c395cd317+8
	mov	DWORD PTR _IID_IAudioCaptureClient$[ebp+8], eax
	mov	ecx, DWORD PTR __GUID_c8adbd64_e71e_48a0_a4de_185c395cd317+12
	mov	DWORD PTR _IID_IAudioCaptureClient$[ebp+12], ecx

; 183  :     HRESULT err;
; 184  : 
; 185  :     bool useInputDevice = bIsMic || AppConfig->GetInt(L"Audio", L"InputDevicesForDesktopSound", false) != 0;

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+148]
	test	eax, eax
	jne	SHORT $LN33@Reinitiali
	push	0
	push	OFFSET $SG4294814422
	push	OFFSET $SG4294814421
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	jne	SHORT $LN33@Reinitiali
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN34@Reinitiali
$LN33@Reinitiali:
	mov	DWORD PTR tv73[ebp], 1
$LN34@Reinitiali:
	mov	cl, BYTE PTR tv73[ebp]
	mov	BYTE PTR _useInputDevice$[ebp], cl

; 186  : 
; 187  :     if (bIsMic) {

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+148]
	test	eax, eax
	je	SHORT $LN30@Reinitiali

; 188  :         BOOL bMicSyncFixHack = GlobalConfig->GetInt(TEXT("Audio"), TEXT("UseMicSyncFixHack"));

	push	0
	push	OFFSET $SG4294814420
	push	OFFSET $SG4294814419
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _bMicSyncFixHack$3[ebp], eax

; 189  :         angerThreshold = bMicSyncFixHack ? 40 : 1000;

	cmp	DWORD PTR _bMicSyncFixHack$3[ebp], 0
	je	SHORT $LN35@Reinitiali
	mov	DWORD PTR tv85[ebp], 40			; 00000028H
	jmp	SHORT $LN36@Reinitiali
$LN35@Reinitiali:
	mov	DWORD PTR tv85[ebp], 1000		; 000003e8H
$LN36@Reinitiali:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR [ecx+240], edx
$LN30@Reinitiali:

; 190  :     }
; 191  : 
; 192  :     if (scmpi(deviceId, TEXT("Default")) == 0)

	push	OFFSET $SG4294814418
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN29@Reinitiali

; 193  :         err = mmEnumerator->GetDefaultAudioEndpoint(useInputDevice ? eCapture : eRender, useInputDevice ? eCommunications : eConsole, &mmDevice);

	movzx	eax, BYTE PTR _useInputDevice$[ebp]
	test	eax, eax
	je	SHORT $LN37@Reinitiali
	mov	DWORD PTR tv137[ebp], 2
	jmp	SHORT $LN38@Reinitiali
$LN37@Reinitiali:
	mov	DWORD PTR tv137[ebp], 0
$LN38@Reinitiali:
	movzx	ecx, BYTE PTR _useInputDevice$[ebp]
	test	ecx, ecx
	je	SHORT $LN39@Reinitiali
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN40@Reinitiali
$LN39@Reinitiali:
	mov	DWORD PTR tv141[ebp], 0
$LN40@Reinitiali:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	mov	eax, DWORD PTR tv137[ebp]
	push	eax
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+128]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 194  :     else

	jmp	SHORT $LN28@Reinitiali
$LN29@Reinitiali:

; 195  :         err = mmEnumerator->GetDevice(deviceId, &mmDevice);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 132				; 00000084H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+128]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+128]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
$LN28@Reinitiali:

; 196  : 
; 197  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN27@Reinitiali

; 198  :     {
; 199  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not create IMMDevice = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN26@Reinitiali
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	push	OFFSET $SG4294814417
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN26@Reinitiali:

; 200  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN27@Reinitiali:

; 201  :     }
; 202  : 
; 203  :     err = mmDevice->Activate(IID_IAudioClient, CLSCTX_ALL, NULL, (void**)&mmClient);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 136				; 00000088H
	push	edx
	push	0
	push	23					; 00000017H
	lea	eax, DWORD PTR _IID_IAudioClient$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 204  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN25@Reinitiali

; 205  :     {
; 206  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not create IAudioClient = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+150]
	test	edx, edx
	jne	SHORT $LN24@Reinitiali
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+148]
	push	edx
	push	OFFSET $SG4294814416
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN24@Reinitiali:

; 207  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN25@Reinitiali:

; 208  :     }
; 209  : 
; 210  :     //-----------------------------------------------------------------
; 211  :     // get name
; 212  : 
; 213  :     IPropertyStore *store;
; 214  :     if(SUCCEEDED(mmDevice->OpenPropertyStore(STGM_READ, &store)))

	lea	eax, DWORD PTR _store$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	test	eax, eax
	jl	SHORT $LN23@Reinitiali

; 215  :     {
; 216  :         PROPVARIANT varName;
; 217  : 
; 218  :         PropVariantInit(&varName);

	lea	ecx, DWORD PTR _varName$1[ebp]
	push	ecx
	call	_PropVariantInit
	add	esp, 4

; 219  :         if(SUCCEEDED(store->GetValue(PKEY_Device_FriendlyName, &varName)))

	lea	edx, DWORD PTR _varName$1[ebp]
	push	edx
	push	OFFSET _PKEY_Device_FriendlyName
	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+20]
	call	eax
	test	eax, eax
	jl	SHORT $LN22@Reinitiali

; 220  :         {
; 221  :             CWSTR wstrName = varName.pwszVal;

	mov	ecx, DWORD PTR _varName$1[ebp+8]
	mov	DWORD PTR _wstrName$4[ebp], ecx

; 222  :             strDeviceName = wstrName;

	mov	edx, DWORD PTR _wstrName$4[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
$LN22@Reinitiali:

; 223  :         }
; 224  : 
; 225  :         store->Release();

	mov	eax, DWORD PTR _store$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _store$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	call	eax
$LN23@Reinitiali:

; 226  :     }
; 227  : 
; 228  :     if(bIsMic)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+148]
	test	edx, edx
	je	$LN21@Reinitiali

; 229  :     {
; 230  :         if (!deviceLost) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN20@Reinitiali

; 231  :             Log(TEXT("------------------------------------------"));

	push	OFFSET $SG4294814415
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 232  :             Log(TEXT("Using auxilary audio input: %s"), GetDeviceName());

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	push	eax
	push	OFFSET $SG4294814414
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8
$LN20@Reinitiali:

; 233  :         }
; 234  : 
; 235  :         bUseQPC = GlobalConfig->GetInt(TEXT("Audio"), TEXT("UseMicQPC")) != 0;

	push	0
	push	OFFSET $SG4294814413
	push	OFFSET $SG4294814412
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN41@Reinitiali
	mov	DWORD PTR tv245[ebp], 1
	jmp	SHORT $LN42@Reinitiali
$LN41@Reinitiali:
	mov	DWORD PTR tv245[ebp], 0
$LN42@Reinitiali:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv245[ebp]
	mov	BYTE PTR [eax+244], cl

; 236  :         if (bUseQPC)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+244]
	test	eax, eax
	je	SHORT $LN19@Reinitiali

; 237  :             Log(TEXT("Using Mic QPC timestamps"));

	push	OFFSET $SG4294814411
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4
$LN19@Reinitiali:

; 238  :     }
; 239  :     else

	jmp	$LN18@Reinitiali
$LN21@Reinitiali:

; 240  :     {
; 241  :         if (!deviceLost) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+150]
	test	edx, edx
	jne	SHORT $LN17@Reinitiali

; 242  :             Log(TEXT("------------------------------------------"));

	push	OFFSET $SG4294814410
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 243  :             Log(TEXT("Using desktop audio input: %s"), GetDeviceName());

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	push	eax
	push	OFFSET $SG4294814409
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8
$LN17@Reinitiali:

; 244  :         }
; 245  : 
; 246  :         bUseVideoTime = AppConfig->GetInt(TEXT("Audio"), TEXT("SyncToVideoTime")) != 0;

	push	0
	push	OFFSET $SG4294814408
	push	OFFSET $SG4294814407
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN43@Reinitiali
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN44@Reinitiali
$LN43@Reinitiali:
	mov	DWORD PTR tv272[ebp], 0
$LN44@Reinitiali:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv272[ebp]
	mov	BYTE PTR [ecx+180], dl

; 247  : 
; 248  :         int globalAdjust = GlobalConfig->GetInt(TEXT("Audio"), TEXT("GlobalAudioTimeAdjust"));

	push	0
	push	OFFSET $SG4294814406
	push	OFFSET $SG4294814405
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _globalAdjust$5[ebp], eax

; 249  :         Log(L"Global Audio time adjust: %d", globalAdjust);

	mov	eax, DWORD PTR _globalAdjust$5[ebp]
	push	eax
	push	OFFSET $SG4294814404
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 250  :         SetTimeOffset(globalAdjust);

	mov	ecx, DWORD PTR _globalAdjust$5[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetTimeOffset@AudioSource@@QAEXH@Z
$LN18@Reinitiali:

; 251  :     }
; 252  : 
; 253  :     //-----------------------------------------------------------------
; 254  :     // get format
; 255  : 
; 256  :     WAVEFORMATEX *pwfx;
; 257  :     err = mmClient->GetMixFormat(&pwfx);

	lea	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	mov	DWORD PTR _err$[ebp], eax

; 258  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN16@Reinitiali

; 259  :     {
; 260  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not get mix format from audio client = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN15@Reinitiali
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	push	OFFSET $SG4294814403
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN15@Reinitiali:

; 261  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN16@Reinitiali:

; 262  :     }
; 263  : 
; 264  :     bool  bFloat;
; 265  :     UINT  inputChannels;
; 266  :     UINT  inputSamplesPerSec;
; 267  :     UINT  inputBitsPerSample;
; 268  :     UINT  inputBlockSize;
; 269  :     DWORD inputChannelMask = 0;

	mov	DWORD PTR _inputChannelMask$[ebp], 0

; 270  :     WAVEFORMATEXTENSIBLE *wfext = NULL;

	mov	DWORD PTR _wfext$[ebp], 0

; 271  : 
; 272  :     //the internal audio engine should always use floats (or so I read), but I suppose just to be safe better check
; 273  :     if(pwfx->wFormatTag == WAVE_FORMAT_EXTENSIBLE)

	mov	edx, DWORD PTR _pwfx$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 65534				; 0000fffeH
	jne	SHORT $LN14@Reinitiali

; 274  :     {
; 275  :         wfext = (WAVEFORMATEXTENSIBLE*)pwfx;

	mov	ecx, DWORD PTR _pwfx$[ebp]
	mov	DWORD PTR _wfext$[ebp], ecx

; 276  :         inputChannelMask = wfext->dwChannelMask;

	mov	edx, DWORD PTR _wfext$[ebp]
	mov	eax, DWORD PTR [edx+20]
	mov	DWORD PTR _inputChannelMask$[ebp], eax

; 277  : 
; 278  :         if(wfext->SubFormat != KSDATAFORMAT_SUBTYPE_IEEE_FLOAT)

	push	OFFSET __GUID_00000003_0000_0010_8000_00aa00389b71
	mov	ecx, DWORD PTR _wfext$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	call	_!=
	add	esp, 8
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@Reinitiali

; 279  :         {
; 280  :             if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Unsupported wave format"), (BOOL)bIsMic);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN12@Reinitiali
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+148]
	push	eax
	push	OFFSET $SG4294814402
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN12@Reinitiali:

; 281  :             CoTaskMemFree(pwfx);

	mov	ecx, DWORD PTR _pwfx$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4

; 282  :             return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN13@Reinitiali:

; 283  :         }
; 284  :     }

	jmp	SHORT $LN11@Reinitiali
$LN14@Reinitiali:

; 285  :     else if(pwfx->wFormatTag != WAVE_FORMAT_IEEE_FLOAT)

	mov	edx, DWORD PTR _pwfx$[ebp]
	movzx	eax, WORD PTR [edx]
	cmp	eax, 3
	je	SHORT $LN11@Reinitiali

; 286  :     {
; 287  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Unsupported wave format"), (BOOL)bIsMic);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+150]
	test	edx, edx
	jne	SHORT $LN9@Reinitiali
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	push	OFFSET $SG4294814401
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN9@Reinitiali:

; 288  :         CoTaskMemFree(pwfx);

	mov	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4

; 289  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN11@Reinitiali:

; 290  :     }
; 291  : 
; 292  :     bFloat                = true;

	mov	BYTE PTR _bFloat$[ebp], 1

; 293  :     inputChannels         = pwfx->nChannels;

	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	DWORD PTR _inputChannels$[ebp], ecx

; 294  :     inputBitsPerSample    = 32;

	mov	DWORD PTR _inputBitsPerSample$[ebp], 32	; 00000020H

; 295  :     inputBlockSize        = pwfx->nBlockAlign;

	mov	edx, DWORD PTR _pwfx$[ebp]
	movzx	eax, WORD PTR [edx+12]
	mov	DWORD PTR _inputBlockSize$[ebp], eax

; 296  :     inputSamplesPerSec    = pwfx->nSamplesPerSec;

	mov	ecx, DWORD PTR _pwfx$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _inputSamplesPerSec$[ebp], edx

; 297  :     sampleWindowSize      = (inputSamplesPerSec/100);

	mov	eax, DWORD PTR _inputSamplesPerSec$[ebp]
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+200], eax

; 298  : 
; 299  :     DWORD flags = useInputDevice ? 0 : AUDCLNT_STREAMFLAGS_LOOPBACK;

	movzx	eax, BYTE PTR _useInputDevice$[ebp]
	test	eax, eax
	je	SHORT $LN45@Reinitiali
	mov	DWORD PTR tv345[ebp], 0
	jmp	SHORT $LN46@Reinitiali
$LN45@Reinitiali:
	mov	DWORD PTR tv345[ebp], 131072		; 00020000H
$LN46@Reinitiali:
	mov	ecx, DWORD PTR tv345[ebp]
	mov	DWORD PTR _flags$[ebp], ecx

; 300  : 
; 301  :     err = mmClient->Initialize(AUDCLNT_SHAREMODE_SHARED, flags, ConvertMSTo100NanoSec(5000), 0, pwfx, NULL);

	push	0
	mov	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	push	0
	push	0
	push	5000					; 00001388H
	call	?ConvertMSTo100NanoSec@@YAII@Z		; ConvertMSTo100NanoSec
	add	esp, 4
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _flags$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	mov	DWORD PTR _err$[ebp], eax

; 302  :     //err = AUDCLNT_E_UNSUPPORTED_FORMAT;
; 303  : 
; 304  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	$LN8@Reinitiali

; 305  :     {
; 306  :         if (!deviceLost)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	$LN7@Reinitiali

; 307  :         {
; 308  :             //ugly hack to show razer kraken users some kind of meaningful message rather than a cryptic hresult
; 309  :             if (err == 0x88890008 && sstr(GetDeviceName(), TEXT("Razer Kraken")))

	cmp	DWORD PTR _err$[ebp], -2004287480	; 88890008H
	jne	SHORT $LN6@Reinitiali
	push	OFFSET $SG4294814400
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	push	eax
	call	DWORD PTR __imp_?sstr@@YGPA_WPB_W0@Z
	test	eax, eax
	je	SHORT $LN6@Reinitiali

; 310  :                 OBSMessageBox(hwndMain, FormattedString(TEXT("Unable to initialize device %s\r\n\r\nThe Kraken Launcher is incompatible with OBS. Please disable it (run msconfig and disable it from startup) or use the 64 bit version of OBS to work around this issue."), GetDeviceName()).Array(), NULL, MB_ICONEXCLAMATION);

	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	push	eax
	push	OFFSET $SG4294814399
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?FormattedString@@YA?AVString@@PB_WZZ
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN6@Reinitiali:

; 311  :             AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not initialize audio client, result = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+148]
	push	edx
	push	OFFSET $SG4294814398
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN7@Reinitiali:

; 312  :         }
; 313  :         CoTaskMemFree(pwfx);

	mov	eax, DWORD PTR _pwfx$[ebp]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4

; 314  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN8@Reinitiali:

; 315  :     }
; 316  : 
; 317  :     //-----------------------------------------------------------------
; 318  :     // acquire services
; 319  : 
; 320  :     err = mmClient->GetService(IID_IAudioCaptureClient, (void**)&mmCapture);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 140				; 0000008cH
	push	ecx
	lea	edx, DWORD PTR _IID_IAudioCaptureClient$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+56]
	call	edx
	mov	DWORD PTR _err$[ebp], eax

; 321  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN5@Reinitiali

; 322  :     {
; 323  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not get audio capture client, result = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	jne	SHORT $LN4@Reinitiali
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	push	OFFSET $SG4294814397
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN4@Reinitiali:

; 324  :         CoTaskMemFree(pwfx);

	mov	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	call	DWORD PTR __imp__CoTaskMemFree@4

; 325  :         return false;

	xor	al, al
	jmp	$LN31@Reinitiali
$LN5@Reinitiali:

; 326  :     }
; 327  : 
; 328  :     err = mmClient->GetService(__uuidof(IAudioClock), (void**)&mmClock);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	push	OFFSET __GUID_cd63314f_3fba_4a1b_812c_ef96358728e7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+56]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 329  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@Reinitiali

; 330  :     {
; 331  :         if (!deviceLost) AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not get audio capture clock, result = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+150]
	test	edx, edx
	jne	SHORT $LN2@Reinitiali
	mov	eax, DWORD PTR _err$[ebp]
	push	eax
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+148]
	push	edx
	push	OFFSET $SG4294814396
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN2@Reinitiali:

; 332  :         CoTaskMemFree(pwfx);

	mov	eax, DWORD PTR _pwfx$[ebp]
	push	eax
	call	DWORD PTR __imp__CoTaskMemFree@4

; 333  :         return false;

	xor	al, al
	jmp	SHORT $LN31@Reinitiali
$LN3@Reinitiali:

; 334  :     }
; 335  : 
; 336  :     CoTaskMemFree(pwfx);

	mov	ecx, DWORD PTR _pwfx$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoTaskMemFree@4

; 337  : 
; 338  :     if (!useInputDevice && !bIsMic)

	movzx	edx, BYTE PTR _useInputDevice$[ebp]
	test	edx, edx
	jne	SHORT $LN1@Reinitiali
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	test	ecx, ecx
	jne	SHORT $LN1@Reinitiali

; 339  :     {
; 340  :         StopBlankSoundPlayback();

	call	?StopBlankSoundPlayback@@YAXXZ		; StopBlankSoundPlayback

; 341  :         StartBlankSoundPlayback(deviceId);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	?StartBlankSoundPlayback@@YAXPB_W@Z	; StartBlankSoundPlayback
	add	esp, 4
$LN1@Reinitiali:

; 342  :     }
; 343  : 
; 344  :     //-----------------------------------------------------------------
; 345  : 
; 346  :     InitAudioData(bFloat, inputChannels, inputSamplesPerSec, inputBitsPerSample, inputBlockSize, inputChannelMask);

	mov	edx, DWORD PTR _inputChannelMask$[ebp]
	push	edx
	mov	eax, DWORD PTR _inputBlockSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inputBitsPerSample$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inputSamplesPerSec$[ebp]
	push	edx
	mov	eax, DWORD PTR _inputChannels$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _bFloat$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?InitAudioData@AudioSource@@IAEX_NIIIIK@Z

; 347  : 
; 348  :     deviceLost = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+150], 0

; 349  : 
; 350  :     return true;

	mov	al, 1
$LN31@Reinitiali:

; 351  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Reinitialize@MMDeviceAudioSource@@AAE_NXZ ENDP		; MMDeviceAudioSource::Reinitialize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?Initialize@MMDeviceAudioSource@@QAE_N_NPB_W@Z
_TEXT	SEGMENT
_err$ = -44						; size = 4
_this$ = -40						; size = 4
_CLSID_MMDeviceEnumerator$ = -36			; size = 16
_IID_IMMDeviceEnumerator$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_bMic$ = 8						; size = 1
_lpID$ = 12						; size = 4
?Initialize@MMDeviceAudioSource@@QAE_N_NPB_W@Z PROC	; MMDeviceAudioSource::Initialize, COMDAT
; _this$ = ecx

; 354  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 355  :     const IID IID_IMMDeviceEnumerator    = __uuidof(IMMDeviceEnumerator);

	mov	eax, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp], eax
	mov	ecx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+4
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+4], ecx
	mov	edx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+8
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+8], edx
	mov	eax, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+12
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+12], eax

; 356  :     const CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);

	mov	ecx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp], ecx
	mov	edx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+4
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+4], edx
	mov	eax, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+8
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+8], eax
	mov	ecx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+12
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+12], ecx

; 357  : 
; 358  :     bIsMic = bMic;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bMic$[ebp]
	mov	BYTE PTR [edx+148], al

; 359  :     deviceId = lpID;

	mov	ecx, DWORD PTR _lpID$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 164				; 000000a4H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 360  : 
; 361  :     HRESULT err = CoCreateInstance(CLSID_MMDeviceEnumerator, NULL, CLSCTX_ALL, IID_IMMDeviceEnumerator, (void**)&mmEnumerator);

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 128				; 00000080H
	push	edx
	lea	eax, DWORD PTR _IID_IMMDeviceEnumerator$[ebp]
	push	eax
	push	23					; 00000017H
	push	0
	lea	ecx, DWORD PTR _CLSID_MMDeviceEnumerator$[ebp]
	push	ecx
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _err$[ebp], eax

; 362  :     if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN1@Initialize

; 363  :     {
; 364  :         AppWarning(TEXT("MMDeviceAudioSource::Initialize(%d): Could not create IMMDeviceEnumerator = %s"), (BOOL)bIsMic, IAudioHRESULTToString(err));

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	push	ecx
	push	OFFSET $SG4294814395
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 365  :         return false;

	xor	al, al
	jmp	SHORT $LN2@Initialize
$LN1@Initialize:

; 366  :     }
; 367  : 
; 368  :     return Reinitialize();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reinitialize@MMDeviceAudioSource@@AAE_NXZ ; MMDeviceAudioSource::Reinitialize
$LN2@Initialize:

; 369  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?Initialize@MMDeviceAudioSource@@QAE_N_NPB_W@Z ENDP	; MMDeviceAudioSource::Initialize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?StartCapture@MMDeviceAudioSource@@UAEXXZ
_TEXT	SEGMENT
_freq$1 = -12						; size = 8
_this$ = -4						; size = 4
?StartCapture@MMDeviceAudioSource@@UAEXXZ PROC		; MMDeviceAudioSource::StartCapture, COMDAT
; _this$ = ecx

; 372  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 373  :     if(mmClient) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN2@StartCaptu

; 374  :         mmClient->Start();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+40]
	call	eax

; 375  : 
; 376  :         UINT64 freq;
; 377  :         mmClock->GetFrequency(&freq);

	lea	ecx, DWORD PTR _freq$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
$LN2@StartCaptu:

; 378  : 
; 379  :         //Log(TEXT("MMDeviceAudioSource: Frequency for device '%s' is %llu, samples per sec is %u"), GetDeviceName(), freq, this->GetSamplesPerSec());
; 380  :     }
; 381  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartCapture@MMDeviceAudioSource@@UAEXXZ ENDP		; MMDeviceAudioSource::StartCapture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?StopCapture@MMDeviceAudioSource@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?StopCapture@MMDeviceAudioSource@@UAEXXZ PROC		; MMDeviceAudioSource::StopCapture, COMDAT
; _this$ = ecx

; 384  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 385  :     if(mmClient)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+136], 0
	je	SHORT $LN2@StopCaptur

; 386  :         mmClient->Stop();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN2@StopCaptur:

; 387  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StopCapture@MMDeviceAudioSource@@UAEXXZ ENDP		; MMDeviceAudioSource::StopCapture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?GetTimestamp@MMDeviceAudioSource@@AAE_K_K@Z
_TEXT	SEGMENT
tv260 = -72						; size = 8
tv248 = -64						; size = 8
tv177 = -56						; size = 8
_curTime$1 = -48					; size = 8
tv88 = -40						; size = 8
tv72 = -32						; size = 8
_newVideoTime$2 = -24					; size = 8
_newTimestamp$ = -16					; size = 8
tv301 = -8						; size = 4
_this$ = -4						; size = 4
_qpcTimestamp$ = 8					; size = 8
?GetTimestamp@MMDeviceAudioSource@@AAE_K_K@Z PROC	; MMDeviceAudioSource::GetTimestamp, COMDAT
; _this$ = ecx

; 390  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi
	push	edi
	mov	DWORD PTR _this$[ebp], ecx

; 391  :     QWORD newTimestamp;
; 392  : 
; 393  :     if(bIsMic)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+148]
	test	ecx, ecx
	je	SHORT $LN10@GetTimesta

; 394  :     {
; 395  :         newTimestamp = (bUseQPC) ? qpcTimestamp : App->GetAudioTime();

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+244]
	test	eax, eax
	je	SHORT $LN13@GetTimesta
	mov	ecx, DWORD PTR _qpcTimestamp$[ebp]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _qpcTimestamp$[ebp+4]
	mov	DWORD PTR tv72[ebp+4], edx
	jmp	SHORT $LN14@GetTimesta
$LN13@GetTimesta:
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetAudioTime@OBS@@QBE_KXZ		; OBS::GetAudioTime
	mov	DWORD PTR tv72[ebp], eax
	mov	DWORD PTR tv72[ebp+4], edx
$LN14@GetTimesta:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR _newTimestamp$[ebp], eax
	mov	ecx, DWORD PTR tv72[ebp+4]
	mov	DWORD PTR _newTimestamp$[ebp+4], ecx

; 396  :         newTimestamp += GetTimeOffset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetTimeOffset@AudioSource@@QBEHXZ
	cdq
	add	eax, DWORD PTR _newTimestamp$[ebp]
	adc	edx, DWORD PTR _newTimestamp$[ebp+4]
	mov	DWORD PTR _newTimestamp$[ebp], eax
	mov	DWORD PTR _newTimestamp$[ebp+4], edx

; 397  : 
; 398  :         //Log(TEXT("got some mic audio, timestamp: %llu"), newTimestamp);
; 399  : 
; 400  :         return newTimestamp;

	mov	eax, DWORD PTR _newTimestamp$[ebp]
	mov	edx, DWORD PTR _newTimestamp$[ebp+4]
	jmp	$LN11@GetTimesta

; 401  :     }
; 402  :     else

	jmp	$LN11@GetTimesta
$LN10@GetTimesta:

; 403  :     {
; 404  :         //we're doing all these checks because device timestamps are only reliable "sometimes"
; 405  :         if(!bFirstFrameReceived)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+149]
	test	eax, eax
	jne	$LN8@GetTimesta

; 406  :         {
; 407  :             QWORD curTime = GetQPCTimeMS();

	call	DWORD PTR __imp_?GetQPCTimeMS@@YA_KXZ
	mov	DWORD PTR _curTime$1[ebp], eax
	mov	DWORD PTR _curTime$1[ebp+4], edx

; 408  : 
; 409  :             newTimestamp = qpcTimestamp;

	mov	ecx, DWORD PTR _qpcTimestamp$[ebp]
	mov	DWORD PTR _newTimestamp$[ebp], ecx
	mov	edx, DWORD PTR _qpcTimestamp$[ebp+4]
	mov	DWORD PTR _newTimestamp$[ebp+4], edx

; 410  : 
; 411  :             curVideoTime = lastVideoTime = App->GetVideoTime();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoTime@OBS@@QBE_KXZ		; OBS::GetVideoTime
	mov	DWORD PTR tv88[ebp], eax
	mov	DWORD PTR tv88[ebp+4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+184], ecx
	mov	edx, DWORD PTR tv88[ebp+4]
	mov	DWORD PTR [eax+188], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv88[ebp]
	mov	DWORD PTR [eax+192], ecx
	mov	edx, DWORD PTR tv88[ebp+4]
	mov	DWORD PTR [eax+196], edx

; 412  : 
; 413  :             if(bUseVideoTime || newTimestamp < (curTime-App->bufferingTime) || newTimestamp > (curTime+2000))

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	test	ecx, ecx
	jne	SHORT $LN6@GetTimesta
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [edx+944]
	cdq
	mov	ecx, DWORD PTR _curTime$1[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _curTime$1[ebp+4]
	sbb	eax, edx
	mov	DWORD PTR tv248[ebp], ecx
	mov	DWORD PTR tv248[ebp+4], eax
	mov	ecx, DWORD PTR _newTimestamp$[ebp+4]
	cmp	ecx, DWORD PTR tv248[ebp+4]
	jb	SHORT $LN6@GetTimesta
	ja	SHORT $LN17@GetTimesta
	mov	edx, DWORD PTR _newTimestamp$[ebp]
	cmp	edx, DWORD PTR tv248[ebp]
	jb	SHORT $LN6@GetTimesta
$LN17@GetTimesta:
	mov	eax, DWORD PTR _curTime$1[ebp]
	add	eax, 2000				; 000007d0H
	mov	ecx, DWORD PTR _curTime$1[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR tv260[ebp], eax
	mov	DWORD PTR tv260[ebp+4], ecx
	mov	edx, DWORD PTR _newTimestamp$[ebp+4]
	cmp	edx, DWORD PTR tv260[ebp+4]
	jb	$LN7@GetTimesta
	ja	SHORT $LN6@GetTimesta
	mov	eax, DWORD PTR _newTimestamp$[ebp]
	cmp	eax, DWORD PTR tv260[ebp]
	jbe	$LN7@GetTimesta
$LN6@GetTimesta:

; 414  :             {
; 415  :                 if(!bUseVideoTime)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+180]
	test	edx, edx
	jne	SHORT $LN5@GetTimesta

; 416  :                     Log(TEXT("Bad timestamp detected, syncing audio to video time"));

	push	OFFSET $SG4294814394
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 417  :                 else

	jmp	SHORT $LN4@GetTimesta
$LN5@GetTimesta:

; 418  :                     Log(TEXT("Syncing audio to video time (WARNING: you should not be doing this if you are just having webcam desync, that's a separate issue)"));

	push	OFFSET $SG4294814393
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4
$LN4@GetTimesta:

; 419  : 
; 420  :                 SetTimeOffset(GetTimeOffset()-int(lastVideoTime-App->GetSceneTimestamp()));

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetTimeOffset@AudioSource@@QBEHXZ
	mov	esi, eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetSceneTimestamp@OBS@@QAE_KXZ		; OBS::GetSceneTimestamp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edi, DWORD PTR [ecx+184]
	sub	edi, eax
	mov	eax, DWORD PTR [ecx+188]
	sbb	eax, edx
	sub	esi, edi
	push	esi
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetTimeOffset@AudioSource@@QAEXH@Z

; 421  :                 bUseVideoTime = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+180], 1

; 422  : 
; 423  :                 newTimestamp = lastVideoTime+GetTimeOffset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetTimeOffset@AudioSource@@QBEHXZ
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+184]
	adc	edx, DWORD PTR [ecx+188]
	mov	DWORD PTR _newTimestamp$[ebp], eax
	mov	DWORD PTR _newTimestamp$[ebp+4], edx
$LN7@GetTimesta:

; 424  :             }
; 425  : 
; 426  :             bFirstFrameReceived = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+149], 1

; 427  :         }
; 428  :         else

	jmp	$LN3@GetTimesta
$LN8@GetTimesta:

; 429  :         {
; 430  :             QWORD newVideoTime = App->GetVideoTime();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoTime@OBS@@QBE_KXZ		; OBS::GetVideoTime
	mov	DWORD PTR _newVideoTime$2[ebp], eax
	mov	DWORD PTR _newVideoTime$2[ebp+4], edx

; 431  : 
; 432  :             if(newVideoTime != lastVideoTime)

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv301[ebp], eax
	mov	ecx, DWORD PTR tv301[ebp]
	mov	edx, DWORD PTR _newVideoTime$2[ebp]
	cmp	edx, DWORD PTR [ecx+184]
	jne	SHORT $LN19@GetTimesta
	mov	eax, DWORD PTR tv301[ebp]
	mov	ecx, DWORD PTR _newVideoTime$2[ebp+4]
	cmp	ecx, DWORD PTR [eax+188]
	je	SHORT $LN2@GetTimesta
$LN19@GetTimesta:

; 433  :                 curVideoTime = lastVideoTime = newVideoTime;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newVideoTime$2[ebp]
	mov	DWORD PTR [edx+184], eax
	mov	ecx, DWORD PTR _newVideoTime$2[ebp+4]
	mov	DWORD PTR [edx+188], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newVideoTime$2[ebp]
	mov	DWORD PTR [edx+192], eax
	mov	ecx, DWORD PTR _newVideoTime$2[ebp+4]
	mov	DWORD PTR [edx+196], ecx

; 434  :             else

	jmp	SHORT $LN1@GetTimesta
$LN2@GetTimesta:

; 435  :                 curVideoTime += 10;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	add	eax, 10					; 0000000aH
	mov	ecx, DWORD PTR [edx+196]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+192], eax
	mov	DWORD PTR [edx+196], ecx
$LN1@GetTimesta:

; 436  : 
; 437  :             newTimestamp = (bUseVideoTime) ? curVideoTime : qpcTimestamp;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+180]
	test	ecx, ecx
	je	SHORT $LN15@GetTimesta
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+192]
	mov	DWORD PTR tv177[ebp], eax
	mov	ecx, DWORD PTR [edx+196]
	mov	DWORD PTR tv177[ebp+4], ecx
	jmp	SHORT $LN16@GetTimesta
$LN15@GetTimesta:
	mov	edx, DWORD PTR _qpcTimestamp$[ebp]
	mov	DWORD PTR tv177[ebp], edx
	mov	eax, DWORD PTR _qpcTimestamp$[ebp+4]
	mov	DWORD PTR tv177[ebp+4], eax
$LN16@GetTimesta:
	mov	ecx, DWORD PTR tv177[ebp]
	mov	DWORD PTR _newTimestamp$[ebp], ecx
	mov	edx, DWORD PTR tv177[ebp+4]
	mov	DWORD PTR _newTimestamp$[ebp+4], edx

; 438  :             newTimestamp += GetTimeOffset();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetTimeOffset@AudioSource@@QBEHXZ
	cdq
	add	eax, DWORD PTR _newTimestamp$[ebp]
	adc	edx, DWORD PTR _newTimestamp$[ebp+4]
	mov	DWORD PTR _newTimestamp$[ebp], eax
	mov	DWORD PTR _newTimestamp$[ebp+4], edx
$LN3@GetTimesta:

; 439  :         }
; 440  : 
; 441  :         //Log(TEXT("qpc timestamp: %llu, lastUsed: %llu, dif: %llu"), newTimestamp, lastUsedTimestamp, difVal);
; 442  : 
; 443  :         return newTimestamp;

	mov	eax, DWORD PTR _newTimestamp$[ebp]
	mov	edx, DWORD PTR _newTimestamp$[ebp+4]
$LN11@GetTimesta:

; 444  :     }
; 445  : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
?GetTimestamp@MMDeviceAudioSource@@AAE_K_K@Z ENDP	; MMDeviceAudioSource::GetTimestamp
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z
_TEXT	SEGMENT
_devPosition$ = -84					; size = 8
_timeAdjust$1 = -76					; size = 8
_timer$2 = -68						; size = 8
_timeVal$3 = -60					; size = 8
_qpcTimestamp$ = -52					; size = 8
_captureBuffer$ = -44					; size = 4
_dwFlags$ = -40						; size = 4
_numFramesRead$ = -36					; size = 4
_totalFloatsRead$4 = -32				; size = 4
tv359 = -28						; size = 4
tv354 = -24						; size = 4
_captureSize$ = -20					; size = 4
_newInputBufferSize$5 = -16				; size = 4
_hRes$ = -12						; size = 4
_this$ = -8						; size = 4
_bFirstRun$ = -1					; size = 1
_buffer$ = 8						; size = 4
_numFrames$ = 12					; size = 4
_timestamp$ = 16					; size = 4
?GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z PROC ; MMDeviceAudioSource::GetNextBuffer, COMDAT
; _this$ = ecx

; 448  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	mov	DWORD PTR _this$[ebp], ecx

; 449  :     UINT captureSize = 0;

	mov	DWORD PTR _captureSize$[ebp], 0

; 450  :     bool bFirstRun = true;

	mov	BYTE PTR _bFirstRun$[ebp], 1

; 451  :     HRESULT hRes;
; 452  :     UINT64 devPosition, qpcTimestamp;
; 453  :     LPBYTE captureBuffer;
; 454  :     UINT32 numFramesRead;
; 455  :     DWORD dwFlags = 0;

	mov	DWORD PTR _dwFlags$[ebp], 0

; 456  : 
; 457  :     if (deviceLost) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+150]
	test	ecx, ecx
	je	$LN15@GetNextBuf

; 458  :         QWORD timeVal = GetQPCTimeMS();

	call	DWORD PTR __imp_?GetQPCTimeMS@@YA_KXZ
	mov	DWORD PTR _timeVal$3[ebp], eax
	mov	DWORD PTR _timeVal$3[ebp+4], edx

; 459  :         QWORD timer = (timeVal - reinitTimer);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _timeVal$3[ebp]
	sub	eax, DWORD PTR [edx+152]
	mov	ecx, DWORD PTR _timeVal$3[ebp+4]
	sbb	ecx, DWORD PTR [edx+156]
	mov	DWORD PTR _timer$2[ebp], eax
	mov	DWORD PTR _timer$2[ebp+4], ecx

; 460  :         if (timer > 1000) {

	cmp	DWORD PTR _timer$2[ebp+4], 0
	ja	SHORT $LN18@GetNextBuf
	cmp	DWORD PTR _timer$2[ebp], 1000		; 000003e8H
	jbe	SHORT $LN14@GetNextBuf
$LN18@GetNextBuf:

; 461  :             if (Reinitialize()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reinitialize@MMDeviceAudioSource@@AAE_NXZ ; MMDeviceAudioSource::Reinitialize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN13@GetNextBuf

; 462  :                 Log(L"Device '%s' reacquired.", strDeviceName.Array());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294814392
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 463  :                 StartCapture();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
$LN13@GetNextBuf:

; 464  :             }
; 465  :             reinitTimer = timeVal;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _timeVal$3[ebp]
	mov	DWORD PTR [ecx+152], edx
	mov	eax, DWORD PTR _timeVal$3[ebp+4]
	mov	DWORD PTR [ecx+156], eax
$LN14@GetNextBuf:

; 466  :         }
; 467  : 
; 468  :         /*
; 469  :         //the desktop device disappeared, this is bad! fake it by feeding blank samples back
; 470  :         //or everything stops working :(
; 471  : 
; 472  :         //FIXME: reduce the rate at which fake audio is delivered or we overwhelm the resampler.
; 473  :         //how to determine how often we should do this? and does it affect sync if we supply too
; 474  :         //too little / too much audio?
; 475  :         if (!bIsMic && (timeVal - fakeAudioTimer) >= 10)
; 476  :         {
; 477  :             UINT newInputBufferSize = inputBufferSize + sampleWindowSize*GetChannelCount();
; 478  :             if (newInputBufferSize > inputBuffer.Num())
; 479  :                 inputBuffer.SetSize(newInputBufferSize);
; 480  : 
; 481  :             mset(inputBuffer.Array() + inputBufferSize, 0, sampleWindowSize*GetChannelCount()*sizeof(float));
; 482  :             inputBufferSize = newInputBufferSize;
; 483  : 
; 484  :             *timestamp = GetQPCTimeMS();
; 485  :             *numFrames = sampleWindowSize;
; 486  :             *buffer = (void*)inputBuffer.Array();
; 487  : 
; 488  :             fakeAudioTimer = timeVal;
; 489  : 
; 490  :             return true;
; 491  :         }
; 492  :         */
; 493  : 
; 494  :         return false;

	xor	al, al
	jmp	$LN16@GetNextBuf
$LN15@GetNextBuf:

; 495  :     }
; 496  : 
; 497  :     while (true) {

	mov	ecx, 1
	test	ecx, ecx
	je	$LN11@GetNextBuf

; 498  :         if (inputBufferSize >= sampleWindowSize*GetChannelCount()) {

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetChannelCount@AudioSource@@QBEIXZ
	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+200]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+220], eax
	jb	SHORT $LN10@GetNextBuf

; 499  :             if (bFirstRun)

	movzx	edx, BYTE PTR _bFirstRun$[ebp]
	test	edx, edx
	je	SHORT $LN9@GetNextBuf

; 500  :                 lastQPCTimestamp += 10;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+232]
	add	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR [eax+236]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+232], ecx
	mov	DWORD PTR [eax+236], edx
$LN9@GetNextBuf:

; 501  :             firstTimestamp = GetTimestamp(lastQPCTimestamp);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+236]
	push	edx
	mov	eax, DWORD PTR [ecx+232]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetTimestamp@MMDeviceAudioSource@@AAE_K_K@Z ; MMDeviceAudioSource::GetTimestamp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+224], eax
	mov	DWORD PTR [ecx+228], edx

; 502  :             break;

	jmp	$LN11@GetNextBuf
$LN10@GetNextBuf:

; 503  :         }
; 504  : 
; 505  :         //---------------------------------------------------------
; 506  : 
; 507  :         hRes = mmCapture->GetNextPacketSize(&captureSize);

	lea	edx, DWORD PTR _captureSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _hRes$[ebp], eax

; 508  : 
; 509  :         if (FAILED(hRes)) {

	cmp	DWORD PTR _hRes$[ebp], 0
	jge	$LN8@GetNextBuf

; 510  :             if (hRes == AUDCLNT_E_DEVICE_INVALIDATED) {

	cmp	DWORD PTR _hRes$[ebp], -2004287484	; 88890004H
	jne	SHORT $LN7@GetNextBuf

; 511  :                 FreeData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeData@MMDeviceAudioSource@@AAEXXZ	; MMDeviceAudioSource::FreeData

; 512  :                 deviceLost = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+150], 1

; 513  :                 Log(L"Audio device '%s' has been lost, attempting to reinitialize", strDeviceName.Array());

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294814391
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 514  :                 reinitTimer = GetQPCTimeMS();

	call	DWORD PTR __imp_?GetQPCTimeMS@@YA_KXZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+152], eax
	mov	DWORD PTR [ecx+156], edx

; 515  :                 //fakeAudioTimer = GetQPCTimeMS();
; 516  :                 return false;

	xor	al, al
	jmp	$LN16@GetNextBuf
$LN7@GetNextBuf:

; 517  :             }
; 518  : 
; 519  :             RUNONCE AppWarning(TEXT("MMDeviceAudioSource::GetBuffer: GetNextPacketSize failed, result = %s"), IAudioHRESULTToString(hRes));

	movzx	edx, BYTE PTR ?bRunOnce@?BI@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
	test	edx, edx
	jne	SHORT $LN6@GetNextBuf
	mov	BYTE PTR ?bRunOnce@?BI@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA, 1
	movzx	eax, BYTE PTR ?bRunOnce@?BI@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
	test	eax, eax
	je	SHORT $LN6@GetNextBuf
	mov	ecx, DWORD PTR _hRes$[ebp]
	push	ecx
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	push	OFFSET $SG4294814390
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN6@GetNextBuf:

; 520  :             return false;

	xor	al, al
	jmp	$LN16@GetNextBuf
$LN8@GetNextBuf:

; 521  :         }
; 522  : 
; 523  :         if (!captureSize)

	cmp	DWORD PTR _captureSize$[ebp], 0
	jne	SHORT $LN5@GetNextBuf

; 524  :             return false;

	xor	al, al
	jmp	$LN16@GetNextBuf
$LN5@GetNextBuf:

; 525  : 
; 526  :         //---------------------------------------------------------
; 527  : 
; 528  :         hRes = mmCapture->GetBuffer(&captureBuffer, &numFramesRead, &dwFlags, &devPosition, &qpcTimestamp);

	lea	edx, DWORD PTR _qpcTimestamp$[ebp]
	push	edx
	lea	eax, DWORD PTR _devPosition$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwFlags$[ebp]
	push	ecx
	lea	edx, DWORD PTR _numFramesRead$[ebp]
	push	edx
	lea	eax, DWORD PTR _captureBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	mov	DWORD PTR _hRes$[ebp], eax

; 529  : 
; 530  :         if (FAILED(hRes)) {

	cmp	DWORD PTR _hRes$[ebp], 0
	jge	SHORT $LN4@GetNextBuf

; 531  :             RUNONCE AppWarning(TEXT("MMDeviceAudioSource::GetBuffer: GetBuffer failed, result = %s"), IAudioHRESULTToString(hRes));

	movzx	ecx, BYTE PTR ?bRunOnce@?BP@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
	test	ecx, ecx
	jne	SHORT $LN3@GetNextBuf
	mov	BYTE PTR ?bRunOnce@?BP@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA, 1
	movzx	edx, BYTE PTR ?bRunOnce@?BP@??GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z@4_NA
	test	edx, edx
	je	SHORT $LN3@GetNextBuf
	mov	eax, DWORD PTR _hRes$[ebp]
	push	eax
	call	?IAudioHRESULTToString@@YAPB_WJ@Z	; IAudioHRESULTToString
	add	esp, 4
	push	eax
	push	OFFSET $SG4294814389
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN3@GetNextBuf:

; 532  :             return false;

	xor	al, al
	jmp	$LN16@GetNextBuf
$LN4@GetNextBuf:

; 533  :         }
; 534  : 
; 535  :         UINT totalFloatsRead = numFramesRead*GetChannelCount();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetChannelCount@AudioSource@@QBEIXZ
	imul	eax, DWORD PTR _numFramesRead$[ebp]
	mov	DWORD PTR _totalFloatsRead$4[ebp], eax

; 536  : 
; 537  :         if (inputBufferSize) {

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+220], 0
	je	$LN2@GetNextBuf

; 538  :             double timeAdjust = double(inputBufferSize/GetChannelCount());

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetChannelCount@AudioSource@@QBEIXZ
	mov	ecx, eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	xor	edx, edx
	div	ecx
	mov	DWORD PTR tv354[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv354[ebp]
	mov	eax, DWORD PTR tv354[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR _timeAdjust$1[ebp], xmm0

; 539  :             timeAdjust /= (double(GetSamplesPerSec())*0.0000001);

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetSamplesPerSec@AudioSource@@QBEIXZ
	mov	DWORD PTR tv359[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv359[ebp]
	mov	ecx, DWORD PTR tv359[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@3e7ad7f29abcaf48
	movsd	xmm1, QWORD PTR _timeAdjust$1[ebp]
	divsd	xmm1, xmm0
	movsd	QWORD PTR _timeAdjust$1[ebp], xmm1

; 540  : 
; 541  :             qpcTimestamp -= UINT64(timeAdjust);

	movsd	xmm0, QWORD PTR _timeAdjust$1[ebp]
	call	__dtoul3
	mov	ecx, DWORD PTR _qpcTimestamp$[ebp]
	sub	ecx, eax
	mov	eax, DWORD PTR _qpcTimestamp$[ebp+4]
	sbb	eax, edx
	mov	DWORD PTR _qpcTimestamp$[ebp], ecx
	mov	DWORD PTR _qpcTimestamp$[ebp+4], eax
$LN2@GetNextBuf:

; 542  :         }
; 543  : 
; 544  :         qpcTimestamp /= 10000;

	push	0
	push	10000					; 00002710H
	mov	ecx, DWORD PTR _qpcTimestamp$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _qpcTimestamp$[ebp]
	push	edx
	call	__aulldiv
	mov	DWORD PTR _qpcTimestamp$[ebp], eax
	mov	DWORD PTR _qpcTimestamp$[ebp+4], edx

; 545  :         lastQPCTimestamp = qpcTimestamp;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _qpcTimestamp$[ebp]
	mov	DWORD PTR [eax+232], ecx
	mov	edx, DWORD PTR _qpcTimestamp$[ebp+4]
	mov	DWORD PTR [eax+236], edx

; 546  : 
; 547  :         //---------------------------------------------------------
; 548  : 
; 549  :         UINT newInputBufferSize = inputBufferSize + totalFloatsRead;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	add	ecx, DWORD PTR _totalFloatsRead$4[ebp]
	mov	DWORD PTR _newInputBufferSize$5[ebp], ecx

; 550  :         if (newInputBufferSize > inputBuffer.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?Num@?$List@M@@QBEIXZ			; List<float>::Num
	cmp	DWORD PTR _newInputBufferSize$5[ebp], eax
	jbe	SHORT $LN1@GetNextBuf

; 551  :             inputBuffer.SetSize(newInputBufferSize);

	mov	edx, DWORD PTR _newInputBufferSize$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?SetSize@?$List@M@@QAEHI@Z		; List<float>::SetSize
$LN1@GetNextBuf:

; 552  : 
; 553  :         mcpy(inputBuffer.Array()+inputBufferSize, captureBuffer, totalFloatsRead*sizeof(float));

	mov	eax, DWORD PTR _totalFloatsRead$4[ebp]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _captureBuffer$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?Array@?$List@M@@QBEPAMXZ		; List<float>::Array
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+220]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 554  :         inputBufferSize = newInputBufferSize;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newInputBufferSize$5[ebp]
	mov	DWORD PTR [eax+220], ecx

; 555  : 
; 556  :         mmCapture->ReleaseBuffer(numFramesRead);

	mov	edx, DWORD PTR _numFramesRead$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+140]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx

; 557  : 
; 558  :         bFirstRun = false;

	mov	BYTE PTR _bFirstRun$[ebp], 0

; 559  :     }

	jmp	$LN15@GetNextBuf
$LN11@GetNextBuf:

; 560  : 
; 561  :     *numFrames = sampleWindowSize;

	mov	eax, DWORD PTR _numFrames$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+200]
	mov	DWORD PTR [eax], edx

; 562  :     *buffer = (void*)inputBuffer.Array();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?Array@?$List@M@@QBEPAMXZ		; List<float>::Array
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [ecx], eax

; 563  :     *timestamp = firstTimestamp;

	mov	edx, DWORD PTR _timestamp$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+224]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR [eax+228]
	mov	DWORD PTR [edx+4], eax

; 564  : 
; 565  :     /*if (bIsMic) {
; 566  :         static QWORD lastTimestamp = 0;
; 567  :         if (firstTimestamp != lastTimestamp+10)
; 568  :             Log(TEXT("A: %llu, difference: %llu"), firstTimestamp, firstTimestamp-lastTimestamp);
; 569  : 
; 570  :         lastTimestamp = firstTimestamp;
; 571  :     }*/
; 572  : 
; 573  :     return true;

	mov	al, 1
$LN16@GetNextBuf:

; 574  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?GetNextBuffer@MMDeviceAudioSource@@MAE_NPAPAXPAIPA_K@Z ENDP ; MMDeviceAudioSource::GetNextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?ReleaseBuffer@MMDeviceAudioSource@@MAEXXZ
_TEXT	SEGMENT
_sampleSizeFloats$ = -8					; size = 4
_this$ = -4						; size = 4
?ReleaseBuffer@MMDeviceAudioSource@@MAEXXZ PROC		; MMDeviceAudioSource::ReleaseBuffer, COMDAT
; _this$ = ecx

; 577  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 578  :     UINT sampleSizeFloats = sampleWindowSize*GetChannelCount();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?GetChannelCount@AudioSource@@QBEIXZ
	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+200]
	mov	DWORD PTR _sampleSizeFloats$[ebp], eax

; 579  :     if (inputBufferSize > sampleSizeFloats)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	cmp	eax, DWORD PTR _sampleSizeFloats$[ebp]
	jbe	SHORT $LN1@ReleaseBuf

; 580  :         mcpy(inputBuffer.Array(), inputBuffer.Array()+sampleSizeFloats, (inputBufferSize-sampleSizeFloats)*sizeof(float));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	sub	edx, DWORD PTR _sampleSizeFloats$[ebp]
	shl	edx, 2
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?Array@?$List@M@@QBEPAMXZ		; List<float>::Array
	mov	ecx, DWORD PTR _sampleSizeFloats$[ebp]
	lea	edx, DWORD PTR [eax+ecx*4]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 204				; 000000ccH
	call	?Array@?$List@M@@QBEPAMXZ		; List<float>::Array
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReleaseBuf:

; 581  : 
; 582  :     inputBufferSize -= sampleSizeFloats;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	sub	ecx, DWORD PTR _sampleSizeFloats$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+220], ecx

; 583  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseBuffer@MMDeviceAudioSource@@MAEXXZ ENDP		; MMDeviceAudioSource::ReleaseBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\mmdeviceaudiosource.cpp
;	COMDAT ?ResetWASAPIAudioDevice@@YAXPAVAudioSource@@@Z
_TEXT	SEGMENT
_source$ = 8						; size = 4
?ResetWASAPIAudioDevice@@YAXPAVAudioSource@@@Z PROC	; ResetWASAPIAudioDevice, COMDAT

; 586  : {

	push	ebp
	mov	ebp, esp

; 587  :     static_cast<MMDeviceAudioSource*>(source)->Reset();

	mov	ecx, DWORD PTR _source$[ebp]
	call	?Reset@MMDeviceAudioSource@@QAEXXZ	; MMDeviceAudioSource::Reset

; 588  : }

	pop	ebp
	ret	0
?ResetWASAPIAudioDevice@@YAXPAVAudioSource@@@Z ENDP	; ResetWASAPIAudioDevice
_TEXT	ENDS
END
