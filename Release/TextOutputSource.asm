; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\TextOutputSource.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R3Brush@Gdiplus@@8				; Gdiplus::Brush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4Brush@Gdiplus@@6B@				; Gdiplus::Brush::`RTTI Complete Object Locator'
PUBLIC	??_R2Brush@Gdiplus@@8				; Gdiplus::Brush::`RTTI Base Class Array'
PUBLIC	??_7Bitmap@Gdiplus@@6B@				; Gdiplus::Bitmap::`vftable'
PUBLIC	??_R2Bitmap@Gdiplus@@8				; Gdiplus::Bitmap::`RTTI Base Class Array'
PUBLIC	??_R0?AVSolidBrush@Gdiplus@@@8			; Gdiplus::SolidBrush `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@TextOutputSource@@8		; TextOutputSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_7SolidBrush@Gdiplus@@6B@			; Gdiplus::SolidBrush::`vftable'
PUBLIC	??_7TextOutputSource@@6B@			; TextOutputSource::`vftable'
PUBLIC	??_R1A@?0A@EA@Brush@Gdiplus@@8			; Gdiplus::Brush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4Bitmap@Gdiplus@@6B@			; Gdiplus::Bitmap::`RTTI Complete Object Locator'
PUBLIC	??_R4TextOutputSource@@6B@			; TextOutputSource::`RTTI Complete Object Locator'
PUBLIC	??_R3Bitmap@Gdiplus@@8				; Gdiplus::Bitmap::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7Brush@Gdiplus@@6B@				; Gdiplus::Brush::`vftable'
PUBLIC	??_R0?AVBitmap@Gdiplus@@@8			; Gdiplus::Bitmap `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Bitmap@Gdiplus@@8			; Gdiplus::Bitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R4SolidBrush@Gdiplus@@6B@			; Gdiplus::SolidBrush::`RTTI Complete Object Locator'
PUBLIC	??_R3SolidBrush@Gdiplus@@8			; Gdiplus::SolidBrush::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R1A@?0A@EA@SolidBrush@Gdiplus@@8		; Gdiplus::SolidBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3TextOutputSource@@8			; TextOutputSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R0?AVTextOutputSource@@@8			; TextOutputSource `RTTI Type Descriptor'
PUBLIC	??_R0?AVBrush@Gdiplus@@@8			; Gdiplus::Brush `RTTI Type Descriptor'
PUBLIC	??_R2SolidBrush@Gdiplus@@8			; Gdiplus::SolidBrush::`RTTI Base Class Array'
PUBLIC	??_R2TextOutputSource@@8			; TextOutputSource::`RTTI Base Class Array'
PUBLIC	??_C@_1MC@FLMNODJI@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@ ; `string'
PUBLIC	??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_15BNMMKFOH@?$AA?6?$AA?$AN?$AA?$AA@	; `string'
PUBLIC	??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@		; `string'
PUBLIC	??_C@_1GM@LBANKIPA@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@ ; `string'
PUBLIC	??_C@_1IO@LNGIDPGF@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAd?$AAi?$AAp?$AAl@ ; `string'
PUBLIC	??_C@_1GI@IMEHDNAB@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@ ; `string'
PUBLIC	??_C@_1HG@DMEJMMLD@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@ ; `string'
PUBLIC	??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@	; `string'
PUBLIC	??_C@_1CE@HAFKHHGD@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@IBCEPOLC@?$AAt?$AAe?$AAx?$AAt?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@JNDEGBLF@?$AAf?$AAo?$AAn?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_19LNOFOKG@?$AAb?$AAo?$AAl?$AAd?$AA?$AA@	; `string'
PUBLIC	??_C@_1BI@DNMBKHIA@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_19EOACODOG@?$AAw?$AAr?$AAa?$AAp?$AA?$AA@	; `string'
PUBLIC	??_C@_1O@JEIKJABP@?$AAi?$AAt?$AAa?$AAl?$AAi?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@PNICDMNG@?$AAu?$AAn?$AAd?$AAe?$AAr?$AAl?$AAi?$AAn?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@IFAPLEM@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@GHNBFLDK@?$AAu?$AAs?$AAe?$AAT?$AAe?$AAx?$AAt?$AAE?$AAx?$AAt?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@PBGLJJCL@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@NAHGECGB@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JPNOLMK@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_19HMOGJADO@?$AAf?$AAi?$AAl?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_1M@PNKKPJEL@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_19KODKOACD@?$AAm?$AAo?$AAd?$AAe?$AA?$AA@	; `string'
PUBLIC	??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@	; `string'
PUBLIC	??_C@_1BG@BEGLIKF@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@KLLAJFB@?$AAp?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@EHEODNMJ@?$AAu?$AAs?$AAe?$AAO?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@LJPKNPMA@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JFNINKMC@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@EELFPFLI@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@OHOPANAE@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@DHAIDPLE@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@NEPAKLHC@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
EXTRN	__imp_?SetColor@Shader@@QAEXPAXABUVect4@@@Z:PROC
EXTRN	__imp_?GetElement@?$List@VString@@@@QAEAAVString@@I@Z:PROC
EXTRN	__imp_?InsertString@String@@QAEXIPB_W@Z:PROC
EXTRN	__imp_?SetFloat@XElement@@QAEXPB_WM@Z:PROC
EXTRN	__imp__EnumFontFamiliesExW@20:PROC
EXTRN	__imp__GdipCreateFontFromDC@8:PROC
EXTRN	__imp__GdipSetPenLineJoin@8:PROC
EXTRN	__imp__GdipDeleteStringFormat@4:PROC
EXTRN	__imp__GdipCreatePen1@16:PROC
EXTRN	__imp__GdipSetStringFormatTrimming@8:PROC
EXTRN	__imp__GdipCreatePath@8:PROC
EXTRN	__imp__GdipStringFormatGetGenericTypographic@4:PROC
EXTRN	__imp__GdipFillPath@12:PROC
EXTRN	__imp__GdipCreateFontFromLogfontW@12:PROC
EXTRN	__imp__GdipFillRectangle@24:PROC
EXTRN	__imp__GdipSetCompositingMode@8:PROC
EXTRN	__imp__GdipDrawString@28:PROC
EXTRN	__imp__GdipCloneStringFormat@8:PROC
EXTRN	__imp__GdipClonePath@8:PROC
EXTRN	__imp__GdipDeletePath@4:PROC
EXTRN	__imp__GdipGetFontSize@8:PROC
EXTRN	__imp__GdipAddPathString@32:PROC
EXTRN	__imp__GdipCreateSolidFill@8:PROC
EXTRN	__imp__GdipDeleteFontFamily@4:PROC
EXTRN	__imp__GdipGetFamily@8:PROC
EXTRN	__imp__GdipGraphicsClear@8:PROC
EXTRN	__imp__GdipSetStringFormatAlign@8:PROC
EXTRN	__imp__GdipGetImageGraphicsContext@8:PROC
EXTRN	__imp__GdipGetFontStyle@8:PROC
EXTRN	__imp__GdipCreateBitmapFromScan0@24:PROC
EXTRN	__imp__GdipDeleteFont@4:PROC
EXTRN	__imp__GdipDrawPath@12:PROC
EXTRN	__imp__GdipSetTextRenderingHint@8:PROC
EXTRN	__imp__GdipSetStringFormatLineAlign@8:PROC
EXTRN	__imp__GdipMeasureString@36:PROC
EXTRN	__imp__GdipCreateFontFromLogfontA@12:PROC
EXTRN	__imp__GdipCloneBrush@8:PROC
EXTRN	__imp__GdipDeletePen@4:PROC
EXTRN	__imp__GdipDeleteBrush@4:PROC
EXTRN	__imp__GdipSetStringFormatFlags@8:PROC
EXTRN	__imp__GetObjectA@12:PROC
EXTRN	__imp_?FindValueIndexI@StringList@@QBEIPB_W@Z:PROC
EXTRN	__imp_??0Vect4@@QAE@MMMM@Z:PROC
EXTRN	__imp_??4Vect4@@QAEAAU0@M@Z:PROC
;	COMDAT ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureTextProc'::`2'::bInitializedDialog
_GenericSansSerifFontFamilyBuffer DB 08H DUP (?)
_GenericTypographicStringFormatBuffer DB 08H DUP (?)
_GenericDefaultStringFormatBuffer DB 08H DUP (?)
_GenericMonospaceFontFamilyBuffer DB 08H DUP (?)
_GenericSerifFontFamilyBuffer DB 08H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_1CE@NEPAKLHC@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@NEPAKLHC@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'p', 00H, 'a', 00H, 'c'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@DHAIDPLE@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@DHAIDPLE@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'O', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@OHOPANAE@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@OHOPANAE@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EELFPFLI@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EELFPFLI@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JFNINKMC@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JFNINKMC@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@LJPKNPMA@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@LJPKNPMA@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAY?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'C', 00H, 'Y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@EHEODNMJ@?$AAu?$AAs?$AAe?$AAO?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@EHEODNMJ@?$AAu?$AAs?$AAe?$AAO?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AA?$AA@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'O', 00H, 'u', 00H, 't', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KLLAJFB@?$AAp?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@KLLAJFB@?$AAp?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BEGLIKF@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@BEGLIKF@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAX?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'C', 00H, 'X', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@ DB 't', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_19KODKOACD@?$AAm?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19KODKOACD@?$AAm?$AAo?$AAd?$AAe?$AA?$AA@ DB 'm', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@PNKKPJEL@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1M@PNKKPJEL@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@ DB 'a', 00H, 'l', 00H
	DB	'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19HMOGJADO@?$AAf?$AAi?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19HMOGJADO@?$AAf?$AAi?$AAl?$AAe?$AA?$AA@ DB 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JPNOLMK@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JPNOLMK@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?$AA@ DB 'e'
	DB	00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@NAHGECGB@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NAHGECGB@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@ DB 'e'
	DB	00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'H', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@PBGLJJCL@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@PBGLJJCL@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AA?$AA@ DB 'v'
	DB	00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GHNBFLDK@?$AAu?$AAs?$AAe?$AAT?$AAe?$AAx?$AAt?$AAE?$AAx?$AAt?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@GHNBFLDK@?$AAu?$AAs?$AAe?$AAT?$AAe?$AAx?$AAt?$AAE?$AAx?$AAt?$AAe?$AAn?$AAt?$AAs?$AA?$AA@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'E', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@IFAPLEM@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@IFAPLEM@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ DB 's'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'M', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@PNICDMNG@?$AAu?$AAn?$AAd?$AAe?$AAr?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@PNICDMNG@?$AAu?$AAn?$AAd?$AAe?$AAr?$AAl?$AAi?$AAn?$AAe?$AA?$AA@ DB 'u'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JEIKJABP@?$AAi?$AAt?$AAa?$AAl?$AAi?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JEIKJABP@?$AAi?$AAt?$AAa?$AAl?$AAi?$AAc?$AA?$AA@ DB 'i', 00H, 't'
	DB	00H, 'a', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19EOACODOG@?$AAw?$AAr?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_19EOACODOG@?$AAw?$AAr?$AAa?$AAp?$AA?$AA@ DB 'w', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@DNMBKHIA@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@DNMBKHIA@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?$AA@ DB 's'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'S', 00H
	DB	'p', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19LNOFOKG@?$AAb?$AAo?$AAl?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_19LNOFOKG@?$AAb?$AAo?$AAl?$AAd?$AA?$AA@ DB 'b', 00H, 'o', 00H, 'l', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@JNDEGBLF@?$AAf?$AAo?$AAn?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JNDEGBLF@?$AAf?$AAo?$AAn?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@IBCEPOLC@?$AAt?$AAe?$AAx?$AAt?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@IBCEPOLC@?$AAt?$AAe?$AAx?$AAt?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ DB 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'O', 00H, 'p', 00H, 'a', 00H
	DB	'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@HAFKHHGD@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@HAFKHHGD@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't'
	DB	00H, 'p', 00H, 'u', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@ DB 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@DMEJMMLD@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@
CONST	SEGMENT
??_C@_1HG@DMEJMMLD@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h', 00H, 'i', 00H
	DB	'c', 00H, 's', 00H, ':', 00H, ':', 00H, 'D', 00H, 'r', 00H, 'a'
	DB	00H, 'w', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 'u', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@IMEHDNAB@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@
CONST	SEGMENT
??_C@_1GI@IMEHDNAB@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IO@LNGIDPGF@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAd?$AAi?$AAp?$AAl@
CONST	SEGMENT
??_C@_1IO@LNGIDPGF@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAd?$AAi?$AAp?$AAl@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'G', 00H, 'd', 00H, 'i', 00H, 'p', 00H, 'l', 00H, 'u', 00H
	DB	's', 00H, ':', 00H, ':', 00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p'
	DB	00H, 'h', 00H, 'i', 00H, 'c', 00H, 's', 00H, ':', 00H, ':', 00H
	DB	'M', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ':', 00H, ' ', 00H, '%', 00H, 'u', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@LBANKIPA@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@
CONST	SEGMENT
??_C@_1GM@LBANKIPA@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'G', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 'h', 00H, 'i', 00H
	DB	'c', 00H, 's', 00H, ':', 00H, ':', 00H, 'C', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 'r', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 'u'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@ DB 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_15BNMMKFOH@?$AA?6?$AA?$AN?$AA?$AA@
CONST	SEGMENT
??_C@_15BNMMKFOH@?$AA?6?$AA?$AN?$AA?$AA@ DB 0aH, 00H, 0dH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@ DB 'A', 00H, 'r', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@FLMNODJI@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@
CONST	SEGMENT
??_C@_1MC@FLMNODJI@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ':', 00H, 'U', 00H, 'p'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ':', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H
	DB	'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'f'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, 'i', 00H
	DB	'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H, ' '
	DB	00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'a', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'v', 00H, 'i', 00H, 'o', 00H, 'l', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_R2TextOutputSource@@8
rdata$r	SEGMENT
??_R2TextOutputSource@@8 DD FLAT:??_R1A@?0A@EA@TextOutputSource@@8 ; TextOutputSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R2SolidBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R2SolidBrush@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@SolidBrush@Gdiplus@@8 ; Gdiplus::SolidBrush::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Brush@Gdiplus@@8
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBrush@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVBrush@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Brush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBrush@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVTextOutputSource@@@8
data$r	SEGMENT
??_R0?AVTextOutputSource@@@8 DD FLAT:??_7type_info@@6B@	; TextOutputSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVTextOutputSource@@', 00H
data$r	ENDS
;	COMDAT ??_R3TextOutputSource@@8
rdata$r	SEGMENT
??_R3TextOutputSource@@8 DD 00H				; TextOutputSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2TextOutputSource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SolidBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SolidBrush@Gdiplus@@8 DD FLAT:??_R0?AVSolidBrush@Gdiplus@@@8 ; Gdiplus::SolidBrush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SolidBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R3SolidBrush@Gdiplus@@8
rdata$r	SEGMENT
??_R3SolidBrush@Gdiplus@@8 DD 00H			; Gdiplus::SolidBrush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2SolidBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R4SolidBrush@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4SolidBrush@Gdiplus@@6B@ DD 00H			; Gdiplus::SolidBrush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSolidBrush@Gdiplus@@@8
	DD	FLAT:??_R3SolidBrush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Bitmap@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Bitmap@Gdiplus@@8 DD FLAT:??_R0?AVBitmap@Gdiplus@@@8 ; Gdiplus::Bitmap::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Bitmap@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVBitmap@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVBitmap@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@	; Gdiplus::Bitmap `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBitmap@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_7Brush@Gdiplus@@6B@
CONST	SEGMENT
??_7Brush@Gdiplus@@6B@ DD FLAT:??_R4Brush@Gdiplus@@6B@	; Gdiplus::Brush::`vftable'
	DD	FLAT:??_EBrush@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Brush@Gdiplus@@UBEPAV12@XZ
CONST	ENDS
;	COMDAT ??_R3Bitmap@Gdiplus@@8
rdata$r	SEGMENT
??_R3Bitmap@Gdiplus@@8 DD 00H				; Gdiplus::Bitmap::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2Bitmap@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R4TextOutputSource@@6B@
rdata$r	SEGMENT
??_R4TextOutputSource@@6B@ DD 00H			; TextOutputSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVTextOutputSource@@@8
	DD	FLAT:??_R3TextOutputSource@@8
rdata$r	ENDS
;	COMDAT ??_R4Bitmap@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Bitmap@Gdiplus@@6B@ DD 00H				; Gdiplus::Bitmap::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBitmap@Gdiplus@@@8
	DD	FLAT:??_R3Bitmap@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Brush@Gdiplus@@8 DD FLAT:??_R0?AVBrush@Gdiplus@@@8 ; Gdiplus::Brush::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Brush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_7TextOutputSource@@6B@
CONST	SEGMENT
??_7TextOutputSource@@6B@ DD FLAT:??_R4TextOutputSource@@6B@ ; TextOutputSource::`vftable'
	DD	FLAT:??_ETextOutputSource@@UAEPAXI@Z
	DD	FLAT:?Preprocess@TextOutputSource@@UAEXXZ
	DD	FLAT:?Tick@TextOutputSource@@UAEXM@Z
	DD	FLAT:?Render@TextOutputSource@@UAEXABUVect2@@0@Z
	DD	FLAT:?GetSize@TextOutputSource@@UBE?AUVect2@@XZ
	DD	FLAT:?UpdateSettings@TextOutputSource@@UAEXXZ
	DD	FLAT:?BeginScene@ImageSource@@UAEXXZ
	DD	FLAT:?EndScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceLeaveScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceEnterScene@ImageSource@@UAEXXZ
	DD	FLAT:?SetFloat@TextOutputSource@@UAEXPB_WM@Z
	DD	FLAT:?SetInt@TextOutputSource@@UAEXPB_WH@Z
	DD	FLAT:?SetString@TextOutputSource@@UAEXPB_W0@Z
	DD	FLAT:?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z
	DD	FLAT:?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z
	DD	FLAT:?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z
	DD	FLAT:?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z
	DD	FLAT:?GetFloat@ImageSource@@UBE_NPB_WAAM@Z
	DD	FLAT:?GetInt@ImageSource@@UBE_NPB_WAAH@Z
	DD	FLAT:?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z
	DD	FLAT:?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z
	DD	FLAT:?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z
	DD	FLAT:?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z
	DD	FLAT:?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z
CONST	ENDS
;	COMDAT ??_7SolidBrush@Gdiplus@@6B@
CONST	SEGMENT
??_7SolidBrush@Gdiplus@@6B@ DD FLAT:??_R4SolidBrush@Gdiplus@@6B@ ; Gdiplus::SolidBrush::`vftable'
	DD	FLAT:??_ESolidBrush@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Brush@Gdiplus@@UBEPAV12@XZ
CONST	ENDS
;	COMDAT ??_R1A@?0A@EA@TextOutputSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@TextOutputSource@@8 DD FLAT:??_R0?AVTextOutputSource@@@8 ; TextOutputSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3TextOutputSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVSolidBrush@Gdiplus@@@8
data$r	SEGMENT
??_R0?AVSolidBrush@Gdiplus@@@8 DD FLAT:??_7type_info@@6B@ ; Gdiplus::SolidBrush `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSolidBrush@Gdiplus@@', 00H
data$r	ENDS
;	COMDAT ??_R2Bitmap@Gdiplus@@8
rdata$r	SEGMENT
??_R2Bitmap@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@Bitmap@Gdiplus@@8 ; Gdiplus::Bitmap::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Image@Gdiplus@@8
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_7Bitmap@Gdiplus@@6B@
CONST	SEGMENT
??_7Bitmap@Gdiplus@@6B@ DD FLAT:??_R4Bitmap@Gdiplus@@6B@ ; Gdiplus::Bitmap::`vftable'
	DD	FLAT:??_EBitmap@Gdiplus@@UAEPAXI@Z
	DD	FLAT:?Clone@Image@Gdiplus@@UAEPAV12@XZ
CONST	ENDS
;	COMDAT ??_R2Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R2Brush@Gdiplus@@8 DD FLAT:??_R1A@?0A@EA@Brush@Gdiplus@@8 ; Gdiplus::Brush::`RTTI Base Class Array'
	DD	FLAT:??_R13?0A@EA@GdiplusBase@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R4Brush@Gdiplus@@6B@
rdata$r	SEGMENT
??_R4Brush@Gdiplus@@6B@ DD 00H				; Gdiplus::Brush::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBrush@Gdiplus@@@8
	DD	FLAT:??_R3Brush@Gdiplus@@8
rdata$r	ENDS
;	COMDAT ??_R3Brush@Gdiplus@@8
rdata$r	SEGMENT
??_R3Brush@Gdiplus@@8 DD 00H				; Gdiplus::Brush::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2Brush@Gdiplus@@8
$SG4294722748 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722744 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'O', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722745 DB 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722746 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722747 DB 'A', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG4294722740 DB 'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG4294722741 DB 'i', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4294722742 DB 'b', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294722743 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'S', 00H, 'p', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG4294722736 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'p', 00H, 'a'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722737 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722738 DB 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294722739 DB 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG4294722732 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'O', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294722733 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722734 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG4294722735 DB 'u', 00H, 's', 00H, 'e', 00H, 'O', 00H, 'u', 00H, 't', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722728 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722729 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294722730 DB 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG4294722731 DB 'u', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294722724 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'C', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 00H
	DB	00H
$SG4294722725 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'L', 00H, 'e', 00H, 'f', 00H, 't', 00H, 00H, 00H
$SG4294722726 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722727 DB 'w', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG4294722720 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722721 DB 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722722 DB 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H
$SG4294722723 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'R', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722716 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722717 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722718 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722719 DB 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722712 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722713 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294722714 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722715 DB 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722708 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG4294722709 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'p', 00H, 'a'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722710 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'O', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294722711 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'O', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722704 DB 'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG4294722705 DB 'i', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4294722706 DB 'b', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294722707 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'S', 00H, 'p', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG4294722700 DB 'u', 00H, 's', 00H, 'e', 00H, 'O', 00H, 'u', 00H, 't', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722701 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722702 DB 'w', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG4294722703 DB 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG4294722696 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722697 DB 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722698 DB 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H
$SG4294722699 DB 'u', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294722692 DB 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722693 DB 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, '(', 00H, '*'
	DB	00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, ')', 00H, 00H, 00H
	DB	'*', 00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H, 00H
	DB	00H
$SG4294722694 DB 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722695 DB 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722688 DB '$', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG4294722687 DB 'A', 00H, 'r', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG4294722689 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG4294722690 DB '$', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG4294722691 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG4294722684 DB 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'C', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294722685 DB '$', 00H, '1', 00H, 00H, 00H
	ORG $+2
$SG4294722686 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H
	DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
$SG4294722680 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722681 DB 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722682 DB 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722683 DB 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 'C', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG4294722676 DB 'i', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG4294722677 DB 'b', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294722678 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'S', 00H, 'p', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 00H, 00H
$SG4294722679 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'O', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722672 DB 'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'l', 00H
	DB	'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
$SG4294722673 DB 's', 00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H
	DB	'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722674 DB 'w', 00H, 'r', 00H, 'a', 00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG4294722675 DB 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG4294722668 DB 'u', 00H, 's', 00H, 'e', 00H, 'O', 00H, 'u', 00H, 't', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722669 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'O', 00H, 'p', 00H, 'a'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
$SG4294722670 DB 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'g', 00H, 'r', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294722671 DB 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'F', 00H
	DB	'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294722664 DB 'u', 00H, 's', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 'E', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294722665 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'O', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294722666 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG4294722667 DB 'o', 00H, 'u', 00H, 't', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722660 DB 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722661 DB 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 00H, 00H
$SG4294722662 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H
	DB	00H
	ORG $+2
$SG4294722663 DB 'e', 00H, 'x', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294722656 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294722658 DB 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294722657 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	':', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' '
	DB	00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H
$SG4294722659 DB 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294722653 DB 'c', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294722654 DB 'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG4294722655 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
PUBLIC	??$forward@U?$default_delete@VSamplerState@@@std@@@std@@YA$$QAU?$default_delete@VSamplerState@@@0@AAU10@@Z ; std::forward<std::default_delete<SamplerState> >
PUBLIC	??$move@AAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<SamplerState,std::default_delete<SamplerState> > &>
PUBLIC	??0?$default_delete@VSamplerState@@@std@@QAE@XZ	; std::default_delete<SamplerState>::default_delete<SamplerState>
PUBLIC	?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
PUBLIC	??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>
PUBLIC	??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z ; std::default_delete<SamplerState>::operator()
PUBLIC	?reset@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEXPAVSamplerState@@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::reset
PUBLIC	?release@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEPAVSamplerState@@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::release
PUBLIC	??B?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBE_NXZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator bool
PUBLIC	?get@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBEPAVSamplerState@@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::get
PUBLIC	??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::~unique_ptr<SamplerState,std::default_delete<SamplerState> >
PUBLIC	??4?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator=
PUBLIC	??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@PAVSamplerState@@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >
PUBLIC	??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >
PUBLIC	??1ConfigTextSourceInfo@@QAE@XZ			; ConfigTextSourceInfo::~ConfigTextSourceInfo
PUBLIC	??0ConfigTextSourceInfo@@QAE@XZ			; ConfigTextSourceInfo::ConfigTextSourceInfo
PUBLIC	?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z		; ConfigureTextProc
PUBLIC	?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z ; GetFontFace
PUBLIC	?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ; FindFontName
PUBLIC	?FindFontFace@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ; FindFontFace
PUBLIC	?DoCancelStuff@@YAXPAUHWND__@@@Z		; DoCancelStuff
PUBLIC	?FontEnumProcThingy@@YGHPAUtagENUMLOGFONTEXW@@PAUtagNEWTEXTMETRICEXW@@KPAUConfigTextSourceInfo@@@Z ; FontEnumProcThingy
PUBLIC	??_GTextOutputSource@@UAEPAXI@Z			; TextOutputSource::`scalar deleting destructor'
PUBLIC	??_GGraphics@Gdiplus@@QAEPAXI@Z			; Gdiplus::Graphics::`scalar deleting destructor'
PUBLIC	??_GGraphicsPath@Gdiplus@@QAEPAXI@Z		; Gdiplus::GraphicsPath::`scalar deleting destructor'
PUBLIC	?SetFloat@TextOutputSource@@UAEXPB_WM@Z		; TextOutputSource::SetFloat
PUBLIC	?SetInt@TextOutputSource@@UAEXPB_WH@Z		; TextOutputSource::SetInt
PUBLIC	?SetString@TextOutputSource@@UAEXPB_W0@Z	; TextOutputSource::SetString
PUBLIC	?UpdateSettings@TextOutputSource@@UAEXXZ	; TextOutputSource::UpdateSettings
PUBLIC	?GetSize@TextOutputSource@@UBE?AUVect2@@XZ	; TextOutputSource::GetSize
PUBLIC	?Render@TextOutputSource@@UAEXABUVect2@@0@Z	; TextOutputSource::Render
PUBLIC	?Tick@TextOutputSource@@UAEXM@Z			; TextOutputSource::Tick
PUBLIC	?Preprocess@TextOutputSource@@UAEXXZ		; TextOutputSource::Preprocess
PUBLIC	??1TextOutputSource@@UAE@XZ			; TextOutputSource::~TextOutputSource
PUBLIC	??0TextOutputSource@@QAE@PAVXElement@@@Z	; TextOutputSource::TextOutputSource
PUBLIC	?UpdateTexture@TextOutputSource@@AAEXXZ		; TextOutputSource::UpdateTexture
PUBLIC	?ProcessScrollMode@TextOutputSource@@AAEMPAVGraphics@Gdiplus@@PAVFont@3@AAVRectF@3@PAVStringFormat@3@@Z ; TextOutputSource::ProcessScrollMode
PUBLIC	?SetStringFormat@TextOutputSource@@AAEXAAVStringFormat@Gdiplus@@@Z ; TextOutputSource::SetStringFormat
PUBLIC	?UpdateCurrentText@TextOutputSource@@AAEXXZ	; TextOutputSource::UpdateCurrentText
PUBLIC	?GetFont@TextOutputSource@@AAEPAUHFONT__@@XZ	; TextOutputSource::GetFont
PUBLIC	?DrawOutlineText@TextOutputSource@@AAEXPAVGraphics@Gdiplus@@AAVFont@3@ABVGraphicsPath@3@ABVStringFormat@3@PBVBrush@3@@Z ; TextOutputSource::DrawOutlineText
PUBLIC	?GetAlphaVal@@YAKI@Z				; GetAlphaVal
PUBLIC	??0Bitmap@Gdiplus@@QAE@HHHHPAE@Z		; Gdiplus::Bitmap::Bitmap
PUBLIC	??1Bitmap@Gdiplus@@UAE@XZ			; Gdiplus::Bitmap::~Bitmap
PUBLIC	??_GBitmap@Gdiplus@@UAEPAXI@Z			; Gdiplus::Bitmap::`scalar deleting destructor'
PUBLIC	?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Font::SetStatus
PUBLIC	?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z	; Gdiplus::Font::SetNativeFont
PUBLIC	?GetSize@Font@Gdiplus@@QBEMXZ			; Gdiplus::Font::GetSize
PUBLIC	?GetStyle@Font@Gdiplus@@QBEHXZ			; Gdiplus::Font::GetStyle
PUBLIC	?GetFamily@Font@Gdiplus@@QBE?AW4Status@2@PAVFontFamily@2@@Z ; Gdiplus::Font::GetFamily
PUBLIC	?IsAvailable@Font@Gdiplus@@QBEHXZ		; Gdiplus::Font::IsAvailable
PUBLIC	??1Font@Gdiplus@@QAE@XZ				; Gdiplus::Font::~Font
PUBLIC	??0Font@Gdiplus@@QAE@PAUHDC__@@PBUtagLOGFONTW@@@Z ; Gdiplus::Font::Font
PUBLIC	??0Font@Gdiplus@@QAE@PAUHDC__@@QAUHFONT__@@@Z	; Gdiplus::Font::Font
PUBLIC	?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::FontFamily::SetStatus
PUBLIC	??1FontFamily@Gdiplus@@QAE@XZ			; Gdiplus::FontFamily::~FontFamily
PUBLIC	??0FontFamily@Gdiplus@@QAE@XZ			; Gdiplus::FontFamily::FontFamily
PUBLIC	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PAV52@@Z ; Gdiplus::Graphics::MeasureString
PUBLIC	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z ; Gdiplus::Graphics::MeasureString
PUBLIC	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PAV52@PAH5@Z ; Gdiplus::Graphics::MeasureString
PUBLIC	?DrawString@Graphics@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PBVBrush@2@@Z ; Gdiplus::Graphics::DrawString
PUBLIC	?FillPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVGraphicsPath@2@@Z ; Gdiplus::Graphics::FillPath
PUBLIC	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle
PUBLIC	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@ABVRectF@2@@Z ; Gdiplus::Graphics::FillRectangle
PUBLIC	?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ; Gdiplus::Graphics::Clear
PUBLIC	?DrawPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@PBVGraphicsPath@2@@Z ; Gdiplus::Graphics::DrawPath
PUBLIC	?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z ; Gdiplus::Graphics::SetTextRenderingHint
PUBLIC	?SetCompositingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4CompositingMode@2@@Z ; Gdiplus::Graphics::SetCompositingMode
PUBLIC	??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z		; Gdiplus::Graphics::Graphics
PUBLIC	?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::GraphicsPath::SetStatus
PUBLIC	?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z ; Gdiplus::GraphicsPath::SetNativePath
PUBLIC	??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z	; Gdiplus::GraphicsPath::GraphicsPath
PUBLIC	?AddString@GraphicsPath@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFontFamily@2@HMABVRectF@2@PBVStringFormat@2@@Z ; Gdiplus::GraphicsPath::AddString
PUBLIC	?Clone@GraphicsPath@Gdiplus@@QBEPAV12@XZ	; Gdiplus::GraphicsPath::Clone
PUBLIC	??1GraphicsPath@Gdiplus@@QAE@XZ			; Gdiplus::GraphicsPath::~GraphicsPath
PUBLIC	??0GraphicsPath@Gdiplus@@QAE@W4FillMode@1@@Z	; Gdiplus::GraphicsPath::GraphicsPath
PUBLIC	?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ ; Gdiplus::StringFormat::GenericTypographic
PUBLIC	?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::StringFormat::SetStatus
PUBLIC	?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z ; Gdiplus::StringFormat::SetTrimming
PUBLIC	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment
PUBLIC	?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetAlignment
PUBLIC	?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z ; Gdiplus::StringFormat::SetFormatFlags
PUBLIC	??1StringFormat@Gdiplus@@QAE@XZ			; Gdiplus::StringFormat::~StringFormat
PUBLIC	??0StringFormat@Gdiplus@@QAE@PBV01@@Z		; Gdiplus::StringFormat::StringFormat
PUBLIC	?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z	; Gdiplus::Pen::SetStatus
PUBLIC	?SetLineJoin@Pen@Gdiplus@@QAE?AW4Status@2@W4LineJoin@2@@Z ; Gdiplus::Pen::SetLineJoin
PUBLIC	??1Pen@Gdiplus@@QAE@XZ				; Gdiplus::Pen::~Pen
PUBLIC	??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z		; Gdiplus::Pen::Pen
PUBLIC	??1SolidBrush@Gdiplus@@UAE@XZ			; Gdiplus::SolidBrush::~SolidBrush
PUBLIC	??_GSolidBrush@Gdiplus@@UAEPAXI@Z		; Gdiplus::SolidBrush::`scalar deleting destructor'
PUBLIC	??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z	; Gdiplus::SolidBrush::SolidBrush
PUBLIC	??_GBrush@Gdiplus@@UAEPAXI@Z			; Gdiplus::Brush::`scalar deleting destructor'
PUBLIC	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus
PUBLIC	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush
PUBLIC	??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ; Gdiplus::Brush::Brush
PUBLIC	??0Brush@Gdiplus@@IAE@XZ			; Gdiplus::Brush::Brush
PUBLIC	?Clone@Brush@Gdiplus@@UBEPAV12@XZ		; Gdiplus::Brush::Clone
PUBLIC	??1Brush@Gdiplus@@UAE@XZ			; Gdiplus::Brush::~Brush
PUBLIC	??0Image@Gdiplus@@IAE@XZ			; Gdiplus::Image::Image
PUBLIC	?GetValue@Color@Gdiplus@@QBEKXZ			; Gdiplus::Color::GetValue
PUBLIC	??0Color@Gdiplus@@QAE@K@Z			; Gdiplus::Color::Color
PUBLIC	?Offset@RectF@Gdiplus@@QAEXMM@Z			; Gdiplus::RectF::Offset
PUBLIC	??0RectF@Gdiplus@@QAE@MMMM@Z			; Gdiplus::RectF::RectF
PUBLIC	??0RectF@Gdiplus@@QAE@XZ			; Gdiplus::RectF::RectF
PUBLIC	??0PointF@Gdiplus@@QAE@MM@Z			; Gdiplus::PointF::PointF
PUBLIC	?DrawBox@@YAXABUVect2@@0@Z			; DrawBox
PUBLIC	?SetScissorRect@@YAXPAUXRect@@@Z		; SetScissorRect
PUBLIC	?ConfigureTextSource@@YG_NPAVXElement@@_N@Z	; ConfigureTextSource
PUBLIC	?CreateTextSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateTextSource
EXTRN	??_ESolidBrush@Gdiplus@@UAEPAXI@Z:PROC		; Gdiplus::SolidBrush::`vector deleting destructor'
EXTRN	??_EBrush@Gdiplus@@UAEPAXI@Z:PROC		; Gdiplus::Brush::`vector deleting destructor'
EXTRN	??_EBitmap@Gdiplus@@UAEPAXI@Z:PROC		; Gdiplus::Bitmap::`vector deleting destructor'
EXTRN	??_ETextOutputSource@@UAEPAXI@Z:PROC		; TextOutputSource::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?CreateTextSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
$T1 = -4						; size = 4
_data$ = 8						; size = 4
?CreateTextSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateTextSource, COMDAT

; 792  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 793  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN1@CreateText

; 794  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CreateText
$LN1@CreateText:

; 795  : 
; 796  :     return new TextOutputSource(data);

	push	164					; 000000a4H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@CreateText
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0TextOutputSource@@QAE@PAVXElement@@@Z ; TextOutputSource::TextOutputSource
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@CreateText
$LN4@CreateText:
	mov	DWORD PTR tv74[ebp], 0
$LN5@CreateText:
	mov	eax, DWORD PTR tv74[ebp]
$LN2@CreateText:

; 797  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateTextSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateTextSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?ConfigureTextSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_configInfo$ = -40					; size = 32
_data$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
_element$ = 8						; size = 4
_bCreating$ = 12					; size = 1
?ConfigureTextSource@@YG_NPAVXElement@@_N@Z PROC	; ConfigureTextSource, COMDAT

; 1430 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 1431 :     if(!element)

	cmp	DWORD PTR _element$[ebp], 0
	jne	SHORT $LN3@ConfigureT

; 1432 :     {
; 1433 :         AppWarning(TEXT("ConfigureTextSource: NULL element"));

	push	OFFSET $SG4294722657
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 1434 :         return false;

	xor	al, al
	jmp	$LN4@ConfigureT
$LN3@ConfigureT:

; 1435 :     }
; 1436 : 
; 1437 :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG4294722656
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax

; 1438 :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN2@ConfigureT

; 1439 :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG4294722655
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax
$LN2@ConfigureT:

; 1440 : 
; 1441 :     ConfigTextSourceInfo configInfo;

	lea	ecx, DWORD PTR _configInfo$[ebp]
	call	??0ConfigTextSourceInfo@@QAE@XZ

; 1442 :     configInfo.lpName = element->GetName();

	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetName@XBaseItem@@QBEPB_WXZ
	mov	DWORD PTR _configInfo$[ebp], eax

; 1443 :     configInfo.data = data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _configInfo$[ebp+4], eax

; 1444 : 
; 1445 :     if(OBSDialogBox(hinstMain, MAKEINTRESOURCE(IDD_CONFIGURETEXTSOURCE), hwndMain, ConfigureTextProc, (LPARAM)&configInfo) == IDOK)

	lea	ecx, DWORD PTR _configInfo$[ebp]
	push	ecx
	push	OFFSET ?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureTextProc
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	push	139					; 0000008bH
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSDialogBox@@YAHPAUHINSTANCE__@@PB_WPAUHWND__@@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN1@ConfigureT

; 1446 :     {
; 1447 :         element->SetFloat(TEXT("cx"), configInfo.cx);

	push	ecx
	movss	xmm0, DWORD PTR _configInfo$[ebp+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722654
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1448 :         element->SetFloat(TEXT("cy"), configInfo.cy);

	push	ecx
	movss	xmm0, DWORD PTR _configInfo$[ebp+12]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722653
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1449 : 
; 1450 :         return true;

	mov	BYTE PTR $T2[ebp], 1
	lea	ecx, DWORD PTR _configInfo$[ebp]
	call	??1ConfigTextSourceInfo@@QAE@XZ
	mov	al, BYTE PTR $T2[ebp]
	jmp	SHORT $LN4@ConfigureT
$LN1@ConfigureT:

; 1451 :     }
; 1452 : 
; 1453 :     return false;

	mov	BYTE PTR $T1[ebp], 0
	lea	ecx, DWORD PTR _configInfo$[ebp]
	call	??1ConfigTextSourceInfo@@QAE@XZ
	mov	al, BYTE PTR $T1[ebp]
$LN4@ConfigureT:

; 1454 : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ConfigureTextSource@@YG_NPAVXElement@@_N@Z ENDP	; ConfigureTextSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?SetScissorRect@@YAXPAUXRect@@@Z
_TEXT	SEGMENT
_pRect$ = 8						; size = 4
?SetScissorRect@@YAXPAUXRect@@@Z PROC			; SetScissorRect, COMDAT

; 710  : inline void  SetScissorRect(XRect *pRect=NULL)                        {GS->SetScissorRect(pRect);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+140]
	call	eax
	pop	ebp
	ret	0
?SetScissorRect@@YAXPAUXRect@@@Z ENDP			; SetScissorRect
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?DrawBox@@YAXABUVect2@@0@Z
_TEXT	SEGMENT
_upperLeft$ = 8						; size = 4
_size$ = 12						; size = 4
?DrawBox@@YAXABUVect2@@0@Z PROC				; DrawBox, COMDAT

; 719  :     {GS->DrawBox(upperLeft, size);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _upperLeft$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+120]
	call	eax
	pop	ebp
	ret	0
?DrawBox@@YAXABUVect2@@0@Z ENDP				; DrawBox
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplustypes.h
;	COMDAT ??0PointF@Gdiplus@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
??0PointF@Gdiplus@@QAE@MM@Z PROC			; Gdiplus::PointF::PointF, COMDAT
; _this$ = ecx

; 259  :    PointF(IN REAL x,

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 260  :           IN REAL y)
; 261  :    {
; 262  :        X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 263  :        Y = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 264  :    }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0PointF@Gdiplus@@QAE@MM@Z ENDP			; Gdiplus::PointF::PointF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplustypes.h
;	COMDAT ??0RectF@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RectF@Gdiplus@@QAE@XZ PROC				; Gdiplus::RectF::RectF, COMDAT
; _this$ = ecx

; 351  :     RectF()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 352  :     {
; 353  :         X = Y = Width = Height = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+12], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+8], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+4], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax], xmm0

; 354  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RectF@Gdiplus@@QAE@XZ ENDP				; Gdiplus::RectF::RectF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplustypes.h
;	COMDAT ??0RectF@Gdiplus@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_width$ = 16						; size = 4
_height$ = 20						; size = 4
??0RectF@Gdiplus@@QAE@MMMM@Z PROC			; Gdiplus::RectF::RectF, COMDAT
; _this$ = ecx

; 356  :     RectF(IN REAL x,

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 357  :           IN REAL y,
; 358  :           IN REAL width,
; 359  :           IN REAL height)
; 360  :     {
; 361  :         X = x;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [eax], xmm0

; 362  :         Y = y;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [ecx+4], xmm0

; 363  :         Width = width;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [edx+8], xmm0

; 364  :         Height = height;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [eax+12], xmm0

; 365  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0RectF@Gdiplus@@QAE@MMMM@Z ENDP			; Gdiplus::RectF::RectF
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplustypes.h
;	COMDAT ?Offset@RectF@Gdiplus@@QAEXMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dx$ = 8						; size = 4
_dy$ = 12						; size = 4
?Offset@RectF@Gdiplus@@QAEXMM@Z PROC			; Gdiplus::RectF::Offset, COMDAT
; _this$ = ecx

; 518  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 519  :         X += dx;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR _dx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx], xmm0

; 520  :         Y += dy;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR _dy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movss	DWORD PTR [eax+4], xmm0

; 521  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?Offset@RectF@Gdiplus@@QAEXMM@Z ENDP			; Gdiplus::RectF::Offset
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ??0Color@Gdiplus@@QAE@K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_argb$ = 8						; size = 4
??0Color@Gdiplus@@QAE@K@Z PROC				; Gdiplus::Color::Color, COMDAT
; _this$ = ecx

; 79   :     Color(IN ARGB argb)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 80   :     {
; 81   :         Argb = argb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _argb$[ebp]
	mov	DWORD PTR [eax], ecx

; 82   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Color@Gdiplus@@QAE@K@Z ENDP				; Gdiplus::Color::Color
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluscolor.h
;	COMDAT ?GetValue@Color@Gdiplus@@QBEKXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetValue@Color@Gdiplus@@QBEKXZ PROC			; Gdiplus::Color::GetValue, COMDAT
; _this$ = ecx

; 125  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 126  :         return Argb;

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 127  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetValue@Color@Gdiplus@@QBEKXZ ENDP			; Gdiplus::Color::GetValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusheaders.h
;	COMDAT ??0Image@Gdiplus@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Image@Gdiplus@@IAE@XZ PROC				; Gdiplus::Image::Image, COMDAT
; _this$ = ecx

; 477  :     Image() {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Image@Gdiplus@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Image@Gdiplus@@IAE@XZ ENDP				; Gdiplus::Image::Image
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??1Brush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Brush@Gdiplus@@UAE@XZ PROC				; Gdiplus::Brush::~Brush, COMDAT
; _this$ = ecx

; 36   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 37   :         DllExports::GdipDeleteBrush(nativeBrush);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GdipDeleteBrush@4

; 38   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Brush@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Brush::~Brush
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?Clone@Brush@Gdiplus@@UBEPAV12@XZ
_TEXT	SEGMENT
_newBrush$ = -20					; size = 4
tv78 = -16						; size = 4
$T1 = -12						; size = 4
_brush$ = -8						; size = 4
_this$ = -4						; size = 4
?Clone@Brush@Gdiplus@@UBEPAV12@XZ PROC			; Gdiplus::Brush::Clone, COMDAT
; _this$ = ecx

; 41   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	DWORD PTR _this$[ebp], ecx

; 42   :         GpBrush *brush = NULL;

	mov	DWORD PTR _brush$[ebp], 0

; 43   : 
; 44   :         SetStatus(DllExports::GdipCloneBrush(nativeBrush, &brush));

	lea	eax, DWORD PTR _brush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GdipCloneBrush@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus

; 45   : 
; 46   :         Brush *newBrush = new Brush(brush, lastResult);

	push	12					; 0000000cH
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@Clone
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _brush$[ebp]
	push	edx
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ; Gdiplus::Brush::Brush
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN5@Clone
$LN4@Clone:
	mov	DWORD PTR tv78[ebp], 0
$LN5@Clone:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _newBrush$[ebp], eax

; 47   :         
; 48   :         if (newBrush == NULL) 

	cmp	DWORD PTR _newBrush$[ebp], 0
	jne	SHORT $LN1@Clone

; 49   :         {
; 50   :             DllExports::GdipDeleteBrush(brush);

	mov	ecx, DWORD PTR _brush$[ebp]
	push	ecx
	call	DWORD PTR __imp__GdipDeleteBrush@4
$LN1@Clone:

; 51   :         }
; 52   : 
; 53   :         return newBrush;

	mov	eax, DWORD PTR _newBrush$[ebp]

; 54   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clone@Brush@Gdiplus@@UBEPAV12@XZ ENDP			; Gdiplus::Brush::Clone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0Brush@Gdiplus@@IAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0Brush@Gdiplus@@IAE@XZ PROC				; Gdiplus::Brush::Brush, COMDAT
; _this$ = ecx

; 75   :     Brush()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 76   :     {
; 77   :         SetStatus(NotImplemented);

	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Brush::SetStatus

; 78   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0Brush@Gdiplus@@IAE@XZ ENDP				; Gdiplus::Brush::Brush
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeBrush$ = 8					; size = 4
_status$ = 12						; size = 4
??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z PROC	; Gdiplus::Brush::Brush, COMDAT
; _this$ = ecx

; 85   :     Brush(GpBrush* nativeBrush, Status status)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Brush@Gdiplus@@6B@

; 86   :     {
; 87   :         lastResult = status;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [ecx+8], edx

; 88   :         SetNativeBrush(nativeBrush);

	mov	eax, DWORD PTR _nativeBrush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush

; 89   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Brush@Gdiplus@@IAE@PAVGpBrush@1@W4Status@1@@Z ENDP	; Gdiplus::Brush::Brush
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativeBrush$ = 8					; size = 4
?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z PROC	; Gdiplus::Brush::SetNativeBrush, COMDAT
; _this$ = ecx

; 92   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 93   :         this->nativeBrush = nativeBrush;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativeBrush$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 94   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ENDP	; Gdiplus::Brush::SetNativeBrush
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC	; Gdiplus::Brush::SetStatus, COMDAT
; _this$ = ecx

; 97   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 99   :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 100  :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 101  :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 102  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Brush@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Brush::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBrush@Gdiplus@@UAEPAXI@Z PROC			; Gdiplus::Brush::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Brush@Gdiplus@@UAE@XZ		; Gdiplus::Brush::~Brush
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBrush@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Brush::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbrush.h
;	COMDAT ??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z
_TEXT	SEGMENT
_brush$ = -8						; size = 4
_this$ = -4						; size = 4
_color$ = 8						; size = 4
??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z PROC		; Gdiplus::SolidBrush::SolidBrush, COMDAT
; _this$ = ecx

; 117  :     SolidBrush(IN const Color& color)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Brush@Gdiplus@@IAE@XZ		; Gdiplus::Brush::Brush
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SolidBrush@Gdiplus@@6B@

; 118  :     {
; 119  :         GpSolidFill *brush = NULL;

	mov	DWORD PTR _brush$[ebp], 0

; 120  : 
; 121  :         lastResult = DllExports::GdipCreateSolidFill(color.GetValue(), &brush);

	lea	ecx, DWORD PTR _brush$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _color$[ebp]
	call	?GetValue@Color@Gdiplus@@QBEKXZ		; Gdiplus::Color::GetValue
	push	eax
	call	DWORD PTR __imp__GdipCreateSolidFill@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax

; 122  : 
; 123  :         SetNativeBrush(brush);

	mov	eax, DWORD PTR _brush$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeBrush@Brush@Gdiplus@@IAEXPAVGpBrush@2@@Z ; Gdiplus::Brush::SetNativeBrush

; 124  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z ENDP		; Gdiplus::SolidBrush::SolidBrush
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSolidBrush@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSolidBrush@Gdiplus@@UAEPAXI@Z PROC			; Gdiplus::SolidBrush::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SolidBrush@Gdiplus@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSolidBrush@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::SolidBrush::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1SolidBrush@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SolidBrush@Gdiplus@@UAE@XZ PROC			; Gdiplus::SolidBrush::~SolidBrush, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Brush@Gdiplus@@UAE@XZ		; Gdiplus::Brush::~Brush
	mov	esp, ebp
	pop	ebp
	ret	0
??1SolidBrush@Gdiplus@@UAE@XZ ENDP			; Gdiplus::SolidBrush::~SolidBrush
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z
_TEXT	SEGMENT
_unit$ = -8						; size = 4
_this$ = -4						; size = 4
_color$ = 8						; size = 4
_width$ = 12						; size = 4
??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z PROC			; Gdiplus::Pen::Pen, COMDAT
; _this$ = ecx

; 32   :     Pen(IN const Color& color, 

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 33   :         IN REAL width = 1.0f)
; 34   :     {
; 35   :         Unit unit = UnitWorld;

	mov	DWORD PTR _unit$[ebp], 0

; 36   :         nativePen = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 37   :         lastResult = DllExports::GdipCreatePen1(color.GetValue(),
; 38   :                                     width, unit, &nativePen);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _unit$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _color$[ebp]
	call	?GetValue@Color@Gdiplus@@QBEKXZ		; Gdiplus::Color::GetValue
	push	eax
	call	DWORD PTR __imp__GdipCreatePen1@16
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 39   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z ENDP			; Gdiplus::Pen::Pen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ??1Pen@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Pen@Gdiplus@@QAE@XZ PROC				; Gdiplus::Pen::~Pen, COMDAT
; _this$ = ecx

; 51   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :         DllExports::GdipDeletePen(nativePen);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDeletePen@4

; 53   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Pen@Gdiplus@@QAE@XZ ENDP				; Gdiplus::Pen::~Pen
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ?SetLineJoin@Pen@Gdiplus@@QAE?AW4Status@2@W4LineJoin@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lineJoin$ = 8						; size = 4
?SetLineJoin@Pen@Gdiplus@@QAE?AW4Status@2@W4LineJoin@2@@Z PROC ; Gdiplus::Pen::SetLineJoin, COMDAT
; _this$ = ecx

; 135  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 136  :         return SetStatus(DllExports::GdipSetPenLineJoin(nativePen, lineJoin));

	mov	eax, DWORD PTR _lineJoin$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetPenLineJoin@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Pen::SetStatus

; 137  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineJoin@Pen@Gdiplus@@QAE?AW4Status@2@W4LineJoin@2@@Z ENDP ; Gdiplus::Pen::SetLineJoin
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspen.h
;	COMDAT ?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC	; Gdiplus::Pen::SetStatus, COMDAT
; _this$ = ecx

; 468  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 469  :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 470  :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 471  :         else 

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 472  :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 473  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Pen@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Pen::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ??0StringFormat@Gdiplus@@QAE@PBV01@@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_format$ = 8						; size = 4
??0StringFormat@Gdiplus@@QAE@PBV01@@Z PROC		; Gdiplus::StringFormat::StringFormat, COMDAT
; _this$ = ecx

; 46   :     StringFormat(

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 47   :         IN const StringFormat *format
; 48   :     )
; 49   :     {
; 50   :         nativeFormat = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 51   :         lastError = DllExports::GdipCloneStringFormat(
; 52   :             format ? format->nativeFormat : NULL,
; 53   :             &nativeFormat
; 54   :         );

	cmp	DWORD PTR _format$[ebp], 0
	je	SHORT $LN3@StringForm
	mov	ecx, DWORD PTR _format$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv71[ebp], edx
	jmp	SHORT $LN4@StringForm
$LN3@StringForm:
	mov	DWORD PTR tv71[ebp], 0
$LN4@StringForm:
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv71[ebp]
	push	ecx
	call	DWORD PTR __imp__GdipCloneStringFormat@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 55   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0StringFormat@Gdiplus@@QAE@PBV01@@Z ENDP		; Gdiplus::StringFormat::StringFormat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ??1StringFormat@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1StringFormat@Gdiplus@@QAE@XZ PROC			; Gdiplus::StringFormat::~StringFormat, COMDAT
; _this$ = ecx

; 73   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 74   :         DllExports::GdipDeleteStringFormat(nativeFormat);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDeleteStringFormat@4

; 75   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1StringFormat@Gdiplus@@QAE@XZ ENDP			; Gdiplus::StringFormat::~StringFormat
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_flags$ = 8						; size = 4
?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z PROC ; Gdiplus::StringFormat::SetFormatFlags, COMDAT
; _this$ = ecx

; 78   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 79   :         return SetStatus(DllExports::GdipSetStringFormatFlags(
; 80   :             nativeFormat,
; 81   :             flags
; 82   :         ));

	mov	eax, DWORD PTR _flags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetStringFormatFlags@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::StringFormat::SetStatus

; 83   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z ENDP ; Gdiplus::StringFormat::SetFormatFlags
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_align$ = 8						; size = 4
?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z PROC ; Gdiplus::StringFormat::SetAlignment, COMDAT
; _this$ = ecx

; 93   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 94   :         return SetStatus(DllExports::GdipSetStringFormatAlign(
; 95   :             nativeFormat,
; 96   :             align
; 97   :         ));

	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetStringFormatAlign@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::StringFormat::SetStatus

; 98   :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ENDP ; Gdiplus::StringFormat::SetAlignment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_align$ = 8						; size = 4
?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z PROC ; Gdiplus::StringFormat::SetLineAlignment, COMDAT
; _this$ = ecx

; 111  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 112  :         return SetStatus(DllExports::GdipSetStringFormatLineAlign(
; 113  :             nativeFormat,
; 114  :             align
; 115  :         ));

	mov	eax, DWORD PTR _align$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetStringFormatLineAlign@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::StringFormat::SetStatus

; 116  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ENDP ; Gdiplus::StringFormat::SetLineAlignment
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_trimming$ = 8						; size = 4
?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z PROC ; Gdiplus::StringFormat::SetTrimming, COMDAT
; _this$ = ecx

; 218  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 219  :         return SetStatus(DllExports::GdipSetStringFormatTrimming(
; 220  :             nativeFormat,
; 221  :             trimming
; 222  :         ));

	mov	eax, DWORD PTR _trimming$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetStringFormatTrimming@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::StringFormat::SetStatus

; 223  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z ENDP ; Gdiplus::StringFormat::SetTrimming
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newStatus$ = 8						; size = 4
?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC ; Gdiplus::StringFormat::SetStatus, COMDAT
; _this$ = ecx

; 268  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 269  :         if (newStatus == Ok)

	cmp	DWORD PTR _newStatus$[ebp], 0
	jne	SHORT $LN2@SetStatus

; 270  :         {
; 271  :             return Ok;

	xor	eax, eax
	jmp	SHORT $LN3@SetStatus

; 272  :         }
; 273  :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 274  :         {
; 275  :             return lastError = newStatus;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newStatus$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _newStatus$[ebp]
$LN3@SetStatus:

; 276  :         }
; 277  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@StringFormat@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::StringFormat::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusstringformat.h
;	COMDAT ?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ
_TEXT	SEGMENT
_genericTypographicStringFormat$ = -4			; size = 4
?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ PROC ; Gdiplus::StringFormat::GenericTypographic, COMDAT

; 326  : {

	push	ebp
	mov	ebp, esp
	push	ecx

; 327  :     StringFormat * genericTypographicStringFormat =
; 328  :         (StringFormat*)GenericTypographicStringFormatBuffer;

	mov	DWORD PTR _genericTypographicStringFormat$[ebp], OFFSET _GenericTypographicStringFormatBuffer

; 329  : 
; 330  :     genericTypographicStringFormat->lastError =
; 331  :         DllExports::GdipStringFormatGetGenericTypographic(
; 332  :             &genericTypographicStringFormat->nativeFormat
; 333  :         );

	mov	eax, DWORD PTR _genericTypographicStringFormat$[ebp]
	push	eax
	call	DWORD PTR __imp__GdipStringFormatGetGenericTypographic@4
	mov	ecx, DWORD PTR _genericTypographicStringFormat$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 334  : 
; 335  :     return genericTypographicStringFormat;

	mov	eax, DWORD PTR _genericTypographicStringFormat$[ebp]

; 336  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ ENDP ; Gdiplus::StringFormat::GenericTypographic
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ??0GraphicsPath@Gdiplus@@QAE@W4FillMode@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fillMode$ = 8						; size = 4
??0GraphicsPath@Gdiplus@@QAE@W4FillMode@1@@Z PROC	; Gdiplus::GraphicsPath::GraphicsPath, COMDAT
; _this$ = ecx

; 32   :     GraphicsPath(IN FillMode fillMode = FillModeAlternate)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 33   :     {
; 34   :         nativePath = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 35   :         lastResult = DllExports::GdipCreatePath(fillMode, &nativePath);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fillMode$[ebp]
	push	edx
	call	DWORD PTR __imp__GdipCreatePath@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 36   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0GraphicsPath@Gdiplus@@QAE@W4FillMode@1@@Z ENDP	; Gdiplus::GraphicsPath::GraphicsPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ??1GraphicsPath@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1GraphicsPath@Gdiplus@@QAE@XZ PROC			; Gdiplus::GraphicsPath::~GraphicsPath, COMDAT
; _this$ = ecx

; 65   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :         DllExports::GdipDeletePath(nativePath);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDeletePath@4

; 67   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1GraphicsPath@Gdiplus@@QAE@XZ ENDP			; Gdiplus::GraphicsPath::~GraphicsPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ?Clone@GraphicsPath@Gdiplus@@QBEPAV12@XZ
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T1 = -12						; size = 4
_clonepath$ = -8					; size = 4
_this$ = -4						; size = 4
?Clone@GraphicsPath@Gdiplus@@QBEPAV12@XZ PROC		; Gdiplus::GraphicsPath::Clone, COMDAT
; _this$ = ecx

; 70   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 71   :         GpPath *clonepath = NULL;

	mov	DWORD PTR _clonepath$[ebp], 0

; 72   : 
; 73   :         SetStatus(DllExports::GdipClonePath(nativePath, &clonepath));

	lea	eax, DWORD PTR _clonepath$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipClonePath@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::GraphicsPath::SetStatus

; 74   : 
; 75   :         return new GraphicsPath(clonepath);

	push	8
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN3@Clone
	mov	eax, DWORD PTR _clonepath$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z ; Gdiplus::GraphicsPath::GraphicsPath
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN4@Clone
$LN3@Clone:
	mov	DWORD PTR tv76[ebp], 0
$LN4@Clone:
	mov	eax, DWORD PTR tv76[ebp]

; 76   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clone@GraphicsPath@Gdiplus@@QBEPAV12@XZ ENDP		; Gdiplus::GraphicsPath::Clone
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ?AddString@GraphicsPath@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFontFamily@2@HMABVRectF@2@PBVStringFormat@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv76 = -8						; size = 4
tv69 = -4						; size = 4
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_family$ = 16						; size = 4
_style$ = 20						; size = 4
_emSize$ = 24						; size = 4
_layoutRect$ = 28					; size = 4
_format$ = 32						; size = 4
?AddString@GraphicsPath@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFontFamily@2@HMABVRectF@2@PBVStringFormat@2@@Z PROC ; Gdiplus::GraphicsPath::AddString, COMDAT
; _this$ = ecx

; 623  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 624  :         return SetStatus(DllExports::GdipAddPathString(
; 625  :             nativePath,
; 626  :             string,
; 627  :             length,
; 628  :             family ? family->nativeFamily : NULL,
; 629  :             style,
; 630  :             emSize,
; 631  :             &layoutRect,
; 632  :             format ? format->nativeFormat : NULL
; 633  :         ));

	cmp	DWORD PTR _format$[ebp], 0
	je	SHORT $LN3@AddString
	mov	eax, DWORD PTR _format$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@AddString
$LN3@AddString:
	mov	DWORD PTR tv69[ebp], 0
$LN4@AddString:
	cmp	DWORD PTR _family$[ebp], 0
	je	SHORT $LN5@AddString
	mov	edx, DWORD PTR _family$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@AddString
$LN5@AddString:
	mov	DWORD PTR tv76[ebp], 0
$LN6@AddString:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	edx, DWORD PTR _layoutRect$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR _emSize$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv76[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipAddPathString@32
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::GraphicsPath::SetStatus

; 634  :     }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
?AddString@GraphicsPath@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFontFamily@2@HMABVRectF@2@PBVStringFormat@2@@Z ENDP ; Gdiplus::GraphicsPath::AddString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativePath$ = 8					; size = 4
??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z PROC	; Gdiplus::GraphicsPath::GraphicsPath, COMDAT
; _this$ = ecx

; 878  :     GraphicsPath(GpPath* nativePath)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 879  :     {
; 880  :         lastResult = Ok;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 881  :         SetNativePath(nativePath);

	mov	ecx, DWORD PTR _nativePath$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z ; Gdiplus::GraphicsPath::SetNativePath

; 882  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0GraphicsPath@Gdiplus@@IAE@PAVGpPath@1@@Z ENDP	; Gdiplus::GraphicsPath::GraphicsPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_nativePath$ = 8					; size = 4
?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z PROC ; Gdiplus::GraphicsPath::SetNativePath, COMDAT
; _this$ = ecx

; 885  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 886  :         this->nativePath = nativePath;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _nativePath$[ebp]
	mov	DWORD PTR [eax], ecx

; 887  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativePath@GraphicsPath@Gdiplus@@IAEXPAVGpPath@2@@Z ENDP ; Gdiplus::GraphicsPath::SetNativePath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdipluspath.h
;	COMDAT ?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC ; Gdiplus::GraphicsPath::SetStatus, COMDAT
; _this$ = ecx

; 890  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 891  :         if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 892  :             return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 893  :         else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 894  :             return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 895  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@GraphicsPath@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::GraphicsPath::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z
_TEXT	SEGMENT
_graphics$ = -8						; size = 4
_this$ = -4						; size = 4
_image$ = 8						; size = 4
??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z PROC		; Gdiplus::Graphics::Graphics, COMDAT
; _this$ = ecx

; 94   :     Graphics(IN Image* image)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 95   :     {
; 96   :         GpGraphics *graphics = NULL;

	mov	DWORD PTR _graphics$[ebp], 0

; 97   : 
; 98   :         if (image != NULL)

	cmp	DWORD PTR _image$[ebp], 0
	je	SHORT $LN1@Graphics

; 99   :         {
; 100  :             lastResult = DllExports::GdipGetImageGraphicsContext(
; 101  :                                                                 image->nativeImage, &graphics);

	lea	eax, DWORD PTR _graphics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _image$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GdipGetImageGraphicsContext@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@Graphics:

; 102  :         }
; 103  :         SetNativeGraphics(graphics);

	mov	edx, DWORD PTR _graphics$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeGraphics@Graphics@Gdiplus@@IAEXPAVGpGraphics@2@@Z ; Gdiplus::Graphics::SetNativeGraphics

; 104  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z ENDP		; Gdiplus::Graphics::Graphics
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?SetCompositingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4CompositingMode@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_compositingMode$ = 8					; size = 4
?SetCompositingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4CompositingMode@2@@Z PROC ; Gdiplus::Graphics::SetCompositingMode, COMDAT
; _this$ = ecx

; 159  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 160  :         return SetStatus(DllExports::GdipSetCompositingMode(nativeGraphics,
; 161  :                                                             compositingMode));

	mov	eax, DWORD PTR _compositingMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetCompositingMode@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 162  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetCompositingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4CompositingMode@2@@Z ENDP ; Gdiplus::Graphics::SetCompositingMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newMode$ = 8						; size = 4
?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z PROC ; Gdiplus::Graphics::SetTextRenderingHint, COMDAT
; _this$ = ecx

; 193  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 194  :         return SetStatus(DllExports::GdipSetTextRenderingHint(nativeGraphics,
; 195  :                                                           newMode));

	mov	eax, DWORD PTR _newMode$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipSetTextRenderingHint@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 196  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z ENDP ; Gdiplus::Graphics::SetTextRenderingHint
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?DrawPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@PBVGraphicsPath@2@@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv73 = -8						; size = 4
tv69 = -4						; size = 4
_pen$ = 8						; size = 4
_path$ = 12						; size = 4
?DrawPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@PBVGraphicsPath@2@@Z PROC ; Gdiplus::Graphics::DrawPath, COMDAT
; _this$ = ecx

; 829  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 830  :         return SetStatus(DllExports::GdipDrawPath(nativeGraphics,
; 831  :                                                   pen ? pen->nativePen : NULL,
; 832  :                                                   path ? path->nativePath : NULL));

	cmp	DWORD PTR _path$[ebp], 0
	je	SHORT $LN3@DrawPath
	mov	eax, DWORD PTR _path$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@DrawPath
$LN3@DrawPath:
	mov	DWORD PTR tv69[ebp], 0
$LN4@DrawPath:
	cmp	DWORD PTR _pen$[ebp], 0
	je	SHORT $LN5@DrawPath
	mov	edx, DWORD PTR _pen$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN6@DrawPath
$LN5@DrawPath:
	mov	DWORD PTR tv73[ebp], 0
$LN6@DrawPath:
	mov	ecx, DWORD PTR tv69[ebp]
	push	ecx
	mov	edx, DWORD PTR tv73[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDrawPath@12
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 833  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?DrawPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@PBVGraphicsPath@2@@Z ENDP ; Gdiplus::Graphics::DrawPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_color$ = 8						; size = 4
?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z PROC ; Gdiplus::Graphics::Clear, COMDAT
; _this$ = ecx

; 948  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 949  :         return SetStatus(DllExports::GdipGraphicsClear(
; 950  :             nativeGraphics,
; 951  :             color.GetValue()));

	mov	ecx, DWORD PTR _color$[ebp]
	call	?GetValue@Color@Gdiplus@@QBEKXZ		; Gdiplus::Color::GetValue
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipGraphicsClear@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 952  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ENDP ; Gdiplus::Graphics::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@ABVRectF@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_brush$ = 8						; size = 4
_rect$ = 12						; size = 4
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@ABVRectF@2@@Z PROC ; Gdiplus::Graphics::FillRectangle, COMDAT
; _this$ = ecx

; 956  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 957  :         return FillRectangle(brush, rect.X, rect.Y, rect.Width, rect.Height);

	mov	eax, DWORD PTR _rect$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _rect$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _rect$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _rect$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _brush$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ; Gdiplus::Graphics::FillRectangle

; 958  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@ABVRectF@2@@Z ENDP ; Gdiplus::Graphics::FillRectangle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_brush$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_width$ = 20						; size = 4
_height$ = 24						; size = 4
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z PROC ; Gdiplus::Graphics::FillRectangle, COMDAT
; _this$ = ecx

; 965  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 966  :         return SetStatus(DllExports::GdipFillRectangle(nativeGraphics,
; 967  :                                                        brush->nativeBrush, x, y,
; 968  :                                                        width, height));

	push	ecx
	movss	xmm0, DWORD PTR _height$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _width$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _brush$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	DWORD PTR __imp__GdipFillRectangle@24
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 969  :     }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@MMMM@Z ENDP ; Gdiplus::Graphics::FillRectangle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?FillPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVGraphicsPath@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_brush$ = 8						; size = 4
_path$ = 12						; size = 4
?FillPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVGraphicsPath@2@@Z PROC ; Gdiplus::Graphics::FillPath, COMDAT
; _this$ = ecx

; 1138 :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1139 :         return SetStatus(DllExports::GdipFillPath(nativeGraphics,
; 1140 :                                                   brush->nativeBrush,
; 1141 :                                                   path->nativePath));

	mov	eax, DWORD PTR _path$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _brush$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipFillPath@12
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1142 :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?FillPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVGraphicsPath@2@@Z ENDP ; Gdiplus::Graphics::FillPath
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?DrawString@Graphics@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PBVBrush@2@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv78 = -12						; size = 4
tv73 = -8						; size = 4
tv69 = -4						; size = 4
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_font$ = 16						; size = 4
_layoutRect$ = 20					; size = 4
_stringFormat$ = 24					; size = 4
_brush$ = 28						; size = 4
?DrawString@Graphics@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PBVBrush@2@@Z PROC ; Gdiplus::Graphics::DrawString, COMDAT
; _this$ = ecx

; 1205 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1206 :         return SetStatus(DllExports::GdipDrawString(
; 1207 :             nativeGraphics,
; 1208 :             string,
; 1209 :             length,
; 1210 :             font ? font->nativeFont : NULL,
; 1211 :             &layoutRect,
; 1212 :             stringFormat ? stringFormat->nativeFormat : NULL,
; 1213 :             brush ? brush->nativeBrush : NULL
; 1214 :         ));

	cmp	DWORD PTR _brush$[ebp], 0
	je	SHORT $LN3@DrawString
	mov	eax, DWORD PTR _brush$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv69[ebp], ecx
	jmp	SHORT $LN4@DrawString
$LN3@DrawString:
	mov	DWORD PTR tv69[ebp], 0
$LN4@DrawString:
	cmp	DWORD PTR _stringFormat$[ebp], 0
	je	SHORT $LN5@DrawString
	mov	edx, DWORD PTR _stringFormat$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN6@DrawString
$LN5@DrawString:
	mov	DWORD PTR tv73[ebp], 0
$LN6@DrawString:
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN7@DrawString
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN8@DrawString
$LN7@DrawString:
	mov	DWORD PTR tv78[ebp], 0
$LN8@DrawString:
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	mov	ecx, DWORD PTR tv73[ebp]
	push	ecx
	mov	edx, DWORD PTR _layoutRect$[ebp]
	push	edx
	mov	eax, DWORD PTR tv78[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDrawString@28
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1215 :     }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?DrawString@Graphics@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PBVBrush@2@@Z ENDP ; Gdiplus::Graphics::DrawString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PAV52@PAH5@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
tv77 = -8						; size = 4
tv72 = -4						; size = 4
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_font$ = 16						; size = 4
_layoutRect$ = 20					; size = 4
_stringFormat$ = 24					; size = 4
_boundingBox$ = 28					; size = 4
_codepointsFitted$ = 32					; size = 4
_linesFilled$ = 36					; size = 4
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PAV52@PAH5@Z PROC ; Gdiplus::Graphics::MeasureString, COMDAT
; _this$ = ecx

; 1273 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1274 :         return SetStatus(DllExports::GdipMeasureString(
; 1275 :             nativeGraphics,
; 1276 :             string,
; 1277 :             length,
; 1278 :             font ? font->nativeFont : NULL,
; 1279 :             &layoutRect,
; 1280 :             stringFormat ? stringFormat->nativeFormat : NULL,
; 1281 :             boundingBox,
; 1282 :             codepointsFitted,
; 1283 :             linesFilled
; 1284 :         ));

	cmp	DWORD PTR _stringFormat$[ebp], 0
	je	SHORT $LN3@MeasureStr
	mov	eax, DWORD PTR _stringFormat$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv72[ebp], ecx
	jmp	SHORT $LN4@MeasureStr
$LN3@MeasureStr:
	mov	DWORD PTR tv72[ebp], 0
$LN4@MeasureStr:
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@MeasureStr
	mov	edx, DWORD PTR _font$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN6@MeasureStr
$LN5@MeasureStr:
	mov	DWORD PTR tv77[ebp], 0
$LN6@MeasureStr:
	mov	ecx, DWORD PTR _linesFilled$[ebp]
	push	ecx
	mov	edx, DWORD PTR _codepointsFitted$[ebp]
	push	edx
	mov	eax, DWORD PTR _boundingBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	edx, DWORD PTR _layoutRect$[ebp]
	push	edx
	mov	eax, DWORD PTR tv77[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipMeasureString@36
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1285 :     }

	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PAV52@PAH5@Z ENDP ; Gdiplus::Graphics::MeasureString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z
_TEXT	SEGMENT
_rect$ = -28						; size = 16
_this$ = -12						; size = 4
tv84 = -8						; size = 4
tv79 = -4						; size = 4
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_font$ = 16						; size = 4
_origin$ = 20						; size = 4
_stringFormat$ = 24					; size = 4
_boundingBox$ = 28					; size = 4
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z PROC ; Gdiplus::Graphics::MeasureString, COMDAT
; _this$ = ecx

; 1338 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx

; 1339 :         RectF rect(origin.X, origin.Y, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _origin$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _origin$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rect$[ebp]
	call	??0RectF@Gdiplus@@QAE@MMMM@Z		; Gdiplus::RectF::RectF

; 1340 : 
; 1341 :         return SetStatus(DllExports::GdipMeasureString(
; 1342 :             nativeGraphics,
; 1343 :             string,
; 1344 :             length,
; 1345 :             font ? font->nativeFont : NULL,
; 1346 :             &rect,
; 1347 :             stringFormat ? stringFormat->nativeFormat : NULL,
; 1348 :             boundingBox,
; 1349 :             NULL,
; 1350 :             NULL
; 1351 :         ));

	cmp	DWORD PTR _stringFormat$[ebp], 0
	je	SHORT $LN3@MeasureStr
	mov	edx, DWORD PTR _stringFormat$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv79[ebp], eax
	jmp	SHORT $LN4@MeasureStr
$LN3@MeasureStr:
	mov	DWORD PTR tv79[ebp], 0
$LN4@MeasureStr:
	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN5@MeasureStr
	mov	ecx, DWORD PTR _font$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN6@MeasureStr
$LN5@MeasureStr:
	mov	DWORD PTR tv84[ebp], 0
$LN6@MeasureStr:
	push	0
	push	0
	mov	eax, DWORD PTR _boundingBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	lea	edx, DWORD PTR _rect$[ebp]
	push	edx
	mov	eax, DWORD PTR tv84[ebp]
	push	eax
	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _string$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipMeasureString@36
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1352 :     }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z ENDP ; Gdiplus::Graphics::MeasureString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusgraphics.h
;	COMDAT ?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PAV52@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv74 = -4						; size = 4
_string$ = 8						; size = 4
_length$ = 12						; size = 4
_font$ = 16						; size = 4
_layoutRect$ = 20					; size = 4
_boundingBox$ = 24					; size = 4
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PAV52@@Z PROC ; Gdiplus::Graphics::MeasureString, COMDAT
; _this$ = ecx

; 1362 :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1363 :         return SetStatus(DllExports::GdipMeasureString(
; 1364 :             nativeGraphics,
; 1365 :             string,
; 1366 :             length,
; 1367 :             font ? font->nativeFont : NULL,
; 1368 :             &layoutRect,
; 1369 :             NULL,
; 1370 :             boundingBox,
; 1371 :             NULL,
; 1372 :             NULL
; 1373 :         ));

	cmp	DWORD PTR _font$[ebp], 0
	je	SHORT $LN3@MeasureStr
	mov	eax, DWORD PTR _font$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR tv74[ebp], ecx
	jmp	SHORT $LN4@MeasureStr
$LN3@MeasureStr:
	mov	DWORD PTR tv74[ebp], 0
$LN4@MeasureStr:
	push	0
	push	0
	mov	edx, DWORD PTR _boundingBox$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _layoutRect$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	push	ecx
	mov	edx, DWORD PTR _length$[ebp]
	push	edx
	mov	eax, DWORD PTR _string$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipMeasureString@36
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Graphics@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Graphics::SetStatus

; 1374 :     }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PAV52@@Z ENDP ; Gdiplus::Graphics::MeasureString
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfontfamily.h
;	COMDAT ??0FontFamily@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0FontFamily@Gdiplus@@QAE@XZ PROC			; Gdiplus::FontFamily::FontFamily, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0FontFamily@Gdiplus@@QAE@XZ ENDP			; Gdiplus::FontFamily::FontFamily
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfontfamily.h
;	COMDAT ??1FontFamily@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1FontFamily@Gdiplus@@QAE@XZ PROC			; Gdiplus::FontFamily::~FontFamily, COMDAT
; _this$ = ecx

; 112  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 113  :     DllExports::GdipDeleteFontFamily (nativeFamily);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDeleteFontFamily@4

; 114  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1FontFamily@Gdiplus@@QAE@XZ ENDP			; Gdiplus::FontFamily::~FontFamily
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfontfamily.h
;	COMDAT ?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC ; Gdiplus::FontFamily::SetStatus, COMDAT
; _this$ = ecx

; 205  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 206  :     if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 207  :         return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 208  :     else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 209  :         return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 210  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP ; Gdiplus::FontFamily::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ??0Font@Gdiplus@@QAE@PAUHDC__@@QAUHFONT__@@@Z
_TEXT	SEGMENT
_font$ = -72						; size = 4
_this$ = -68						; size = 4
_lf$1 = -64						; size = 60
__$ArrayPad$ = -4					; size = 4
_hdc$ = 8						; size = 4
_hfont$ = 12						; size = 4
??0Font@Gdiplus@@QAE@PAUHDC__@@QAUHFONT__@@@Z PROC	; Gdiplus::Font::Font, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 36   :     GpFont *font = NULL;

	mov	DWORD PTR _font$[ebp], 0

; 37   : 
; 38   :     if (hfont)

	cmp	DWORD PTR _hfont$[ebp], 0
	je	SHORT $LN4@Font

; 39   :     {
; 40   :         LOGFONTA lf;
; 41   : 
; 42   :         if(GetObjectA(hfont, sizeof(LOGFONTA), &lf))

	lea	eax, DWORD PTR _lf$1[ebp]
	push	eax
	push	60					; 0000003cH
	mov	ecx, DWORD PTR _hfont$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetObjectA@12
	test	eax, eax
	je	SHORT $LN3@Font

; 43   :             lastResult = DllExports::GdipCreateFontFromLogfontA(hdc, &lf, &font);

	lea	edx, DWORD PTR _font$[ebp]
	push	edx
	lea	eax, DWORD PTR _lf$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GdipCreateFontFromLogfontA@12
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 44   :         else

	jmp	SHORT $LN2@Font
$LN3@Font:

; 45   :             lastResult = DllExports::GdipCreateFontFromDC(hdc, &font);

	lea	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GdipCreateFontFromDC@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN2@Font:

; 46   :     }
; 47   :     else

	jmp	SHORT $LN1@Font
$LN4@Font:

; 48   :     {
; 49   :         lastResult = DllExports::GdipCreateFontFromDC(hdc, &font);

	lea	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hdc$[ebp]
	push	ecx
	call	DWORD PTR __imp__GdipCreateFontFromDC@8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN1@Font:

; 50   :     }
; 51   : 
; 52   :     SetNativeFont(font);

	mov	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z ; Gdiplus::Font::SetNativeFont

; 53   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
??0Font@Gdiplus@@QAE@PAUHDC__@@QAUHFONT__@@@Z ENDP	; Gdiplus::Font::Font
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ??0Font@Gdiplus@@QAE@PAUHDC__@@PBUtagLOGFONTW@@@Z
_TEXT	SEGMENT
_font$ = -8						; size = 4
_this$ = -4						; size = 4
_hdc$ = 8						; size = 4
_logfont$ = 12						; size = 4
??0Font@Gdiplus@@QAE@PAUHDC__@@PBUtagLOGFONTW@@@Z PROC	; Gdiplus::Font::Font, COMDAT
; _this$ = ecx

; 58   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 59   :     GpFont *font = NULL;

	mov	DWORD PTR _font$[ebp], 0

; 60   :     if (logfont)

	cmp	DWORD PTR _logfont$[ebp], 0
	je	SHORT $LN2@Font

; 61   :     {
; 62   :         lastResult = DllExports::GdipCreateFontFromLogfontW(hdc, logfont, &font);

	lea	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _logfont$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	call	DWORD PTR __imp__GdipCreateFontFromLogfontW@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 63   :     }
; 64   :     else

	jmp	SHORT $LN1@Font
$LN2@Font:

; 65   :     {
; 66   :         lastResult = DllExports::GdipCreateFontFromDC(hdc, &font);

	lea	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__GdipCreateFontFromDC@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN1@Font:

; 67   :     }
; 68   : 
; 69   :     SetNativeFont(font);

	mov	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z ; Gdiplus::Font::SetNativeFont

; 70   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0Font@Gdiplus@@QAE@PAUHDC__@@PBUtagLOGFONTW@@@Z ENDP	; Gdiplus::Font::Font
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ??1Font@Gdiplus@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Font@Gdiplus@@QAE@XZ PROC				; Gdiplus::Font::~Font, COMDAT
; _this$ = ecx

; 183  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 184  :     DllExports::GdipDeleteFont(nativeFont);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__GdipDeleteFont@4

; 185  : }

	mov	esp, ebp
	pop	ebp
	ret	0
??1Font@Gdiplus@@QAE@XZ ENDP				; Gdiplus::Font::~Font
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?IsAvailable@Font@Gdiplus@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv66 = -4						; size = 4
?IsAvailable@Font@Gdiplus@@QBEHXZ PROC			; Gdiplus::Font::IsAvailable, COMDAT
; _this$ = ecx

; 191  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 192  :     return (nativeFont ? TRUE : FALSE);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@IsAvailabl
	mov	DWORD PTR tv66[ebp], 1
	jmp	SHORT $LN4@IsAvailabl
$LN3@IsAvailabl:
	mov	DWORD PTR tv66[ebp], 0
$LN4@IsAvailabl:
	mov	eax, DWORD PTR tv66[ebp]

; 193  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?IsAvailable@Font@Gdiplus@@QBEHXZ ENDP			; Gdiplus::Font::IsAvailable
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?GetFamily@Font@Gdiplus@@QBE?AW4Status@2@PAVFontFamily@2@@Z
_TEXT	SEGMENT
_status$ = -8						; size = 4
_this$ = -4						; size = 4
_family$ = 8						; size = 4
?GetFamily@Font@Gdiplus@@QBE?AW4Status@2@PAVFontFamily@2@@Z PROC ; Gdiplus::Font::GetFamily, COMDAT
; _this$ = ecx

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 198  :     if (family == NULL)

	cmp	DWORD PTR _family$[ebp], 0
	jne	SHORT $LN1@GetFamily

; 199  :     {
; 200  :         return SetStatus(InvalidParameter);

	push	2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Font::SetStatus
	jmp	SHORT $LN2@GetFamily
$LN1@GetFamily:

; 201  :     }
; 202  : 
; 203  :     Status status = DllExports::GdipGetFamily(nativeFont, &(family->nativeFamily));

	mov	eax, DWORD PTR _family$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipGetFamily@8
	mov	DWORD PTR _status$[ebp], eax

; 204  :     family->SetStatus(status);

	mov	eax, DWORD PTR _status$[ebp]
	push	eax
	mov	ecx, DWORD PTR _family$[ebp]
	call	?SetStatus@FontFamily@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::FontFamily::SetStatus

; 205  : 
; 206  :     return SetStatus(status);

	mov	ecx, DWORD PTR _status$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Font::SetStatus
$LN2@GetFamily:

; 207  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetFamily@Font@Gdiplus@@QBE?AW4Status@2@PAVFontFamily@2@@Z ENDP ; Gdiplus::Font::GetFamily
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?GetStyle@Font@Gdiplus@@QBEHXZ
_TEXT	SEGMENT
_style$ = -8						; size = 4
_this$ = -4						; size = 4
?GetStyle@Font@Gdiplus@@QBEHXZ PROC			; Gdiplus::Font::GetStyle, COMDAT
; _this$ = ecx

; 211  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 212  :     INT style;
; 213  : 
; 214  :     SetStatus(DllExports::GdipGetFontStyle(nativeFont, &style));

	lea	eax, DWORD PTR _style$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipGetFontStyle@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Font::SetStatus

; 215  : 
; 216  :     return style;

	mov	eax, DWORD PTR _style$[ebp]

; 217  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetStyle@Font@Gdiplus@@QBEHXZ ENDP			; Gdiplus::Font::GetStyle
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?GetSize@Font@Gdiplus@@QBEMXZ
_TEXT	SEGMENT
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?GetSize@Font@Gdiplus@@QBEMXZ PROC			; Gdiplus::Font::GetSize, COMDAT
; _this$ = ecx

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 222  :     REAL size;
; 223  :     SetStatus(DllExports::GdipGetFontSize(nativeFont, &size));

	lea	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__GdipGetFontSize@8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ; Gdiplus::Font::SetStatus

; 224  :     return size;

	fld	DWORD PTR _size$[ebp]

; 225  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@Font@Gdiplus@@QBEMXZ ENDP			; Gdiplus::Font::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_Font$ = 8						; size = 4
?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z PROC	; Gdiplus::Font::SetNativeFont, COMDAT
; _this$ = ecx

; 266  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 267  :     nativeFont = Font;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _Font$[ebp]
	mov	DWORD PTR [eax], ecx

; 268  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetNativeFont@Font@Gdiplus@@IAEXPAVGpFont@2@@Z ENDP	; Gdiplus::Font::SetNativeFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusfont.h
;	COMDAT ?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_status$ = 8						; size = 4
?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z PROC	; Gdiplus::Font::SetStatus, COMDAT
; _this$ = ecx

; 278  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 279  :     if (status != Ok)

	cmp	DWORD PTR _status$[ebp], 0
	je	SHORT $LN2@SetStatus

; 280  :         return (lastResult = status);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _status$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	eax, DWORD PTR _status$[ebp]
	jmp	SHORT $LN3@SetStatus

; 281  :     else

	jmp	SHORT $LN3@SetStatus
$LN2@SetStatus:

; 282  :         return status;

	mov	eax, DWORD PTR _status$[ebp]
$LN3@SetStatus:

; 283  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStatus@Font@Gdiplus@@IBE?AW4Status@2@W432@@Z ENDP	; Gdiplus::Font::SetStatus
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBitmap@Gdiplus@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBitmap@Gdiplus@@UAEPAXI@Z PROC			; Gdiplus::Bitmap::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Bitmap@Gdiplus@@UAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBitmap@Gdiplus@@UAEPAXI@Z ENDP			; Gdiplus::Bitmap::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1Bitmap@Gdiplus@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1Bitmap@Gdiplus@@UAE@XZ PROC				; Gdiplus::Bitmap::~Bitmap, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Image@Gdiplus@@UAE@XZ		; Gdiplus::Image::~Image
	mov	esp, ebp
	pop	ebp
	ret	0
??1Bitmap@Gdiplus@@UAE@XZ ENDP				; Gdiplus::Bitmap::~Bitmap
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusbitmap.h
;	COMDAT ??0Bitmap@Gdiplus@@QAE@HHHHPAE@Z
_TEXT	SEGMENT
_bitmap$ = -8						; size = 4
_this$ = -4						; size = 4
_width$ = 8						; size = 4
_height$ = 12						; size = 4
_stride$ = 16						; size = 4
_format$ = 20						; size = 4
_scan0$ = 24						; size = 4
??0Bitmap@Gdiplus@@QAE@HHHHPAE@Z PROC			; Gdiplus::Bitmap::Bitmap, COMDAT
; _this$ = ecx

; 589  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0Image@Gdiplus@@IAE@XZ		; Gdiplus::Image::Image
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7Bitmap@Gdiplus@@6B@

; 590  :     GpBitmap *bitmap = NULL;

	mov	DWORD PTR _bitmap$[ebp], 0

; 591  : 
; 592  :     lastResult = DllExports::GdipCreateBitmapFromScan0(width,
; 593  :                                                        height,
; 594  :                                                        stride,
; 595  :                                                        format,
; 596  :                                                        scan0,
; 597  :                                                        &bitmap);

	lea	ecx, DWORD PTR _bitmap$[ebp]
	push	ecx
	mov	edx, DWORD PTR _scan0$[ebp]
	push	edx
	mov	eax, DWORD PTR _format$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stride$[ebp]
	push	ecx
	mov	edx, DWORD PTR _height$[ebp]
	push	edx
	mov	eax, DWORD PTR _width$[ebp]
	push	eax
	call	DWORD PTR __imp__GdipCreateBitmapFromScan0@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 598  : 
; 599  :     SetNativeImage(bitmap);

	mov	edx, DWORD PTR _bitmap$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetNativeImage@Image@Gdiplus@@IAEXPAVGpImage@2@@Z ; Gdiplus::Image::SetNativeImage

; 600  : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
??0Bitmap@Gdiplus@@QAE@HHHHPAE@Z ENDP			; Gdiplus::Bitmap::Bitmap
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?GetAlphaVal@@YAKI@Z
_TEXT	SEGMENT
_opacityLevel$ = 8					; size = 4
?GetAlphaVal@@YAKI@Z PROC				; GetAlphaVal, COMDAT

; 37   : {

	push	ebp
	mov	ebp, esp

; 38   :     return ((opacityLevel*255/100)&0xFF) << 24;

	imul	eax, DWORD PTR _opacityLevel$[ebp], 255
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	and	eax, 255				; 000000ffH
	shl	eax, 24					; 00000018H

; 39   : }

	pop	ebp
	ret	0
?GetAlphaVal@@YAKI@Z ENDP				; GetAlphaVal
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?DrawOutlineText@TextOutputSource@@AAEXPAVGraphics@Gdiplus@@AAVFont@3@ABVGraphicsPath@3@ABVStringFormat@3@PBVBrush@3@@Z
_TEXT	SEGMENT
tv153 = -60						; size = 8
tv143 = -52						; size = 8
_pen$ = -44						; size = 8
$T1 = -36						; size = 4
tv137 = -32						; size = 4
$T2 = -28						; size = 4
_tmpOpacity$ = -24					; size = 4
$T3 = -20						; size = 4
_outlinePath$ = -16					; size = 4
tv149 = -12						; size = 4
tv139 = -8						; size = 4
_this$ = -4						; size = 4
_graphics$ = 8						; size = 4
_font$ = 12						; size = 4
_path$ = 16						; size = 4
_format$ = 20						; size = 4
_brush$ = 24						; size = 4
?DrawOutlineText@TextOutputSource@@AAEXPAVGraphics@Gdiplus@@AAVFont@3@ABVGraphicsPath@3@ABVStringFormat@3@PBVBrush@3@@Z PROC ; TextOutputSource::DrawOutlineText, COMDAT
; _this$ = ecx

; 98   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 99   :                 
; 100  :         Gdiplus::GraphicsPath *outlinePath;
; 101  : 
; 102  :         outlinePath = path.Clone();

	mov	ecx, DWORD PTR _path$[ebp]
	call	?Clone@GraphicsPath@Gdiplus@@QBEPAV12@XZ ; Gdiplus::GraphicsPath::Clone
	mov	DWORD PTR _outlinePath$[ebp], eax

; 103  : 
; 104  :         // Outline color and size
; 105  :         UINT tmpOpacity = (UINT)((((float)opacity * 0.01f) * ((float)outlineOpacity * 0.01f)) * 100.0f);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR tv139[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv139[ebp]
	mov	edx, DWORD PTR tv139[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv143[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv143[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+100]
	mov	DWORD PTR tv149[ebp], ecx
	cvtsi2sd xmm1, DWORD PTR tv149[ebp]
	mov	edx, DWORD PTR tv149[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm1, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv153[ebp], xmm1
	cvtsd2ss xmm1, QWORD PTR tv153[ebp]
	mulss	xmm1, DWORD PTR __real@3c23d70a
	mulss	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@42c80000
	call	__ftoui3
	mov	DWORD PTR _tmpOpacity$[ebp], eax

; 106  :         Gdiplus::Pen pen(Gdiplus::Color(GetAlphaVal(tmpOpacity) | (outlineColor&0xFFFFFF)), outlineSize);

	mov	eax, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+92]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _tmpOpacity$[ebp]
	push	ecx
	call	?GetAlphaVal@@YAKI@Z			; GetAlphaVal
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+96]
	and	ecx, 16777215				; 00ffffffH
	or	eax, ecx
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	push	eax
	lea	ecx, DWORD PTR _pen$[ebp]
	call	??0Pen@Gdiplus@@QAE@ABVColor@1@M@Z	; Gdiplus::Pen::Pen

; 107  :         pen.SetLineJoin(Gdiplus::LineJoinRound);

	push	2
	lea	ecx, DWORD PTR _pen$[ebp]
	call	?SetLineJoin@Pen@Gdiplus@@QAE?AW4Status@2@W4LineJoin@2@@Z ; Gdiplus::Pen::SetLineJoin

; 108  : 
; 109  :         // Widen the outline
; 110  :         // It seems that Widen has a huge performance impact on DrawPath call, screw it! We're talking about freaking seconds in some extreme cases...
; 111  :         //outlinePath->Widen(&pen);
; 112  : 
; 113  :         // Draw the outline
; 114  :         graphics->DrawPath(&pen, outlinePath);

	mov	edx, DWORD PTR _outlinePath$[ebp]
	push	edx
	lea	eax, DWORD PTR _pen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?DrawPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVPen@2@PBVGraphicsPath@2@@Z ; Gdiplus::Graphics::DrawPath

; 115  : 
; 116  :         // Draw the text        
; 117  :         graphics->FillPath(brush, &path);

	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	mov	edx, DWORD PTR _brush$[ebp]
	push	edx
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?FillPath@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@PBVGraphicsPath@2@@Z ; Gdiplus::Graphics::FillPath

; 118  : 
; 119  :         delete outlinePath;

	mov	eax, DWORD PTR _outlinePath$[ebp]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN3@DrawOutlin
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	call	??_GGraphicsPath@Gdiplus@@QAEPAXI@Z
	mov	DWORD PTR tv137[ebp], eax
	jmp	SHORT $LN4@DrawOutlin
$LN3@DrawOutlin:
	mov	DWORD PTR tv137[ebp], 0
$LN4@DrawOutlin:

; 120  :     }

	lea	ecx, DWORD PTR _pen$[ebp]
	call	??1Pen@Gdiplus@@QAE@XZ			; Gdiplus::Pen::~Pen
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?DrawOutlineText@TextOutputSource@@AAEXPAVGraphics@Gdiplus@@AAVFont@3@ABVGraphicsPath@3@ABVStringFormat@3@PBVBrush@3@@Z ENDP ; TextOutputSource::DrawOutlineText
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?GetFont@TextOutputSource@@AAEPAUHFONT__@@XZ
_TEXT	SEGMENT
tv70 = -108						; size = 4
_hFont$ = -104						; size = 4
_this$ = -100						; size = 4
_lf$ = -96						; size = 92
__$ArrayPad$ = -4					; size = 4
?GetFont@TextOutputSource@@AAEPAUHFONT__@@XZ PROC	; TextOutputSource::GetFont, COMDAT
; _this$ = ecx

; 123  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 108				; 0000006cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 124  :         HFONT hFont = NULL;

	mov	DWORD PTR _hFont$[ebp], 0

; 125  : 
; 126  :         LOGFONT lf;
; 127  :         zero(&lf, sizeof(lf));

	push	92					; 0000005cH
	lea	eax, DWORD PTR _lf$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 128  :         lf.lfHeight = size;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR _lf$[ebp], edx

; 129  :         lf.lfWeight = bBold ? FW_BOLD : FW_DONTCARE;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	je	SHORT $LN5@GetFont
	mov	DWORD PTR tv70[ebp], 700		; 000002bcH
	jmp	SHORT $LN6@GetFont
$LN5@GetFont:
	mov	DWORD PTR tv70[ebp], 0
$LN6@GetFont:
	mov	edx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _lf$[ebp+16], edx

; 130  :         lf.lfItalic = bItalic;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+77]
	mov	BYTE PTR _lf$[ebp+20], cl

; 131  :         lf.lfUnderline = bUnderline;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [edx+78]
	mov	BYTE PTR _lf$[ebp+21], al

; 132  :         lf.lfQuality = ANTIALIASED_QUALITY;

	mov	BYTE PTR _lf$[ebp+26], 4

; 133  : 
; 134  :         if(strFont.IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN2@GetFont

; 135  :         {
; 136  :             scpy_n(lf.lfFaceName, strFont, 31);

	push	31					; 0000001fH
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _lf$[ebp+28]
	push	ecx
	call	DWORD PTR __imp_?scpy_n@@YGXPA_WPB_WI@Z

; 137  : 
; 138  :             hFont = CreateFontIndirect(&lf);

	lea	edx, DWORD PTR _lf$[ebp]
	push	edx
	call	DWORD PTR __imp__CreateFontIndirectW@4
	mov	DWORD PTR _hFont$[ebp], eax
$LN2@GetFont:

; 139  :         }
; 140  : 
; 141  :         if(!hFont)

	cmp	DWORD PTR _hFont$[ebp], 0
	jne	SHORT $LN1@GetFont

; 142  :         {
; 143  :             scpy_n(lf.lfFaceName, TEXT("Arial"), 31);

	push	31					; 0000001fH
	push	OFFSET ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
	lea	eax, DWORD PTR _lf$[ebp+28]
	push	eax
	call	DWORD PTR __imp_?scpy_n@@YGXPA_WPB_WI@Z

; 144  :             hFont = CreateFontIndirect(&lf);

	lea	ecx, DWORD PTR _lf$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateFontIndirectW@4
	mov	DWORD PTR _hFont$[ebp], eax
$LN1@GetFont:

; 145  :         }
; 146  : 
; 147  :         return hFont;

	mov	eax, DWORD PTR _hFont$[ebp]

; 148  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFont@TextOutputSource@@AAEPAUHFONT__@@XZ ENDP	; TextOutputSource::GetFont
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?UpdateCurrentText@TextOutputSource@@AAEXXZ
_TEXT	SEGMENT
_textFile$1 = -32					; size = 24
tv135 = -8						; size = 4
_this$ = -4						; size = 4
?UpdateCurrentText@TextOutputSource@@AAEXXZ PROC	; TextOutputSource::UpdateCurrentText, COMDAT
; _this$ = ecx

; 151  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	DWORD PTR _this$[ebp], ecx

; 152  :         if(bMonitoringFileChanges)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	SHORT $LN8@UpdateCurr

; 153  :         {
; 154  :             OSMonitorFileDestroy(fileChangeMonitor);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	call	DWORD PTR __imp_?OSMonitorFileDestroy@@YGXPAUOSFileChangeData@@@Z

; 155  :             fileChangeMonitor = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+144], 0

; 156  : 
; 157  :             bMonitoringFileChanges = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+141], 0
$LN8@UpdateCurr:

; 158  :         }
; 159  : 
; 160  :         if(mode == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN7@UpdateCurr

; 161  :             strCurrentText = strText;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	jmp	$LN9@UpdateCurr
$LN7@UpdateCurr:

; 162  : 
; 163  :         else if(mode == 1 && strFile.IsValid())

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+28], 1
	jne	$LN5@UpdateCurr
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	$LN5@UpdateCurr

; 164  :         {
; 165  :             XFile textFile;

	lea	ecx, DWORD PTR _textFile$1[ebp]
	call	DWORD PTR __imp_??0XFile@@QAE@XZ

; 166  :             if(textFile.Open(strFile, XFILE_READ | XFILE_SHARED, XFILE_OPENEXISTING))

	push	3
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _textFile$1[ebp]
	call	DWORD PTR __imp_?Open@XFile@@QAEHPB_WKK@Z
	test	eax, eax
	je	SHORT $LN4@UpdateCurr

; 167  :             {
; 168  :                 textFile.ReadFileToString(strCurrentText);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	lea	ecx, DWORD PTR _textFile$1[ebp]
	call	DWORD PTR __imp_?ReadFileToString@XFile@@QAEXAAVString@@@Z

; 169  :             }
; 170  :             else

	jmp	SHORT $LN3@UpdateCurr
$LN4@UpdateCurr:

; 171  :             {
; 172  :                 strCurrentText = TEXT("");

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 173  :                 AppWarning(TEXT("TextSource::UpdateTexture: could not open specified file (invalid file name or access violation)"));

	push	OFFSET ??_C@_1MC@FLMNODJI@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN3@UpdateCurr:

; 174  :             }
; 175  : 
; 176  :             if (fileChangeMonitor = OSMonitorFileStart (strFile))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	sub	esp, 8
	mov	edx, esp
	push	ecx
	mov	ecx, edx
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	call	DWORD PTR __imp_?OSMonitorFileStart@@YGPAUOSFileChangeData@@VString@@_N@Z
	mov	DWORD PTR tv135[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv135[ebp]
	mov	DWORD PTR [eax+144], ecx
	cmp	DWORD PTR tv135[ebp], 0
	je	SHORT $LN2@UpdateCurr

; 177  :                 bMonitoringFileChanges = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+141], 1
$LN2@UpdateCurr:

; 178  :         }

	lea	ecx, DWORD PTR _textFile$1[ebp]
	call	DWORD PTR __imp_??1XFile@@QAE@XZ

; 179  :         else

	jmp	SHORT $LN9@UpdateCurr
$LN5@UpdateCurr:

; 180  :             strCurrentText = TEXT("");

	push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
$LN9@UpdateCurr:

; 181  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateCurrentText@TextOutputSource@@AAEXXZ ENDP	; TextOutputSource::UpdateCurrentText
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?SetStringFormat@TextOutputSource@@AAEXAAVStringFormat@Gdiplus@@@Z
_TEXT	SEGMENT
tv79 = -12						; size = 4
_formatFlags$ = -8					; size = 4
_this$ = -4						; size = 4
_format$ = 8						; size = 4
?SetStringFormat@TextOutputSource@@AAEXAAVStringFormat@Gdiplus@@@Z PROC ; TextOutputSource::SetStringFormat, COMDAT
; _this$ = ecx

; 184  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 185  :         UINT formatFlags;
; 186  : 
; 187  :         formatFlags = Gdiplus::StringFormatFlagsNoFitBlackBox
; 188  :                     | Gdiplus::StringFormatFlagsMeasureTrailingSpaces;

	mov	DWORD PTR _formatFlags$[ebp], 2052	; 00000804H

; 189  : 
; 190  : 
; 191  :         if(bVertical)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+79]
	test	ecx, ecx
	je	SHORT $LN17@SetStringF

; 192  :             formatFlags |= Gdiplus::StringFormatFlagsDirectionVertical
; 193  :                          | Gdiplus::StringFormatFlagsDirectionRightToLeft;

	mov	edx, DWORD PTR _formatFlags$[ebp]
	or	edx, 3
	mov	DWORD PTR _formatFlags$[ebp], edx
$LN17@SetStringF:

; 194  : 
; 195  :         format.SetFormatFlags(formatFlags);

	mov	eax, DWORD PTR _formatFlags$[ebp]
	push	eax
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z ; Gdiplus::StringFormat::SetFormatFlags

; 196  :         format.SetTrimming(Gdiplus::StringTrimmingWord);

	push	2
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z ; Gdiplus::StringFormat::SetTrimming

; 197  : 
; 198  :         if(bUseExtents && bWrap)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	$LN16@SetStringF
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	$LN16@SetStringF

; 199  :             switch(align)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	mov	DWORD PTR tv79[ebp], eax
	cmp	DWORD PTR tv79[ebp], 0
	je	SHORT $LN13@SetStringF
	cmp	DWORD PTR tv79[ebp], 1
	je	SHORT $LN10@SetStringF
	cmp	DWORD PTR tv79[ebp], 2
	je	SHORT $LN7@SetStringF
	jmp	SHORT $LN14@SetStringF
$LN13@SetStringF:

; 200  :             {
; 201  :                 case 0:
; 202  :                     if(bVertical)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN12@SetStringF

; 203  :                         format.SetLineAlignment(Gdiplus::StringAlignmentFar);

	push	2
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment

; 204  :                     else

	jmp	SHORT $LN11@SetStringF
$LN12@SetStringF:

; 205  :                         format.SetAlignment(Gdiplus::StringAlignmentNear);

	push	0
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetAlignment
$LN11@SetStringF:

; 206  :                     break;

	jmp	SHORT $LN14@SetStringF
$LN10@SetStringF:

; 207  :                 case 1:
; 208  :                     if(bVertical)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+79]
	test	ecx, ecx
	je	SHORT $LN9@SetStringF

; 209  :                         format.SetLineAlignment(Gdiplus::StringAlignmentCenter);

	push	1
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment

; 210  :                     else

	jmp	SHORT $LN8@SetStringF
$LN9@SetStringF:

; 211  :                         format.SetAlignment(Gdiplus::StringAlignmentCenter);

	push	1
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetAlignment
$LN8@SetStringF:

; 212  :                     break;

	jmp	SHORT $LN14@SetStringF
$LN7@SetStringF:

; 213  :                 case 2:
; 214  :                     if(bVertical)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+79]
	test	eax, eax
	je	SHORT $LN6@SetStringF

; 215  :                         format.SetLineAlignment(Gdiplus::StringAlignmentNear);

	push	0
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment

; 216  :                     else

	jmp	SHORT $LN14@SetStringF
$LN6@SetStringF:

; 217  :                         format.SetAlignment(Gdiplus::StringAlignmentFar);

	push	2
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetAlignment
$LN14@SetStringF:

; 218  :                     break;
; 219  :             }
; 220  :         else if(bUseExtents && bVertical && !bWrap)

	jmp	SHORT $LN18@SetStringF
$LN16@SetStringF:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	SHORT $LN3@SetStringF
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+79]
	test	ecx, ecx
	je	SHORT $LN3@SetStringF
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+116]
	test	eax, eax
	jne	SHORT $LN3@SetStringF

; 221  :                 format.SetLineAlignment(Gdiplus::StringAlignmentFar);

	push	2
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment
	jmp	SHORT $LN18@SetStringF
$LN3@SetStringF:

; 222  :         else if(bVertical)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN18@SetStringF

; 223  :                 format.SetLineAlignment(Gdiplus::StringAlignmentFar);

	push	2
	mov	ecx, DWORD PTR _format$[ebp]
	call	?SetLineAlignment@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringAlignment@2@@Z ; Gdiplus::StringFormat::SetLineAlignment
$LN18@SetStringF:

; 224  : 
; 225  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetStringFormat@TextOutputSource@@AAEXAAVStringFormat@Gdiplus@@@Z ENDP ; TextOutputSource::SetStringFormat
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?ProcessScrollMode@TextOutputSource@@AAEMPAVGraphics@Gdiplus@@PAVFont@3@AAVRectF@3@PAVStringFormat@3@@Z
_TEXT	SEGMENT
_l2$ = -60						; size = 16
_boundingBox$ = -44					; size = 16
_strList$ = -28						; size = 8
$T1 = -20						; size = 4
$T2 = -16						; size = 4
_offset$ = -12						; size = 4
_i$3 = -8						; size = 4
_this$ = -4						; size = 4
_graphics$ = 8						; size = 4
_font$ = 12						; size = 4
_layoutBox$ = 16					; size = 4
_format$ = 20						; size = 4
?ProcessScrollMode@TextOutputSource@@AAEMPAVGraphics@Gdiplus@@PAVFont@3@AAVRectF@3@PAVStringFormat@3@@Z PROC ; TextOutputSource::ProcessScrollMode, COMDAT
; _this$ = ecx

; 228  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 229  :         StringList strList;

	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_??0StringList@@QAE@XZ

; 230  :         Gdiplus::RectF boundingBox;

	lea	ecx, DWORD PTR _boundingBox$[ebp]
	call	??0RectF@Gdiplus@@QAE@XZ		; Gdiplus::RectF::RectF

; 231  :         
; 232  :         float offset = layoutBox.Height;

	mov	eax, DWORD PTR _layoutBox$[ebp]
	movss	xmm0, DWORD PTR [eax+12]
	movss	DWORD PTR _offset$[ebp], xmm0

; 233  : 
; 234  :         Gdiplus::RectF l2(0.0f ,0.0f , layoutBox.Width, 32000.0f); // Really, it needs to be OVER9000

	push	ecx
	movss	xmm0, DWORD PTR __real@46fa0000
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _layoutBox$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _l2$[ebp]
	call	??0RectF@Gdiplus@@QAE@MMMM@Z		; Gdiplus::RectF::RectF

; 235  : 
; 236  :         strCurrentText.FindReplace(L"\n\r", L"\n");

	push	OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
	push	OFFSET ??_C@_15BNMMKFOH@?$AA?6?$AA?$AN?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z

; 237  :         strCurrentText.GetTokenList(strList,'\n');

	push	1
	push	10					; 0000000aH
	lea	edx, DWORD PTR _strList$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?GetTokenList@String@@QBEXAAVStringList@@_WH@Z

; 238  : 
; 239  :         if(strList.Num() != 0)

	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	test	eax, eax
	je	SHORT $LN7@ProcessScr

; 240  :             strCurrentText.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ

; 241  :         else 

	jmp	SHORT $LN6@ProcessScr
$LN7@ProcessScr:

; 242  :             return 0.0f;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR $T2[ebp], xmm0
	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	fld	DWORD PTR $T2[ebp]
	jmp	$LN8@ProcessScr
$LN6@ProcessScr:

; 243  : 
; 244  :         for(int i = strList.Num() - 1; i >= 0; i--)

	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
	jmp	SHORT $LN5@ProcessScr
$LN4@ProcessScr:
	mov	eax, DWORD PTR _i$3[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN5@ProcessScr:
	cmp	DWORD PTR _i$3[ebp], 0
	jl	$LN3@ProcessScr

; 245  :         {
; 246  :             strCurrentText.InsertString(0, TEXT("\n"));

	push	OFFSET ??_C@_13LBAGMAIH@?$AA?6?$AA?$AA@
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?InsertString@String@@QAEXIPB_W@Z

; 247  :             strCurrentText.InsertString(0, strList.GetElement((unsigned int)i).Array());

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_?GetElement@?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?InsertString@String@@QAEXIPB_W@Z

; 248  : 
; 249  :             if(strCurrentText.IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN2@ProcessScr

; 250  :             {
; 251  :                 graphics->MeasureString(strCurrentText, -1, font, l2, &boundingBox);

	lea	edx, DWORD PTR _boundingBox$[ebp]
	push	edx
	lea	eax, DWORD PTR _l2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _font$[ebp]
	push	ecx
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PAV52@@Z ; Gdiplus::Graphics::MeasureString

; 252  :                 offset = layoutBox.Height - boundingBox.Height;

	mov	edx, DWORD PTR _layoutBox$[ebp]
	movss	xmm0, DWORD PTR [edx+12]
	subss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	movss	DWORD PTR _offset$[ebp], xmm0
$LN2@ProcessScr:

; 253  :             }
; 254  :             
; 255  :             if(offset < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN1@ProcessScr

; 256  :                 break;

	jmp	SHORT $LN3@ProcessScr
$LN1@ProcessScr:

; 257  :         }

	jmp	$LN4@ProcessScr
$LN3@ProcessScr:

; 258  : 
; 259  :         return offset;

	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR $T1[ebp], xmm0
	lea	ecx, DWORD PTR _strList$[ebp]
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	fld	DWORD PTR $T1[ebp]
$LN8@ProcessScr:

; 260  :     }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?ProcessScrollMode@TextOutputSource@@AAEMPAVGraphics@Gdiplus@@PAVFont@3@AAVRectF@3@PAVStringFormat@3@@Z ENDP ; TextOutputSource::ProcessScrollMode
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?UpdateTexture@TextOutputSource@@AAEXXZ
_TEXT	SEGMENT
$T1 = -336						; size = 8
_bmp$2 = -328						; size = 16
$T3 = -312						; size = 4
tv632 = -308						; size = 8
$T4 = -300						; size = 4
tv622 = -296						; size = 8
$T5 = -288						; size = 4
$T6 = -284						; size = 4
tv503 = -280						; size = 4
$T7 = -276						; size = 4
$T8 = -272						; size = 4
tv213 = -268						; size = 4
tv528 = -264						; size = 4
tv508 = -260						; size = 4
_fontFamily$9 = -256					; size = 8
_hBitmap$10 = -248					; size = 4
_path$11 = -244						; size = 8
$T12 = -236						; size = 4
tv411 = -232						; size = 4
$T13 = -228						; size = 4
$T14 = -224						; size = 4
$T15 = -220						; size = 4
tv393 = -216						; size = 4
_strLength$16 = -212					; size = 4
$T17 = -208						; size = 4
tv628 = -204						; size = 4
tv364 = -200						; size = 4
tv618 = -196						; size = 4
_bkBrush$18 = -192					; size = 4
tv94 = -188						; size = 4
$T19 = -184						; size = 4
tv328 = -180						; size = 4
tv344 = -176						; size = 4
_hTempDC$20 = -172					; size = 4
$T21 = -168						; size = 4
$T22 = -164						; size = 4
$T23 = -160						; size = 4
_layoutBox$ = -156					; size = 16
$T24 = -140						; size = 4
$T25 = -136						; size = 4
_bkColor$26 = -132					; size = 4
$T27 = -128						; size = 4
_lpBits$28 = -124					; size = 4
_offset$ = -120						; size = 4
_brush$29 = -116					; size = 4
_format$ = -112						; size = 8
_hdc$ = -104						; size = 4
_font$ = -100						; size = 8
_hFont$ = -92						; size = 4
_bih$30 = -88						; size = 4
_boundingBox$ = -84					; size = 16
_stat$ = -68						; size = 4
_graphics$ = -64					; size = 4
_textSize$ = -60					; size = 8
_this$ = -52						; size = 4
_bi$31 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
?UpdateTexture@TextOutputSource@@AAEXXZ PROC		; TextOutputSource::UpdateTexture, COMDAT
; _this$ = ecx

; 263  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 264  :         HFONT hFont;
; 265  :         Gdiplus::Status stat;
; 266  :         Gdiplus::RectF layoutBox;

	lea	ecx, DWORD PTR _layoutBox$[ebp]
	call	??0RectF@Gdiplus@@QAE@XZ		; Gdiplus::RectF::RectF

; 267  :         SIZE textSize;
; 268  :         float offset;
; 269  : 
; 270  :         Gdiplus::RectF boundingBox(0.0f, 0.0f, 32.0f, 32.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _boundingBox$[ebp]
	call	??0RectF@Gdiplus@@QAE@MMMM@Z		; Gdiplus::RectF::RectF

; 271  : 
; 272  :         UpdateCurrentText();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateCurrentText@TextOutputSource@@AAEXXZ ; TextOutputSource::UpdateCurrentText

; 273  : 
; 274  :         hFont = GetFont();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetFont@TextOutputSource@@AAEPAUHFONT__@@XZ ; TextOutputSource::GetFont
	mov	DWORD PTR _hFont$[ebp], eax

; 275  :         if(!hFont)

	cmp	DWORD PTR _hFont$[ebp], 0
	jne	SHORT $LN45@UpdateText

; 276  :             return;

	jmp	$LN46@UpdateText
$LN45@UpdateText:

; 277  : 
; 278  :         Gdiplus::StringFormat format(Gdiplus::StringFormat::GenericTypographic());

	call	?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ ; Gdiplus::StringFormat::GenericTypographic
	push	eax
	lea	ecx, DWORD PTR _format$[ebp]
	call	??0StringFormat@Gdiplus@@QAE@PBV01@@Z	; Gdiplus::StringFormat::StringFormat

; 279  : 
; 280  :         SetStringFormat(format);

	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStringFormat@TextOutputSource@@AAEXAAVStringFormat@Gdiplus@@@Z ; TextOutputSource::SetStringFormat

; 281  : 
; 282  :         HDC hdc = CreateCompatibleDC(NULL);

	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR _hdc$[ebp], eax

; 283  : 
; 284  :         Gdiplus::Font font(hdc, hFont);

	mov	ecx, DWORD PTR _hFont$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hdc$[ebp]
	push	edx
	lea	ecx, DWORD PTR _font$[ebp]
	call	??0Font@Gdiplus@@QAE@PAUHDC__@@QAUHFONT__@@@Z ; Gdiplus::Font::Font

; 285  :         Gdiplus::Graphics *graphics = new Gdiplus::Graphics(hdc);

	push	8
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T22[ebp], eax
	cmp	DWORD PTR $T22[ebp], 0
	je	SHORT $LN48@UpdateText
	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T22[ebp]
	call	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z	; Gdiplus::Graphics::Graphics
	mov	DWORD PTR tv94[ebp], eax
	jmp	SHORT $LN49@UpdateText
$LN48@UpdateText:
	mov	DWORD PTR tv94[ebp], 0
$LN49@UpdateText:
	mov	ecx, DWORD PTR tv94[ebp]
	mov	DWORD PTR _graphics$[ebp], ecx

; 286  : 
; 287  :         graphics->SetTextRenderingHint(Gdiplus::TextRenderingHintAntiAlias);

	push	4
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z ; Gdiplus::Graphics::SetTextRenderingHint

; 288  : 
; 289  :         if(strCurrentText.IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	$LN35@UpdateText

; 290  :         {
; 291  :             // Apparently, \0 is not always a zero-width character?
; 292  :             // Not including it as part of the string measurement may cut off the final word
; 293  :             // on the line when using certain fonts together with outlines and wrapping.
; 294  :             INT strLength = strCurrentText.Length() + 1;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	add	eax, 1
	mov	DWORD PTR _strLength$16[ebp], eax

; 295  :             if(bUseExtents && bWrap)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+104]
	test	eax, eax
	je	$LN43@UpdateText
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+116]
	test	edx, edx
	je	$LN43@UpdateText

; 296  :             {
; 297  :                 layoutBox.X = layoutBox.Y = 0;

	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR _layoutBox$[ebp+4], xmm0
	movss	xmm0, DWORD PTR _layoutBox$[ebp+4]
	movss	DWORD PTR _layoutBox$[ebp], xmm0

; 298  :                 layoutBox.Width  = float(extentWidth);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	mov	DWORD PTR tv618[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv618[ebp]
	mov	edx, DWORD PTR tv618[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv622[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv622[ebp]
	movss	DWORD PTR _layoutBox$[ebp+8], xmm0

; 299  :                 layoutBox.Height = float(extentHeight);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR tv628[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv628[ebp]
	mov	edx, DWORD PTR tv628[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv632[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv632[ebp]
	movss	DWORD PTR _layoutBox$[ebp+12], xmm0

; 300  : 
; 301  :                 if(bUseOutline)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	je	SHORT $LN42@UpdateText

; 302  :                 {
; 303  :                     //Note: since there's no path widening in DrawOutlineText the padding is half than what it was supposed to be.
; 304  :                     layoutBox.Width  -= outlineSize;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _layoutBox$[ebp+8]
	subss	xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR _layoutBox$[ebp+8], xmm0

; 305  :                     layoutBox.Height -= outlineSize;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _layoutBox$[ebp+12]
	subss	xmm0, DWORD PTR [eax+92]
	movss	DWORD PTR _layoutBox$[ebp+12], xmm0
$LN42@UpdateText:

; 306  :                 }
; 307  : 
; 308  :                 if(!bVertical && bScrollMode)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	jne	SHORT $LN41@UpdateText
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+117]
	test	ecx, ecx
	je	SHORT $LN41@UpdateText

; 309  :                 {
; 310  :                     offset = ProcessScrollMode(graphics, &font, layoutBox, &format);

	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _layoutBox$[ebp]
	push	eax
	lea	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _graphics$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ProcessScrollMode@TextOutputSource@@AAEMPAVGraphics@Gdiplus@@PAVFont@3@AAVRectF@3@PAVStringFormat@3@@Z ; TextOutputSource::ProcessScrollMode
	fstp	DWORD PTR _offset$[ebp]

; 311  : 
; 312  :                     boundingBox = layoutBox;

	mov	eax, DWORD PTR _layoutBox$[ebp]
	mov	DWORD PTR _boundingBox$[ebp], eax
	mov	ecx, DWORD PTR _layoutBox$[ebp+4]
	mov	DWORD PTR _boundingBox$[ebp+4], ecx
	mov	edx, DWORD PTR _layoutBox$[ebp+8]
	mov	DWORD PTR _boundingBox$[ebp+8], edx
	mov	eax, DWORD PTR _layoutBox$[ebp+12]
	mov	DWORD PTR _boundingBox$[ebp+12], eax

; 313  :                     boundingBox.Y = offset;

	movss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR _boundingBox$[ebp+4], xmm0

; 314  :                     if(offset < 0)

	movss	xmm0, DWORD PTR __real@00000000
	comiss	xmm0, DWORD PTR _offset$[ebp]
	jbe	SHORT $LN40@UpdateText

; 315  :                         boundingBox.Height -= offset;

	movss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	subss	xmm0, DWORD PTR _offset$[ebp]
	movss	DWORD PTR _boundingBox$[ebp+12], xmm0
$LN40@UpdateText:

; 316  :                 }
; 317  :                 else

	jmp	SHORT $LN38@UpdateText
$LN41@UpdateText:

; 318  :                 {
; 319  :                     stat = graphics->MeasureString(strCurrentText, strLength, &font, layoutBox, &format, &boundingBox);

	push	0
	push	0
	lea	ecx, DWORD PTR _boundingBox$[ebp]
	push	ecx
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _layoutBox$[ebp]
	push	eax
	lea	ecx, DWORD PTR _font$[ebp]
	push	ecx
	mov	edx, DWORD PTR _strLength$16[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PAV52@PAH5@Z ; Gdiplus::Graphics::MeasureString
	mov	DWORD PTR _stat$[ebp], eax

; 320  :                     if(stat != Gdiplus::Ok)

	cmp	DWORD PTR _stat$[ebp], 0
	je	SHORT $LN38@UpdateText

; 321  :                         AppWarning(TEXT("TextSource::UpdateTexture: Gdiplus::Graphics::MeasureString failed: %u"), (int)stat);

	mov	eax, DWORD PTR _stat$[ebp]
	push	eax
	push	OFFSET ??_C@_1IO@LNGIDPGF@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAd?$AAi?$AAp?$AAl@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN38@UpdateText:

; 322  :                 }
; 323  :             }
; 324  :             else

	jmp	$LN35@UpdateText
$LN43@UpdateText:

; 325  :             {
; 326  :                 stat = graphics->MeasureString(strCurrentText, strLength, &font, Gdiplus::PointF(0.0f, 0.0f), &format, &boundingBox);

	lea	ecx, DWORD PTR _boundingBox$[ebp]
	push	ecx
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0PointF@Gdiplus@@QAE@MM@Z		; Gdiplus::PointF::PointF
	push	eax
	lea	eax, DWORD PTR _font$[ebp]
	push	eax
	mov	ecx, DWORD PTR _strLength$16[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z ; Gdiplus::Graphics::MeasureString
	mov	DWORD PTR _stat$[ebp], eax

; 327  :                 if(stat != Gdiplus::Ok)

	cmp	DWORD PTR _stat$[ebp], 0
	je	SHORT $LN36@UpdateText

; 328  :                     AppWarning(TEXT("TextSource::UpdateTexture: Gdiplus::Graphics::MeasureString failed: %u"), (int)stat);

	mov	edx, DWORD PTR _stat$[ebp]
	push	edx
	push	OFFSET ??_C@_1IO@LNGIDPGF@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAd?$AAi?$AAp?$AAl@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN36@UpdateText:

; 329  :                 if(bUseOutline)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	je	SHORT $LN35@UpdateText

; 330  :                 {
; 331  :                     //Note: since there's no path widening in DrawOutlineText the padding is half than what it was supposed to be.
; 332  :                     boundingBox.Width  += outlineSize;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _boundingBox$[ebp+8]
	addss	xmm0, DWORD PTR [edx+92]
	movss	DWORD PTR _boundingBox$[ebp+8], xmm0

; 333  :                     boundingBox.Height += outlineSize;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	addss	xmm0, DWORD PTR [eax+92]
	movss	DWORD PTR _boundingBox$[ebp+12], xmm0
$LN35@UpdateText:

; 334  : 				}
; 335  : 			}
; 336  :         }
; 337  : 
; 338  :         delete graphics;

	mov	ecx, DWORD PTR _graphics$[ebp]
	mov	DWORD PTR $T12[ebp], ecx
	mov	edx, DWORD PTR $T12[ebp]
	mov	DWORD PTR $T15[ebp], edx
	cmp	DWORD PTR $T15[ebp], 0
	je	SHORT $LN50@UpdateText
	push	1
	mov	ecx, DWORD PTR $T15[ebp]
	call	??_GGraphics@Gdiplus@@QAEPAXI@Z
	mov	DWORD PTR tv213[ebp], eax
	jmp	SHORT $LN51@UpdateText
$LN50@UpdateText:
	mov	DWORD PTR tv213[ebp], 0
$LN51@UpdateText:

; 339  : 
; 340  :         DeleteDC(hdc);

	mov	eax, DWORD PTR _hdc$[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 341  :         hdc = NULL;

	mov	DWORD PTR _hdc$[ebp], 0

; 342  :         DeleteObject(hFont);

	mov	ecx, DWORD PTR _hFont$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4

; 343  : 
; 344  :         if(bVertical)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+79]
	test	eax, eax
	je	SHORT $LN34@UpdateText

; 345  :         {
; 346  :             if(boundingBox.Width<size)

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+56]
	comiss	xmm0, DWORD PTR _boundingBox$[ebp+8]
	jbe	SHORT $LN33@UpdateText

; 347  :             {
; 348  :                 textSize.cx = size;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _textSize$[ebp], eax

; 349  :                 boundingBox.Width = float(size);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR _boundingBox$[ebp+8], xmm0

; 350  :             }
; 351  :             else

	jmp	SHORT $LN32@UpdateText
$LN33@UpdateText:

; 352  :                 textSize.cx = LONG(boundingBox.Width + EPSILON);

	movss	xmm0, DWORD PTR _boundingBox$[ebp+8]
	addss	xmm0, DWORD PTR __real@38d1b717
	cvttss2si edx, xmm0
	mov	DWORD PTR _textSize$[ebp], edx
$LN32@UpdateText:

; 353  : 
; 354  :             textSize.cy = LONG(boundingBox.Height + EPSILON);

	movss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	addss	xmm0, DWORD PTR __real@38d1b717
	cvttss2si eax, xmm0
	mov	DWORD PTR _textSize$[ebp+4], eax

; 355  :         }
; 356  :         else

	jmp	SHORT $LN31@UpdateText
$LN34@UpdateText:

; 357  :         {
; 358  :             if(boundingBox.Height<size)

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+56]
	comiss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	jbe	SHORT $LN30@UpdateText

; 359  :             {
; 360  :                 textSize.cy = size;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	mov	DWORD PTR _textSize$[ebp+4], eax

; 361  :                 boundingBox.Height = float(size);

	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+56]
	movss	DWORD PTR _boundingBox$[ebp+12], xmm0

; 362  :             }
; 363  :             else

	jmp	SHORT $LN29@UpdateText
$LN30@UpdateText:

; 364  :                 textSize.cy = LONG(boundingBox.Height + EPSILON);

	movss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	addss	xmm0, DWORD PTR __real@38d1b717
	cvttss2si edx, xmm0
	mov	DWORD PTR _textSize$[ebp+4], edx
$LN29@UpdateText:

; 365  : 
; 366  :             textSize.cx = LONG(boundingBox.Width + EPSILON);

	movss	xmm0, DWORD PTR _boundingBox$[ebp+8]
	addss	xmm0, DWORD PTR __real@38d1b717
	cvttss2si eax, xmm0
	mov	DWORD PTR _textSize$[ebp], eax
$LN31@UpdateText:

; 367  :         }
; 368  : 
; 369  :         if(bUseExtents)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	SHORT $LN24@UpdateText

; 370  :         {
; 371  :             if(bWrap)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	je	SHORT $LN27@UpdateText

; 372  :             {
; 373  :                 textSize.cx = extentWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _textSize$[ebp], eax

; 374  :                 textSize.cy = extentHeight;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR _textSize$[ebp+4], edx

; 375  :             }
; 376  :             else

	jmp	SHORT $LN24@UpdateText
$LN27@UpdateText:

; 377  :             {
; 378  :                 if(LONG(extentWidth) > textSize.cx)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+108]
	cmp	ecx, DWORD PTR _textSize$[ebp]
	jle	SHORT $LN25@UpdateText

; 379  :                     textSize.cx = extentWidth;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR _textSize$[ebp], eax
$LN25@UpdateText:

; 380  :                 if(LONG(extentHeight) > textSize.cy)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	cmp	edx, DWORD PTR _textSize$[ebp+4]
	jle	SHORT $LN24@UpdateText

; 381  :                     textSize.cy = extentHeight;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+112]
	mov	DWORD PTR _textSize$[ebp+4], ecx
$LN24@UpdateText:

; 382  :             }
; 383  :         }
; 384  : 
; 385  :         //textSize.cx &= 0xFFFFFFFE;
; 386  :         //textSize.cy &= 0xFFFFFFFE;
; 387  : 
; 388  :         textSize.cx += textSize.cx%2;

	mov	edx, DWORD PTR _textSize$[ebp]
	and	edx, -2147483647			; 80000001H
	jns	SHORT $LN68@UpdateText
	dec	edx
	or	edx, -2					; fffffffeH
	inc	edx
$LN68@UpdateText:
	add	edx, DWORD PTR _textSize$[ebp]
	mov	DWORD PTR _textSize$[ebp], edx

; 389  :         textSize.cy += textSize.cy%2;

	mov	eax, DWORD PTR _textSize$[ebp+4]
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN69@UpdateText
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN69@UpdateText:
	add	eax, DWORD PTR _textSize$[ebp+4]
	mov	DWORD PTR _textSize$[ebp+4], eax

; 390  : 
; 391  :         ClampVal(textSize.cx, MIN_TEX_SIZE_W, MAX_TEX_SIZE_W);

	cmp	DWORD PTR _textSize$[ebp], 32		; 00000020H
	jge	SHORT $LN23@UpdateText
	mov	DWORD PTR _textSize$[ebp], 32		; 00000020H
	jmp	SHORT $LN21@UpdateText
$LN23@UpdateText:
	cmp	DWORD PTR _textSize$[ebp], 8192		; 00002000H
	jle	SHORT $LN21@UpdateText
	mov	DWORD PTR _textSize$[ebp], 8192		; 00002000H
$LN21@UpdateText:

; 392  :         ClampVal(textSize.cy, MIN_TEX_SIZE_H, MAX_TEX_SIZE_H);

	cmp	DWORD PTR _textSize$[ebp+4], 32		; 00000020H
	jge	SHORT $LN20@UpdateText
	mov	DWORD PTR _textSize$[ebp+4], 32		; 00000020H
	jmp	SHORT $LN18@UpdateText
$LN20@UpdateText:
	cmp	DWORD PTR _textSize$[ebp+4], 8192	; 00002000H
	jle	SHORT $LN18@UpdateText
	mov	DWORD PTR _textSize$[ebp+4], 8192	; 00002000H
$LN18@UpdateText:

; 393  : 
; 394  :         //----------------------------------------------------------------------
; 395  :         // write image
; 396  : 
; 397  :         {
; 398  :             HDC hTempDC = CreateCompatibleDC(NULL);

	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR _hTempDC$20[ebp], eax

; 399  : 
; 400  :             BITMAPINFO bi;
; 401  :             zero(&bi, sizeof(bi));

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _bi$31[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 402  : 
; 403  :             void* lpBits;
; 404  : 
; 405  :             BITMAPINFOHEADER &bih = bi.bmiHeader;

	lea	edx, DWORD PTR _bi$31[ebp]
	mov	DWORD PTR _bih$30[ebp], edx

; 406  :             bih.biSize = sizeof(bih);

	mov	eax, DWORD PTR _bih$30[ebp]
	mov	DWORD PTR [eax], 40			; 00000028H

; 407  :             bih.biBitCount = 32;

	mov	ecx, 32					; 00000020H
	mov	edx, DWORD PTR _bih$30[ebp]
	mov	WORD PTR [edx+14], cx

; 408  :             bih.biWidth  = textSize.cx;

	mov	eax, DWORD PTR _bih$30[ebp]
	mov	ecx, DWORD PTR _textSize$[ebp]
	mov	DWORD PTR [eax+4], ecx

; 409  :             bih.biHeight = textSize.cy;

	mov	edx, DWORD PTR _bih$30[ebp]
	mov	eax, DWORD PTR _textSize$[ebp+4]
	mov	DWORD PTR [edx+8], eax

; 410  :             bih.biPlanes = 1;

	mov	ecx, 1
	mov	edx, DWORD PTR _bih$30[ebp]
	mov	WORD PTR [edx+12], cx

; 411  : 
; 412  :             HBITMAP hBitmap = CreateDIBSection(hTempDC, &bi, DIB_RGB_COLORS, &lpBits, NULL, 0);

	push	0
	push	0
	lea	eax, DWORD PTR _lpBits$28[ebp]
	push	eax
	push	0
	lea	ecx, DWORD PTR _bi$31[ebp]
	push	ecx
	mov	edx, DWORD PTR _hTempDC$20[ebp]
	push	edx
	call	DWORD PTR __imp__CreateDIBSection@24
	mov	DWORD PTR _hBitmap$10[ebp], eax

; 413  : 
; 414  :             Gdiplus::Bitmap      bmp(textSize.cx, textSize.cy, 4*textSize.cx, PixelFormat32bppARGB, (BYTE*)lpBits);

	mov	eax, DWORD PTR _lpBits$28[ebp]
	push	eax
	push	2498570					; 0026200aH
	mov	ecx, DWORD PTR _textSize$[ebp]
	shl	ecx, 2
	push	ecx
	mov	edx, DWORD PTR _textSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _textSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _bmp$2[ebp]
	call	??0Bitmap@Gdiplus@@QAE@HHHHPAE@Z	; Gdiplus::Bitmap::Bitmap

; 415  : 
; 416  :             graphics = new Gdiplus::Graphics(&bmp); 

	push	8
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T21[ebp], eax
	cmp	DWORD PTR $T21[ebp], 0
	je	SHORT $LN52@UpdateText
	lea	ecx, DWORD PTR _bmp$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR $T21[ebp]
	call	??0Graphics@Gdiplus@@QAE@PAVImage@1@@Z	; Gdiplus::Graphics::Graphics
	mov	DWORD PTR tv328[ebp], eax
	jmp	SHORT $LN53@UpdateText
$LN52@UpdateText:
	mov	DWORD PTR tv328[ebp], 0
$LN53@UpdateText:
	mov	edx, DWORD PTR tv328[ebp]
	mov	DWORD PTR _graphics$[ebp], edx

; 417  : 
; 418  :             Gdiplus::SolidBrush  *brush = new Gdiplus::SolidBrush(Gdiplus::Color(GetAlphaVal(opacity)|(color&0x00FFFFFF)));

	push	12					; 0000000cH
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T17[ebp], eax
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN54@UpdateText
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	push	ecx
	call	?GetAlphaVal@@YAKI@Z			; GetAlphaVal
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+60]
	and	ecx, 16777215				; 00ffffffH
	or	eax, ecx
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	push	eax
	mov	ecx, DWORD PTR $T17[ebp]
	call	??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z ; Gdiplus::SolidBrush::SolidBrush
	mov	DWORD PTR tv344[ebp], eax
	jmp	SHORT $LN55@UpdateText
$LN54@UpdateText:
	mov	DWORD PTR tv344[ebp], 0
$LN55@UpdateText:
	mov	edx, DWORD PTR tv344[ebp]
	mov	DWORD PTR _brush$29[ebp], edx

; 419  : 
; 420  :             DWORD bkColor;
; 421  : 
; 422  : 		    if(backgroundOpacity == 0 && scrollSpeed !=0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+80], 0
	jne	SHORT $LN17@UpdateText
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	je	SHORT $LN17@UpdateText

; 423  :                 bkColor = 1<<24 | (color&0x00FFFFFF);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	and	eax, 16777215				; 00ffffffH
	or	eax, 16777216				; 01000000H
	mov	DWORD PTR _bkColor$26[ebp], eax

; 424  :             else

	jmp	SHORT $LN16@UpdateText
$LN17@UpdateText:

; 425  :                 bkColor = ((strCurrentText.IsValid() || bUseExtents) ? GetAlphaVal(backgroundOpacity) : GetAlphaVal(0)) | (backgroundColor&0x00FFFFFF);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	jne	SHORT $LN56@UpdateText
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	jne	SHORT $LN56@UpdateText
	push	0
	call	?GetAlphaVal@@YAKI@Z			; GetAlphaVal
	add	esp, 4
	mov	DWORD PTR tv364[ebp], eax
	jmp	SHORT $LN57@UpdateText
$LN56@UpdateText:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+80]
	push	ecx
	call	?GetAlphaVal@@YAKI@Z			; GetAlphaVal
	add	esp, 4
	mov	DWORD PTR tv364[ebp], eax
$LN57@UpdateText:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+84]
	and	eax, 16777215				; 00ffffffH
	or	eax, DWORD PTR tv364[ebp]
	mov	DWORD PTR _bkColor$26[ebp], eax
$LN16@UpdateText:

; 426  : 
; 427  :             if((textSize.cx > boundingBox.Width  || textSize.cy > boundingBox.Height) && !bUseExtents)

	cvtsi2ss xmm0, DWORD PTR _textSize$[ebp]
	comiss	xmm0, DWORD PTR _boundingBox$[ebp+8]
	ja	SHORT $LN14@UpdateText
	cvtsi2ss xmm0, DWORD PTR _textSize$[ebp+4]
	comiss	xmm0, DWORD PTR _boundingBox$[ebp+12]
	jbe	$LN15@UpdateText
$LN14@UpdateText:
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	jne	$LN15@UpdateText

; 428  :             {
; 429  :                 stat = graphics->Clear(Gdiplus::Color( 0x00000000));

	push	0
	lea	ecx, DWORD PTR $T6[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ; Gdiplus::Graphics::Clear
	mov	DWORD PTR _stat$[ebp], eax

; 430  :                 if(stat != Gdiplus::Ok)

	cmp	DWORD PTR _stat$[ebp], 0
	je	SHORT $LN13@UpdateText

; 431  :                     AppWarning(TEXT("TextSource::UpdateTexture: Graphics::Clear failed: %u"), (int)stat);

	mov	eax, DWORD PTR _stat$[ebp]
	push	eax
	push	OFFSET ??_C@_1GM@LBANKIPA@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN13@UpdateText:

; 432  : 
; 433  :                 Gdiplus::SolidBrush *bkBrush = new Gdiplus::SolidBrush(Gdiplus::Color( bkColor ));

	push	12					; 0000000cH
	call	??2GdiplusBase@Gdiplus@@SAPAXI@Z	; Gdiplus::GdiplusBase::operator new
	add	esp, 4
	mov	DWORD PTR $T19[ebp], eax
	cmp	DWORD PTR $T19[ebp], 0
	je	SHORT $LN58@UpdateText
	mov	ecx, DWORD PTR _bkColor$26[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T3[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	push	eax
	mov	ecx, DWORD PTR $T19[ebp]
	call	??0SolidBrush@Gdiplus@@QAE@ABVColor@1@@Z ; Gdiplus::SolidBrush::SolidBrush
	mov	DWORD PTR tv393[ebp], eax
	jmp	SHORT $LN59@UpdateText
$LN58@UpdateText:
	mov	DWORD PTR tv393[ebp], 0
$LN59@UpdateText:
	mov	edx, DWORD PTR tv393[ebp]
	mov	DWORD PTR _bkBrush$18[ebp], edx

; 434  : 
; 435  :                 graphics->FillRectangle(bkBrush, boundingBox);

	lea	eax, DWORD PTR _boundingBox$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bkBrush$18[ebp]
	push	ecx
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?FillRectangle@Graphics@Gdiplus@@QAE?AW4Status@2@PBVBrush@2@ABVRectF@2@@Z ; Gdiplus::Graphics::FillRectangle

; 436  : 
; 437  :                 delete bkBrush;

	mov	edx, DWORD PTR _bkBrush$18[ebp]
	mov	DWORD PTR $T13[ebp], edx
	mov	eax, DWORD PTR $T13[ebp]
	mov	DWORD PTR $T24[ebp], eax
	cmp	DWORD PTR $T24[ebp], 0
	je	SHORT $LN60@UpdateText
	push	1
	mov	ecx, DWORD PTR $T24[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T24[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv411[ebp], eax
	jmp	SHORT $LN61@UpdateText
$LN60@UpdateText:
	mov	DWORD PTR tv411[ebp], 0
$LN61@UpdateText:

; 438  :             }
; 439  :             else

	jmp	SHORT $LN11@UpdateText
$LN15@UpdateText:

; 440  :             {
; 441  :                 stat = graphics->Clear(Gdiplus::Color( bkColor ));

	mov	ecx, DWORD PTR _bkColor$26[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T5[ebp]
	call	??0Color@Gdiplus@@QAE@K@Z		; Gdiplus::Color::Color
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?Clear@Graphics@Gdiplus@@QAE?AW4Status@2@ABVColor@2@@Z ; Gdiplus::Graphics::Clear
	mov	DWORD PTR _stat$[ebp], eax

; 442  :                 if(stat != Gdiplus::Ok)

	cmp	DWORD PTR _stat$[ebp], 0
	je	SHORT $LN11@UpdateText

; 443  :                     AppWarning(TEXT("TextSource::UpdateTexture: Graphics::Clear failed: %u"), (int)stat);

	mov	edx, DWORD PTR _stat$[ebp]
	push	edx
	push	OFFSET ??_C@_1GM@LBANKIPA@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN11@UpdateText:

; 444  :             }
; 445  : 
; 446  :             graphics->SetTextRenderingHint(Gdiplus::TextRenderingHintAntiAlias);

	push	4
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?SetTextRenderingHint@Graphics@Gdiplus@@QAE?AW4Status@2@W4TextRenderingHint@2@@Z ; Gdiplus::Graphics::SetTextRenderingHint

; 447  :             graphics->SetCompositingMode(Gdiplus::CompositingModeSourceOver);

	push	0
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?SetCompositingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4CompositingMode@2@@Z ; Gdiplus::Graphics::SetCompositingMode

; 448  :             graphics->SetSmoothingMode(Gdiplus::SmoothingModeAntiAlias);

	push	4
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?SetSmoothingMode@Graphics@Gdiplus@@QAE?AW4Status@2@W4SmoothingMode@2@@Z ; Gdiplus::Graphics::SetSmoothingMode

; 449  :             
; 450  :             if(strCurrentText.IsValid())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	$LN7@UpdateText

; 451  :             {
; 452  :                 if(bUseOutline)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+88]
	test	ecx, ecx
	je	$LN9@UpdateText

; 453  :                 {
; 454  :                     boundingBox.Offset(outlineSize/2, outlineSize/2);

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+92]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+92]
	divss	xmm0, DWORD PTR __real@40000000
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _boundingBox$[ebp]
	call	?Offset@RectF@Gdiplus@@QAEXMM@Z		; Gdiplus::RectF::Offset

; 455  : 
; 456  :                     Gdiplus::FontFamily fontFamily;

	lea	ecx, DWORD PTR _fontFamily$9[ebp]
	call	??0FontFamily@Gdiplus@@QAE@XZ		; Gdiplus::FontFamily::FontFamily

; 457  :                     Gdiplus::GraphicsPath path;

	push	0
	lea	ecx, DWORD PTR _path$11[ebp]
	call	??0GraphicsPath@Gdiplus@@QAE@W4FillMode@1@@Z ; Gdiplus::GraphicsPath::GraphicsPath

; 458  : 
; 459  :                     font.GetFamily(&fontFamily);

	lea	ecx, DWORD PTR _fontFamily$9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _font$[ebp]
	call	?GetFamily@Font@Gdiplus@@QBE?AW4Status@2@PAVFontFamily@2@@Z ; Gdiplus::Font::GetFamily

; 460  : 
; 461  :                     path.AddString(strCurrentText, -1, &fontFamily, font.GetStyle(), font.GetSize(), boundingBox, &format);

	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _boundingBox$[ebp]
	push	eax
	lea	ecx, DWORD PTR _font$[ebp]
	call	?GetSize@Font@Gdiplus@@QBEMXZ		; Gdiplus::Font::GetSize
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR _font$[ebp]
	call	?GetStyle@Font@Gdiplus@@QBEHXZ		; Gdiplus::Font::GetStyle
	push	eax
	lea	ecx, DWORD PTR _fontFamily$9[ebp]
	push	ecx
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _path$11[ebp]
	call	?AddString@GraphicsPath@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFontFamily@2@HMABVRectF@2@PBVStringFormat@2@@Z ; Gdiplus::GraphicsPath::AddString

; 462  : 
; 463  :                     DrawOutlineText(graphics, font, path, format, brush);

	mov	edx, DWORD PTR _brush$29[ebp]
	push	edx
	lea	eax, DWORD PTR _format$[ebp]
	push	eax
	lea	ecx, DWORD PTR _path$11[ebp]
	push	ecx
	lea	edx, DWORD PTR _font$[ebp]
	push	edx
	mov	eax, DWORD PTR _graphics$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?DrawOutlineText@TextOutputSource@@AAEXPAVGraphics@Gdiplus@@AAVFont@3@ABVGraphicsPath@3@ABVStringFormat@3@PBVBrush@3@@Z ; TextOutputSource::DrawOutlineText

; 464  :                 }

	lea	ecx, DWORD PTR _path$11[ebp]
	call	??1GraphicsPath@Gdiplus@@QAE@XZ		; Gdiplus::GraphicsPath::~GraphicsPath
	lea	ecx, DWORD PTR _fontFamily$9[ebp]
	call	??1FontFamily@Gdiplus@@QAE@XZ		; Gdiplus::FontFamily::~FontFamily

; 465  :                 else

	jmp	SHORT $LN7@UpdateText
$LN9@UpdateText:

; 466  :                 {
; 467  :                     stat = graphics->DrawString(strCurrentText, -1, &font, boundingBox, &format, brush);

	mov	ecx, DWORD PTR _brush$29[ebp]
	push	ecx
	lea	edx, DWORD PTR _format$[ebp]
	push	edx
	lea	eax, DWORD PTR _boundingBox$[ebp]
	push	eax
	lea	ecx, DWORD PTR _font$[ebp]
	push	ecx
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _graphics$[ebp]
	call	?DrawString@Graphics@Gdiplus@@QAE?AW4Status@2@PB_WHPBVFont@2@ABVRectF@2@PBVStringFormat@2@PBVBrush@2@@Z ; Gdiplus::Graphics::DrawString
	mov	DWORD PTR _stat$[ebp], eax

; 468  :                     if(stat != Gdiplus::Ok)

	cmp	DWORD PTR _stat$[ebp], 0
	je	SHORT $LN7@UpdateText

; 469  :                         AppWarning(TEXT("TextSource::UpdateTexture: Graphics::DrawString failed: %u"), (int)stat);

	mov	edx, DWORD PTR _stat$[ebp]
	push	edx
	push	OFFSET ??_C@_1HG@DMEJMMLD@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAG?$AAr?$AAa?$AAp?$AAh@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN7@UpdateText:

; 470  :                 }
; 471  :             }
; 472  : 
; 473  :             delete brush;

	mov	eax, DWORD PTR _brush$29[ebp]
	mov	DWORD PTR $T8[ebp], eax
	mov	ecx, DWORD PTR $T8[ebp]
	mov	DWORD PTR $T27[ebp], ecx
	cmp	DWORD PTR $T27[ebp], 0
	je	SHORT $LN62@UpdateText
	push	1
	mov	edx, DWORD PTR $T27[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T27[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv503[ebp], eax
	jmp	SHORT $LN63@UpdateText
$LN62@UpdateText:
	mov	DWORD PTR tv503[ebp], 0
$LN63@UpdateText:

; 474  :             delete graphics;

	mov	eax, DWORD PTR _graphics$[ebp]
	mov	DWORD PTR $T7[ebp], eax
	mov	ecx, DWORD PTR $T7[ebp]
	mov	DWORD PTR $T23[ebp], ecx
	cmp	DWORD PTR $T23[ebp], 0
	je	SHORT $LN64@UpdateText
	push	1
	mov	ecx, DWORD PTR $T23[ebp]
	call	??_GGraphics@Gdiplus@@QAEPAXI@Z
	mov	DWORD PTR tv508[ebp], eax
	jmp	SHORT $LN65@UpdateText
$LN64@UpdateText:
	mov	DWORD PTR tv508[ebp], 0
$LN65@UpdateText:

; 475  : 
; 476  :             //----------------------------------------------------------------------
; 477  :             // upload texture
; 478  : 
; 479  :             if(textureSize.cx != textSize.cx || textureSize.cy != textSize.cy)

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	cmp	eax, DWORD PTR _textSize$[ebp]
	jne	SHORT $LN5@UpdateText
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	cmp	edx, DWORD PTR _textSize$[ebp+4]
	je	$LN6@UpdateText
$LN5@UpdateText:

; 480  :             {
; 481  :                 if(texture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN4@UpdateText

; 482  :                 {
; 483  :                     delete texture;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR $T14[ebp], edx
	mov	eax, DWORD PTR $T14[ebp]
	mov	DWORD PTR $T25[ebp], eax
	cmp	DWORD PTR $T25[ebp], 0
	je	SHORT $LN66@UpdateText
	push	1
	mov	ecx, DWORD PTR $T25[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T25[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv528[ebp], eax
	jmp	SHORT $LN67@UpdateText
$LN66@UpdateText:
	mov	DWORD PTR tv528[ebp], 0
$LN67@UpdateText:

; 484  :                     texture = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
$LN4@UpdateText:

; 485  :                 }
; 486  : 
; 487  :                 mcpy(&textureSize, &textSize, sizeof(textureSize));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _textSize$[ebp]
	mov	DWORD PTR [edx+132], eax
	mov	ecx, DWORD PTR _textSize$[ebp+4]
	mov	DWORD PTR [edx+136], ecx

; 488  :                 texture = CreateTexture(textSize.cx, textSize.cy, GS_BGRA, lpBits, FALSE, FALSE);

	push	0
	push	0
	mov	edx, DWORD PTR _lpBits$28[ebp]
	push	edx
	push	6
	mov	eax, DWORD PTR _textSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _textSize$[ebp]
	push	ecx
	call	?CreateTexture@@YAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z ; CreateTexture
	add	esp, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
	jmp	SHORT $LN2@UpdateText
$LN6@UpdateText:

; 489  :             }
; 490  :             else if(texture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@UpdateText

; 491  :                 texture->SetImage(lpBits, GS_IMAGEFORMAT_BGRA, 4*textSize.cx);

	mov	ecx, DWORD PTR _textSize$[ebp]
	shl	ecx, 2
	push	ecx
	push	9
	mov	edx, DWORD PTR _lpBits$28[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+16]
	mov	edx, DWORD PTR [eax+16]
	call	edx
$LN2@UpdateText:

; 492  : 
; 493  :             if(!texture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN1@UpdateText

; 494  :             {
; 495  :                 AppWarning(TEXT("TextSource::UpdateTexture: could not create texture"));

	push	OFFSET ??_C@_1GI@IMEHDNAB@?$AAT?$AAe?$AAx?$AAt?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?3?$AA?3?$AAU?$AAp?$AAd?$AAa?$AAt?$AAe?$AAT?$AAe?$AAx?$AAt?$AAu?$AAr?$AAe?$AA?3?$AA?5?$AAc?$AAo?$AAu?$AAl?$AAd@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 496  :                 DeleteObject(hFont);

	mov	ecx, DWORD PTR _hFont$[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
$LN1@UpdateText:

; 497  :             }
; 498  : 
; 499  :             DeleteDC(hTempDC);

	mov	edx, DWORD PTR _hTempDC$20[ebp]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4

; 500  :             DeleteObject(hBitmap);

	mov	eax, DWORD PTR _hBitmap$10[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 501  :         }

	lea	ecx, DWORD PTR _bmp$2[ebp]
	call	??1Bitmap@Gdiplus@@UAE@XZ

; 502  :     }

	lea	ecx, DWORD PTR _font$[ebp]
	call	??1Font@Gdiplus@@QAE@XZ			; Gdiplus::Font::~Font
	lea	ecx, DWORD PTR _format$[ebp]
	call	??1StringFormat@Gdiplus@@QAE@XZ		; Gdiplus::StringFormat::~StringFormat
$LN46@UpdateText:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateTexture@TextOutputSource@@AAEXXZ ENDP		; TextOutputSource::UpdateTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ??0TextOutputSource@@QAE@PAVXElement@@@Z
_TEXT	SEGMENT
_si$ = -64						; size = 48
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??0TextOutputSource@@QAE@PAVXElement@@@Z PROC		; TextOutputSource::TextOutputSource, COMDAT
; _this$ = ecx

; 505  :     inline TextOutputSource(XElement *data)

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ImageSource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TextOutputSource@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	DWORD PTR __imp_??0Vect2@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >

; 506  :     {
; 507  :         this->data = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _data$[ebx]
	mov	DWORD PTR [ecx+160], edx

; 508  :         UpdateSettings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSettings@TextOutputSource@@UAEXXZ ; TextOutputSource::UpdateSettings

; 509  : 
; 510  :         SamplerInfo si;

	lea	ecx, DWORD PTR _si$[ebp]
	call	??0SamplerInfo@@QAE@XZ			; SamplerInfo::SamplerInfo

; 511  :         zero(&si, sizeof(si));

	push	48					; 00000030H
	lea	eax, DWORD PTR _si$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 512  :         si.addressU = GS_ADDRESS_REPEAT;

	mov	DWORD PTR _si$[ebp+4], 1

; 513  :         si.addressV = GS_ADDRESS_REPEAT;

	mov	DWORD PTR _si$[ebp+8], 1

; 514  :         si.borderColor = 0;

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _si$[ebp+32]
	call	DWORD PTR __imp_??4Vect4@@QAEAAU0@M@Z

; 515  :         si.filter = GS_FILTER_LINEAR;

	mov	DWORD PTR _si$[ebp], 0

; 516  :         ss = CreateSamplerState(si);

	lea	ecx, DWORD PTR _si$[ebp]
	push	ecx
	call	?CreateSamplerState@@YAPAVSamplerState@@AAUSamplerInfo@@@Z ; CreateSamplerState
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+156], eax

; 517  :         globalOpacity = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+68], 100			; 00000064H

; 518  : 
; 519  :         Log(TEXT("Using text output"));

	push	OFFSET ??_C@_1CE@HAFKHHGD@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA?5?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 520  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	4
??0TextOutputSource@@QAE@PAVXElement@@@Z ENDP		; TextOutputSource::TextOutputSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ??1TextOutputSource@@UAE@XZ
_TEXT	SEGMENT
tv138 = -28						; size = 4
$T1 = -24						; size = 4
tv129 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
??1TextOutputSource@@UAE@XZ PROC			; TextOutputSource::~TextOutputSource, COMDAT
; _this$ = ecx

; 523  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7TextOutputSource@@6B@

; 524  :         if(texture)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN2@TextOutput

; 525  :         {
; 526  :             delete texture;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR $T2[ebp], eax
	mov	ecx, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], ecx
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN5@TextOutput
	push	1
	mov	edx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv129[ebp], eax
	jmp	SHORT $LN6@TextOutput
$LN5@TextOutput:
	mov	DWORD PTR tv129[ebp], 0
$LN6@TextOutput:

; 527  :             texture = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
$LN2@TextOutput:

; 528  :         }
; 529  : 
; 530  :         delete ss;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN7@TextOutput
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN8@TextOutput
$LN7@TextOutput:
	mov	DWORD PTR tv138[ebp], 0
$LN8@TextOutput:

; 531  : 
; 532  :         if(bMonitoringFileChanges)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+141]
	test	edx, edx
	je	SHORT $LN3@TextOutput

; 533  :         {
; 534  :             OSMonitorFileDestroy(fileChangeMonitor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+144]
	push	ecx
	call	DWORD PTR __imp_?OSMonitorFileDestroy@@YGXPAUOSFileChangeData@@@Z
$LN3@TextOutput:

; 535  :         }
; 536  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::~unique_ptr<SamplerState,std::default_delete<SamplerState> >
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ImageSource@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1TextOutputSource@@UAE@XZ ENDP			; TextOutputSource::~TextOutputSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?Preprocess@TextOutputSource@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Preprocess@TextOutputSource@@UAEXXZ PROC		; TextOutputSource::Preprocess, COMDAT
; _this$ = ecx

; 539  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 540  :         if(bMonitoringFileChanges)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+141]
	test	ecx, ecx
	je	SHORT $LN3@Preprocess

; 541  :         {
; 542  :             if (OSFileHasChanged(fileChangeMonitor))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+144]
	push	eax
	call	DWORD PTR __imp_?OSFileHasChanged@@YGHPAUOSFileChangeData@@@Z
	test	eax, eax
	je	SHORT $LN3@Preprocess

; 543  :                 bUpdateTexture = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 1
$LN3@Preprocess:

; 544  :         }
; 545  : 
; 546  :         if(bUpdateTexture)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	test	eax, eax
	je	SHORT $LN4@Preprocess

; 547  :         {
; 548  :             bUpdateTexture = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 0

; 549  :             UpdateTexture();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateTexture@TextOutputSource@@AAEXXZ	; TextOutputSource::UpdateTexture
$LN4@Preprocess:

; 550  :         }
; 551  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Preprocess@TextOutputSource@@UAEXXZ ENDP		; TextOutputSource::Preprocess
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?Tick@TextOutputSource@@UAEXM@Z
_TEXT	SEGMENT
tv82 = -8						; size = 4
_this$ = -4						; size = 4
_fSeconds$ = 8						; size = 4
?Tick@TextOutputSource@@UAEXM@Z PROC			; TextOutputSource::Tick, COMDAT
; _this$ = ecx

; 554  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 555  :         if(scrollSpeed != 0 && texture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN3@Tick
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	$LN3@Tick

; 556  :         {
; 557  :             scrollValue += fSeconds*float(scrollSpeed)/(bVertical?(-1.0f)*float(textureSize.cy):float(textureSize.cx));

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+79]
	test	eax, eax
	je	SHORT $LN10@Tick
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+136]
	mulss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv82[ebp], xmm0
	jmp	SHORT $LN11@Tick
$LN10@Tick:
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+132]
	movss	DWORD PTR tv82[ebp], xmm0
$LN11@Tick:
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+72]
	mulss	xmm0, DWORD PTR _fSeconds$[ebp]
	divss	xmm0, DWORD PTR tv82[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	addss	xmm0, DWORD PTR [ecx+20]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0
$LN6@Tick:

; 558  :             while(scrollValue > 1.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+20]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN5@Tick

; 559  :                 scrollValue -= 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0
	jmp	SHORT $LN6@Tick
$LN5@Tick:

; 560  :             while(scrollValue < -1.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@bf800000
	comiss	xmm0, DWORD PTR [eax+20]
	jbe	SHORT $LN3@Tick

; 561  :                 scrollValue += 1.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+20]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+20], xmm0
	jmp	SHORT $LN5@Tick
$LN3@Tick:

; 562  :         }
; 563  : 
; 564  :         if(showExtentTime > 0.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN2@Tick

; 565  :             showExtentTime -= fSeconds;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	subss	xmm0, DWORD PTR _fSeconds$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [edx+24], xmm0
$LN2@Tick:

; 566  : 
; 567  :         if(bDoUpdate)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+152]
	test	ecx, ecx
	je	SHORT $LN1@Tick

; 568  :         {
; 569  :             bDoUpdate = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+152], 0

; 570  :             bUpdateTexture = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1
$LN1@Tick:

; 571  :         }
; 572  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Tick@TextOutputSource@@UAEXM@Z ENDP			; TextOutputSource::Tick
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?Render@TextOutputSource@@UAEXABUVect2@@0@Z
_TEXT	SEGMENT
_samplerinfo$1 = -192					; size = 48
$T2 = -144						; size = 8
$T3 = -136						; size = 8
_rectangleColor$4 = -128				; size = 16
tv327 = -112						; size = 8
tv337 = -104						; size = 8
_sizeMultiplier$5 = -96					; size = 8
_alpha$6 = -88						; size = 4
_pShader$7 = -84					; size = 4
_vShader$8 = -80					; size = 4
_extentVal$9 = -76					; size = 8
_newSize$10 = -68					; size = 8
_new_sampler$11 = -60					; size = 4
tv333 = -56						; size = 4
tv323 = -52						; size = 4
tv398 = -48						; size = 4
_outputColor$12 = -44					; size = 4
_lr$13 = -40						; size = 8
_ul$14 = -32						; size = 8
_this$ = -24						; size = 4
_rect$15 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_size$ = 12						; size = 4
?Render@TextOutputSource@@UAEXABUVect2@@0@Z PROC	; TextOutputSource::Render, COMDAT
; _this$ = ecx

; 575  :     {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 576  :         if(texture)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	$LN1@Render

; 577  :         {
; 578  :             //EnableBlending(FALSE);
; 579  : 
; 580  :             Vect2 sizeMultiplier = size/baseSize;

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	push	ecx
	lea	edx, DWORD PTR _sizeMultiplier$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _size$[ebx]
	call	DWORD PTR __imp_??KVect2@@QBE?AU0@ABU0@@Z

; 581  :             Vect2 newSize = Vect2(float(textureSize.cx), float(textureSize.cy))*sizeMultiplier;

	lea	eax, DWORD PTR _sizeMultiplier$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _newSize$10[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [edx+136]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+132]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??DVect2@@QBE?AU0@ABU0@@Z

; 582  : 
; 583  :             if(bUseExtents)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	$LN9@Render

; 584  :             {
; 585  :                 Vect2 extentVal = Vect2(float(extentWidth), float(extentHeight))*sizeMultiplier;

	lea	eax, DWORD PTR _sizeMultiplier$5[ebp]
	push	eax
	lea	ecx, DWORD PTR _extentVal$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR tv323[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv323[ebp]
	mov	ecx, DWORD PTR tv323[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv327[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv327[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+108]
	mov	DWORD PTR tv333[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv333[ebp]
	mov	ecx, DWORD PTR tv333[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv337[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv337[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??DVect2@@QBE?AU0@ABU0@@Z

; 586  :                 if(showExtentTime > 0.0f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN11@Render

; 587  :                 {
; 588  :                     Shader *pShader = GS->GetCurrentPixelShader();

	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+88]
	call	edx
	mov	DWORD PTR _pShader$7[ebp], eax

; 589  :                     Shader *vShader = GS->GetCurrentVertexShader();

	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+92]
	call	edx
	mov	DWORD PTR _vShader$8[ebp], eax

; 590  : 
; 591  :                     Color4 rectangleColor = Color4(0.0f, 1.0f, 0.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _rectangleColor$4[ebp]
	call	DWORD PTR __imp_??0Vect4@@QAE@MMMM@Z

; 592  :                     if(showExtentTime < 1.0f)

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR [eax+24]
	jbe	SHORT $LN10@Render

; 593  :                         rectangleColor.w = showExtentTime;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [ecx+24]
	movss	DWORD PTR _rectangleColor$4[ebp+12], xmm0
$LN10@Render:

; 594  : 
; 595  :                     App->solidPixelShader->SetColor(App->solidPixelShader->GetParameter(0), rectangleColor);

	lea	edx, DWORD PTR _rectangleColor$4[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	ecx, DWORD PTR [eax+72]
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+72]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	push	eax
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	ecx, DWORD PTR [eax+72]
	call	DWORD PTR __imp_?SetColor@Shader@@QAEXPAXABUVect4@@@Z

; 596  : 
; 597  :                     LoadVertexShader(App->solidVertexShader);

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	call	?LoadVertexShader@@YAXPAVShader@@@Z	; LoadVertexShader
	add	esp, 4

; 598  :                     LoadPixelShader(App->solidPixelShader);

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	ecx, DWORD PTR [eax+72]
	push	ecx
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 599  :                     DrawBox(pos, extentVal);

	lea	edx, DWORD PTR _extentVal$9[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$[ebx]
	push	eax
	call	?DrawBox@@YAXABUVect2@@0@Z		; DrawBox
	add	esp, 8

; 600  : 
; 601  :                     LoadVertexShader(vShader);

	mov	ecx, DWORD PTR _vShader$8[ebp]
	push	ecx
	call	?LoadVertexShader@@YAXPAVShader@@@Z	; LoadVertexShader
	add	esp, 4

; 602  :                     LoadPixelShader(pShader);

	mov	edx, DWORD PTR _pShader$7[ebp]
	push	edx
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4
$LN11@Render:

; 603  :                 }
; 604  : 
; 605  :                 if(!bWrap)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN9@Render

; 606  :                 {
; 607  :                     XRect rect = {int(pos.x), int(pos.y), int(extentVal.x), int(extentVal.y)};

	mov	edx, DWORD PTR _pos$[ebx]
	cvttss2si eax, DWORD PTR [edx]
	mov	DWORD PTR _rect$15[ebp], eax
	mov	ecx, DWORD PTR _pos$[ebx]
	cvttss2si edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _rect$15[ebp+4], edx
	cvttss2si eax, DWORD PTR _extentVal$9[ebp]
	mov	DWORD PTR _rect$15[ebp+8], eax
	cvttss2si ecx, DWORD PTR _extentVal$9[ebp+4]
	mov	DWORD PTR _rect$15[ebp+12], ecx

; 608  :                     SetScissorRect(&rect);

	lea	edx, DWORD PTR _rect$15[ebp]
	push	edx
	call	?SetScissorRect@@YAXPAUXRect@@@Z	; SetScissorRect
	add	esp, 4
$LN9@Render:

; 609  :                 }
; 610  :             }
; 611  : 
; 612  :             if(bUsePointFiltering) {

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+140]
	test	ecx, ecx
	je	SHORT $LN8@Render

; 613  :                 if (!sampler) {

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??B?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBE_NXZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator bool
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN7@Render

; 614  :                     SamplerInfo samplerinfo;

	lea	ecx, DWORD PTR _samplerinfo$1[ebp]
	call	??0SamplerInfo@@QAE@XZ			; SamplerInfo::SamplerInfo

; 615  :                     samplerinfo.filter = GS_FILTER_POINT;

	mov	DWORD PTR _samplerinfo$1[ebp], 1

; 616  :                     std::unique_ptr<SamplerState> new_sampler(CreateSamplerState(samplerinfo));

	lea	eax, DWORD PTR _samplerinfo$1[ebp]
	push	eax
	call	?CreateSamplerState@@YAPAVSamplerState@@AAUSamplerInfo@@@Z ; CreateSamplerState
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _new_sampler$11[ebp]
	call	??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@PAVSamplerState@@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >

; 617  :                     sampler = std::move(new_sampler);

	lea	ecx, DWORD PTR _new_sampler$11[ebp]
	push	ecx
	call	??$move@AAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@0@AAV10@@Z ; std::move<std::unique_ptr<SamplerState,std::default_delete<SamplerState> > &>
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	??4?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEAAV01@$$QAV01@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator=

; 618  :                 }

	lea	ecx, DWORD PTR _new_sampler$11[ebp]
	call	??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::~unique_ptr<SamplerState,std::default_delete<SamplerState> >
$LN7@Render:

; 619  : 
; 620  :                 LoadSamplerState(sampler.get(), 0);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?get@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBEPAVSamplerState@@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::get
	push	eax
	call	?LoadSamplerState@@YAXPAVSamplerState@@I@Z ; LoadSamplerState
	add	esp, 8
$LN8@Render:

; 621  :             }
; 622  : 
; 623  :             DWORD alpha = DWORD(double(globalOpacity)*2.55);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	mov	DWORD PTR tv398[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv398[ebp]
	mov	ecx, DWORD PTR tv398[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	mulsd	xmm0, QWORD PTR __real@4004666666666666
	call	__dtoui3
	mov	DWORD PTR _alpha$6[ebp], eax

; 624  :             DWORD outputColor = (alpha << 24) | 0xFFFFFF;

	mov	edx, DWORD PTR _alpha$6[ebp]
	shl	edx, 24					; 00000018H
	or	edx, 16777215				; 00ffffffH
	mov	DWORD PTR _outputColor$12[ebp], edx

; 625  : 
; 626  :             if(scrollSpeed != 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+72], 0
	je	$LN6@Render

; 627  :             {
; 628  :                 UVCoord ul(0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _ul$14[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 629  :                 UVCoord lr(1.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _lr$13[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 630  : 
; 631  :                 if(bVertical)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+79]
	test	edx, edx
	je	SHORT $LN5@Render

; 632  :                 {
; 633  :                     /*float sizeVal = float(textureSize.cy);
; 634  :                     float clampedVal = floorf(scrollValue*sizeVal)/sizeVal;*/
; 635  :                     ul.y += scrollValue;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ul$14[ebp+4]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _ul$14[ebp+4], xmm0

; 636  :                     lr.y += scrollValue;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _lr$13[ebp+4]
	addss	xmm0, DWORD PTR [ecx+20]
	movss	DWORD PTR _lr$13[ebp+4], xmm0

; 637  :                 }
; 638  :                 else

	jmp	SHORT $LN4@Render
$LN5@Render:

; 639  :                 {
; 640  :                     /*float sizeVal = float(textureSize.cx);
; 641  :                     float clampedVal = floorf(scrollValue*sizeVal)/sizeVal;*/
; 642  :                     ul.x += scrollValue;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _ul$14[ebp]
	addss	xmm0, DWORD PTR [edx+20]
	movss	DWORD PTR _ul$14[ebp], xmm0

; 643  :                     lr.x += scrollValue;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _lr$13[ebp]
	addss	xmm0, DWORD PTR [eax+20]
	movss	DWORD PTR _lr$13[ebp], xmm0
$LN4@Render:

; 644  :                 }
; 645  : 
; 646  :                 LoadSamplerState(ss);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+156]
	push	edx
	call	?LoadSamplerState@@YAXPAVSamplerState@@I@Z ; LoadSamplerState

; 647  :                 DrawSpriteEx(texture, outputColor, pos.x, pos.y, pos.x+newSize.x, pos.y+newSize.y, ul.x, ul.y, lr.x, lr.y);

	add	esp, 4
	movss	xmm0, DWORD PTR _lr$13[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lr$13[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ul$14[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ul$14[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebx]
	movss	xmm0, DWORD PTR [eax+4]
	addss	xmm0, DWORD PTR _newSize$10[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR _newSize$10[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _outputColor$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	call	?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z ; DrawSpriteEx
	add	esp, 40					; 00000028H

; 648  :             }
; 649  :             else

	jmp	SHORT $LN3@Render
$LN6@Render:

; 650  :                 DrawSprite(texture, outputColor, pos.x, pos.y, pos.x+newSize.x, pos.y+newSize.y);

	mov	ecx, DWORD PTR _pos$[ebx]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR _newSize$10[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebx]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR _newSize$10[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _outputColor$12[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	?DrawSprite@@YAXPAVTexture@@KMMMM@Z	; DrawSprite
	add	esp, 24					; 00000018H
$LN3@Render:

; 651  : 
; 652  :             if (bUsePointFiltering)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+140]
	test	eax, eax
	je	SHORT $LN2@Render

; 653  :                 LoadSamplerState(NULL, 0);

	push	0
	push	0
	call	?LoadSamplerState@@YAXPAVSamplerState@@I@Z ; LoadSamplerState
	add	esp, 8
$LN2@Render:

; 654  : 
; 655  :             if(bUseExtents && !bWrap)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+104]
	test	edx, edx
	je	SHORT $LN1@Render
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+116]
	test	ecx, ecx
	jne	SHORT $LN1@Render

; 656  :                 SetScissorRect(NULL);

	push	0
	call	?SetScissorRect@@YAXPAUXRect@@@Z	; SetScissorRect
	add	esp, 4
$LN1@Render:

; 657  :             //EnableBlending(TRUE);
; 658  :         }
; 659  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?Render@TextOutputSource@@UAEXABUVect2@@0@Z ENDP	; TextOutputSource::Render
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?GetSize@TextOutputSource@@UBE?AUVect2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetSize@TextOutputSource@@UBE?AUVect2@@XZ PROC		; TextOutputSource::GetSize, COMDAT
; _this$ = ecx

; 662  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 663  :         return baseSize;

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 124				; 0000007cH
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@ABU0@@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 664  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSize@TextOutputSource@@UBE?AUVect2@@XZ ENDP		; TextOutputSource::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?UpdateSettings@TextOutputSource@@UAEXXZ
_TEXT	SEGMENT
tv261 = -40						; size = 4
tv238 = -36						; size = 4
tv189 = -32						; size = 4
tv180 = -28						; size = 4
tv171 = -24						; size = 4
tv162 = -20						; size = 4
tv153 = -16						; size = 4
tv144 = -12						; size = 4
tv135 = -8						; size = 4
_this$ = -4						; size = 4
?UpdateSettings@TextOutputSource@@UAEXXZ PROC		; TextOutputSource::UpdateSettings, COMDAT
; _this$ = ecx

; 667  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR _this$[ebp], ecx

; 668  :         strFont     = data->GetString(TEXT("font"), TEXT("Arial"));

	push	OFFSET ??_C@_1M@KAKMLIHO@?$AAA?$AAr?$AAi?$AAa?$AAl?$AA?$AA@
	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 669  :         color       = data->GetInt(TEXT("color"), 0xFFFFFFFF);

	push	-1
	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], eax

; 670  :         size        = data->GetInt(TEXT("fontSize"), 48);

	push	48					; 00000030H
	push	OFFSET ??_C@_1BC@JNDEGBLF@?$AAf?$AAo?$AAn?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], eax

; 671  :         opacity     = data->GetInt(TEXT("textOpacity"), 100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1BI@IBCEPOLC@?$AAt?$AAe?$AAx?$AAt?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+64], eax

; 672  :         scrollSpeed = data->GetInt(TEXT("scrollSpeed"), 0);

	push	0
	push	OFFSET ??_C@_1BI@DNMBKHIA@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+72], eax

; 673  :         bBold       = data->GetInt(TEXT("bold"), 0) != 0;

	push	0
	push	OFFSET ??_C@_19LNOFOKG@?$AAb?$AAo?$AAl?$AAd?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN3@UpdateSett
	mov	DWORD PTR tv135[ebp], 1
	jmp	SHORT $LN4@UpdateSett
$LN3@UpdateSett:
	mov	DWORD PTR tv135[ebp], 0
$LN4@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv135[ebp]
	mov	BYTE PTR [eax+76], cl

; 674  :         bItalic     = data->GetInt(TEXT("italic"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1O@JEIKJABP@?$AAi?$AAt?$AAa?$AAl?$AAi?$AAc?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN5@UpdateSett
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN6@UpdateSett
$LN5@UpdateSett:
	mov	DWORD PTR tv144[ebp], 0
$LN6@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv144[ebp]
	mov	BYTE PTR [eax+77], cl

; 675  :         bWrap       = data->GetInt(TEXT("wrap"), 0) != 0;

	push	0
	push	OFFSET ??_C@_19EOACODOG@?$AAw?$AAr?$AAa?$AAp?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN7@UpdateSett
	mov	DWORD PTR tv153[ebp], 1
	jmp	SHORT $LN8@UpdateSett
$LN7@UpdateSett:
	mov	DWORD PTR tv153[ebp], 0
$LN8@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv153[ebp]
	mov	BYTE PTR [eax+116], cl

; 676  :         bScrollMode = data->GetInt(TEXT("scrollMode"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BG@IFAPLEM@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN9@UpdateSett
	mov	DWORD PTR tv162[ebp], 1
	jmp	SHORT $LN10@UpdateSett
$LN9@UpdateSett:
	mov	DWORD PTR tv162[ebp], 0
$LN10@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv162[ebp]
	mov	BYTE PTR [eax+117], cl

; 677  :         bUnderline  = data->GetInt(TEXT("underline"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BE@PNICDMNG@?$AAu?$AAn?$AAd?$AAe?$AAr?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN11@UpdateSett
	mov	DWORD PTR tv171[ebp], 1
	jmp	SHORT $LN12@UpdateSett
$LN11@UpdateSett:
	mov	DWORD PTR tv171[ebp], 0
$LN12@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv171[ebp]
	mov	BYTE PTR [eax+78], cl

; 678  :         bVertical   = data->GetInt(TEXT("vertical"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BC@PBGLJJCL@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN13@UpdateSett
	mov	DWORD PTR tv180[ebp], 1
	jmp	SHORT $LN14@UpdateSett
$LN13@UpdateSett:
	mov	DWORD PTR tv180[ebp], 0
$LN14@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv180[ebp]
	mov	BYTE PTR [eax+79], cl

; 679  :         bUseExtents = data->GetInt(TEXT("useTextExtents"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BO@GHNBFLDK@?$AAu?$AAs?$AAe?$AAT?$AAe?$AAx?$AAt?$AAE?$AAx?$AAt?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN15@UpdateSett
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN16@UpdateSett
$LN15@UpdateSett:
	mov	DWORD PTR tv189[ebp], 0
$LN16@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv189[ebp]
	mov	BYTE PTR [eax+104], cl

; 680  :         extentWidth = data->GetInt(TEXT("extentWidth"), 0);

	push	0
	push	OFFSET ??_C@_1BI@JPNOLMK@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 681  :         extentHeight= data->GetInt(TEXT("extentHeight"), 0);

	push	0
	push	OFFSET ??_C@_1BK@NAHGECGB@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 682  :         align       = data->GetInt(TEXT("align"), 0);

	push	0
	push	OFFSET ??_C@_1M@PNKKPJEL@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 683  :         strFile     = data->GetString(TEXT("file"));

	push	0
	push	OFFSET ??_C@_19HMOGJADO@?$AAf?$AAi?$AAl?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 684  :         strText     = data->GetString(TEXT("text"));

	push	0
	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 685  :         mode        = data->GetInt(TEXT("mode"), 0);

	push	0
	push	OFFSET ??_C@_19KODKOACD@?$AAm?$AAo?$AAd?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax

; 686  :         bUsePointFiltering = data->GetInt(TEXT("pointFiltering"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BO@KLLAJFB@?$AAp?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN17@UpdateSett
	mov	DWORD PTR tv238[ebp], 1
	jmp	SHORT $LN18@UpdateSett
$LN17@UpdateSett:
	mov	DWORD PTR tv238[ebp], 0
$LN18@UpdateSett:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv238[ebp]
	mov	BYTE PTR [ecx+140], dl

; 687  : 
; 688  :         baseSize.x  = data->GetFloat(TEXT("baseSizeCX"), MIN_TEX_SIZE_W);

	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_1BG@BEGLIKF@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAX?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+124]

; 689  :         baseSize.y  = data->GetFloat(TEXT("baseSizeCY"), MIN_TEX_SIZE_H);

	push	ecx
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_1BG@LJPKNPMA@?$AAb?$AAa?$AAs?$AAe?$AAS?$AAi?$AAz?$AAe?$AAC?$AAY?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	eax, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [eax+128]

; 690  : 
; 691  :         bUseOutline    = data->GetInt(TEXT("useOutline")) != 0;

	push	0
	push	OFFSET ??_C@_1BG@EHEODNMJ@?$AAu?$AAs?$AAe?$AAO?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN19@UpdateSett
	mov	DWORD PTR tv261[ebp], 1
	jmp	SHORT $LN20@UpdateSett
$LN19@UpdateSett:
	mov	DWORD PTR tv261[ebp], 0
$LN20@UpdateSett:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv261[ebp]
	mov	BYTE PTR [edx+88], al

; 692  :         outlineColor   = data->GetInt(TEXT("outlineColor"), 0xFF000000);

	push	-16777216				; ff000000H
	push	OFFSET ??_C@_1BK@EELFPFLI@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], eax

; 693  :         outlineSize    = data->GetFloat(TEXT("outlineSize"), 2);

	push	ecx
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET ??_C@_1BI@JFNINKMC@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	call	DWORD PTR __imp_?GetFloat@XElement@@QBEMPB_WM@Z
	mov	ecx, DWORD PTR _this$[ebp]
	fstp	DWORD PTR [ecx+92]

; 694  :         outlineOpacity = data->GetInt(TEXT("outlineOpacity"), 100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1BO@DHAIDPLE@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+100], eax

; 695  : 
; 696  :         backgroundColor   = data->GetInt(TEXT("backgroundColor"), 0xFF000000);

	push	-16777216				; ff000000H
	push	OFFSET ??_C@_1CA@OHOPANAE@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+84], eax

; 697  :         backgroundOpacity = data->GetInt(TEXT("backgroundOpacity"), 0);

	push	0
	push	OFFSET ??_C@_1CE@NEPAKLHC@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+160]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+80], eax

; 698  : 
; 699  :         bUpdateTexture = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1

; 700  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSettings@TextOutputSource@@UAEXXZ ENDP		; TextOutputSource::UpdateSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?SetString@TextOutputSource@@UAEXPB_W0@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpName$ = 8						; size = 4
_lpVal$ = 12						; size = 4
?SetString@TextOutputSource@@UAEXPB_W0@Z PROC		; TextOutputSource::SetString, COMDAT
; _this$ = ecx

; 703  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 704  :         if(scmpi(lpName, TEXT("font")) == 0)

	push	OFFSET ??_C@_19BPOEAIEI@?$AAf?$AAo?$AAn?$AAt?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN5@SetString

; 705  :             strFont = lpVal;

	mov	ecx, DWORD PTR _lpVal$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
	jmp	SHORT $LN4@SetString
$LN5@SetString:

; 706  :         else if(scmpi(lpName, TEXT("text")) == 0)

	push	OFFSET ??_C@_19HIPAKEND@?$AAt?$AAe?$AAx?$AAt?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN3@SetString

; 707  :             strText = lpVal;

	mov	eax, DWORD PTR _lpVal$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
	jmp	SHORT $LN4@SetString
$LN3@SetString:

; 708  :         else if(scmpi(lpName, TEXT("file")) == 0)

	push	OFFSET ??_C@_19HMOGJADO@?$AAf?$AAi?$AAl?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN4@SetString

; 709  :             strFile = lpVal;

	mov	edx, DWORD PTR _lpVal$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
$LN4@SetString:

; 710  : 
; 711  :         bUpdateTexture = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 1

; 712  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetString@TextOutputSource@@UAEXPB_W0@Z ENDP		; TextOutputSource::SetString
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?SetInt@TextOutputSource@@UAEXPB_WH@Z
_TEXT	SEGMENT
tv203 = -36						; size = 4
tv173 = -32						; size = 4
tv165 = -28						; size = 4
tv157 = -24						; size = 4
tv149 = -20						; size = 4
tv141 = -16						; size = 4
tv133 = -12						; size = 4
tv93 = -8						; size = 4
_this$ = -4						; size = 4
_lpName$ = 8						; size = 4
_iValue$ = 12						; size = 4
?SetInt@TextOutputSource@@UAEXPB_WH@Z PROC		; TextOutputSource::SetInt, COMDAT
; _this$ = ecx

; 715  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 716  :         if(scmpi(lpName, TEXT("color")) == 0)

	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN40@SetInt

; 717  :             color = iValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+60], edx
	jmp	$LN1@SetInt
$LN40@SetInt:

; 718  :         else if(scmpi(lpName, TEXT("fontSize")) == 0)

	push	OFFSET ??_C@_1BC@JNDEGBLF@?$AAf?$AAo?$AAn?$AAt?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN38@SetInt

; 719  :             size = iValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+56], edx
	jmp	$LN1@SetInt
$LN38@SetInt:

; 720  :         else if(scmpi(lpName, TEXT("textOpacity")) == 0)

	push	OFFSET ??_C@_1BI@IBCEPOLC@?$AAt?$AAe?$AAx?$AAt?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN36@SetInt

; 721  :             opacity = iValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+64], edx
	jmp	$LN1@SetInt
$LN36@SetInt:

; 722  :         else if(scmpi(lpName, TEXT("scrollSpeed")) == 0)

	push	OFFSET ??_C@_1BI@DNMBKHIA@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAS?$AAp?$AAe?$AAe?$AAd?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN34@SetInt

; 723  :         {
; 724  :             if(scrollSpeed == 0)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+72], 0
	jne	SHORT $LN33@SetInt

; 725  :                 scrollValue = 0.0f;

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [edx+20], xmm0
$LN33@SetInt:

; 726  :             scrollSpeed = iValue;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [eax+72], ecx
	jmp	$LN1@SetInt
$LN34@SetInt:

; 727  :         }
; 728  :         else if(scmpi(lpName, TEXT("bold")) == 0)

	push	OFFSET ??_C@_19LNOFOKG@?$AAb?$AAo?$AAl?$AAd?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN31@SetInt

; 729  :             bBold = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN43@SetInt
	mov	DWORD PTR tv93[ebp], 1
	jmp	SHORT $LN44@SetInt
$LN43@SetInt:
	mov	DWORD PTR tv93[ebp], 0
$LN44@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv93[ebp]
	mov	BYTE PTR [eax+76], cl
	jmp	$LN1@SetInt
$LN31@SetInt:

; 730  :         else if(scmpi(lpName, TEXT("italic")) == 0)

	push	OFFSET ??_C@_1O@JEIKJABP@?$AAi?$AAt?$AAa?$AAl?$AAi?$AAc?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN29@SetInt

; 731  :             bItalic = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN45@SetInt
	mov	DWORD PTR tv133[ebp], 1
	jmp	SHORT $LN46@SetInt
$LN45@SetInt:
	mov	DWORD PTR tv133[ebp], 0
$LN46@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv133[ebp]
	mov	BYTE PTR [eax+77], cl
	jmp	$LN1@SetInt
$LN29@SetInt:

; 732  :         else if(scmpi(lpName, TEXT("wrap")) == 0)

	push	OFFSET ??_C@_19EOACODOG@?$AAw?$AAr?$AAa?$AAp?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN27@SetInt

; 733  :             bWrap = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN47@SetInt
	mov	DWORD PTR tv141[ebp], 1
	jmp	SHORT $LN48@SetInt
$LN47@SetInt:
	mov	DWORD PTR tv141[ebp], 0
$LN48@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv141[ebp]
	mov	BYTE PTR [eax+116], cl
	jmp	$LN1@SetInt
$LN27@SetInt:

; 734  :         else if(scmpi(lpName, TEXT("scrollMode")) == 0)

	push	OFFSET ??_C@_1BG@IFAPLEM@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN25@SetInt

; 735  :             bScrollMode = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN49@SetInt
	mov	DWORD PTR tv149[ebp], 1
	jmp	SHORT $LN50@SetInt
$LN49@SetInt:
	mov	DWORD PTR tv149[ebp], 0
$LN50@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv149[ebp]
	mov	BYTE PTR [eax+117], cl
	jmp	$LN1@SetInt
$LN25@SetInt:

; 736  :         else if(scmpi(lpName, TEXT("underline")) == 0)

	push	OFFSET ??_C@_1BE@PNICDMNG@?$AAu?$AAn?$AAd?$AAe?$AAr?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN23@SetInt

; 737  :             bUnderline = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN51@SetInt
	mov	DWORD PTR tv157[ebp], 1
	jmp	SHORT $LN52@SetInt
$LN51@SetInt:
	mov	DWORD PTR tv157[ebp], 0
$LN52@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv157[ebp]
	mov	BYTE PTR [eax+78], cl
	jmp	$LN1@SetInt
$LN23@SetInt:

; 738  :         else if(scmpi(lpName, TEXT("vertical")) == 0)

	push	OFFSET ??_C@_1BC@PBGLJJCL@?$AAv?$AAe?$AAr?$AAt?$AAi?$AAc?$AAa?$AAl?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN21@SetInt

; 739  :             bVertical = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN53@SetInt
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN54@SetInt
$LN53@SetInt:
	mov	DWORD PTR tv165[ebp], 0
$LN54@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv165[ebp]
	mov	BYTE PTR [eax+79], cl
	jmp	$LN1@SetInt
$LN21@SetInt:

; 740  :         else if(scmpi(lpName, TEXT("useTextExtents")) == 0)

	push	OFFSET ??_C@_1BO@GHNBFLDK@?$AAu?$AAs?$AAe?$AAT?$AAe?$AAx?$AAt?$AAE?$AAx?$AAt?$AAe?$AAn?$AAt?$AAs?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN19@SetInt

; 741  :             bUseExtents = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN55@SetInt
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN56@SetInt
$LN55@SetInt:
	mov	DWORD PTR tv173[ebp], 0
$LN56@SetInt:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv173[ebp]
	mov	BYTE PTR [eax+104], cl
	jmp	$LN1@SetInt
$LN19@SetInt:

; 742  :         else if(scmpi(lpName, TEXT("extentWidth")) == 0)

	push	OFFSET ??_C@_1BI@JPNOLMK@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?$AA@
	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN17@SetInt

; 743  :         {
; 744  :             showExtentTime = 2.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [eax+24], xmm0

; 745  :             extentWidth = iValue;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [ecx+108], edx
	jmp	$LN1@SetInt
$LN17@SetInt:

; 746  :         }
; 747  :         else if(scmpi(lpName, TEXT("extentHeight")) == 0)

	push	OFFSET ??_C@_1BK@NAHGECGB@?$AAe?$AAx?$AAt?$AAe?$AAn?$AAt?$AAH?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN15@SetInt

; 748  :         {
; 749  :             showExtentTime = 2.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR [ecx+24], xmm0

; 750  :             extentHeight = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+112], eax
	jmp	$LN1@SetInt
$LN15@SetInt:

; 751  :         }
; 752  :         else if(scmpi(lpName, TEXT("align")) == 0)

	push	OFFSET ??_C@_1M@PNKKPJEL@?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN13@SetInt

; 753  :             align = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+120], eax
	jmp	$LN1@SetInt
$LN13@SetInt:

; 754  :         else if(scmpi(lpName, TEXT("mode")) == 0)

	push	OFFSET ??_C@_19KODKOACD@?$AAm?$AAo?$AAd?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN11@SetInt

; 755  :             mode = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+28], eax
	jmp	$LN1@SetInt
$LN11@SetInt:

; 756  :         else if(scmpi(lpName, TEXT("useOutline")) == 0)

	push	OFFSET ??_C@_1BG@EHEODNMJ@?$AAu?$AAs?$AAe?$AAO?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN9@SetInt

; 757  :             bUseOutline = iValue != 0;

	cmp	DWORD PTR _iValue$[ebp], 0
	je	SHORT $LN57@SetInt
	mov	DWORD PTR tv203[ebp], 1
	jmp	SHORT $LN58@SetInt
$LN57@SetInt:
	mov	DWORD PTR tv203[ebp], 0
$LN58@SetInt:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv203[ebp]
	mov	BYTE PTR [edx+88], al
	jmp	SHORT $LN1@SetInt
$LN9@SetInt:

; 758  :         else if(scmpi(lpName, TEXT("outlineColor")) == 0)

	push	OFFSET ??_C@_1BK@EELFPFLI@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN7@SetInt

; 759  :             outlineColor = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+96], eax
	jmp	SHORT $LN1@SetInt
$LN7@SetInt:

; 760  :         else if(scmpi(lpName, TEXT("outlineOpacity")) == 0)

	push	OFFSET ??_C@_1BO@DHAIDPLE@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN5@SetInt

; 761  :             outlineOpacity = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+100], eax
	jmp	SHORT $LN1@SetInt
$LN5@SetInt:

; 762  :         else if(scmpi(lpName, TEXT("backgroundColor")) == 0)

	push	OFFSET ??_C@_1CA@OHOPANAE@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN3@SetInt

; 763  :             backgroundColor = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+84], eax
	jmp	SHORT $LN1@SetInt
$LN3@SetInt:

; 764  :         else if(scmpi(lpName, TEXT("backgroundOpacity")) == 0)

	push	OFFSET ??_C@_1CE@NEPAKLHC@?$AAb?$AAa?$AAc?$AAk?$AAg?$AAr?$AAo?$AAu?$AAn?$AAd?$AAO?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN1@SetInt

; 765  :             backgroundOpacity = iValue;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [edx+80], eax
$LN1@SetInt:

; 766  : 
; 767  :         bUpdateTexture = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+4], 1

; 768  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetInt@TextOutputSource@@UAEXPB_WH@Z ENDP		; TextOutputSource::SetInt
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?SetFloat@TextOutputSource@@UAEXPB_WM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lpName$ = 8						; size = 4
_fValue$ = 12						; size = 4
?SetFloat@TextOutputSource@@UAEXPB_WM@Z PROC		; TextOutputSource::SetFloat, COMDAT
; _this$ = ecx

; 771  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 772  :         if(scmpi(lpName, TEXT("outlineSize")) == 0)

	push	OFFSET ??_C@_1BI@JFNINKMC@?$AAo?$AAu?$AAt?$AAl?$AAi?$AAn?$AAe?$AAS?$AAi?$AAz?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN1@SetFloat

; 773  :             outlineSize = fValue;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR _fValue$[ebp]
	movss	DWORD PTR [ecx+92], xmm0
$LN1@SetFloat:

; 774  : 
; 775  :         bUpdateTexture = true;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1

; 776  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetFloat@TextOutputSource@@UAEXPB_WM@Z ENDP		; TextOutputSource::SetFloat
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GGraphicsPath@Gdiplus@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGraphicsPath@Gdiplus@@QAEPAXI@Z PROC		; Gdiplus::GraphicsPath::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1GraphicsPath@Gdiplus@@QAE@XZ		; Gdiplus::GraphicsPath::~GraphicsPath
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGraphicsPath@Gdiplus@@QAEPAXI@Z ENDP		; Gdiplus::GraphicsPath::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GGraphics@Gdiplus@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GGraphics@Gdiplus@@QAEPAXI@Z PROC			; Gdiplus::Graphics::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1Graphics@Gdiplus@@QAE@XZ		; Gdiplus::Graphics::~Graphics
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3GdiplusBase@Gdiplus@@SAXPAX@Z	; Gdiplus::GdiplusBase::operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GGraphics@Gdiplus@@QAEPAXI@Z ENDP			; Gdiplus::Graphics::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GTextOutputSource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GTextOutputSource@@UAEPAXI@Z PROC			; TextOutputSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1TextOutputSource@@UAE@XZ		; TextOutputSource::~TextOutputSource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GTextOutputSource@@UAEPAXI@Z ENDP			; TextOutputSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?FontEnumProcThingy@@YGHPAUtagENUMLOGFONTEXW@@PAUtagNEWTEXTMETRICEXW@@KPAUConfigTextSourceInfo@@@Z
_TEXT	SEGMENT
_logicalData$ = 8					; size = 4
_physicalData$ = 12					; size = 4
_fontType$ = 16						; size = 4
_configInfo$ = 20					; size = 4
?FontEnumProcThingy@@YGHPAUtagENUMLOGFONTEXW@@PAUtagNEWTEXTMETRICEXW@@KPAUConfigTextSourceInfo@@@Z PROC ; FontEnumProcThingy, COMDAT

; 800  : {

	push	ebp
	mov	ebp, esp

; 801  :     if(fontType == TRUETYPE_FONTTYPE) //HomeWorld - GDI+ doesn't like anything other than truetype

	cmp	DWORD PTR _fontType$[ebp], 4
	jne	SHORT $LN1@FontEnumPr

; 802  :     {
; 803  :         configInfo->fontNames << logicalData->elfFullName;

	mov	eax, DWORD PTR _logicalData$[ebp]
	add	eax, 92					; 0000005cH
	push	eax
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_??6StringList@@QAEAAV0@PB_W@Z

; 804  :         configInfo->fontFaces << logicalData->elfLogFont.lfFaceName;

	mov	ecx, DWORD PTR _logicalData$[ebp]
	add	ecx, 28					; 0000001cH
	push	ecx
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??6StringList@@QAEAAV0@PB_W@Z
$LN1@FontEnumPr:

; 805  :     }
; 806  : 
; 807  :     return 1;

	mov	eax, 1

; 808  : }

	pop	ebp
	ret	16					; 00000010H
?FontEnumProcThingy@@YGHPAUtagENUMLOGFONTEXW@@PAUtagNEWTEXTMETRICEXW@@KPAUConfigTextSourceInfo@@@Z ENDP ; FontEnumProcThingy
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?DoCancelStuff@@YAXPAUHWND__@@@Z
_TEXT	SEGMENT
_configInfo$ = -8					; size = 4
_source$ = -4						; size = 4
_hwnd$ = 8						; size = 4
?DoCancelStuff@@YAXPAUHWND__@@@Z PROC			; DoCancelStuff, COMDAT

; 811  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 812  :     ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$[ebp], eax

; 813  :     ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	ecx, DWORD PTR _configInfo$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$[ebp], eax

; 814  :     //XElement *data = configInfo->data;
; 815  : 
; 816  :     if(source)

	cmp	DWORD PTR _source$[ebp], 0
	je	SHORT $LN2@DoCancelSt

; 817  :         source->UpdateSettings();

	mov	ecx, DWORD PTR _source$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$[ebp]
	mov	eax, DWORD PTR [edx+20]
	call	eax
$LN2@DoCancelSt:

; 818  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DoCancelStuff@@YAXPAUHWND__@@@Z ENDP			; DoCancelStuff
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?FindFontFace@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z
_TEXT	SEGMENT
_targetID$1 = -12					; size = 4
_id$ = -8						; size = 4
_i$2 = -4						; size = 4
_configInfo$ = 8					; size = 4
_hwndFontList$ = 12					; size = 4
_lpFontFace$ = 16					; size = 4
?FindFontFace@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z PROC ; FindFontFace, COMDAT

; 821  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 822  :     UINT id = configInfo->fontFaces.FindValueIndexI(lpFontFace);

	mov	eax, DWORD PTR _lpFontFace$[ebp]
	push	eax
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_?FindValueIndexI@StringList@@QBEIPB_W@Z
	mov	DWORD PTR _id$[ebp], eax

; 823  :     if(id == INVALID)

	cmp	DWORD PTR _id$[ebp], -1
	jne	SHORT $LN6@FindFontFa

; 824  :         return INVALID;

	or	eax, -1
	jmp	SHORT $LN7@FindFontFa

; 825  :     else

	jmp	SHORT $LN5@FindFontFa
$LN6@FindFontFa:

; 826  :     {
; 827  :         for(UINT i=0; i<configInfo->fontFaces.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@FindFontFa
$LN3@FindFontFa:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@FindFontFa:
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN5@FindFontFa

; 828  :         {
; 829  :             UINT targetID = (UINT)SendMessage(hwndFontList, CB_GETITEMDATA, i, 0);

	push	0
	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	push	336					; 00000150H
	mov	eax, DWORD PTR _hwndFontList$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _targetID$1[ebp], eax

; 830  :             if(targetID == id)

	mov	ecx, DWORD PTR _targetID$1[ebp]
	cmp	ecx, DWORD PTR _id$[ebp]
	jne	SHORT $LN1@FindFontFa

; 831  :                 return i;

	mov	eax, DWORD PTR _i$2[ebp]
	jmp	SHORT $LN7@FindFontFa
$LN1@FindFontFa:

; 832  :         }

	jmp	SHORT $LN3@FindFontFa
$LN5@FindFontFa:

; 833  :     }
; 834  : 
; 835  :     return INVALID;

	or	eax, -1
$LN7@FindFontFa:

; 836  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindFontFace@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ENDP ; FindFontFace
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z
_TEXT	SEGMENT
_configInfo$ = 8					; size = 4
_hwndFontList$ = 12					; size = 4
_lpFontFace$ = 16					; size = 4
?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z PROC ; FindFontName, COMDAT

; 839  : {

	push	ebp
	mov	ebp, esp

; 840  :     return configInfo->fontNames.FindValueIndexI(lpFontFace);

	mov	eax, DWORD PTR _lpFontFace$[ebp]
	push	eax
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_?FindValueIndexI@StringList@@QBEIPB_W@Z

; 841  : }

	pop	ebp
	ret	0
?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ENDP ; FindFontName
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z
_TEXT	SEGMENT
_actualID$ = -8						; size = 4
_id$ = -4						; size = 4
_configInfo$ = 8					; size = 4
_hwndFontList$ = 12					; size = 4
?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z PROC ; GetFontFace, COMDAT

; 844  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 845  :     UINT id = (UINT)SendMessage(hwndFontList, CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	mov	eax, DWORD PTR _hwndFontList$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$[ebp], eax

; 846  :     if(id == CB_ERR)

	cmp	DWORD PTR _id$[ebp], -1
	jne	SHORT $LN1@GetFontFac

; 847  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetFontFac
$LN1@GetFontFac:

; 848  : 
; 849  :     UINT actualID = (UINT)SendMessage(hwndFontList, CB_GETITEMDATA, id, 0);

	push	0
	mov	ecx, DWORD PTR _id$[ebp]
	push	ecx
	push	336					; 00000150H
	mov	edx, DWORD PTR _hwndFontList$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _actualID$[ebp], eax

; 850  :     return configInfo->fontFaces[actualID];

	mov	eax, DWORD PTR _actualID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _configInfo$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
$LN2@GetFontFac:

; 851  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z ENDP ; GetFontFace
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\textoutputsource.cpp
;	COMDAT ?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_ofn$1 = -1980						; size = 88
$T2 = -1892						; size = 8
_textFile$3 = -1884					; size = 24
tv2541 = -1860						; size = 8
$T4 = -1852						; size = 8
tv2488 = -1844						; size = 8
tv2478 = -1836						; size = 8
tv2568 = -1828						; size = 8
tv2559 = -1820						; size = 8
tv2550 = -1812						; size = 8
_graphics$5 = -1804					; size = 8
_bOpenFile$6 = -1796					; size = 4
_configInfo$7 = -1792					; size = 4
_configInfo$8 = -1788					; size = 4
_strError$9 = -1784					; size = 8
_bUsePointFilter$10 = -1776				; size = 4
_strError$11 = -1772					; size = 8
_id$12 = -1764						; size = 4
_lpFont$13 = -1760					; size = 4
_pointFiltering$14 = -1756				; size = 4
_strError$15 = -1752					; size = 8
_hDCtest$16 = -1744					; size = 4
_font$17 = -1740					; size = 8
_format$18 = -1732					; size = 8
_strText$19 = -1724					; size = 8
tv415 = -1716						; size = 4
tv421 = -1712						; size = 4
tv329 = -1708						; size = 4
tv1345 = -1704						; size = 4
tv323 = -1700						; size = 4
tv1433 = -1696						; size = 4
tv1078 = -1692						; size = 4
tv1156 = -1688						; size = 4
tv2564 = -1684						; size = 4
tv1566 = -1680						; size = 4
tv2546 = -1676						; size = 4
_strFont$20 = -1672					; size = 8
tv2474 = -1664						; size = 4
tv285 = -1660						; size = 4
tv1413 = -1656						; size = 4
tv281 = -1652						; size = 4
tv1316 = -1648						; size = 4
tv270 = -1644						; size = 4
_align$21 = -1640					; size = 4
tv257 = -1636						; size = 4
tv1061 = -1632						; size = 4
tv244 = -1628						; size = 4
tv2555 = -1624						; size = 4
tv1050 = -1620						; size = 4
tv2537 = -1616						; size = 4
tv1009 = -1612						; size = 4
tv2484 = -1608						; size = 4
tv982 = -1604						; size = 4
_id$22 = -1600						; size = 4
tv963 = -1596						; size = 4
tv1423 = -1592						; size = 4
tv898 = -1588						; size = 4
tv1403 = -1584						; size = 4
_configInfo$23 = -1580					; size = 4
tv1326 = -1576						; size = 4
tv641 = -1572						; size = 4
_configInfo$24 = -1568					; size = 4
tv606 = -1564						; size = 4
_configInfo$25 = -1560					; size = 4
tv558 = -1556						; size = 4
_configInfo$26 = -1552					; size = 4
tv535 = -1548						; size = 4
tv1067 = -1544						; size = 4
tv518 = -1540						; size = 4
tv469 = -1536						; size = 4
tv1712 = -1532						; size = 4
tv231 = -1528						; size = 4
_extentHeight$27 = -1524				; size = 4
tv974 = -1520						; size = 4
_extentWidth$28 = -1516					; size = 4
_configInfo$29 = -1512					; size = 4
_bUseTextExtents$30 = -1508				; size = 4
_configInfo$31 = -1504					; size = 4
_bUseOutline$32 = -1500					; size = 4
_id$33 = -1496						; size = 4
tv1808 = -1492						; size = 4
tv615 = -1488						; size = 4
tv1795 = -1484						; size = 4
tv602 = -1480						; size = 4
tv1782 = -1476						; size = 4
tv546 = -1472						; size = 4
_bItalic$34 = -1468					; size = 4
tv529 = -1464						; size = 4
_bBold$35 = -1460					; size = 4
tv512 = -1456						; size = 4
tv1715 = -1452						; size = 4
tv998 = -1448						; size = 4
_strText$36 = -1444					; size = 8
_rcf$37 = -1436						; size = 16
_strOutputText$38 = -1420				; size = 8
_source$39 = -1412					; size = 4
tv735 = -1408						; size = 4
_source$40 = -1404					; size = 4
_source$41 = -1400					; size = 4
_mode$42 = -1396					; size = 4
_source$43 = -1392					; size = 4
_outlineSize$44 = -1388					; size = 4
_formatFlags$45 = -1384					; size = 4
_bVertical$46 = -1380					; size = 4
_strFontDisplayName$47 = -1376				; size = 8
_id$48 = -1368						; size = 4
_color$49 = -1364					; size = 4
_source$50 = -1360					; size = 4
_strFile$51 = -1356					; size = 8
tv842 = -1348						; size = 4
tv909 = -1344						; size = 4
_hwndAlign$52 = -1340					; size = 4
_hDC$53 = -1336						; size = 4
_strFont$54 = -1332					; size = 8
tv64 = -1324						; size = 4
_hwndFonts$55 = -1320					; size = 4
_bUseFile$56 = -1316					; size = 4
_i$57 = -1312						; size = 4
_align$58 = -1308					; size = 4
_configInfo$59 = -1304					; size = 4
_source$60 = -1300					; size = 4
_fontSize$61 = -1296					; size = 4
_configInfo$62 = -1292					; size = 4
_bUseExtents$63 = -1286					; size = 1
_bVertical$64 = -1285					; size = 1
_bWrap$65 = -1284					; size = 1
_bVertical$66 = -1283					; size = 1
_bVertical$67 = -1282					; size = 1
_bScrollMode$68 = -1281					; size = 1
_source$69 = -1280					; size = 4
_val$70 = -1276						; size = 4
tv657 = -1272						; size = 4
_configInfo$71 = -1268					; size = 4
_bWrap$72 = -1262					; size = 1
_bWrap$73 = -1261					; size = 1
_source$74 = -1260					; size = 4
_source$75 = -1256					; size = 4
_bChecked$76 = -1252					; size = 4
_data$77 = -1248					; size = 4
_data$78 = -1244					; size = 4
_bChecked$79 = -1237					; size = 1
_lf$80 = -1236						; size = 92
_lf$81 = -1144						; size = 92
_curDirectory$82 = -1052				; size = 522
_lpFile$83 = -528					; size = 522
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z PROC		; ConfigureTextProc, COMDAT

; 854  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1980				; 000007bcH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 855  :     static bool bInitializedDialog = false;
; 856  : 
; 857  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	ja	SHORT $LN206@ConfigureT
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN112@ConfigureT
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN104@ConfigureT
	cmp	DWORD PTR tv64[ebp], 16			; 00000010H
	je	$LN1@ConfigureT
	jmp	$LN113@ConfigureT
$LN206@ConfigureT:
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN103@ConfigureT
	jmp	$LN113@ConfigureT
$LN112@ConfigureT:

; 858  :     {
; 859  :         case WM_INITDIALOG:
; 860  :             {
; 861  :                 ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)lParam;

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _configInfo$62[ebp], ecx

; 862  :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)configInfo);

	mov	edx, DWORD PTR _configInfo$62[ebp]
	push	edx
	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12

; 863  :                 LocalizeWindow(hwnd);

	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 864  : 
; 865  :                 XElement *data = configInfo->data;

	mov	edx, DWORD PTR _configInfo$62[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _data$77[ebp], eax

; 866  : 
; 867  :                 //-----------------------------------------
; 868  : 
; 869  :                 HDC hDCtest = GetDC(hwnd);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hDCtest$16[ebp], eax

; 870  : 
; 871  :                 LOGFONT lf;
; 872  :                 zero(&lf, sizeof(lf));

	push	92					; 0000005cH
	lea	edx, DWORD PTR _lf$80[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 873  :                 EnumFontFamiliesEx(hDCtest, &lf, (FONTENUMPROC)FontEnumProcThingy, (LPARAM)configInfo, 0);

	push	0
	mov	eax, DWORD PTR _configInfo$62[ebp]
	push	eax
	push	OFFSET ?FontEnumProcThingy@@YGHPAUtagENUMLOGFONTEXW@@PAUtagNEWTEXTMETRICEXW@@KPAUConfigTextSourceInfo@@@Z ; FontEnumProcThingy
	lea	ecx, DWORD PTR _lf$80[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDCtest$16[ebp]
	push	edx
	call	DWORD PTR __imp__EnumFontFamiliesExW@20

; 874  : 
; 875  :                 HWND hwndFonts = GetDlgItem(hwnd, IDC_FONT);

	push	1112					; 00000458H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndFonts$55[ebp], eax

; 876  :                 for(UINT i=0; i<configInfo->fontNames.Num(); i++)

	mov	DWORD PTR _i$57[ebp], 0
	jmp	SHORT $LN111@ConfigureT
$LN110@ConfigureT:
	mov	ecx, DWORD PTR _i$57[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$57[ebp], ecx
$LN111@ConfigureT:
	mov	ecx, DWORD PTR _configInfo$62[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _i$57[ebp], eax
	jae	SHORT $LN109@ConfigureT

; 877  :                 {
; 878  :                     int id = (int)SendMessage(hwndFonts, CB_ADDSTRING, 0, (LPARAM)configInfo->fontNames[i].Array());

	mov	edx, DWORD PTR _i$57[ebp]
	push	edx
	mov	ecx, DWORD PTR _configInfo$62[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndFonts$55[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$12[ebp], eax

; 879  :                     SendMessage(hwndFonts, CB_SETITEMDATA, id, (LPARAM)i);

	mov	ecx, DWORD PTR _i$57[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$12[ebp]
	push	edx
	push	337					; 00000151H
	mov	eax, DWORD PTR _hwndFonts$55[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 880  :                 }

	jmp	$LN110@ConfigureT
$LN109@ConfigureT:

; 881  : 
; 882  :                 CTSTR lpFont = data->GetString(TEXT("font"));

	push	0
	push	OFFSET $SG4294722748
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpFont$13[ebp], eax

; 883  :                 UINT id = FindFontFace(configInfo, hwndFonts, lpFont);

	mov	ecx, DWORD PTR _lpFont$13[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwndFonts$55[ebp]
	push	edx
	mov	eax, DWORD PTR _configInfo$62[ebp]
	push	eax
	call	?FindFontFace@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ; FindFontFace
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _id$48[ebp], eax

; 884  :                 if(id == INVALID)

	cmp	DWORD PTR _id$48[ebp], -1
	jne	SHORT $LN108@ConfigureT

; 885  :                     id = (UINT)SendMessage(hwndFonts, CB_FINDSTRINGEXACT, -1, (LPARAM)TEXT("Arial"));

	push	OFFSET $SG4294722747
	push	-1
	push	344					; 00000158H
	mov	ecx, DWORD PTR _hwndFonts$55[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$48[ebp], eax
$LN108@ConfigureT:

; 886  : 
; 887  :                 SendMessage(hwndFonts, CB_SETCURSEL, id, 0);

	push	0
	mov	edx, DWORD PTR _id$48[ebp]
	push	edx
	push	334					; 0000014eH
	mov	eax, DWORD PTR _hwndFonts$55[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 888  : 
; 889  :                 //-----------------------------------------
; 890  : 
; 891  :                 SendMessage(GetDlgItem(hwnd, IDC_TEXTSIZE), UDM_SETRANGE32, 5, MAX_TEX_SIZE_H);

	push	8192					; 00002000H
	push	5
	push	1135					; 0000046fH
	push	1079					; 00000437H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 892  :                 SendMessage(GetDlgItem(hwnd, IDC_TEXTSIZE), UDM_SETPOS32, 0, data->GetInt(TEXT("fontSize"), 48));

	push	48					; 00000030H
	push	OFFSET $SG4294722746
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1079					; 00000437H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 893  : 
; 894  :                 //-----------------------------------------
; 895  : 
; 896  :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), data->GetInt(TEXT("color"), 0xFFFFFFFF));

	push	-1
	push	OFFSET $SG4294722745
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	1104					; 00000450H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 897  : 
; 898  :                 SendMessage(GetDlgItem(hwnd, IDC_TEXTOPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1118					; 0000045eH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 899  :                 SendMessage(GetDlgItem(hwnd, IDC_TEXTOPACITY), UDM_SETPOS32, 0, data->GetInt(TEXT("textOpacity"), 100));

	push	100					; 00000064H
	push	OFFSET $SG4294722744
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1118					; 0000045eH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 900  : 
; 901  :                 SendMessage(GetDlgItem(hwnd, IDC_SCROLLSPEED), UDM_SETRANGE32, -4095, 4095);

	push	4095					; 00000fffH
	push	-4095					; fffff001H
	push	1135					; 0000046fH
	push	1042					; 00000412H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 902  :                 SendMessage(GetDlgItem(hwnd, IDC_SCROLLSPEED), UDM_SETPOS32, 0, data->GetInt(TEXT("scrollSpeed"), 0));

	push	0
	push	OFFSET $SG4294722743
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 903  : 
; 904  :                 SendMessage(GetDlgItem(hwnd, IDC_BOLD), BM_SETCHECK, data->GetInt(TEXT("bold"), 0) ? BST_CHECKED : BST_UNCHECKED, 0);

	push	0
	push	OFFSET $SG4294722742
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN117@ConfigureT
	mov	DWORD PTR tv231[ebp], 1
	jmp	SHORT $LN118@ConfigureT
$LN117@ConfigureT:
	mov	DWORD PTR tv231[ebp], 0
$LN118@ConfigureT:
	push	0
	mov	edx, DWORD PTR tv231[ebp]
	push	edx
	push	241					; 000000f1H
	push	1126					; 00000466H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 905  :                 SendMessage(GetDlgItem(hwnd, IDC_ITALIC), BM_SETCHECK, data->GetInt(TEXT("italic"), 0) ? BST_CHECKED : BST_UNCHECKED, 0);

	push	0
	push	OFFSET $SG4294722741
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN119@ConfigureT
	mov	DWORD PTR tv244[ebp], 1
	jmp	SHORT $LN120@ConfigureT
$LN119@ConfigureT:
	mov	DWORD PTR tv244[ebp], 0
$LN120@ConfigureT:
	push	0
	mov	ecx, DWORD PTR tv244[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1127					; 00000467H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 906  :                 SendMessage(GetDlgItem(hwnd, IDC_UNDERLINE), BM_SETCHECK, data->GetInt(TEXT("underline"), 0) ? BST_CHECKED : BST_UNCHECKED, 0);

	push	0
	push	OFFSET $SG4294722740
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN121@ConfigureT
	mov	DWORD PTR tv257[ebp], 1
	jmp	SHORT $LN122@ConfigureT
$LN121@ConfigureT:
	mov	DWORD PTR tv257[ebp], 0
$LN122@ConfigureT:
	push	0
	mov	eax, DWORD PTR tv257[ebp]
	push	eax
	push	241					; 000000f1H
	push	1123					; 00000463H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 907  : 
; 908  :                 SendMessage(GetDlgItem(hwnd, IDC_VERTICALSCRIPT), BM_SETCHECK, data->GetInt(TEXT("vertical"), 0) ? BST_CHECKED : BST_UNCHECKED, 0);

	push	0
	push	OFFSET $SG4294722739
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN123@ConfigureT
	mov	DWORD PTR tv270[ebp], 1
	jmp	SHORT $LN124@ConfigureT
$LN123@ConfigureT:
	mov	DWORD PTR tv270[ebp], 0
$LN124@ConfigureT:
	push	0
	mov	edx, DWORD PTR tv270[ebp]
	push	edx
	push	241					; 000000f1H
	push	1122					; 00000462H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 909  : 
; 910  :                 BOOL bUsePointFilter = data->GetInt(TEXT("pointFiltering"), 0) != 0;

	push	0
	push	OFFSET $SG4294722738
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN125@ConfigureT
	mov	DWORD PTR tv281[ebp], 1
	jmp	SHORT $LN126@ConfigureT
$LN125@ConfigureT:
	mov	DWORD PTR tv281[ebp], 0
$LN126@ConfigureT:
	mov	ecx, DWORD PTR tv281[ebp]
	mov	DWORD PTR _bUsePointFilter$10[ebp], ecx

; 911  :                 SendMessage(GetDlgItem(hwnd, IDC_POINTFILTERING), BM_SETCHECK, bUsePointFilter ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bUsePointFilter$10[ebp], 0
	je	SHORT $LN127@ConfigureT
	mov	DWORD PTR tv285[ebp], 1
	jmp	SHORT $LN128@ConfigureT
$LN127@ConfigureT:
	mov	DWORD PTR tv285[ebp], 0
$LN128@ConfigureT:
	push	0
	mov	edx, DWORD PTR tv285[ebp]
	push	edx
	push	241					; 000000f1H
	push	1036					; 0000040cH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 912  : 
; 913  :                 //-----------------------------------------
; 914  : 
; 915  :                 CCSetColor(GetDlgItem(hwnd, IDC_BACKGROUNDCOLOR), data->GetInt(TEXT("backgroundColor"), 0xFF000000));

	push	-16777216				; ff000000H
	push	OFFSET $SG4294722737
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	1109					; 00000455H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 916  : 
; 917  :                 SendMessage(GetDlgItem(hwnd, IDC_BACKGROUNDOPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1121					; 00000461H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 918  :                 SendMessage(GetDlgItem(hwnd, IDC_BACKGROUNDOPACITY), UDM_SETPOS32, 0, data->GetInt(TEXT("backgroundOpacity"), 0));

	push	0
	push	OFFSET $SG4294722736
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1121					; 00000461H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 919  : 
; 920  :                 //-----------------------------------------
; 921  : 
; 922  :                 bool bChecked = data->GetInt(TEXT("useOutline"), 0) != 0;

	push	0
	push	OFFSET $SG4294722735
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN129@ConfigureT
	mov	DWORD PTR tv323[ebp], 1
	jmp	SHORT $LN130@ConfigureT
$LN129@ConfigureT:
	mov	DWORD PTR tv323[ebp], 0
$LN130@ConfigureT:
	mov	cl, BYTE PTR tv323[ebp]
	mov	BYTE PTR _bChecked$79[ebp], cl

; 923  :                 SendMessage(GetDlgItem(hwnd, IDC_USEOUTLINE), BM_SETCHECK, bChecked ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	test	edx, edx
	je	SHORT $LN131@ConfigureT
	mov	DWORD PTR tv329[ebp], 1
	jmp	SHORT $LN132@ConfigureT
$LN131@ConfigureT:
	mov	DWORD PTR tv329[ebp], 0
$LN132@ConfigureT:
	push	0
	mov	eax, DWORD PTR tv329[ebp]
	push	eax
	push	241					; 000000f1H
	push	1099					; 0000044bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 924  : 
; 925  :                 EnableWindow(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS_EDIT), bChecked);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	push	edx
	push	1084					; 0000043cH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 926  :                 EnableWindow(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS), bChecked);

	movzx	ecx, BYTE PTR _bChecked$79[ebp]
	push	ecx
	push	1120					; 00000460H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 927  :                 EnableWindow(GetDlgItem(hwnd, IDC_OUTLINECOLOR), bChecked);

	movzx	eax, BYTE PTR _bChecked$79[ebp]
	push	eax
	push	1105					; 00000451H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 928  :                 EnableWindow(GetDlgItem(hwnd, IDC_OUTLINEOPACITY_EDIT), bChecked);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	push	edx
	push	1154					; 00000482H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 929  :                 EnableWindow(GetDlgItem(hwnd, IDC_OUTLINEOPACITY), bChecked);

	movzx	ecx, BYTE PTR _bChecked$79[ebp]
	push	ecx
	push	1155					; 00000483H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 930  : 
; 931  :                 SendMessage(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS), UDM_SETRANGE32, 1, 20);

	push	20					; 00000014H
	push	1
	push	1135					; 0000046fH
	push	1120					; 00000460H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 932  :                 SendMessage(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS), UDM_SETPOS32, 0, data->GetInt(TEXT("outlineSize"), 2));

	push	2
	push	OFFSET $SG4294722734
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1120					; 00000460H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 933  : 
; 934  :                 CCSetColor(GetDlgItem(hwnd, IDC_OUTLINECOLOR), data->GetInt(TEXT("outlineColor"), 0xFF000000));

	push	-16777216				; ff000000H
	push	OFFSET $SG4294722733
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 935  : 
; 936  :                 SendMessage(GetDlgItem(hwnd, IDC_OUTLINEOPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1155					; 00000483H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 937  :                 SendMessage(GetDlgItem(hwnd, IDC_OUTLINEOPACITY), UDM_SETPOS32, 0, data->GetInt(TEXT("outlineOpacity"), 100));

	push	100					; 00000064H
	push	OFFSET $SG4294722732
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1155					; 00000483H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 938  : 
; 939  :                 //-----------------------------------------
; 940  : 
; 941  :                 bChecked = data->GetInt(TEXT("useTextExtents"), 0) != 0;

	push	0
	push	OFFSET $SG4294722731
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN133@ConfigureT
	mov	DWORD PTR tv415[ebp], 1
	jmp	SHORT $LN134@ConfigureT
$LN133@ConfigureT:
	mov	DWORD PTR tv415[ebp], 0
$LN134@ConfigureT:
	mov	dl, BYTE PTR tv415[ebp]
	mov	BYTE PTR _bChecked$79[ebp], dl

; 942  :                 SendMessage(GetDlgItem(hwnd, IDC_USETEXTEXTENTS), BM_SETCHECK, bChecked ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	eax, BYTE PTR _bChecked$79[ebp]
	test	eax, eax
	je	SHORT $LN135@ConfigureT
	mov	DWORD PTR tv421[ebp], 1
	jmp	SHORT $LN136@ConfigureT
$LN135@ConfigureT:
	mov	DWORD PTR tv421[ebp], 0
$LN136@ConfigureT:
	push	0
	mov	ecx, DWORD PTR tv421[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1041					; 00000411H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 943  :                 ConfigureTextProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_USETEXTEXTENTS, BN_CLICKED), (LPARAM)GetDlgItem(hwnd, IDC_USETEXTEXTENTS));

	push	1041					; 00000411H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1041					; 00000411H
	push	273					; 00000111H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z	; ConfigureTextProc

; 944  : 
; 945  :                 EnableWindow(GetDlgItem(hwnd, IDC_EXTENTWIDTH_EDIT), bChecked);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	push	edx
	push	1043					; 00000413H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 946  :                 EnableWindow(GetDlgItem(hwnd, IDC_EXTENTHEIGHT_EDIT), bChecked);

	movzx	ecx, BYTE PTR _bChecked$79[ebp]
	push	ecx
	push	1044					; 00000414H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 947  :                 EnableWindow(GetDlgItem(hwnd, IDC_EXTENTWIDTH), bChecked);

	movzx	eax, BYTE PTR _bChecked$79[ebp]
	push	eax
	push	1082					; 0000043aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 948  :                 EnableWindow(GetDlgItem(hwnd, IDC_EXTENTHEIGHT), bChecked);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	push	edx
	push	1083					; 0000043bH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 949  :                 EnableWindow(GetDlgItem(hwnd, IDC_WRAP), bChecked);

	movzx	ecx, BYTE PTR _bChecked$79[ebp]
	push	ecx
	push	1119					; 0000045fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 950  : 
; 951  :                 bool bVertical = data->GetInt(TEXT("vertical"), 0) != 0;

	push	0
	push	OFFSET $SG4294722730
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN137@ConfigureT
	mov	DWORD PTR tv469[ebp], 1
	jmp	SHORT $LN138@ConfigureT
$LN137@ConfigureT:
	mov	DWORD PTR tv469[ebp], 0
$LN138@ConfigureT:
	mov	al, BYTE PTR tv469[ebp]
	mov	BYTE PTR _bVertical$67[ebp], al

; 952  : 
; 953  :                 SendMessage(GetDlgItem(hwnd, IDC_EXTENTWIDTH),  UDM_SETRANGE32, MIN_TEX_SIZE_W, MAX_TEX_SIZE_W);

	push	8192					; 00002000H
	push	32					; 00000020H
	push	1135					; 0000046fH
	push	1082					; 0000043aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 954  :                 SendMessage(GetDlgItem(hwnd, IDC_EXTENTHEIGHT), UDM_SETRANGE32, MIN_TEX_SIZE_H, MAX_TEX_SIZE_H);

	push	8192					; 00002000H
	push	32					; 00000020H
	push	1135					; 0000046fH
	push	1083					; 0000043bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 955  :                 SendMessage(GetDlgItem(hwnd, IDC_EXTENTWIDTH),  UDM_SETPOS32, 0, data->GetInt(TEXT("extentWidth"),  MIN_TEX_SIZE_W));

	push	32					; 00000020H
	push	OFFSET $SG4294722729
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1082					; 0000043aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 956  :                 SendMessage(GetDlgItem(hwnd, IDC_EXTENTHEIGHT), UDM_SETPOS32, 0, data->GetInt(TEXT("extentHeight"), MIN_TEX_SIZE_H));

	push	32					; 00000020H
	push	OFFSET $SG4294722728
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	0
	push	1137					; 00000471H
	push	1083					; 0000043bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 957  : 
; 958  :                 bool bWrap = data->GetInt(TEXT("wrap"), 0) != 0;

	push	0
	push	OFFSET $SG4294722727
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN139@ConfigureT
	mov	DWORD PTR tv512[ebp], 1
	jmp	SHORT $LN140@ConfigureT
$LN139@ConfigureT:
	mov	DWORD PTR tv512[ebp], 0
$LN140@ConfigureT:
	mov	dl, BYTE PTR tv512[ebp]
	mov	BYTE PTR _bWrap$73[ebp], dl

; 959  :                 SendMessage(GetDlgItem(hwnd, IDC_WRAP), BM_SETCHECK, bWrap ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	eax, BYTE PTR _bWrap$73[ebp]
	test	eax, eax
	je	SHORT $LN141@ConfigureT
	mov	DWORD PTR tv518[ebp], 1
	jmp	SHORT $LN142@ConfigureT
$LN141@ConfigureT:
	mov	DWORD PTR tv518[ebp], 0
$LN142@ConfigureT:
	push	0
	mov	ecx, DWORD PTR tv518[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1119					; 0000045fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 960  : 
; 961  :                 bool bScrollMode = data->GetInt(TEXT("scrollMode"), 0) != 0;

	push	0
	push	OFFSET $SG4294722726
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN143@ConfigureT
	mov	DWORD PTR tv529[ebp], 1
	jmp	SHORT $LN144@ConfigureT
$LN143@ConfigureT:
	mov	DWORD PTR tv529[ebp], 0
$LN144@ConfigureT:
	mov	al, BYTE PTR tv529[ebp]
	mov	BYTE PTR _bScrollMode$68[ebp], al

; 962  :                 SendMessage(GetDlgItem(hwnd, IDC_SCROLLMODE), BM_SETCHECK, bScrollMode ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	ecx, BYTE PTR _bScrollMode$68[ebp]
	test	ecx, ecx
	je	SHORT $LN145@ConfigureT
	mov	DWORD PTR tv535[ebp], 1
	jmp	SHORT $LN146@ConfigureT
$LN145@ConfigureT:
	mov	DWORD PTR tv535[ebp], 0
$LN146@ConfigureT:
	push	0
	mov	edx, DWORD PTR tv535[ebp]
	push	edx
	push	241					; 000000f1H
	push	1161					; 00000489H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 963  : 
; 964  :                 EnableWindow(GetDlgItem(hwnd, IDC_ALIGN), bChecked && bWrap);

	movzx	ecx, BYTE PTR _bChecked$79[ebp]
	test	ecx, ecx
	je	SHORT $LN147@ConfigureT
	movzx	edx, BYTE PTR _bWrap$73[ebp]
	test	edx, edx
	je	SHORT $LN147@ConfigureT
	mov	DWORD PTR tv546[ebp], 1
	jmp	SHORT $LN148@ConfigureT
$LN147@ConfigureT:
	mov	DWORD PTR tv546[ebp], 0
$LN148@ConfigureT:
	mov	eax, DWORD PTR tv546[ebp]
	push	eax
	push	1124					; 00000464H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 965  :                 EnableWindow(GetDlgItem(hwnd, IDC_SCROLLMODE), bChecked && bWrap && !bVertical);

	movzx	edx, BYTE PTR _bChecked$79[ebp]
	test	edx, edx
	je	SHORT $LN149@ConfigureT
	movzx	eax, BYTE PTR _bWrap$73[ebp]
	test	eax, eax
	je	SHORT $LN149@ConfigureT
	movzx	ecx, BYTE PTR _bVertical$67[ebp]
	test	ecx, ecx
	jne	SHORT $LN149@ConfigureT
	mov	DWORD PTR tv558[ebp], 1
	jmp	SHORT $LN150@ConfigureT
$LN149@ConfigureT:
	mov	DWORD PTR tv558[ebp], 0
$LN150@ConfigureT:
	mov	edx, DWORD PTR tv558[ebp]
	push	edx
	push	1161					; 00000489H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 966  :                 
; 967  :                 HWND hwndAlign = GetDlgItem(hwnd, IDC_ALIGN);

	push	1124					; 00000464H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndAlign$52[ebp], eax

; 968  :                 SendMessage(hwndAlign, CB_ADDSTRING, 0, (LPARAM)Str("Sources.TextSource.Left"));

	push	OFFSET $SG4294722725
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndAlign$52[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 969  :                 SendMessage(hwndAlign, CB_ADDSTRING, 0, (LPARAM)Str("Sources.TextSource.Center"));

	push	OFFSET $SG4294722724
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	0
	push	323					; 00000143H
	mov	edx, DWORD PTR _hwndAlign$52[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 970  :                 SendMessage(hwndAlign, CB_ADDSTRING, 0, (LPARAM)Str("Sources.TextSource.Right"));

	push	OFFSET $SG4294722723
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	0
	push	323					; 00000143H
	mov	ecx, DWORD PTR _hwndAlign$52[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 971  : 
; 972  :                 int align = data->GetInt(TEXT("align"), 0);

	push	0
	push	OFFSET $SG4294722722
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _align$58[ebp], eax

; 973  :                 ClampVal(align, 0, 2);

	cmp	DWORD PTR _align$58[ebp], 0
	jge	SHORT $LN107@ConfigureT
	mov	DWORD PTR _align$58[ebp], 0
	jmp	SHORT $LN105@ConfigureT
$LN107@ConfigureT:
	cmp	DWORD PTR _align$58[ebp], 2
	jle	SHORT $LN105@ConfigureT
	mov	DWORD PTR _align$58[ebp], 2
$LN105@ConfigureT:

; 974  :                 SendMessage(hwndAlign, CB_SETCURSEL, align, 0);

	push	0
	mov	edx, DWORD PTR _align$58[ebp]
	push	edx
	push	334					; 0000014eH
	mov	eax, DWORD PTR _hwndAlign$52[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 975  : 
; 976  :                 //-----------------------------------------
; 977  : 
; 978  :                 BOOL bUseFile = data->GetInt(TEXT("mode"), 0) == 1;

	push	0
	push	OFFSET $SG4294722721
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	cmp	eax, 1
	jne	SHORT $LN151@ConfigureT
	mov	DWORD PTR tv602[ebp], 1
	jmp	SHORT $LN152@ConfigureT
$LN151@ConfigureT:
	mov	DWORD PTR tv602[ebp], 0
$LN152@ConfigureT:
	mov	ecx, DWORD PTR tv602[ebp]
	mov	DWORD PTR _bUseFile$56[ebp], ecx

; 979  :                 SendMessage(GetDlgItem(hwnd, IDC_USEFILE), BM_SETCHECK, bUseFile ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bUseFile$56[ebp], 0
	je	SHORT $LN153@ConfigureT
	mov	DWORD PTR tv606[ebp], 1
	jmp	SHORT $LN154@ConfigureT
$LN153@ConfigureT:
	mov	DWORD PTR tv606[ebp], 0
$LN154@ConfigureT:
	push	0
	mov	edx, DWORD PTR tv606[ebp]
	push	edx
	push	241					; 000000f1H
	push	1107					; 00000453H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 980  :                 SendMessage(GetDlgItem(hwnd, IDC_USETEXT), BM_SETCHECK, bUseFile ? BST_UNCHECKED : BST_CHECKED, 0);

	cmp	DWORD PTR _bUseFile$56[ebp], 0
	je	SHORT $LN155@ConfigureT
	mov	DWORD PTR tv615[ebp], 0
	jmp	SHORT $LN156@ConfigureT
$LN155@ConfigureT:
	mov	DWORD PTR tv615[ebp], 1
$LN156@ConfigureT:
	push	0
	mov	ecx, DWORD PTR tv615[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1106					; 00000452H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 981  : 
; 982  :                 SetWindowText(GetDlgItem(hwnd, IDC_TEXT), data->GetString(TEXT("text")));

	push	0
	push	OFFSET $SG4294722720
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	push	1078					; 00000436H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 983  :                 SetWindowText(GetDlgItem(hwnd, IDC_FILE), data->GetString(TEXT("file")));

	push	0
	push	OFFSET $SG4294722719
	mov	ecx, DWORD PTR _data$77[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	push	1108					; 00000454H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 984  : 
; 985  :                 EnableWindow(GetDlgItem(hwnd, IDC_TEXT), !bUseFile);

	cmp	DWORD PTR _bUseFile$56[ebp], 0
	jne	SHORT $LN157@ConfigureT
	mov	DWORD PTR tv641[ebp], 1
	jmp	SHORT $LN158@ConfigureT
$LN157@ConfigureT:
	mov	DWORD PTR tv641[ebp], 0
$LN158@ConfigureT:
	mov	edx, DWORD PTR tv641[ebp]
	push	edx
	push	1078					; 00000436H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 986  :                 EnableWindow(GetDlgItem(hwnd, IDC_FILE), bUseFile);

	mov	ecx, DWORD PTR _bUseFile$56[ebp]
	push	ecx
	push	1108					; 00000454H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 987  :                 EnableWindow(GetDlgItem(hwnd, IDC_BROWSE), bUseFile);

	mov	eax, DWORD PTR _bUseFile$56[ebp]
	push	eax
	push	1050					; 0000041aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 988  : 
; 989  :                 bInitializedDialog = true;

	mov	BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1

; 990  : 
; 991  :                 return TRUE;

	mov	eax, 1
	jmp	$LN115@ConfigureT
$LN104@ConfigureT:

; 992  :             }
; 993  : 
; 994  :         case WM_DESTROY:
; 995  :             bInitializedDialog = false;

	mov	BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 996  :             break;

	jmp	$LN113@ConfigureT
$LN103@ConfigureT:

; 997  : 
; 998  :         case WM_COMMAND:
; 999  :             switch(LOWORD(wParam))

	movzx	edx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv657[ebp], edx
	cmp	DWORD PTR tv657[ebp], 1041		; 00000411H
	jg	SHORT $LN205@ConfigureT
	cmp	DWORD PTR tv657[ebp], 1041		; 00000411H
	je	$LN68@ConfigureT
	cmp	DWORD PTR tv657[ebp], 1
	je	$LN24@ConfigureT
	cmp	DWORD PTR tv657[ebp], 2
	je	$LN3@ConfigureT
	jmp	$LN101@ConfigureT
$LN205@ConfigureT:
	mov	eax, DWORD PTR tv657[ebp]
	sub	eax, 1043				; 00000413H
	mov	DWORD PTR tv657[ebp], eax
	cmp	DWORD PTR tv657[ebp], 118		; 00000076H
	ja	$LN101@ConfigureT
	mov	ecx, DWORD PTR tv657[ebp]
	movzx	edx, BYTE PTR $LN207@ConfigureT[ecx]
	jmp	DWORD PTR $LN210@ConfigureT[edx*4]
$LN100@ConfigureT:

; 1000 :             {
; 1001 :                 case IDC_FONT:
; 1002 :                     if(bInitializedDialog)

	movzx	eax, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN98@ConfigureT

; 1003 :                     {
; 1004 :                         if(HIWORD(wParam) == CBN_SELCHANGE || HIWORD(wParam) == CBN_EDITCHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 1
	je	SHORT $LN97@ConfigureT
	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 5
	jne	$LN98@ConfigureT
$LN97@ConfigureT:

; 1005 :                         {
; 1006 :                             ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$59[ebp], eax

; 1007 :                             if(!configInfo) break;

	cmp	DWORD PTR _configInfo$59[ebp], 0
	jne	SHORT $LN96@ConfigureT
	jmp	$LN101@ConfigureT
$LN96@ConfigureT:

; 1008 : 
; 1009 :                             String strFont;

	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 1010 :                             if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN95@ConfigureT

; 1011 :                                 strFont = GetFontFace(configInfo, (HWND)lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _configInfo$59[ebp]
	push	eax
	call	?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z ; GetFontFace
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 1012 :                             else

	jmp	SHORT $LN93@ConfigureT
$LN95@ConfigureT:

; 1013 :                             {
; 1014 :                                 UINT id = FindFontName(configInfo, (HWND)lParam, GetEditText((HWND)lParam));

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _configInfo$59[ebp]
	push	ecx
	call	?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ; FindFontName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _id$33[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1015 :                                 if(id != INVALID)

	cmp	DWORD PTR _id$33[ebp], -1
	je	SHORT $LN93@ConfigureT

; 1016 :                                     strFont = configInfo->fontFaces[id];

	mov	edx, DWORD PTR _id$33[ebp]
	push	edx
	mov	ecx, DWORD PTR _configInfo$59[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	push	eax
	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN93@ConfigureT:

; 1017 :                             }
; 1018 : 
; 1019 :                             ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	eax, DWORD PTR _configInfo$59[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$43[ebp], eax

; 1020 :                             if(source && strFont.IsValid())

	cmp	DWORD PTR _source$43[ebp], 0
	je	SHORT $LN92@ConfigureT
	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN92@ConfigureT

; 1021 :                                 source->SetString(TEXT("font"), strFont);

	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722718
	mov	eax, DWORD PTR _source$43[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$43[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN92@ConfigureT:

; 1022 :                         }

	lea	ecx, DWORD PTR _strFont$20[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN98@ConfigureT:

; 1023 :                     }
; 1024 :                     break;

	jmp	$LN101@ConfigureT
$LN91@ConfigureT:

; 1025 : 
; 1026 :                 case IDC_OUTLINECOLOR:
; 1027 :                 case IDC_BACKGROUNDCOLOR:
; 1028 :                 case IDC_COLOR:
; 1029 :                     if(bInitializedDialog)

	movzx	ecx, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	je	$LN86@ConfigureT

; 1030 :                     {
; 1031 :                         DWORD color = CCGetColor((HWND)lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _color$49[ebp], eax

; 1032 : 
; 1033 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$23[ebp], eax

; 1034 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$23[ebp], 0
	jne	SHORT $LN89@ConfigureT
	jmp	$LN101@ConfigureT
$LN89@ConfigureT:

; 1035 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	ecx, DWORD PTR _configInfo$23[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$69[ebp], eax

; 1036 :                         if(source)

	cmp	DWORD PTR _source$69[ebp], 0
	je	$LN86@ConfigureT

; 1037 :                         {
; 1038 :                             switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv735[ebp], ecx
	cmp	DWORD PTR tv735[ebp], 1104		; 00000450H
	je	SHORT $LN83@ConfigureT
	cmp	DWORD PTR tv735[ebp], 1105		; 00000451H
	je	SHORT $LN85@ConfigureT
	cmp	DWORD PTR tv735[ebp], 1109		; 00000455H
	je	SHORT $LN84@ConfigureT
	jmp	SHORT $LN86@ConfigureT
$LN85@ConfigureT:

; 1039 :                             {
; 1040 :                                 case IDC_OUTLINECOLOR:      source->SetInt(TEXT("outlineColor"), color); break;

	mov	edx, DWORD PTR _color$49[ebp]
	push	edx
	push	OFFSET $SG4294722717
	mov	eax, DWORD PTR _source$69[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$69[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	SHORT $LN86@ConfigureT
$LN84@ConfigureT:

; 1041 :                                 case IDC_BACKGROUNDCOLOR:   source->SetInt(TEXT("backgroundColor"), color); break;

	mov	ecx, DWORD PTR _color$49[ebp]
	push	ecx
	push	OFFSET $SG4294722716
	mov	edx, DWORD PTR _source$69[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$69[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN86@ConfigureT
$LN83@ConfigureT:

; 1042 :                                 case IDC_COLOR:             source->SetInt(TEXT("color"), color); break;

	mov	eax, DWORD PTR _color$49[ebp]
	push	eax
	push	OFFSET $SG4294722715
	mov	ecx, DWORD PTR _source$69[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$69[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN86@ConfigureT:

; 1043 :                             }
; 1044 :                         }
; 1045 :                     }
; 1046 :                     break;

	jmp	$LN101@ConfigureT
$LN82@ConfigureT:

; 1047 : 
; 1048 :                 case IDC_TEXTSIZE_EDIT:
; 1049 :                 case IDC_EXTENTWIDTH_EDIT:
; 1050 :                 case IDC_EXTENTHEIGHT_EDIT:
; 1051 :                 case IDC_BACKGROUNDOPACITY_EDIT:
; 1052 :                 case IDC_TEXTOPACITY_EDIT:
; 1053 :                 case IDC_OUTLINEOPACITY_EDIT:
; 1054 :                 case IDC_OUTLINETHICKNESS_EDIT:
; 1055 :                 case IDC_SCROLLSPEED_EDIT:
; 1056 :                     if(HIWORD(wParam) == EN_CHANGE && bInitializedDialog)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 768				; 00000300H
	jne	$LN77@ConfigureT
	movzx	eax, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN77@ConfigureT

; 1057 :                     {
; 1058 :                         int val = (int)SendMessage(GetWindow((HWND)lParam, GW_HWNDNEXT), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	2
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindow@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _val$70[ebp], eax

; 1059 : 
; 1060 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$31[ebp], eax

; 1061 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$31[ebp], 0
	jne	SHORT $LN80@ConfigureT
	jmp	$LN101@ConfigureT
$LN80@ConfigureT:

; 1062 : 
; 1063 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	eax, DWORD PTR _configInfo$31[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$75[ebp], eax

; 1064 :                         if(source)

	cmp	DWORD PTR _source$75[ebp], 0
	je	$LN77@ConfigureT

; 1065 :                         {
; 1066 :                             switch(LOWORD(wParam))

	movzx	eax, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv842[ebp], eax
	mov	ecx, DWORD PTR tv842[ebp]
	sub	ecx, 1043				; 00000413H
	mov	DWORD PTR tv842[ebp], ecx
	cmp	DWORD PTR tv842[ebp], 111		; 0000006fH
	ja	$LN77@ConfigureT
	mov	edx, DWORD PTR tv842[ebp]
	movzx	eax, BYTE PTR $LN208@ConfigureT[edx]
	jmp	DWORD PTR $LN211@ConfigureT[eax*4]
$LN76@ConfigureT:

; 1067 :                             {
; 1068 :                                 case IDC_TEXTSIZE_EDIT:             source->SetInt(TEXT("fontSize"), val); break;

	mov	ecx, DWORD PTR _val$70[ebp]
	push	ecx
	push	OFFSET $SG4294722714
	mov	edx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	$LN77@ConfigureT
$LN75@ConfigureT:

; 1069 :                                 case IDC_EXTENTWIDTH_EDIT:          source->SetInt(TEXT("extentWidth"), val); break;

	mov	eax, DWORD PTR _val$70[ebp]
	push	eax
	push	OFFSET $SG4294722713
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	$LN77@ConfigureT
$LN74@ConfigureT:

; 1070 :                                 case IDC_EXTENTHEIGHT_EDIT:         source->SetInt(TEXT("extentHeight"), val); break;

	mov	ecx, DWORD PTR _val$70[ebp]
	push	ecx
	push	OFFSET $SG4294722712
	mov	edx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	$LN77@ConfigureT
$LN73@ConfigureT:

; 1071 :                                 case IDC_TEXTOPACITY_EDIT:          source->SetInt(TEXT("textOpacity"), val); break;

	mov	eax, DWORD PTR _val$70[ebp]
	push	eax
	push	OFFSET $SG4294722711
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	$LN77@ConfigureT
$LN72@ConfigureT:

; 1072 :                                 case IDC_OUTLINEOPACITY_EDIT:       source->SetInt(TEXT("outlineOpacity"), val); break;

	mov	ecx, DWORD PTR _val$70[ebp]
	push	ecx
	push	OFFSET $SG4294722710
	mov	edx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN77@ConfigureT
$LN71@ConfigureT:

; 1073 :                                 case IDC_BACKGROUNDOPACITY_EDIT:    source->SetInt(TEXT("backgroundOpacity"), val); break;

	mov	eax, DWORD PTR _val$70[ebp]
	push	eax
	push	OFFSET $SG4294722709
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	SHORT $LN77@ConfigureT
$LN70@ConfigureT:

; 1074 :                                 case IDC_OUTLINETHICKNESS_EDIT:     source->SetFloat(TEXT("outlineSize"), (float)val); break;

	cvtsi2ss xmm0, DWORD PTR _val$70[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722708
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	jmp	SHORT $LN77@ConfigureT
$LN69@ConfigureT:

; 1075 :                                 case IDC_SCROLLSPEED_EDIT:          source->SetInt(TEXT("scrollSpeed"), val); break;

	mov	ecx, DWORD PTR _val$70[ebp]
	push	ecx
	push	OFFSET $SG4294722707
	mov	edx, DWORD PTR _source$75[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$75[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN77@ConfigureT:

; 1076 :                             }
; 1077 :                         }
; 1078 :                     }
; 1079 :                     break;

	jmp	$LN101@ConfigureT
$LN68@ConfigureT:

; 1080 : 
; 1081 :                 case IDC_BOLD:
; 1082 :                 case IDC_ITALIC:
; 1083 :                 case IDC_UNDERLINE:
; 1084 :                 case IDC_VERTICALSCRIPT:
; 1085 :                 case IDC_WRAP:
; 1086 :                 case IDC_SCROLLMODE:
; 1087 :                 case IDC_USEOUTLINE:
; 1088 :                 case IDC_USETEXTEXTENTS:
; 1089 :                     if(HIWORD(wParam) == BN_CLICKED && bInitializedDialog)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	test	ecx, ecx
	jne	$LN48@ConfigureT
	movzx	edx, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	edx, edx
	je	$LN48@ConfigureT

; 1090 :                     {
; 1091 :                         BOOL bChecked = SendMessage((HWND)lParam, BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN159@ConfigureT
	mov	DWORD PTR tv898[ebp], 1
	jmp	SHORT $LN160@ConfigureT
$LN159@ConfigureT:
	mov	DWORD PTR tv898[ebp], 0
$LN160@ConfigureT:
	mov	ecx, DWORD PTR tv898[ebp]
	mov	DWORD PTR _bChecked$76[ebp], ecx

; 1092 : 
; 1093 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$29[ebp], eax

; 1094 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$29[ebp], 0
	jne	SHORT $LN66@ConfigureT
	jmp	$LN101@ConfigureT
$LN66@ConfigureT:

; 1095 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	eax, DWORD PTR _configInfo$29[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$74[ebp], eax

; 1096 :                         if(source)

	cmp	DWORD PTR _source$74[ebp], 0
	je	$LN63@ConfigureT

; 1097 :                         {
; 1098 :                             switch(LOWORD(wParam))

	movzx	eax, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv909[ebp], eax
	mov	ecx, DWORD PTR tv909[ebp]
	sub	ecx, 1041				; 00000411H
	mov	DWORD PTR tv909[ebp], ecx
	cmp	DWORD PTR tv909[ebp], 120		; 00000078H
	ja	$LN63@ConfigureT
	mov	edx, DWORD PTR tv909[ebp]
	movzx	eax, BYTE PTR $LN209@ConfigureT[edx]
	jmp	DWORD PTR $LN212@ConfigureT[eax*4]
$LN62@ConfigureT:

; 1099 :                             {
; 1100 :                                 case IDC_BOLD:              source->SetInt(TEXT("bold"), bChecked); break;

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	OFFSET $SG4294722706
	mov	edx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	$LN63@ConfigureT
$LN61@ConfigureT:

; 1101 :                                 case IDC_ITALIC:            source->SetInt(TEXT("italic"), bChecked); break;

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	OFFSET $SG4294722705
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	$LN63@ConfigureT
$LN60@ConfigureT:

; 1102 :                                 case IDC_UNDERLINE:         source->SetInt(TEXT("underline"), bChecked); break;

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	OFFSET $SG4294722704
	mov	edx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	$LN63@ConfigureT
$LN59@ConfigureT:

; 1103 :                                 case IDC_VERTICALSCRIPT:    source->SetInt(TEXT("vertical"), bChecked); break;

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	OFFSET $SG4294722703
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	$LN63@ConfigureT
$LN58@ConfigureT:

; 1104 :                                 case IDC_WRAP:              source->SetInt(TEXT("wrap"), bChecked); break;

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	OFFSET $SG4294722702
	mov	edx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN63@ConfigureT
$LN57@ConfigureT:

; 1105 :                                 case IDC_SCROLLMODE:        source->SetInt(TEXT("scrollMode"), bChecked); break;

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	OFFSET $SG4294722701
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	SHORT $LN63@ConfigureT
$LN56@ConfigureT:

; 1106 :                                 case IDC_USEOUTLINE:        source->SetInt(TEXT("useOutline"), bChecked); break;

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	OFFSET $SG4294722700
	mov	edx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN63@ConfigureT
$LN55@ConfigureT:

; 1107 :                                 case IDC_USETEXTEXTENTS:    source->SetInt(TEXT("useTextExtents"), bChecked); break;

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	OFFSET $SG4294722699
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$74[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN63@ConfigureT:

; 1108 :                             }
; 1109 :                         }
; 1110 : 
; 1111 :                         if(LOWORD(wParam) == IDC_VERTICALSCRIPT)

	movzx	ecx, WORD PTR _wParam$[ebp]
	cmp	ecx, 1122				; 00000462H
	jne	$LN54@ConfigureT

; 1112 :                         {
; 1113 :                             bool bWrap = SendMessage(GetDlgItem(hwnd, IDC_WRAP), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1119					; 0000045fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN161@ConfigureT
	mov	DWORD PTR tv963[ebp], 1
	jmp	SHORT $LN162@ConfigureT
$LN161@ConfigureT:
	mov	DWORD PTR tv963[ebp], 0
$LN162@ConfigureT:
	mov	al, BYTE PTR tv963[ebp]
	mov	BYTE PTR _bWrap$65[ebp], al

; 1114 :                             bool bUseExtents = SendMessage(GetDlgItem(hwnd, IDC_USETEXTEXTENTS), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN163@ConfigureT
	mov	DWORD PTR tv974[ebp], 1
	jmp	SHORT $LN164@ConfigureT
$LN163@ConfigureT:
	mov	DWORD PTR tv974[ebp], 0
$LN164@ConfigureT:
	mov	dl, BYTE PTR tv974[ebp]
	mov	BYTE PTR _bUseExtents$63[ebp], dl

; 1115 :                             
; 1116 :                             EnableWindow(GetDlgItem(hwnd, IDC_SCROLLMODE), bWrap && bUseExtents && !bChecked);

	movzx	eax, BYTE PTR _bWrap$65[ebp]
	test	eax, eax
	je	SHORT $LN165@ConfigureT
	movzx	ecx, BYTE PTR _bUseExtents$63[ebp]
	test	ecx, ecx
	je	SHORT $LN165@ConfigureT
	cmp	DWORD PTR _bChecked$76[ebp], 0
	jne	SHORT $LN165@ConfigureT
	mov	DWORD PTR tv982[ebp], 1
	jmp	SHORT $LN166@ConfigureT
$LN165@ConfigureT:
	mov	DWORD PTR tv982[ebp], 0
$LN166@ConfigureT:
	mov	edx, DWORD PTR tv982[ebp]
	push	edx
	push	1161					; 00000489H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	jmp	$LN48@ConfigureT
$LN54@ConfigureT:

; 1117 :                         }
; 1118 :                         else if(LOWORD(wParam) == IDC_WRAP)

	movzx	ecx, WORD PTR _wParam$[ebp]
	cmp	ecx, 1119				; 0000045fH
	jne	$LN52@ConfigureT

; 1119 :                         {
; 1120 :                             bool bVertical = SendMessage(GetDlgItem(hwnd, IDC_VERTICALSCRIPT), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1122					; 00000462H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN167@ConfigureT
	mov	DWORD PTR tv998[ebp], 1
	jmp	SHORT $LN168@ConfigureT
$LN167@ConfigureT:
	mov	DWORD PTR tv998[ebp], 0
$LN168@ConfigureT:
	mov	al, BYTE PTR tv998[ebp]
	mov	BYTE PTR _bVertical$66[ebp], al

; 1121 : 
; 1122 :                             EnableWindow(GetDlgItem(hwnd, IDC_ALIGN), bChecked);

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	1124					; 00000464H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1123 :                             EnableWindow(GetDlgItem(hwnd, IDC_SCROLLMODE), bChecked && !bVertical);

	cmp	DWORD PTR _bChecked$76[ebp], 0
	je	SHORT $LN169@ConfigureT
	movzx	eax, BYTE PTR _bVertical$66[ebp]
	test	eax, eax
	jne	SHORT $LN169@ConfigureT
	mov	DWORD PTR tv1009[ebp], 1
	jmp	SHORT $LN170@ConfigureT
$LN169@ConfigureT:
	mov	DWORD PTR tv1009[ebp], 0
$LN170@ConfigureT:
	mov	ecx, DWORD PTR tv1009[ebp]
	push	ecx
	push	1161					; 00000489H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	jmp	$LN48@ConfigureT
$LN52@ConfigureT:

; 1124 :                         }
; 1125 :                         else if(LOWORD(wParam) == IDC_USETEXTEXTENTS)

	movzx	eax, WORD PTR _wParam$[ebp]
	cmp	eax, 1041				; 00000411H
	jne	$LN50@ConfigureT

; 1126 :                         {
; 1127 :                             EnableWindow(GetDlgItem(hwnd, IDC_EXTENTWIDTH_EDIT), bChecked);

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	1043					; 00000413H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1128 :                             EnableWindow(GetDlgItem(hwnd, IDC_EXTENTHEIGHT_EDIT), bChecked);

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	1044					; 00000414H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1129 :                             EnableWindow(GetDlgItem(hwnd, IDC_EXTENTWIDTH), bChecked);

	mov	edx, DWORD PTR _bChecked$76[ebp]
	push	edx
	push	1082					; 0000043aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1130 :                             EnableWindow(GetDlgItem(hwnd, IDC_EXTENTHEIGHT), bChecked);

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	1083					; 0000043bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1131 :                             EnableWindow(GetDlgItem(hwnd, IDC_WRAP), bChecked);

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	1119					; 0000045fH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1132 : 
; 1133 :                             bool bWrap = SendMessage(GetDlgItem(hwnd, IDC_WRAP), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1119					; 0000045fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN171@ConfigureT
	mov	DWORD PTR tv1050[ebp], 1
	jmp	SHORT $LN172@ConfigureT
$LN171@ConfigureT:
	mov	DWORD PTR tv1050[ebp], 0
$LN172@ConfigureT:
	mov	al, BYTE PTR tv1050[ebp]
	mov	BYTE PTR _bWrap$72[ebp], al

; 1134 :                             bool bVertical = SendMessage(GetDlgItem(hwnd, IDC_VERTICALSCRIPT), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1122					; 00000462H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN173@ConfigureT
	mov	DWORD PTR tv1061[ebp], 1
	jmp	SHORT $LN174@ConfigureT
$LN173@ConfigureT:
	mov	DWORD PTR tv1061[ebp], 0
$LN174@ConfigureT:
	mov	dl, BYTE PTR tv1061[ebp]
	mov	BYTE PTR _bVertical$64[ebp], dl

; 1135 :                             
; 1136 :                             EnableWindow(GetDlgItem(hwnd, IDC_ALIGN), bChecked && bWrap);

	cmp	DWORD PTR _bChecked$76[ebp], 0
	je	SHORT $LN175@ConfigureT
	movzx	eax, BYTE PTR _bWrap$72[ebp]
	test	eax, eax
	je	SHORT $LN175@ConfigureT
	mov	DWORD PTR tv1067[ebp], 1
	jmp	SHORT $LN176@ConfigureT
$LN175@ConfigureT:
	mov	DWORD PTR tv1067[ebp], 0
$LN176@ConfigureT:
	mov	ecx, DWORD PTR tv1067[ebp]
	push	ecx
	push	1124					; 00000464H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1137 :                             EnableWindow(GetDlgItem(hwnd, IDC_SCROLLMODE), bChecked && bWrap && !bVertical);

	cmp	DWORD PTR _bChecked$76[ebp], 0
	je	SHORT $LN177@ConfigureT
	movzx	eax, BYTE PTR _bWrap$72[ebp]
	test	eax, eax
	je	SHORT $LN177@ConfigureT
	movzx	ecx, BYTE PTR _bVertical$64[ebp]
	test	ecx, ecx
	jne	SHORT $LN177@ConfigureT
	mov	DWORD PTR tv1078[ebp], 1
	jmp	SHORT $LN178@ConfigureT
$LN177@ConfigureT:
	mov	DWORD PTR tv1078[ebp], 0
$LN178@ConfigureT:
	mov	edx, DWORD PTR tv1078[ebp]
	push	edx
	push	1161					; 00000489H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
	jmp	$LN48@ConfigureT
$LN50@ConfigureT:

; 1138 :                         }
; 1139 :                         else if(LOWORD(wParam) == IDC_USEOUTLINE)

	movzx	ecx, WORD PTR _wParam$[ebp]
	cmp	ecx, 1099				; 0000044bH
	jne	$LN48@ConfigureT

; 1140 :                         {
; 1141 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS_EDIT), bChecked);

	mov	edx, DWORD PTR _bChecked$76[ebp]
	push	edx
	push	1084					; 0000043cH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1142 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS), bChecked);

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	1120					; 00000460H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1143 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTLINECOLOR), bChecked);

	mov	eax, DWORD PTR _bChecked$76[ebp]
	push	eax
	push	1105					; 00000451H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1144 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTLINEOPACITY_EDIT), bChecked);

	mov	edx, DWORD PTR _bChecked$76[ebp]
	push	edx
	push	1154					; 00000482H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1145 :                             EnableWindow(GetDlgItem(hwnd, IDC_OUTLINEOPACITY), bChecked);

	mov	ecx, DWORD PTR _bChecked$76[ebp]
	push	ecx
	push	1155					; 00000483H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN48@ConfigureT:

; 1146 :                         }
; 1147 :                     }
; 1148 :                     break;

	jmp	$LN101@ConfigureT
$LN47@ConfigureT:

; 1149 : 
; 1150 :                 case IDC_ALIGN:
; 1151 :                     if(HIWORD(wParam) == CBN_SELCHANGE && bInitializedDialog)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 1
	jne	$LN43@ConfigureT
	movzx	edx, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	edx, edx
	je	$LN43@ConfigureT

; 1152 :                     {
; 1153 :                         int align = (int)SendMessage((HWND)lParam, CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _align$21[ebp], eax

; 1154 :                         if(align == CB_ERR)

	cmp	DWORD PTR _align$21[ebp], -1
	jne	SHORT $LN45@ConfigureT

; 1155 :                             break;

	jmp	$LN101@ConfigureT
$LN45@ConfigureT:

; 1156 : 
; 1157 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$26[ebp], eax

; 1158 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$26[ebp], 0
	jne	SHORT $LN44@ConfigureT
	jmp	$LN101@ConfigureT
$LN44@ConfigureT:

; 1159 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	edx, DWORD PTR _configInfo$26[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$40[ebp], eax

; 1160 :                         if(source)

	cmp	DWORD PTR _source$40[ebp], 0
	je	SHORT $LN43@ConfigureT

; 1161 :                             source->SetInt(TEXT("align"), align);

	mov	edx, DWORD PTR _align$21[ebp]
	push	edx
	push	OFFSET $SG4294722698
	mov	eax, DWORD PTR _source$40[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$40[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN43@ConfigureT:

; 1162 :                     }
; 1163 :                     break;

	jmp	$LN101@ConfigureT
$LN42@ConfigureT:

; 1164 : 
; 1165 :                 case IDC_FILE:
; 1166 :                 case IDC_TEXT:
; 1167 :                     if(HIWORD(wParam) == EN_CHANGE && bInitializedDialog)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 768				; 00000300H
	jne	$LN41@ConfigureT
	movzx	eax, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN41@ConfigureT

; 1168 :                     {
; 1169 :                         String strText = GetEditText((HWND)lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	lea	edx, DWORD PTR _strText$19[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 1170 : 
; 1171 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$25[ebp], eax

; 1172 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$25[ebp], 0
	jne	SHORT $LN40@ConfigureT
	lea	ecx, DWORD PTR _strText$19[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN101@ConfigureT
$LN40@ConfigureT:

; 1173 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	ecx, DWORD PTR _configInfo$25[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$60[ebp], eax

; 1174 :                         if(source)

	cmp	DWORD PTR _source$60[ebp], 0
	je	SHORT $LN37@ConfigureT

; 1175 :                         {
; 1176 :                             switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv1156[ebp], ecx
	cmp	DWORD PTR tv1156[ebp], 1078		; 00000436H
	je	SHORT $LN35@ConfigureT
	cmp	DWORD PTR tv1156[ebp], 1108		; 00000454H
	je	SHORT $LN36@ConfigureT
	jmp	SHORT $LN37@ConfigureT
$LN36@ConfigureT:

; 1177 :                             {
; 1178 :                                 case IDC_FILE: source->SetString(TEXT("file"), strText); break;

	lea	ecx, DWORD PTR _strText$19[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722697
	mov	edx, DWORD PTR _source$60[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$60[ebp]
	mov	edx, DWORD PTR [eax+48]
	call	edx
	jmp	SHORT $LN37@ConfigureT
$LN35@ConfigureT:

; 1179 :                                 case IDC_TEXT: source->SetString(TEXT("text"), strText); break;

	lea	ecx, DWORD PTR _strText$19[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722696
	mov	eax, DWORD PTR _source$60[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$60[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN37@ConfigureT:

; 1180 :                             }
; 1181 :                         }
; 1182 :                     }

	lea	ecx, DWORD PTR _strText$19[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN41@ConfigureT:

; 1183 :                     break;

	jmp	$LN101@ConfigureT
$LN34@ConfigureT:

; 1184 : 
; 1185 :                 case IDC_USEFILE:
; 1186 :                     if(HIWORD(wParam) == BN_CLICKED && bInitializedDialog)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	test	edx, edx
	jne	$LN32@ConfigureT
	movzx	eax, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN32@ConfigureT

; 1187 :                     {
; 1188 :                         EnableWindow(GetDlgItem(hwnd, IDC_TEXT), FALSE);

	push	0
	push	1078					; 00000436H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1189 :                         EnableWindow(GetDlgItem(hwnd, IDC_FILE), TRUE);

	push	1
	push	1108					; 00000454H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1190 :                         EnableWindow(GetDlgItem(hwnd, IDC_BROWSE), TRUE);

	push	1
	push	1050					; 0000041aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1191 : 
; 1192 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$8[ebp], eax

; 1193 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	edx, DWORD PTR _configInfo$8[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$39[ebp], eax

; 1194 :                         if(source)

	cmp	DWORD PTR _source$39[ebp], 0
	je	SHORT $LN32@ConfigureT

; 1195 :                             source->SetInt(TEXT("mode"), 1);

	push	1
	push	OFFSET $SG4294722695
	mov	edx, DWORD PTR _source$39[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$39[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN32@ConfigureT:

; 1196 :                     }
; 1197 :                     break;

	jmp	$LN101@ConfigureT
$LN31@ConfigureT:

; 1198 : 
; 1199 :                 case IDC_USETEXT:
; 1200 :                     if(HIWORD(wParam) == BN_CLICKED && bInitializedDialog)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	test	ecx, ecx
	jne	$LN28@ConfigureT
	movzx	edx, BYTE PTR ?bInitializedDialog@?1??ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	edx, edx
	je	$LN28@ConfigureT

; 1201 :                     {
; 1202 :                         EnableWindow(GetDlgItem(hwnd, IDC_TEXT), TRUE);

	push	1
	push	1078					; 00000436H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1203 :                         EnableWindow(GetDlgItem(hwnd, IDC_FILE), FALSE);

	push	0
	push	1108					; 00000454H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1204 :                         EnableWindow(GetDlgItem(hwnd, IDC_BROWSE), FALSE);

	push	0
	push	1050					; 0000041aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1205 : 
; 1206 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$24[ebp], eax

; 1207 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$24[ebp], 0
	jne	SHORT $LN29@ConfigureT
	jmp	$LN101@ConfigureT
$LN29@ConfigureT:

; 1208 :                         ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	ecx, DWORD PTR _configInfo$24[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$41[ebp], eax

; 1209 :                         if(source)

	cmp	DWORD PTR _source$41[ebp], 0
	je	SHORT $LN28@ConfigureT

; 1210 :                             source->SetInt(TEXT("mode"), 0);

	push	0
	push	OFFSET $SG4294722694
	mov	ecx, DWORD PTR _source$41[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$41[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN28@ConfigureT:

; 1211 :                     }
; 1212 :                     break;

	jmp	$LN101@ConfigureT
$LN27@ConfigureT:

; 1213 : 
; 1214 :                 case IDC_BROWSE:
; 1215 :                     {
; 1216 :                         TCHAR lpFile[MAX_PATH+1];
; 1217 :                         zero(lpFile, sizeof(lpFile));

	push	522					; 0000020aH
	lea	ecx, DWORD PTR _lpFile$83[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 1218 : 
; 1219 :                         OPENFILENAME ofn;
; 1220 :                         zero(&ofn, sizeof(ofn));

	push	88					; 00000058H
	lea	edx, DWORD PTR _ofn$1[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 1221 :                         ofn.lStructSize = sizeof(ofn);

	mov	DWORD PTR _ofn$1[ebp], 88		; 00000058H

; 1222 :                         ofn.lpstrFile = lpFile;

	lea	eax, DWORD PTR _lpFile$83[ebp]
	mov	DWORD PTR _ofn$1[ebp+28], eax

; 1223 :                         ofn.hwndOwner = hwnd;

	mov	ecx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _ofn$1[ebp+4], ecx

; 1224 :                         ofn.nMaxFile = MAX_PATH;

	mov	DWORD PTR _ofn$1[ebp+32], 260		; 00000104H

; 1225 :                         ofn.lpstrFilter = TEXT("Text Files (*.txt)\0*.txt\0");

	mov	DWORD PTR _ofn$1[ebp+12], OFFSET $SG4294722693

; 1226 :                         ofn.nFilterIndex = 1;

	mov	DWORD PTR _ofn$1[ebp+24], 1

; 1227 :                         ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

	mov	DWORD PTR _ofn$1[ebp+52], 6144		; 00001800H

; 1228 : 
; 1229 :                         TCHAR curDirectory[MAX_PATH+1];
; 1230 :                         GetCurrentDirectory(MAX_PATH, curDirectory);

	lea	edx, DWORD PTR _curDirectory$82[ebp]
	push	edx
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryW@8

; 1231 : 
; 1232 :                         BOOL bOpenFile = GetOpenFileName(&ofn);

	lea	eax, DWORD PTR _ofn$1[ebp]
	push	eax
	call	_IsolationAwareGetOpenFileNameW@4
	mov	DWORD PTR _bOpenFile$6[ebp], eax

; 1233 :                         SetCurrentDirectory(curDirectory);

	lea	ecx, DWORD PTR _curDirectory$82[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCurrentDirectoryW@4

; 1234 : 
; 1235 :                         if(bOpenFile)

	cmp	DWORD PTR _bOpenFile$6[ebp], 0
	je	SHORT $LN25@ConfigureT

; 1236 :                         {
; 1237 :                             SetWindowText(GetDlgItem(hwnd, IDC_FILE), lpFile);

	lea	edx, DWORD PTR _lpFile$83[ebp]
	push	edx
	push	1108					; 00000454H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 1238 : 
; 1239 :                             ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$7[ebp], eax

; 1240 :                             ImageSource *source = API->GetSceneImageSource(configInfo->lpName);

	mov	edx, DWORD PTR _configInfo$7[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$50[ebp], eax

; 1241 :                             if(source)

	cmp	DWORD PTR _source$50[ebp], 0
	je	SHORT $LN25@ConfigureT

; 1242 :                                 source->SetString(TEXT("file"), lpFile);

	lea	edx, DWORD PTR _lpFile$83[ebp]
	push	edx
	push	OFFSET $SG4294722692
	mov	eax, DWORD PTR _source$50[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$50[ebp]
	mov	eax, DWORD PTR [edx+48]
	call	eax
$LN25@ConfigureT:

; 1243 :                         }
; 1244 :                     }
; 1245 :                     break;

	jmp	$LN101@ConfigureT
$LN24@ConfigureT:

; 1246 : 
; 1247 :                 case IDOK:
; 1248 :                     {
; 1249 :                         ConfigTextSourceInfo *configInfo = (ConfigTextSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$71[ebp], eax

; 1250 :                         if(!configInfo) break;

	cmp	DWORD PTR _configInfo$71[ebp], 0
	jne	SHORT $LN23@ConfigureT
	jmp	$LN101@ConfigureT
$LN23@ConfigureT:

; 1251 :                         XElement *data = configInfo->data;

	mov	edx, DWORD PTR _configInfo$71[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _data$78[ebp], eax

; 1252 : 
; 1253 :                         BOOL bUseTextExtents = SendMessage(GetDlgItem(hwnd, IDC_USETEXTEXTENTS), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN179@ConfigureT
	mov	DWORD PTR tv1316[ebp], 1
	jmp	SHORT $LN180@ConfigureT
$LN179@ConfigureT:
	mov	DWORD PTR tv1316[ebp], 0
$LN180@ConfigureT:
	mov	edx, DWORD PTR tv1316[ebp]
	mov	DWORD PTR _bUseTextExtents$30[ebp], edx

; 1254 :                         BOOL bUseOutline = SendMessage(GetDlgItem(hwnd, IDC_USEOUTLINE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1099					; 0000044bH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN181@ConfigureT
	mov	DWORD PTR tv1326[ebp], 1
	jmp	SHORT $LN182@ConfigureT
$LN181@ConfigureT:
	mov	DWORD PTR tv1326[ebp], 0
$LN182@ConfigureT:
	mov	ecx, DWORD PTR tv1326[ebp]
	mov	DWORD PTR _bUseOutline$32[ebp], ecx

; 1255 :                         float outlineSize = (float)SendMessage(GetDlgItem(hwnd, IDC_OUTLINETHICKNESS), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1120					; 00000460H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cvtsi2ss xmm0, eax
	movss	DWORD PTR _outlineSize$44[ebp], xmm0

; 1256 : 
; 1257 :                         int mode = SendMessage(GetDlgItem(hwnd, IDC_USEFILE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1107					; 00000453H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN183@ConfigureT
	mov	DWORD PTR tv1345[ebp], 1
	jmp	SHORT $LN184@ConfigureT
$LN183@ConfigureT:
	mov	DWORD PTR tv1345[ebp], 0
$LN184@ConfigureT:
	mov	ecx, DWORD PTR tv1345[ebp]
	mov	DWORD PTR _mode$42[ebp], ecx

; 1258 : 
; 1259 :                         String strText = GetEditText(GetDlgItem(hwnd, IDC_TEXT));

	push	1078					; 00000436H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR _strText$36[ebp]
	push	eax
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 1260 :                         String strFile = GetEditText(GetDlgItem(hwnd, IDC_FILE));

	push	1108					; 00000454H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR _strFile$51[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 1261 : 
; 1262 :                         UINT extentWidth  = (UINT)SendMessage(GetDlgItem(hwnd, IDC_EXTENTWIDTH),  UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1082					; 0000043aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _extentWidth$28[ebp], eax

; 1263 :                         UINT extentHeight = (UINT)SendMessage(GetDlgItem(hwnd, IDC_EXTENTHEIGHT), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1083					; 0000043bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _extentHeight$27[ebp], eax

; 1264 : 
; 1265 :                         String strFont = GetFontFace(configInfo, GetDlgItem(hwnd, IDC_FONT));

	push	1112					; 00000458H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	mov	eax, DWORD PTR _configInfo$71[ebp]
	push	eax
	call	?GetFontFace@@YAPB_WPAUConfigTextSourceInfo@@PAUHWND__@@@Z ; GetFontFace
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 1266 :                         UINT fontSize = (UINT)SendMessage(GetDlgItem(hwnd, IDC_TEXTSIZE), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1079					; 00000437H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _fontSize$61[ebp], eax

; 1267 : 
; 1268 :                         BOOL bBold = SendMessage(GetDlgItem(hwnd, IDC_BOLD), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1126					; 00000466H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN185@ConfigureT
	mov	DWORD PTR tv1403[ebp], 1
	jmp	SHORT $LN186@ConfigureT
$LN185@ConfigureT:
	mov	DWORD PTR tv1403[ebp], 0
$LN186@ConfigureT:
	mov	eax, DWORD PTR tv1403[ebp]
	mov	DWORD PTR _bBold$35[ebp], eax

; 1269 :                         BOOL bItalic = SendMessage(GetDlgItem(hwnd, IDC_ITALIC), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1127					; 00000467H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN187@ConfigureT
	mov	DWORD PTR tv1413[ebp], 1
	jmp	SHORT $LN188@ConfigureT
$LN187@ConfigureT:
	mov	DWORD PTR tv1413[ebp], 0
$LN188@ConfigureT:
	mov	edx, DWORD PTR tv1413[ebp]
	mov	DWORD PTR _bItalic$34[ebp], edx

; 1270 :                         BOOL bVertical = SendMessage(GetDlgItem(hwnd, IDC_VERTICALSCRIPT), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1122					; 00000462H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN189@ConfigureT
	mov	DWORD PTR tv1423[ebp], 1
	jmp	SHORT $LN190@ConfigureT
$LN189@ConfigureT:
	mov	DWORD PTR tv1423[ebp], 0
$LN190@ConfigureT:
	mov	ecx, DWORD PTR tv1423[ebp]
	mov	DWORD PTR _bVertical$46[ebp], ecx

; 1271 : 
; 1272 :                         BOOL pointFiltering = SendMessage(GetDlgItem(hwnd, IDC_POINTFILTERING), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1036					; 0000040cH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN191@ConfigureT
	mov	DWORD PTR tv1433[ebp], 1
	jmp	SHORT $LN192@ConfigureT
$LN191@ConfigureT:
	mov	DWORD PTR tv1433[ebp], 0
$LN192@ConfigureT:
	mov	eax, DWORD PTR tv1433[ebp]
	mov	DWORD PTR _pointFiltering$14[ebp], eax

; 1273 : 
; 1274 :                         String strFontDisplayName = GetEditText(GetDlgItem(hwnd, IDC_FONT));

	push	1112					; 00000458H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR _strFontDisplayName$47[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 1275 :                         if(strFont.IsEmpty())

	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN21@ConfigureT

; 1276 :                         {
; 1277 :                             UINT id = FindFontName(configInfo, GetDlgItem(hwnd, IDC_FONT), strFontDisplayName);

	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	1112					; 00000458H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	mov	ecx, DWORD PTR _configInfo$71[ebp]
	push	ecx
	call	?FindFontName@@YAIPAUConfigTextSourceInfo@@PAUHWND__@@PB_W@Z ; FindFontName
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _id$22[ebp], eax

; 1278 :                             if(id != INVALID)

	cmp	DWORD PTR _id$22[ebp], -1
	je	SHORT $LN21@ConfigureT

; 1279 :                                 strFont = configInfo->fontFaces[id];

	mov	edx, DWORD PTR _id$22[ebp]
	push	edx
	mov	ecx, DWORD PTR _configInfo$71[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	push	eax
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN21@ConfigureT:

; 1280 :                         }
; 1281 : 
; 1282 :                         if(strFont.IsEmpty())

	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	$LN20@ConfigureT

; 1283 :                         {
; 1284 :                             String strError = Str("Sources.TextSource.FontNotFound");

	push	OFFSET $SG4294722691
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strError$9[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 1285 :                             strError.FindReplace(TEXT("$1"), strFontDisplayName);

	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722690
	lea	ecx, DWORD PTR _strError$9[ebp]
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z

; 1286 :                             OBSMessageBox(hwnd, strError, NULL, 0);

	push	0
	push	0
	lea	ecx, DWORD PTR _strError$9[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1287 :                             break;

	lea	ecx, DWORD PTR _strError$9[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strText$36[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN101@ConfigureT
$LN20@ConfigureT:

; 1288 :                         }
; 1289 : 
; 1290 :                         if(bUseTextExtents)

	cmp	DWORD PTR _bUseTextExtents$30[ebp], 0
	je	$LN19@ConfigureT

; 1291 :                         {
; 1292 :                             configInfo->cx = float(extentWidth);

	mov	edx, DWORD PTR _extentWidth$28[ebp]
	mov	DWORD PTR tv2474[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv2474[ebp]
	mov	eax, DWORD PTR tv2474[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv2478[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2478[ebp]
	mov	ecx, DWORD PTR _configInfo$71[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1293 :                             configInfo->cy = float(extentHeight);

	mov	edx, DWORD PTR _extentHeight$27[ebp]
	mov	DWORD PTR tv2484[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv2484[ebp]
	mov	eax, DWORD PTR tv2484[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv2488[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2488[ebp]
	mov	ecx, DWORD PTR _configInfo$71[ebp]
	movss	DWORD PTR [ecx+12], xmm0

; 1294 :                         }
; 1295 :                         else

	jmp	$LN18@ConfigureT
$LN19@ConfigureT:

; 1296 :                         {
; 1297 :                             String strOutputText;

	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 1298 :                             if(mode == 0)

	cmp	DWORD PTR _mode$42[ebp], 0
	jne	SHORT $LN17@ConfigureT

; 1299 :                                 strOutputText = strText;

	lea	edx, DWORD PTR _strText$36[ebp]
	push	edx
	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	jmp	$LN15@ConfigureT
$LN17@ConfigureT:

; 1300 :                             else if(mode == 1)

	cmp	DWORD PTR _mode$42[ebp], 1
	jne	$LN15@ConfigureT

; 1301 :                             {
; 1302 :                                 XFile textFile;

	lea	ecx, DWORD PTR _textFile$3[ebp]
	call	DWORD PTR __imp_??0XFile@@QAE@XZ

; 1303 :                                 if(strFile.IsEmpty() || !textFile.Open(strFile, XFILE_READ | XFILE_SHARED, XFILE_OPENEXISTING))

	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	jne	SHORT $LN13@ConfigureT
	push	3
	push	5
	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _textFile$3[ebp]
	call	DWORD PTR __imp_?Open@XFile@@QAEHPB_WKK@Z
	test	eax, eax
	jne	$LN14@ConfigureT
$LN13@ConfigureT:

; 1304 :                                 {
; 1305 :                                     String strError = Str("Sources.TextSource.FileNotFound");

	push	OFFSET $SG4294722689
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strError$11[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 1306 :                                     strError.FindReplace(TEXT("$1"), strFile);

	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722688
	lea	ecx, DWORD PTR _strError$11[ebp]
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z

; 1307 : 
; 1308 :                                     OBSMessageBox(hwnd, strError, NULL, 0);

	push	0
	push	0
	lea	ecx, DWORD PTR _strError$11[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1309 :                                     break;

	lea	ecx, DWORD PTR _strError$11[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _textFile$3[ebp]
	call	DWORD PTR __imp_??1XFile@@QAE@XZ
	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strText$36[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN101@ConfigureT
$LN14@ConfigureT:

; 1310 :                                 }
; 1311 : 
; 1312 :                                 textFile.ReadFileToString(strOutputText);

	lea	edx, DWORD PTR _strOutputText$38[ebp]
	push	edx
	lea	ecx, DWORD PTR _textFile$3[ebp]
	call	DWORD PTR __imp_?ReadFileToString@XFile@@QAEXAAVString@@@Z

; 1313 :                             }

	lea	ecx, DWORD PTR _textFile$3[ebp]
	call	DWORD PTR __imp_??1XFile@@QAE@XZ
$LN15@ConfigureT:

; 1314 : 
; 1315 :                             LOGFONT lf;
; 1316 :                             zero(&lf, sizeof(lf));

	push	92					; 0000005cH
	lea	eax, DWORD PTR _lf$81[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 1317 :                             lf.lfHeight = fontSize;

	mov	ecx, DWORD PTR _fontSize$61[ebp]
	mov	DWORD PTR _lf$81[ebp], ecx

; 1318 :                             lf.lfWeight = bBold ? FW_BOLD : FW_DONTCARE;

	cmp	DWORD PTR _bBold$35[ebp], 0
	je	SHORT $LN193@ConfigureT
	mov	DWORD PTR tv1566[ebp], 700		; 000002bcH
	jmp	SHORT $LN194@ConfigureT
$LN193@ConfigureT:
	mov	DWORD PTR tv1566[ebp], 0
$LN194@ConfigureT:
	mov	edx, DWORD PTR tv1566[ebp]
	mov	DWORD PTR _lf$81[ebp+16], edx

; 1319 :                             lf.lfItalic = bItalic;

	mov	al, BYTE PTR _bItalic$34[ebp]
	mov	BYTE PTR _lf$81[ebp+20], al

; 1320 :                             lf.lfQuality = ANTIALIASED_QUALITY;

	mov	BYTE PTR _lf$81[ebp+26], 4

; 1321 :                             if(strFont.IsValid())

	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN12@ConfigureT

; 1322 :                                 scpy_n(lf.lfFaceName, strFont, 31);

	push	31					; 0000001fH
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _lf$81[ebp+28]
	push	ecx
	call	DWORD PTR __imp_?scpy_n@@YGXPA_WPB_WI@Z

; 1323 :                             else

	jmp	SHORT $LN11@ConfigureT
$LN12@ConfigureT:

; 1324 :                                 scpy_n(lf.lfFaceName, TEXT("Arial"), 31);

	push	31					; 0000001fH
	push	OFFSET $SG4294722687
	lea	edx, DWORD PTR _lf$81[ebp+28]
	push	edx
	call	DWORD PTR __imp_?scpy_n@@YGXPA_WPB_WI@Z
$LN11@ConfigureT:

; 1325 : 
; 1326 :                             HDC hDC = CreateCompatibleDC(NULL);

	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	DWORD PTR _hDC$53[ebp], eax

; 1327 : 
; 1328 :                             Gdiplus::Font font(hDC, &lf);

	lea	eax, DWORD PTR _lf$81[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$53[ebp]
	push	ecx
	lea	ecx, DWORD PTR _font$17[ebp]
	call	??0Font@Gdiplus@@QAE@PAUHDC__@@PBUtagLOGFONTW@@@Z ; Gdiplus::Font::Font

; 1329 : 
; 1330 :                             if(!font.IsAvailable())

	lea	ecx, DWORD PTR _font$17[ebp]
	call	?IsAvailable@Font@Gdiplus@@QBEHXZ	; Gdiplus::Font::IsAvailable
	test	eax, eax
	jne	$LN10@ConfigureT

; 1331 :                             {
; 1332 :                                 String strError = Str("Sources.TextSource.FontNotFound");

	push	OFFSET $SG4294722686
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strError$15[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 1333 :                                 strError.FindReplace(TEXT("$1"), strFontDisplayName);

	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722685
	lea	ecx, DWORD PTR _strError$15[ebp]
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z

; 1334 :                                 OBSMessageBox(hwnd, strError, NULL, 0);

	push	0
	push	0
	lea	ecx, DWORD PTR _strError$15[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1335 :                                 DeleteDC(hDC);

	mov	ecx, DWORD PTR _hDC$53[ebp]
	push	ecx
	call	DWORD PTR __imp__DeleteDC@4

; 1336 :                                 break;

	lea	ecx, DWORD PTR _strError$15[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _font$17[ebp]
	call	??1Font@Gdiplus@@QAE@XZ			; Gdiplus::Font::~Font
	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strText$36[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN101@ConfigureT
$LN10@ConfigureT:

; 1337 :                             }
; 1338 : 
; 1339 :                             {
; 1340 :                                 Gdiplus::Graphics graphics(hDC);

	mov	edx, DWORD PTR _hDC$53[ebp]
	push	edx
	lea	ecx, DWORD PTR _graphics$5[ebp]
	call	??0Graphics@Gdiplus@@QAE@PAUHDC__@@@Z	; Gdiplus::Graphics::Graphics

; 1341 :                                 Gdiplus::StringFormat format(Gdiplus::StringFormat::GenericTypographic());

	call	?GenericTypographic@StringFormat@Gdiplus@@SAPBV12@XZ ; Gdiplus::StringFormat::GenericTypographic
	push	eax
	lea	ecx, DWORD PTR _format$18[ebp]
	call	??0StringFormat@Gdiplus@@QAE@PBV01@@Z	; Gdiplus::StringFormat::StringFormat

; 1342 : 
; 1343 :                                 UINT formatFlags;
; 1344 : 
; 1345 :                                 formatFlags = Gdiplus::StringFormatFlagsNoFitBlackBox
; 1346 :                                             | Gdiplus::StringFormatFlagsMeasureTrailingSpaces;

	mov	DWORD PTR _formatFlags$45[ebp], 2052	; 00000804H

; 1347 : 
; 1348 :                                 if(bVertical)

	cmp	DWORD PTR _bVertical$46[ebp], 0
	je	SHORT $LN9@ConfigureT

; 1349 :                                     formatFlags |= Gdiplus::StringFormatFlagsDirectionVertical
; 1350 :                                                  | Gdiplus::StringFormatFlagsDirectionRightToLeft;

	mov	eax, DWORD PTR _formatFlags$45[ebp]
	or	eax, 3
	mov	DWORD PTR _formatFlags$45[ebp], eax
$LN9@ConfigureT:

; 1351 : 
; 1352 :                                 format.SetFormatFlags(formatFlags);

	mov	ecx, DWORD PTR _formatFlags$45[ebp]
	push	ecx
	lea	ecx, DWORD PTR _format$18[ebp]
	call	?SetFormatFlags@StringFormat@Gdiplus@@QAE?AW4Status@2@H@Z ; Gdiplus::StringFormat::SetFormatFlags

; 1353 :                                 format.SetTrimming(Gdiplus::StringTrimmingWord);

	push	2
	lea	ecx, DWORD PTR _format$18[ebp]
	call	?SetTrimming@StringFormat@Gdiplus@@QAE?AW4Status@2@W4StringTrimming@2@@Z ; Gdiplus::StringFormat::SetTrimming

; 1354 : 
; 1355 :                                 Gdiplus::RectF rcf;

	lea	ecx, DWORD PTR _rcf$37[ebp]
	call	??0RectF@Gdiplus@@QAE@XZ		; Gdiplus::RectF::RectF

; 1356 :                                 graphics.MeasureString(strOutputText, -1, &font, Gdiplus::PointF(0.0f, 0.0f), &format, &rcf);

	lea	edx, DWORD PTR _rcf$37[ebp]
	push	edx
	lea	eax, DWORD PTR _format$18[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR $T2[ebp]
	call	??0PointF@Gdiplus@@QAE@MM@Z		; Gdiplus::PointF::PointF
	push	eax
	lea	ecx, DWORD PTR _font$17[ebp]
	push	ecx
	push	-1
	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _graphics$5[ebp]
	call	?MeasureString@Graphics@Gdiplus@@QBE?AW4Status@2@PB_WHPBVFont@2@ABVPointF@2@PBVStringFormat@2@PAVRectF@2@@Z ; Gdiplus::Graphics::MeasureString

; 1357 : 
; 1358 :                                 if(bUseOutline)

	cmp	DWORD PTR _bUseOutline$32[ebp], 0
	je	SHORT $LN8@ConfigureT

; 1359 :                                 {
; 1360 :                                     rcf.Height += outlineSize;

	movss	xmm0, DWORD PTR _rcf$37[ebp+12]
	addss	xmm0, DWORD PTR _outlineSize$44[ebp]
	movss	DWORD PTR _rcf$37[ebp+12], xmm0

; 1361 :                                     rcf.Width  += outlineSize;

	movss	xmm0, DWORD PTR _rcf$37[ebp+8]
	addss	xmm0, DWORD PTR _outlineSize$44[ebp]
	movss	DWORD PTR _rcf$37[ebp+8], xmm0
$LN8@ConfigureT:

; 1362 :                                 }
; 1363 : 
; 1364 :                                 if(bVertical)

	cmp	DWORD PTR _bVertical$46[ebp], 0
	je	SHORT $LN7@ConfigureT

; 1365 :                                 {
; 1366 :                                     if(rcf.Width<fontSize)

	mov	edx, DWORD PTR _fontSize$61[ebp]
	mov	DWORD PTR tv2537[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv2537[ebp]
	mov	eax, DWORD PTR tv2537[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv2541[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2541[ebp]
	comiss	xmm0, DWORD PTR _rcf$37[ebp+8]
	jbe	SHORT $LN6@ConfigureT

; 1367 :                                         rcf.Width = (float)fontSize;

	mov	ecx, DWORD PTR _fontSize$61[ebp]
	mov	DWORD PTR tv2546[ebp], ecx
	cvtsi2sd xmm0, DWORD PTR tv2546[ebp]
	mov	edx, DWORD PTR tv2546[ebp]
	shr	edx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
	movsd	QWORD PTR tv2550[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2550[ebp]
	movss	DWORD PTR _rcf$37[ebp+8], xmm0
$LN6@ConfigureT:

; 1368 :                                 }
; 1369 :                                 else

	jmp	SHORT $LN4@ConfigureT
$LN7@ConfigureT:

; 1370 :                                 {
; 1371 :                                     if(rcf.Height<fontSize)

	mov	eax, DWORD PTR _fontSize$61[ebp]
	mov	DWORD PTR tv2555[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv2555[ebp]
	mov	ecx, DWORD PTR tv2555[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv2559[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2559[ebp]
	comiss	xmm0, DWORD PTR _rcf$37[ebp+12]
	jbe	SHORT $LN4@ConfigureT

; 1372 :                                         rcf.Height = (float)fontSize;

	mov	edx, DWORD PTR _fontSize$61[ebp]
	mov	DWORD PTR tv2564[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv2564[ebp]
	mov	eax, DWORD PTR tv2564[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv2568[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv2568[ebp]
	movss	DWORD PTR _rcf$37[ebp+12], xmm0
$LN4@ConfigureT:

; 1373 :                                 }
; 1374 :                                 configInfo->cx = MAX(rcf.Width,  32.0f);

	movss	xmm0, DWORD PTR _rcf$37[ebp+8]
	comiss	xmm0, DWORD PTR __real@42000000
	jbe	SHORT $LN195@ConfigureT
	movss	xmm0, DWORD PTR _rcf$37[ebp+8]
	movss	DWORD PTR tv1712[ebp], xmm0
	jmp	SHORT $LN196@ConfigureT
$LN195@ConfigureT:
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR tv1712[ebp], xmm0
$LN196@ConfigureT:
	mov	ecx, DWORD PTR _configInfo$71[ebp]
	movss	xmm0, DWORD PTR tv1712[ebp]
	movss	DWORD PTR [ecx+8], xmm0

; 1375 :                                 configInfo->cy = MAX(rcf.Height, 32.0f);

	movss	xmm0, DWORD PTR _rcf$37[ebp+12]
	comiss	xmm0, DWORD PTR __real@42000000
	jbe	SHORT $LN197@ConfigureT
	movss	xmm0, DWORD PTR _rcf$37[ebp+12]
	movss	DWORD PTR tv1715[ebp], xmm0
	jmp	SHORT $LN198@ConfigureT
$LN197@ConfigureT:
	movss	xmm0, DWORD PTR __real@42000000
	movss	DWORD PTR tv1715[ebp], xmm0
$LN198@ConfigureT:
	mov	edx, DWORD PTR _configInfo$71[ebp]
	movss	xmm0, DWORD PTR tv1715[ebp]
	movss	DWORD PTR [edx+12], xmm0

; 1376 :                             }

	lea	ecx, DWORD PTR _format$18[ebp]
	call	??1StringFormat@Gdiplus@@QAE@XZ		; Gdiplus::StringFormat::~StringFormat
	lea	ecx, DWORD PTR _graphics$5[ebp]
	call	??1Graphics@Gdiplus@@QAE@XZ		; Gdiplus::Graphics::~Graphics

; 1377 : 
; 1378 :                             DeleteDC(hDC);

	mov	eax, DWORD PTR _hDC$53[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 1379 :                         }

	lea	ecx, DWORD PTR _font$17[ebp]
	call	??1Font@Gdiplus@@QAE@XZ			; Gdiplus::Font::~Font
	lea	ecx, DWORD PTR _strOutputText$38[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN18@ConfigureT:

; 1380 : 
; 1381 :                         data->SetFloat(TEXT("baseSizeCX"), configInfo->cx);

	mov	ecx, DWORD PTR _configInfo$71[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+8]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722684
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1382 :                         data->SetFloat(TEXT("baseSizeCY"), configInfo->cy);

	mov	edx, DWORD PTR _configInfo$71[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+12]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722683
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1383 : 
; 1384 :                         data->SetString(TEXT("font"), strFont);

	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722682
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1385 :                         data->SetInt(TEXT("color"), CCGetColor(GetDlgItem(hwnd, IDC_COLOR)));

	push	1104					; 00000450H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	push	eax
	push	OFFSET $SG4294722681
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1386 :                         data->SetInt(TEXT("fontSize"), fontSize);

	mov	ecx, DWORD PTR _fontSize$61[ebp]
	push	ecx
	push	OFFSET $SG4294722680
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1387 :                         data->SetInt(TEXT("textOpacity"), (UINT)SendMessage(GetDlgItem(hwnd, IDC_TEXTOPACITY), UDM_GETPOS32, 0, 0));

	push	0
	push	0
	push	1138					; 00000472H
	push	1118					; 0000045eH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294722679
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1388 :                         data->SetInt(TEXT("scrollSpeed"), (int)SendMessage(GetDlgItem(hwnd, IDC_SCROLLSPEED), UDM_GETPOS32, 0, 0));

	push	0
	push	0
	push	1138					; 00000472H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294722678
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1389 :                         data->SetInt(TEXT("bold"), bBold);

	mov	ecx, DWORD PTR _bBold$35[ebp]
	push	ecx
	push	OFFSET $SG4294722677
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1390 :                         data->SetInt(TEXT("italic"), bItalic);

	mov	edx, DWORD PTR _bItalic$34[ebp]
	push	edx
	push	OFFSET $SG4294722676
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1391 :                         data->SetInt(TEXT("vertical"), bVertical);

	mov	eax, DWORD PTR _bVertical$46[ebp]
	push	eax
	push	OFFSET $SG4294722675
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1392 :                         data->SetInt(TEXT("wrap"), SendMessage(GetDlgItem(hwnd, IDC_WRAP), BM_GETCHECK, 0, 0) == BST_CHECKED);

	push	0
	push	0
	push	240					; 000000f0H
	push	1119					; 0000045fH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN199@ConfigureT
	mov	DWORD PTR tv1782[ebp], 1
	jmp	SHORT $LN200@ConfigureT
$LN199@ConfigureT:
	mov	DWORD PTR tv1782[ebp], 0
$LN200@ConfigureT:
	mov	edx, DWORD PTR tv1782[ebp]
	push	edx
	push	OFFSET $SG4294722674
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1393 :                         data->SetInt(TEXT("scrollMode"), SendMessage(GetDlgItem(hwnd, IDC_SCROLLMODE), BM_GETCHECK, 0, 0) == BST_CHECKED);

	push	0
	push	0
	push	240					; 000000f0H
	push	1161					; 00000489H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN201@ConfigureT
	mov	DWORD PTR tv1795[ebp], 1
	jmp	SHORT $LN202@ConfigureT
$LN201@ConfigureT:
	mov	DWORD PTR tv1795[ebp], 0
$LN202@ConfigureT:
	mov	ecx, DWORD PTR tv1795[ebp]
	push	ecx
	push	OFFSET $SG4294722673
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1394 :                         data->SetInt(TEXT("underline"), SendMessage(GetDlgItem(hwnd, IDC_UNDERLINE), BM_GETCHECK, 0, 0) == BST_CHECKED);

	push	0
	push	0
	push	240					; 000000f0H
	push	1123					; 00000463H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN203@ConfigureT
	mov	DWORD PTR tv1808[ebp], 1
	jmp	SHORT $LN204@ConfigureT
$LN203@ConfigureT:
	mov	DWORD PTR tv1808[ebp], 0
$LN204@ConfigureT:
	mov	eax, DWORD PTR tv1808[ebp]
	push	eax
	push	OFFSET $SG4294722672
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1395 :                         data->SetInt(TEXT("pointFiltering"), pointFiltering);

	mov	ecx, DWORD PTR _pointFiltering$14[ebp]
	push	ecx
	push	OFFSET $SG4294722671
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1396 : 
; 1397 :                         data->SetInt(TEXT("backgroundColor"), CCGetColor(GetDlgItem(hwnd, IDC_BACKGROUNDCOLOR)));

	push	1109					; 00000455H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	push	eax
	push	OFFSET $SG4294722670
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1398 :                         data->SetInt(TEXT("backgroundOpacity"), (UINT)SendMessage(GetDlgItem(hwnd, IDC_BACKGROUNDOPACITY), UDM_GETPOS32, 0, 0));

	push	0
	push	0
	push	1138					; 00000472H
	push	1121					; 00000461H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294722669
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1399 : 
; 1400 :                         data->SetInt(TEXT("useOutline"), bUseOutline);

	mov	ecx, DWORD PTR _bUseOutline$32[ebp]
	push	ecx
	push	OFFSET $SG4294722668
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1401 :                         data->SetInt(TEXT("outlineColor"), CCGetColor(GetDlgItem(hwnd, IDC_OUTLINECOLOR)));

	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	push	eax
	push	OFFSET $SG4294722667
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1402 :                         data->SetFloat(TEXT("outlineSize"), outlineSize);

	push	ecx
	movss	xmm0, DWORD PTR _outlineSize$44[ebp]
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294722666
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetFloat@XElement@@QAEXPB_WM@Z

; 1403 :                         data->SetInt(TEXT("outlineOpacity"), (UINT)SendMessage(GetDlgItem(hwnd, IDC_OUTLINEOPACITY), UDM_GETPOS32, 0, 0));

	push	0
	push	0
	push	1138					; 00000472H
	push	1155					; 00000483H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294722665
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1404 : 
; 1405 :                         data->SetInt(TEXT("useTextExtents"), bUseTextExtents);

	mov	ecx, DWORD PTR _bUseTextExtents$30[ebp]
	push	ecx
	push	OFFSET $SG4294722664
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1406 :                         data->SetInt(TEXT("extentWidth"), extentWidth);

	mov	edx, DWORD PTR _extentWidth$28[ebp]
	push	edx
	push	OFFSET $SG4294722663
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1407 :                         data->SetInt(TEXT("extentHeight"), extentHeight);

	mov	eax, DWORD PTR _extentHeight$27[ebp]
	push	eax
	push	OFFSET $SG4294722662
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1408 :                         data->SetInt(TEXT("align"), (int)SendMessage(GetDlgItem(hwnd, IDC_ALIGN), CB_GETCURSEL, 0, 0));

	push	0
	push	0
	push	327					; 00000147H
	push	1124					; 00000464H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	push	eax
	push	OFFSET $SG4294722661
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1409 :                         data->SetString(TEXT("file"), strFile);

	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722660
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1410 :                         data->SetString(TEXT("text"), strText);

	lea	ecx, DWORD PTR _strText$36[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294722659
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1411 :                         data->SetInt(TEXT("mode"), mode);

	mov	edx, DWORD PTR _mode$42[ebp]
	push	edx
	push	OFFSET $SG4294722658
	mov	ecx, DWORD PTR _data$78[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1412 :                     }

	lea	ecx, DWORD PTR _strFontDisplayName$47[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFont$54[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFile$51[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strText$36[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN3@ConfigureT:

; 1413 : 
; 1414 :                 case IDCANCEL:
; 1415 :                     if(LOWORD(wParam) == IDCANCEL)

	movzx	eax, WORD PTR _wParam$[ebp]
	cmp	eax, 2
	jne	SHORT $LN2@ConfigureT

; 1416 :                         DoCancelStuff(hwnd);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?DoCancelStuff@@YAXPAUHWND__@@@Z	; DoCancelStuff
	add	esp, 4
$LN2@ConfigureT:

; 1417 : 
; 1418 :                     EndDialog(hwnd, LOWORD(wParam));

	movzx	edx, WORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__EndDialog@8
$LN101@ConfigureT:

; 1419 :             }
; 1420 :             break;

	jmp	SHORT $LN113@ConfigureT
$LN1@ConfigureT:

; 1421 : 
; 1422 :         case WM_CLOSE:
; 1423 :             DoCancelStuff(hwnd);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?DoCancelStuff@@YAXPAUHWND__@@@Z	; DoCancelStuff
	add	esp, 4

; 1424 :             EndDialog(hwnd, IDCANCEL);

	push	2
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
$LN113@ConfigureT:

; 1425 :     }
; 1426 :     return 0;

	xor	eax, eax
$LN115@ConfigureT:

; 1427 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN210@ConfigureT:
	DD	$LN82@ConfigureT
	DD	$LN27@ConfigureT
	DD	$LN42@ConfigureT
	DD	$LN68@ConfigureT
	DD	$LN91@ConfigureT
	DD	$LN31@ConfigureT
	DD	$LN34@ConfigureT
	DD	$LN100@ConfigureT
	DD	$LN47@ConfigureT
	DD	$LN101@ConfigureT
$LN207@ConfigureT:
	DB	0
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	1
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	2
	DB	9
	DB	0
	DB	0
	DB	9
	DB	9
	DB	0
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	9
	DB	9
	DB	4
	DB	4
	DB	5
	DB	6
	DB	2
	DB	4
	DB	9
	DB	9
	DB	7
	DB	9
	DB	9
	DB	0
	DB	9
	DB	9
	DB	9
	DB	3
	DB	9
	DB	9
	DB	3
	DB	3
	DB	8
	DB	9
	DB	3
	DB	3
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	0
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	9
	DB	3
	npad	1
$LN211@ConfigureT:
	DD	$LN75@ConfigureT
	DD	$LN74@ConfigureT
	DD	$LN73@ConfigureT
	DD	$LN69@ConfigureT
	DD	$LN70@ConfigureT
	DD	$LN71@ConfigureT
	DD	$LN76@ConfigureT
	DD	$LN72@ConfigureT
	DD	$LN77@ConfigureT
$LN208@ConfigureT:
	DB	0
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN212@ConfigureT:
	DD	$LN55@ConfigureT
	DD	$LN56@ConfigureT
	DD	$LN58@ConfigureT
	DD	$LN59@ConfigureT
	DD	$LN60@ConfigureT
	DD	$LN62@ConfigureT
	DD	$LN61@ConfigureT
	DD	$LN57@ConfigureT
	DD	$LN63@ConfigureT
$LN209@ConfigureT:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	3
	DB	4
	DB	8
	DB	8
	DB	5
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
?ConfigureTextProc@@YGHPAUHWND__@@IIJ@Z ENDP		; ConfigureTextProc
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0ConfigTextSourceInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ConfigTextSourceInfo@@QAE@XZ PROC			; ConfigTextSourceInfo::ConfigTextSourceInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??0StringList@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ConfigTextSourceInfo@@QAE@XZ ENDP			; ConfigTextSourceInfo::ConfigTextSourceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1ConfigTextSourceInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ConfigTextSourceInfo@@QAE@XZ PROC			; ConfigTextSourceInfo::~ConfigTextSourceInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ConfigTextSourceInfo@@QAE@XZ ENDP			; ConfigTextSourceInfo::~ConfigTextSourceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >, COMDAT
; _this$ = ecx

; 1345 : 		{	// default construct

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>

; 1346 : 		static_assert(!is_pointer<_Dx>::value,
; 1347 : 			"unique_ptr constructed with null deleter pointer");
; 1348 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@PAVSamplerState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@PAVSamplerState@@@Z PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >, COMDAT
; _this$ = ecx

; 1365 : 		{	// construct with pointer

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR __Ptr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>

; 1366 : 		static_assert(!is_pointer<_Dx>::value,
; 1367 : 			"unique_ptr constructed with null deleter pointer");
; 1368 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@PAVSamplerState@@@Z ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::unique_ptr<SamplerState,std::default_delete<SamplerState> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??4?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??4?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator=, COMDAT
; _this$ = ecx

; 1429 : 		{	// assign by moving _Right

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1430 : 		if (this != &_Right)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR __Right$[ebp]
	je	SHORT $LN1@operator

; 1431 : 			{	// different, do the move
; 1432 : 			reset(_Right.release());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?release@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEPAVSamplerState@@XZ ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::release
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?reset@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEXPAVSamplerState@@@Z ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::reset

; 1433 : 			this->get_deleter() = _STD forward<_Dx>(_Right.get_deleter());

	mov	ecx, DWORD PTR __Right$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
	push	eax
	call	??$forward@U?$default_delete@VSamplerState@@@std@@@std@@YA$$QAU?$default_delete@VSamplerState@@@0@AAU10@@Z ; std::forward<std::default_delete<SamplerState> >
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
$LN1@operator:

; 1434 : 			}
; 1435 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1436 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??4?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator=
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::~unique_ptr<SamplerState,std::default_delete<SamplerState> >, COMDAT
; _this$ = ecx

; 1446 : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1447 : 		if (this->_Myptr != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@unique_ptr

; 1448 : 			this->get_deleter()(this->_Myptr);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
	mov	ecx, eax
	call	??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z ; std::default_delete<SamplerState>::operator()
$LN2@unique_ptr:

; 1449 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAE@XZ ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::~unique_ptr<SamplerState,std::default_delete<SamplerState> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ?get@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBEPAVSamplerState@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBEPAVSamplerState@@XZ PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::get, COMDAT
; _this$ = ecx

; 1462 : 		{	// return pointer to object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1463 : 		return (this->_Myptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 1464 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?get@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBEPAVSamplerState@@XZ ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::get
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??B?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
tv70 = -4						; size = 4
??B?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBE_NXZ PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator bool, COMDAT
; _this$ = ecx

; 1467 : 		{	// test for non-null pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1468 : 		return (this->_Myptr != pointer());

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@operator
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv70[ebp], 0
$LN4@operator:
	mov	al, BYTE PTR tv70[ebp]

; 1469 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??B?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QBE_NXZ ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ?release@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEPAVSamplerState@@XZ
_TEXT	SEGMENT
__Ans$ = -8						; size = 4
_this$ = -4						; size = 4
?release@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEPAVSamplerState@@XZ PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::release, COMDAT
; _this$ = ecx

; 1472 : 		{	// yield ownership of pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1473 : 		pointer _Ans = this->_Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Ans$[ebp], ecx

; 1474 : 		this->_Myptr = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1475 : 		return (_Ans);

	mov	eax, DWORD PTR __Ans$[ebp]

; 1476 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?release@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEPAVSamplerState@@XZ ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::release
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ?reset@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEXPAVSamplerState@@@Z
_TEXT	SEGMENT
__Old$ = -8						; size = 4
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
?reset@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEXPAVSamplerState@@@Z PROC ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::reset, COMDAT
; _this$ = ecx

; 1479 : 		{	// establish new pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1480 : 		pointer _Old = this->_Myptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR __Old$[ebp], ecx

; 1481 : 		this->_Myptr = _Ptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [edx], eax

; 1482 : 		if (_Old != pointer())

	cmp	DWORD PTR __Old$[ebp], 0
	je	SHORT $LN2@reset

; 1483 : 			this->get_deleter()(_Old);

	mov	ecx, DWORD PTR __Old$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
	mov	ecx, eax
	call	??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z ; std::default_delete<SamplerState>::operator()
$LN2@reset:

; 1484 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?reset@?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@QAEXPAVSamplerState@@@Z ENDP ; std::unique_ptr<SamplerState,std::default_delete<SamplerState> >::reset
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
tv70 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
__Ptr$ = 8						; size = 4
??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z PROC ; std::default_delete<SamplerState>::operator(), COMDAT
; _this$ = ecx

; 1197 : 		{	// delete a pointer

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 1198 : 		static_assert(0 < sizeof (_Ty),
; 1199 : 			"can't delete an incomplete type");
; 1200 : 		delete _Ptr;

	mov	eax, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@operator
	push	1
	mov	edx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv70[ebp], eax
	jmp	SHORT $LN1@operator
$LN3@operator:
	mov	DWORD PTR tv70[ebp], 0
$LN1@operator:

; 1201 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
??R?$default_delete@VSamplerState@@@std@@QBEXPAVSamplerState@@@Z ENDP ; std::default_delete<SamplerState>::operator()
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Ptr$ = 8						; size = 4
??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z PROC ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>, COMDAT
; _this$ = ecx

; 1295 : 		{	// construct with pointer and deleter

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$default_delete@VSamplerState@@@std@@QAE@XZ ; std::default_delete<SamplerState>::default_delete<SamplerState>
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
	mov	DWORD PTR [eax], ecx

; 1296 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAE@PAVSamplerState@@@Z ENDP ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ PROC ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter, COMDAT
; _this$ = ecx

; 1312 : 		{	// return reference to deleter

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1313 : 		return (*this);

	mov	eax, DWORD PTR _this$[ebp]

; 1314 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?get_deleter@?$_Unique_ptr_base@VSamplerState@@U?$default_delete@VSamplerState@@@std@@$00@std@@QAEAAU?$default_delete@VSamplerState@@@2@XZ ENDP ; std::_Unique_ptr_base<SamplerState,std::default_delete<SamplerState>,1>::get_deleter
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\memory
;	COMDAT ??0?$default_delete@VSamplerState@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$default_delete@VSamplerState@@@std@@QAE@XZ PROC	; std::default_delete<SamplerState>::default_delete<SamplerState>, COMDAT
; _this$ = ecx

; 1185 : 	default_delete() _NOEXCEPT

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1186 : 		{	// default construct
; 1187 : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$default_delete@VSamplerState@@@std@@QAE@XZ ENDP	; std::default_delete<SamplerState>::default_delete<SamplerState>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\type_traits
;	COMDAT ??$move@AAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@0@AAV10@@Z PROC ; std::move<std::unique_ptr<SamplerState,std::default_delete<SamplerState> > &>, COMDAT

; 1519 : 	{	// forward _Arg as movable

	push	ebp
	mov	ebp, esp

; 1520 : 	return ((typename remove_reference<_Ty>::type&&)_Arg);

	mov	eax, DWORD PTR __Arg$[ebp]

; 1521 : 	}

	pop	ebp
	ret	0
??$move@AAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@std@@@std@@YA$$QAV?$unique_ptr@VSamplerState@@U?$default_delete@VSamplerState@@@std@@@0@AAV10@@Z ENDP ; std::move<std::unique_ptr<SamplerState,std::default_delete<SamplerState> > &>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\type_traits
;	COMDAT ??$forward@U?$default_delete@VSamplerState@@@std@@@std@@YA$$QAU?$default_delete@VSamplerState@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$default_delete@VSamplerState@@@std@@@std@@YA$$QAU?$default_delete@VSamplerState@@@0@AAU10@@Z PROC ; std::forward<std::default_delete<SamplerState> >, COMDAT

; 1504 : 	{	// forward an lvalue

	push	ebp
	mov	ebp, esp

; 1505 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1506 : 	}

	pop	ebp
	ret	0
??$forward@U?$default_delete@VSamplerState@@@std@@@std@@YA$$QAU?$default_delete@VSamplerState@@@0@AAU10@@Z ENDP ; std::forward<std::default_delete<SamplerState> >
_TEXT	ENDS
END
