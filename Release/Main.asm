; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\Main.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?bStreamOnStart@@3_NA				; bStreamOnStart
PUBLIC	?hwndLogWindow@@3PAUHWND__@@A			; hwndLogWindow
PUBLIC	?hwndLog@@3PAUHWND__@@A				; hwndLog
PUBLIC	?hOBSMutex@@3PAXA				; hOBSMutex
PUBLIC	?hwndMain@@3PAUHWND__@@A			; hwndMain
PUBLIC	??_R0?AUPluginInfo@@@8				; PluginInfo `RTTI Type Descriptor'
PUBLIC	?hinstMain@@3PAUHINSTANCE__@@A			; hinstMain
PUBLIC	?lpAppPath@@3PA_WA				; lpAppPath
PUBLIC	?bIsPortable@@3_NA				; bIsPortable
PUBLIC	?App@@3PAVOBS@@A				; App
PUBLIC	?GlobalConfig@@3PAVConfigFile@@A		; GlobalConfig
PUBLIC	?lpAppDataPath@@3PA_WA				; lpAppDataPath
PUBLIC	?AppConfig@@3PAVConfigFile@@A			; AppConfig
PUBLIC	?hwndRenderFrame@@3PAUHWND__@@A			; hwndRenderFrame
EXTRN	__imp_?DataLength@String@@QBEIXZ:PROC
EXTRN	__imp_??0ConfigFile@@QAE@XZ:PROC
EXTRN	__imp_??1ConfigFile@@QAE@XZ:PROC
EXTRN	__imp_?ReverseOrder@XElement@@QAEXXZ:PROC
EXTRN	__imp_?OSGetTotalCores@@YGHXZ:PROC
EXTRN	__imp__CommandLineToArgvW@8:PROC
EXTRN	__imp_?LogRaw@@YAXPB_WI@Z:PROC
EXTRN	__imp__TranslateAcceleratorW@12:PROC
EXTRN	__imp__DwmEnableComposition@4:PROC
EXTRN	__imp__AdjustTokenPrivileges@24:PROC
EXTRN	__imp__GetMessageW@16:PROC
EXTRN	__imp_??YString@@QAEAAV0@PB_W@Z:PROC
EXTRN	__imp_?GetPathWithoutExtension@@YA?AVString@@PB_W@Z:PROC
EXTRN	__imp__HeapSetInformation@16:PROC
EXTRN	__imp_?EnableProfiling@@YGXHMM@Z:PROC
EXTRN	__imp_?sfix@@YGPA_WPA_W@Z:PROC
EXTRN	__imp__SetForegroundWindow@4:PROC
EXTRN	__imp__SHGetFolderPathW@20:PROC
EXTRN	__imp_?CCGetCustomColors@@YAXPAK@Z:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__LoadAcceleratorsW@8:PROC
EXTRN	__imp__IsDialogMessageW@8:PROC
EXTRN	__imp__LookupPrivilegeValueW@12:PROC
EXTRN	__imp_?TerminateXT@@YGXXZ:PROC
EXTRN	__imp__CoInitialize@4:PROC
EXTRN	__imp_?scat_n@@YGXPA_WPB_WI@Z:PROC
EXTRN	__imp__GetLocaleInfoEx@16:PROC
EXTRN	__imp_?OSGetLogicalCores@@YGHXZ:PROC
EXTRN	__imp_?ResetXTAllocator@@YGXPB_W@Z:PROC
EXTRN	__imp__CopyFileW@12:PROC
EXTRN	__imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z:PROC
EXTRN	__imp_?OSCreateDirectory@@YGHPB_W@Z:PROC
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__SetProcessDEPPolicy@4:PROC
EXTRN	__imp_?CCSetCustomColors@@YAXPAK@Z:PROC
EXTRN	__imp_?Create@ConfigFile@@QAEHPB_W@Z:PROC
EXTRN	__imp_?Open@ConfigFile@@QAEHPB_WH@Z:PROC
EXTRN	__imp_?SetFloat@ConfigFile@@QAEXPB_W0M@Z:PROC
EXTRN	__imp_?InitXTLog@@YGXPB_W@Z:PROC
EXTRN	__imp__SetUnhandledExceptionFilter@4:PROC
EXTRN	__imp__GdiplusStartup@12:PROC
EXTRN	__imp__GdiplusShutdown@4:PROC
EXTRN	__imp__GlobalMemoryStatus@4:PROC
EXTRN	__imp__OpenProcessToken@12:PROC
EXTRN	__imp_?InitXT@@YGHPB_W0@Z:PROC
EXTRN	__imp__GetCommandLineW@0:PROC
EXTRN	__imp__DispatchMessageW@4:PROC
?bStreamOnStart@@3_NA DB 01H DUP (?)			; bStreamOnStart
	ALIGN	4

?hwndLogWindow@@3PAUHWND__@@A DD 01H DUP (?)		; hwndLogWindow
?hwndLog@@3PAUHWND__@@A DD 01H DUP (?)			; hwndLog
?hOBSMutex@@3PAXA DD 01H DUP (?)			; hOBSMutex
_GenericSansSerifFontFamilyBuffer DB 08H DUP (?)
?hwndMain@@3PAUHWND__@@A DD 01H DUP (?)			; hwndMain
_GenericTypographicStringFormatBuffer DB 08H DUP (?)
_GenericDefaultStringFormatBuffer DB 08H DUP (?)
_GenericMonospaceFontFamilyBuffer DB 08H DUP (?)
_GenericSerifFontFamilyBuffer DB 08H DUP (?)
?hinstMain@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hinstMain
?lpAppPath@@3PA_WA DW 0104H DUP (?)			; lpAppPath
?bIsPortable@@3_NA DB 01H DUP (?)			; bIsPortable
	ALIGN	4

?App@@3PAVOBS@@A DD 01H DUP (?)				; App
?GlobalConfig@@3PAVConfigFile@@A DD 01H DUP (?)		; GlobalConfig
?lpAppDataPath@@3PA_WA DW 0104H DUP (?)			; lpAppDataPath
?AppConfig@@3PAVConfigFile@@A DD 01H DUP (?)		; AppConfig
?hwndRenderFrame@@3PAUHWND__@@A DD 01H DUP (?)		; hwndRenderFrame
_BSS	ENDS
;	COMDAT ??_R0?AUPluginInfo@@@8
data$r	SEGMENT
??_R0?AUPluginInfo@@@8 DD FLAT:??_7type_info@@6B@	; PluginInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUPluginInfo@@', 00H
	ORG $+2
$SG4294820273 DB 'S', 00H, 'e', 00H, 'D', 00H, 'e', 00H, 'b', 00H, 'u', 00H
	DB	'g', 00H, 'P', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820272 DB '%', 00H, '0', 00H, '8', 00H, 'X', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG4294820269 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l'
	DB	00H, 'e', 00H, 00H, 00H
$SG4294820268 DB 'GetFileVersionInfoSizeW', 00H
$SG4294820271 DB 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 00H, 00H
$SG4294820270 DB 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 00H, 00H
$SG4294820265 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294820264 DB 'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294820267 DB 'GetFileVersionInfoW', 00H
$SG4294820266 DB 'VerQueryValueW', 00H
	ORG $+1
$SG4294820261 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, 00H, 00H
$SG4294820260 DB '\', 00H, 00H, 00H
$SG4294820263 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'f', 00H
	DB	'o', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820262 DB 'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294820259 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'q', 00H, 'u', 00H, 'e', 00H, 'r'
	DB	00H, 'y', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'u', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820257 DB 'H', 00H, 'A', 00H, 'R', 00H, 'D', 00H, 'W', 00H, 'A', 00H
	DB	'R', 00H, 'E', 00H, '\', 00H, 'D', 00H, 'E', 00H, 'S', 00H, 'C'
	DB	00H, 'R', 00H, 'I', 00H, 'P', 00H, 'T', 00H, 'I', 00H, 'O', 00H
	DB	'N', 00H, '\', 00H, 'S', 00H, 'y', 00H, 's', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, '\', 00H, 'C', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 'l', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'c'
	DB	00H, 'e', 00H, 's', 00H, 's', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	'0', 00H, 00H, 00H
	ORG $+2
$SG4294820256 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 's', 00H, 'y', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o'
	DB	00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'y', 00H, ' ', 00H, 'k', 00H, 'e', 00H
	DB	'y', 00H, 00H, 00H
	ORG $+2
$SG4294820258 DB 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ':', 00H, ' ', 00H, '%', 00H, 'u', 00H
	DB	'.', 00H, '%', 00H, 'u', 00H, ' ', 00H, 'B', 00H, 'u', 00H, 'i'
	DB	00H, 'l', 00H, 'd', 00H, ' ', 00H, '%', 00H, 'u', 00H, ' ', 00H
	DB	'(', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 's', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, '%', 00H, 'd', 00H, ')', 00H
	DB	00H, 00H
$SG4294820249 DB 'C', 00H, 'P', 00H, 'U', 00H, ' ', 00H, 'S', 00H, 'p', 00H
	DB	'e', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 'd'
	DB	00H, 'M', 00H, 'H', 00H, 'z', 00H, 00H, 00H
	ORG $+2
$SG4294820253 DB '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, 00H, 00H
$SG4294820252 DB 'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	's', 00H, 'o', 00H, 'r', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	00H, 00H
$SG4294820255 DB 'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'B', 00H
	DB	'r', 00H, 'o', 00H, 'a', 00H, 'd', 00H, 'c', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'S', 00H, 'o', 00H
	DB	'f', 00H, 't', 00H, 'w', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'v', 00H, '0', 00H, '.', 00H, '6', 00H, '5', 00H, '7', 00H
	DB	'b', 00H, 00H, 00H
$SG4294820254 DB '%', 00H, 's', 00H, ' ', 00H, '-', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, 'b', 00H, 'i', 00H, 't', 00H, ' ', 00H, '(', 00H, 0b4H
	DB	00H, 0fbH, '0', 0c9H, 03H, 0fbH, '0@', 0ffH, ')', 00H, 00H, 00H
	ORG $+2
$SG4294820251 DB 'C', 00H, 'P', 00H, 'U', 00H, ' ', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820248 DB 'P', 00H, 'h', 00H, 'y', 00H, 's', 00H, 'i', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'm', 00H, 'o'
	DB	00H, 'r', 00H, 'y', 00H, ':', 00H, ' ', 00H, ' ', 00H, '%', 00H
	DB	'l', 00H, 'd', 00H, 'M', 00H, 'B', 00H, ' ', 00H, 'T', 00H, 'o'
	DB	00H, 't', 00H, 'a', 00H, 'l', 00H, ',', 00H, ' ', 00H, '%', 00H
	DB	'l', 00H, 'd', 00H, 'M', 00H, 'B', 00H, ' ', 00H, 'F', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, 00H, 00H
$SG4294820250 DB '~', 00H, 'M', 00H, 'H', 00H, 'z', 00H, 00H, 00H
	ORG $+2
$SG4294820245 DB 'E', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H
$SG4294820244 DB 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294820240 DB 'O', 00H, 'B', 00H, 'S', 00H, ' ', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, 's', 00H, ':', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820247 DB 's', 00H, 't', 00H, 'e', 00H, 'p', 00H, 'p', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H, 'd', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 'u', 00H, ',', 00H, ' ', 00H, 'm', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '%', 00H, 'u', 00H, ','
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'm', 00H, 'i', 00H, 'l', 00H
	DB	'y', 00H, ' ', 00H, '%', 00H, 'u', 00H, ',', 00H, ' ', 00H, 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '%', 00H, 'u', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'm', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '%', 00H, 'u', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'f', 00H, 'a'
	DB	00H, 'm', 00H, 'i', 00H, 'l', 00H, 'y', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ',', 00H, ' ', 00H, 'H', 00H, 'T', 00H, 'T', 00H, ' '
	DB	00H, '%', 00H, 'u', 00H, ',', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'g', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'c'
	DB	00H, 'o', 00H, 'r', 00H, 'e', 00H, 's', 00H, ' ', 00H, '%', 00H
	DB	'u', 00H, ',', 00H, ' ', 00H, 't', 00H, 'o', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, ' ', 00H, '%', 00H, 'u', 00H, 00H, 00H
	ORG $+2
$SG4294820246 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '%', 00H, 'u', 00H, ':', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 's', 00H, '=', 00H, '{', 00H, '%', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, '%', 00H, 'd', 00H, '}', 00H, ',', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '=', 00H, '{', 00H
	DB	'%', 00H, 'd', 00H, ',', 00H, ' ', 00H, '%', 00H, 'd', 00H, '}'
	DB	00H, 00H, 00H
$SG4294820241 DB '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H
	DB	'-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-'
	DB	00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, '-', 00H, 00H, 00H
$SG4294820243 DB 'A', 00H, 'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294820242 DB 'O', 00H, 'B', 00H, 'S', 00H, 'A', 00H, 'p', 00H, 'i', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820237 DB 'O', 00H, 'B', 00H, 'S', 00H, 'A', 00H, 'p', 00H, 'i', 00H
	DB	'.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG4294820236 DB '\', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'x', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, 'i', 00H, 'g', 00H, 00H, 00H
$SG4294820239 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'A', 00H
	DB	'd', 00H, 'd', 00H, 'r', 00H, 'e', 00H, 's', 00H, 's', 00H, ' '
	DB	00H, ' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG4294820238 DB 'O', 00H, 'B', 00H, 'S', 00H, '.', 00H, 'e', 00H, 'x', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820233 DB '%', 00H, 's', 00H, '\', 00H, 's', 00H, 'c', 00H, 'e', 00H
	DB	'n', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '\', 00H
	DB	'%', 00H, 's', 00H, '.', 00H, 'x', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 'f', 00H, 'i', 00H, 'g', 00H, 00H, 00H
$SG4294820232 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG4294820235 DB 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820234 DB 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
$SG4294820229 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820228 DB '\', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, '\', 00H, '*', 00H, '.', 00H
	DB	'x', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294820231 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820230 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG4294820213 DB '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG4294820225 DB '\', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, '\', 00H, 's', 00H, 'c', 00H
	DB	'e', 00H, 'n', 00H, 'e', 00H, 's', 00H, '.', 00H, 'x', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 00H, 00H
$SG4294820224 DB '\', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'x', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f'
	DB	00H, 'i', 00H, 'g', 00H, 00H, 00H
$SG4294820227 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG4294820226 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820221 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820220 DB 'P', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820223 DB 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 's', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820222 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG4294820217 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820216 DB 'P', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820219 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820218 DB 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'A', 00H, 'p', 00H
	DB	'p', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820212 DB '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '*', 00H, '.', 00H, 'i'
	DB	00H, 'n', 00H, 'i', 00H, 00H, 00H
$SG4294820215 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820214 DB '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 00H, 00H
	ORG $+2
$SG4294820209 DB '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 00H, 00H
	ORG $+2
$SG4294820208 DB '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG4294820211 DB 'P', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820210 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820205 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820204 DB '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 00H, 00H
	ORG $+2
$SG4294820207 DB 'U', 00H, 'n', 00H, 't', 00H, 'i', 00H, 't', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294820206 DB 'P', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820201 DB 'D', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 00H, 00H
$SG4294820200 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820203 DB '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG4294820202 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, 00H, 00H
$SG4294820197 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294820196 DB 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H
	DB	'p', 00H, 'V', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'e'
	DB	00H, 00H, 00H
$SG4294820199 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294820198 DB 'M', 00H, 'i', 00H, 'c', 00H, 'V', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 00H, 00H
$SG4294820193 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294820192 DB 'F', 00H, 'P', 00H, 'S', 00H, 00H, 00H
$SG4294820195 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294820194 DB 'M', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294820189 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294820188 DB 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'A', 00H, 'e', 00H, 'r', 00H, 'o', 00H, 00H, 00H
$SG4294820191 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294820190 DB 'D', 00H, 'o', 00H, 'w', 00H, 'n', 00H, 's', 00H, 'c', 00H
	DB	'a', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG4294820185 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820184 DB 'M', 00H, 'a', 00H, 'x', 00H, 'B', 00H, 'i', 00H, 't', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820187 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294820186 DB 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820181 DB 'P', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820180 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820183 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820182 DB 'v', 00H, 'e', 00H, 'r', 00H, 'y', 00H, 'f', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294820177 DB 'F', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820176 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820179 DB 'Q', 00H, 'u', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294820178 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820173 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820172 DB 'i', 00H, 's', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'e', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294820175 DB '1', 00H, '2', 00H, '8', 00H, 00H, 00H
$SG4294820174 DB 'B', 00H, 'i', 00H, 't', 00H, 'r', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820169 DB 'P', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'i', 00H, 's', 00H
	DB	'h', 00H, 00H, 00H
$SG4294820168 DB 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820171 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820170 DB 'S', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H, 'c', 00H
	DB	'e', 00H, 00H, 00H
$SG4294820165 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, 00H, 00H
$SG4294820164 DB 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	'/', 00H, 00H, 00H
$SG4294820167 DB 'P', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'i', 00H, 's', 00H
	DB	'h', 00H, 00H, 00H
$SG4294820166 DB '\', 00H, 'g', 00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H
	DB	'l', 00H, '.', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 00H, 00H
$SG4294820161 DB 'L', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'u', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820160 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820163 DB '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294820162 DB 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820157 DB 'K', 00H, 'E', 00H, 'R', 00H, 'N', 00H, 'E', 00H, 'L', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG4294820156 DB 'GetProcessUserModeExceptionPolicy', 00H
	ORG $+2
$SG4294820159 DB 'M', 00H, 'a', 00H, 'x', 00H, 'L', 00H, 'o', 00H, 'g', 00H
	DB	's', 00H, 00H, 00H
$SG4294820158 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820153 DB 'U', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'C'
	DB	00H, 'P', 00H, 'U', 00H, 00H, 00H
$SG4294820152 DB 'O', 00H, 'B', 00H, 'S', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, 'u', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 's', 00H, ' '
	DB	00H, 'a', 00H, 'n', 00H, ' ', 00H, 'S', 00H, 'S', 00H, 'E', 00H
	DB	'2', 00H, '-', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'C', 00H, 'P', 00H, 'U', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG4294820155 DB 'SetProcessUserModeExceptionPolicy', 00H
	ORG $+2
$SG4294820154 DB 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	'\', 00H, 'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H, 't'
	DB	00H, 00H, 00H
$SG4294820149 DB '-', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820148 DB '-', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820151 DB '-', 00H, 'm', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820150 DB '-', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG4294820145 DB 'O', 00H, 'B', 00H, 'S', 00H, 'M', 00H, 'u', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG4294820144 DB 'O', 00H, 'B', 00H, 'S', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294820147 DB '-', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'c', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820146 DB '-', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i'
	DB	00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG4294820141 DB '\', 00H, 'O', 00H, 'B', 00H, 'S', 00H, 00H, 00H
	ORG $+2
$SG4294820140 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820143 DB 'F', 00H, 'a', 00H, 's', 00H, 't', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 00H, 00H
$SG4294820142 DB '\', 00H, 'o', 00H, 'b', 00H, 's', 00H, '_', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, '_', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820137 DB '\', 00H, 's', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820136 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820139 DB '\', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG4294820138 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820133 DB '\', 00H, 'c', 00H, 'r', 00H, 'a', 00H, 's', 00H, 'h', 00H
	DB	'D', 00H, 'u', 00H, 'm', 00H, 'p', 00H, 's', 00H, 00H, 00H
$SG4294820132 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820135 DB '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 's', 00H, 00H, 00H
$SG4294820134 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820129 DB '\', 00H, 'u', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG4294820128 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820131 DB '\', 00H, 'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
$SG4294820130 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820125 DB 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294820124 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820127 DB '\', 00H, 's', 00H, 'e', 00H, 'r', 00H, 'v', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 00H, 00H
$SG4294820126 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, 'n', 00H
	DB	'''', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H, ' '
	DB	00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+2
$SG4294820123 DB 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	'/', 00H, 'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H, 't'
	DB	00H, 00H, 00H
$SG4294820121 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820120 DB 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820122 DB 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	'/', 00H, 'e', 00H, 'n', 00H, '.', 00H, 't', 00H, 'x', 00H, 't'
	DB	00H, 00H, 00H
$SG4294820117 DB 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG4294820116 DB 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H
	DB	'/', 00H, 00H, 00H
$SG4294820119 DB 'L', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'u', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294820118 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820113 DB 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'A', 00H, 'p', 00H
	DB	'p', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'o', 00H, 'r', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294820112 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820115 DB '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294820114 DB 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820109 DB '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 's', 00H, '\', 00H
	DB	'*', 00H, '.', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 00H, 00H
$SG4294820108 DB '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 's', 00H, '\', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820111 DB 'Color', 00H
	ORG $+2
$SG4294820110 DB 'C', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820104 DB '.', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG4294820105 DB '\', 00H, 'l', 00H, 'o', 00H, 'g', 00H, 's', 00H, '\', 00H
	DB	'%', 00H, 'u', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'u'
	DB	00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'u', 00H, '-', 00H
	DB	'%', 00H, '0', 00H, '2', 00H, 'u', 00H, '%', 00H, '0', 00H, '2'
	DB	00H, 'u', 00H, '-', 00H, '%', 00H, '0', 00H, '2', 00H, 'u', 00H
	DB	00H, 00H
	ORG $+2
$SG4294820107 DB 'M', 00H, 'a', 00H, 'x', 00H, 'L', 00H, 'o', 00H, 'g', 00H
	DB	's', 00H, 00H, 00H
$SG4294820106 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820101 DB '\', 00H, 'p', 00H, 'l', 00H, 'u', 00H, 'g', 00H, 'i', 00H
	DB	'n', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, '\', 00H, 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'H', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'L', 00H, 'o', 00H, 'g'
	DB	00H, '.', 00H, 't', 00H, 'x', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294820100 DB 'Color', 00H
	ORG $+2
$SG4294820103 DB 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'A', 00H, 'e', 00H, 'r', 00H, 'o', 00H, 00H, 00H
$SG4294820102 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294820097 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294820096 DB 0dH, 00H, 0aH, 00H, 0dH, 00H, 0aH, 00H, 'L', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'g', 00H, ':'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294820099 DB 'C', 00H, 'u', 00H, 's', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG4294820098 DB 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'A', 00H, 'p', 00H
	DB	'p', 00H, 'V', 00H, 'e', 00H, 'r', 00H, 's', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H
PUBLIC	??H?$List@UPluginInfo@@@@QBEPAUPluginInfo@@I@Z	; List<PluginInfo>::operator+
PUBLIC	?Num@?$List@UPluginInfo@@@@QBEIXZ		; List<PluginInfo>::Num
PUBLIC	??_GConfigFile@@QAEPAXI@Z			; ConfigFile::`scalar deleting destructor'
PUBLIC	_WinMain@16
PUBLIC	?SetWorkingFolder@@YAXXZ			; SetWorkingFolder
PUBLIC	?InitializeExceptionHandler@@YAXXZ		; InitializeExceptionHandler
PUBLIC	?LoadGlobalIni@@YAXXZ				; LoadGlobalIni
PUBLIC	?SetupIni@@YAXPB_W@Z				; SetupIni
PUBLIC	?SetupSceneCollection@@YAXPB_W@Z		; SetupSceneCollection
PUBLIC	?FindSceneCollection@@YA?AVString@@V1@@Z	; FindSceneCollection
PUBLIC	?InvertPre47Scenes@@YAXXZ			; InvertPre47Scenes
PUBLIC	?LogSystemStats@@YAXXZ				; LogSystemStats
PUBLIC	?LoadSeDebugPrivilege@@YAHXZ			; LoadSeDebugPrivilege
PUBLIC	??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput
PUBLIC	?GetPluginInfo@OBS@@QBEPBUPluginInfo@@I@Z	; OBS::GetPluginInfo
PUBLIC	?NumPlugins@OBS@@QBEIXZ				; OBS::NumPlugins
PUBLIC	?ProcessEvents@@YGXXZ				; ProcessEvents
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?ProcessEvents@@YGXXZ
_TEXT	SEGMENT
_msg$ = -28						; size = 28
?ProcessEvents@@YGXXZ PROC				; ProcessEvents, COMDAT

; 447  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
$LN2@ProcessEve:

; 448  :     MSG msg;
; 449  :     while(PeekMessage(&msg, NULL, 0, 0, 1))

	push	1
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__PeekMessageW@20
	test	eax, eax
	je	SHORT $LN3@ProcessEve

; 450  :     {
; 451  :         TranslateMessage(&msg);

	lea	ecx, DWORD PTR _msg$[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4

; 452  :         DispatchMessage(&msg);

	lea	edx, DWORD PTR _msg$[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageW@4

; 453  :     }

	jmp	SHORT $LN2@ProcessEve
$LN3@ProcessEve:

; 454  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ProcessEvents@@YGXXZ ENDP				; ProcessEvents
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?NumPlugins@OBS@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumPlugins@OBS@@QBEIXZ PROC				; OBS::NumPlugins, COMDAT
; _this$ = ecx

; 1272 :     UINT NumPlugins() const {return plugins.Num();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	mov	esp, ebp
	pop	ebp
	ret	0
?NumPlugins@OBS@@QBEIXZ ENDP				; OBS::NumPlugins
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?GetPluginInfo@OBS@@QBEPBUPluginInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_idx$ = 8						; size = 4
?GetPluginInfo@OBS@@QBEPBUPluginInfo@@I@Z PROC		; OBS::GetPluginInfo, COMDAT
; _this$ = ecx

; 1273 :     const PluginInfo *GetPluginInfo(UINT idx) const {if (idx < plugins.Num()) return plugins+idx; else return NULL;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _idx$[ebp], eax
	jae	SHORT $LN2@GetPluginI
	mov	eax, DWORD PTR _idx$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??H?$List@UPluginInfo@@@@QBEPAUPluginInfo@@I@Z ; List<PluginInfo>::operator+
	jmp	SHORT $LN3@GetPluginI
	jmp	SHORT $LN3@GetPluginI
$LN2@GetPluginI:
	xor	eax, eax
$LN3@GetPluginI:
	mov	esp, ebp
	pop	ebp
	ret	4
?GetPluginInfo@OBS@@QBEPBUPluginInfo@@I@Z ENDP		; OBS::GetPluginInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\gdiplusinit.h
;	COMDAT ??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_debugEventCallback$ = 8				; size = 4
_suppressBackgroundThread$ = 12				; size = 4
_suppressExternalCodecs$ = 16				; size = 4
??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z PROC ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput, COMDAT
; _this$ = ecx

; 51   :     GdiplusStartupInput(

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 52   :         DebugEventProc debugEventCallback = NULL,
; 53   :         BOOL suppressBackgroundThread = FALSE,
; 54   :         BOOL suppressExternalCodecs = FALSE)
; 55   :     {
; 56   :         GdiplusVersion = 1;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 1

; 57   :         DebugEventCallback = debugEventCallback;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _debugEventCallback$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 58   :         SuppressBackgroundThread = suppressBackgroundThread;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _suppressBackgroundThread$[ebp]
	mov	DWORD PTR [eax+8], ecx

; 59   :         SuppressExternalCodecs = suppressExternalCodecs;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _suppressExternalCodecs$[ebp]
	mov	DWORD PTR [edx+12], eax

; 60   :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ENDP ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?LoadSeDebugPrivilege@@YAHXZ
_TEXT	SEGMENT
_Val$ = -36						; size = 8
_err$ = -28						; size = 4
_hToken$ = -24						; size = 4
_tp$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?LoadSeDebugPrivilege@@YAHXZ PROC			; LoadSeDebugPrivilege, COMDAT

; 60   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 61   :     DWORD   err;
; 62   :     HANDLE  hToken;
; 63   :     LUID    Val;
; 64   :     TOKEN_PRIVILEGES tp;
; 65   : 
; 66   :     if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))

	lea	eax, DWORD PTR _hToken$[ebp]
	push	eax
	push	40					; 00000028H
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	jne	SHORT $LN3@LoadSeDebu

; 67   :     {
; 68   :         err = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _err$[ebp], eax

; 69   :         return FALSE;

	xor	eax, eax
	jmp	$LN4@LoadSeDebu
$LN3@LoadSeDebu:

; 70   :     }
; 71   : 
; 72   :     if (!LookupPrivilegeValue(NULL, SE_DEBUG_NAME, &Val))

	lea	ecx, DWORD PTR _Val$[ebp]
	push	ecx
	push	OFFSET $SG4294820273
	push	0
	call	DWORD PTR __imp__LookupPrivilegeValueW@12
	test	eax, eax
	jne	SHORT $LN2@LoadSeDebu

; 73   :     {
; 74   :         err = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _err$[ebp], eax

; 75   :         CloseHandle(hToken);

	mov	edx, DWORD PTR _hToken$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 76   :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@LoadSeDebu
$LN2@LoadSeDebu:

; 77   :     }
; 78   : 
; 79   :     tp.PrivilegeCount = 1;

	mov	DWORD PTR _tp$[ebp], 1

; 80   :     tp.Privileges[0].Luid = Val;

	mov	eax, 12					; 0000000cH
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _Val$[ebp]
	mov	DWORD PTR _tp$[ebp+ecx+4], edx
	mov	eax, DWORD PTR _Val$[ebp+4]
	mov	DWORD PTR _tp$[ebp+ecx+8], eax

; 81   :     tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

	mov	ecx, 12					; 0000000cH
	imul	edx, ecx, 0
	mov	DWORD PTR _tp$[ebp+edx+12], 2

; 82   : 
; 83   :     if (!AdjustTokenPrivileges(hToken, FALSE, &tp, sizeof (tp), NULL, NULL))

	push	0
	push	0
	push	16					; 00000010H
	lea	eax, DWORD PTR _tp$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hToken$[ebp]
	push	ecx
	call	DWORD PTR __imp__AdjustTokenPrivileges@24
	test	eax, eax
	jne	SHORT $LN1@LoadSeDebu

; 84   :     {
; 85   :         err = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _err$[ebp], eax

; 86   :         CloseHandle(hToken);

	mov	edx, DWORD PTR _hToken$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 87   :         return FALSE;

	xor	eax, eax
	jmp	SHORT $LN4@LoadSeDebu
$LN1@LoadSeDebu:

; 88   :     }
; 89   : 
; 90   :     CloseHandle(hToken);

	mov	eax, DWORD PTR _hToken$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 91   : 
; 92   :     return TRUE;

	mov	eax, 1
$LN4@LoadSeDebu:

; 93   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadSeDebugPrivilege@@YAHXZ ENDP			; LoadSeDebugPrivilege
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_lpModuleName$ = 8					; size = 4
_addr$ = 12						; size = 4
?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z PROC		; LogModule, COMDAT

; 96   : {

	push	ebp
	mov	ebp, esp

; 97   : #ifdef _WIN64
; 98   :     Log(TEXT("%016X %s"), addr, lpModuleName);
; 99   : #else
; 100  :     Log(TEXT("%08X         %s"), addr, lpModuleName);

	mov	eax, DWORD PTR _lpModuleName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _addr$[ebp]
	push	ecx
	push	OFFSET $SG4294820272
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 101  : #endif
; 102  : }

	pop	ebp
	ret	0
?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z ENDP		; LogModule
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?LogWindowsVersion@@YAXXZ
_TEXT	SEGMENT
_len$ = -52						; size = 4
_success$ = -48						; size = 4
_pVerQueryValueW$ = -44					; size = 4
_pGetFileVersionInfoW$ = -40				; size = 4
_pGetFileVersionInfoSizeW$ = -36			; size = 4
_size$ = -32						; size = 4
_data$ = -28						; size = 4
_info$ = -24						; size = 4
_ver_module$ = -20					; size = 4
_major$ = -16						; size = 2
_minor$ = -12						; size = 2
_build$ = -8						; size = 2
_revis$ = -4						; size = 2
?LogWindowsVersion@@YAXXZ PROC				; LogWindowsVersion, COMDAT

; 109  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H

; 110  :     HMODULE ver_module = GetModuleHandleW(L"version");

	push	OFFSET $SG4294820271
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR _ver_module$[ebp], eax

; 111  :     if (!ver_module)

	cmp	DWORD PTR _ver_module$[ebp], 0
	jne	SHORT $LN8@LogWindows

; 112  :     {
; 113  :         ver_module = LoadLibraryW(L"version");

	push	OFFSET $SG4294820270
	call	_IsolationAwareLoadLibraryW@4
	mov	DWORD PTR _ver_module$[ebp], eax

; 114  :         if (!ver_module)

	cmp	DWORD PTR _ver_module$[ebp], 0
	jne	SHORT $LN8@LogWindows

; 115  :         {
; 116  :             Log(L"Couldn't get version module");

	push	OFFSET $SG4294820269
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 117  :             return;

	jmp	$LN9@LogWindows
$LN8@LogWindows:

; 118  :         }
; 119  :     }
; 120  : 
; 121  :     GETFILEVERSIONINFOSIZEWPROC pGetFileVersionInfoSizeW = (GETFILEVERSIONINFOSIZEWPROC)GetProcAddress(ver_module, "GetFileVersionInfoSizeW");

	push	OFFSET $SG4294820268
	mov	eax, DWORD PTR _ver_module$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _pGetFileVersionInfoSizeW$[ebp], eax

; 122  :     GETFILEVERSIONINFOWPROC pGetFileVersionInfoW = (GETFILEVERSIONINFOWPROC)GetProcAddress(ver_module, "GetFileVersionInfoW");

	push	OFFSET $SG4294820267
	mov	ecx, DWORD PTR _ver_module$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _pGetFileVersionInfoW$[ebp], eax

; 123  :     VERQUERYVALUEWPROC pVerQueryValueW = (VERQUERYVALUEWPROC)GetProcAddress(ver_module, "VerQueryValueW");

	push	OFFSET $SG4294820266
	mov	edx, DWORD PTR _ver_module$[ebp]
	push	edx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _pVerQueryValueW$[ebp], eax

; 124  : 
; 125  :     if (!pGetFileVersionInfoSizeW || !pGetFileVersionInfoW || !pVerQueryValueW)

	cmp	DWORD PTR _pGetFileVersionInfoSizeW$[ebp], 0
	je	SHORT $LN5@LogWindows
	cmp	DWORD PTR _pGetFileVersionInfoW$[ebp], 0
	je	SHORT $LN5@LogWindows
	cmp	DWORD PTR _pVerQueryValueW$[ebp], 0
	jne	SHORT $LN6@LogWindows
$LN5@LogWindows:

; 126  :     {
; 127  :         Log(L"Couldn't get version functions");

	push	OFFSET $SG4294820265
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 128  :         return;

	jmp	$LN9@LogWindows
$LN6@LogWindows:

; 129  :     }
; 130  : 
; 131  :     DWORD size = pGetFileVersionInfoSizeW(L"kernel32", 0);

	push	0
	push	OFFSET $SG4294820264
	call	DWORD PTR _pGetFileVersionInfoSizeW$[ebp]
	mov	DWORD PTR _size$[ebp], eax

; 132  :     VS_FIXEDFILEINFO *info = NULL;

	mov	DWORD PTR _info$[ebp], 0

; 133  :     UINT len;
; 134  : 
; 135  :     if (!size)

	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN4@LogWindows

; 136  :     {
; 137  :         Log(L"Couldn't get windows version info size");

	push	OFFSET $SG4294820263
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 138  :         return;

	jmp	$LN9@LogWindows
$LN4@LogWindows:

; 139  :     }
; 140  : 
; 141  :     LPVOID data = malloc(size);

	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _data$[ebp], eax

; 142  :     if (!pGetFileVersionInfoW(L"kernel32", 0, size, data))

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	0
	push	OFFSET $SG4294820262
	call	DWORD PTR _pGetFileVersionInfoW$[ebp]
	test	eax, eax
	jne	SHORT $LN3@LogWindows

; 143  :     {
; 144  :         Log(L"Couldn't get windows version info");

	push	OFFSET $SG4294820261
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 145  :         free(data);

	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	_free
	add	esp, 4

; 146  :         return;

	jmp	$LN9@LogWindows
$LN3@LogWindows:

; 147  :     }
; 148  :     BOOL success = pVerQueryValueW(data, L"\\", (LPVOID*)&info, &len);

	lea	ecx, DWORD PTR _len$[ebp]
	push	ecx
	lea	edx, DWORD PTR _info$[ebp]
	push	edx
	push	OFFSET $SG4294820260
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	call	DWORD PTR _pVerQueryValueW$[ebp]
	mov	DWORD PTR _success$[ebp], eax

; 149  :     if (!success || !info || !len)

	cmp	DWORD PTR _success$[ebp], 0
	je	SHORT $LN1@LogWindows
	cmp	DWORD PTR _info$[ebp], 0
	je	SHORT $LN1@LogWindows
	cmp	DWORD PTR _len$[ebp], 0
	jne	SHORT $LN2@LogWindows
$LN1@LogWindows:

; 150  :     {
; 151  :         Log(L"Couldn't query version value");

	push	OFFSET $SG4294820259
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 152  :         free(data);

	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_free
	add	esp, 4

; 153  :         return;

	jmp	SHORT $LN9@LogWindows
$LN2@LogWindows:

; 154  :     }
; 155  : 
; 156  :     WORD major = HIWORD(info->dwFileVersionMS);

	mov	edx, DWORD PTR _info$[ebp]
	mov	eax, DWORD PTR [edx+8]
	shr	eax, 16					; 00000010H
	mov	WORD PTR _major$[ebp], ax

; 157  :     WORD minor = LOWORD(info->dwFileVersionMS);

	mov	ecx, DWORD PTR _info$[ebp]
	mov	dx, WORD PTR [ecx+8]
	mov	WORD PTR _minor$[ebp], dx

; 158  :     WORD build = HIWORD(info->dwFileVersionLS);

	mov	eax, DWORD PTR _info$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 16					; 00000010H
	mov	WORD PTR _build$[ebp], cx

; 159  :     WORD revis = LOWORD(info->dwFileVersionLS);

	mov	edx, DWORD PTR _info$[ebp]
	mov	ax, WORD PTR [edx+12]
	mov	WORD PTR _revis$[ebp], ax

; 160  : 
; 161  :     Log(TEXT("Windows Version: %u.%u Build %u (revision %d)"), major, minor, build, revis);

	movzx	ecx, WORD PTR _revis$[ebp]
	push	ecx
	movzx	edx, WORD PTR _build$[ebp]
	push	edx
	movzx	eax, WORD PTR _minor$[ebp]
	push	eax
	movzx	ecx, WORD PTR _major$[ebp]
	push	ecx
	push	OFFSET $SG4294820258
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 20					; 00000014H

; 162  :     free(data);

	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	call	_free
	add	esp, 4
$LN9@LogWindows:

; 163  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LogWindowsVersion@@YAXXZ ENDP				; LogWindowsVersion
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?LogSystemStats@@YAXXZ
_TEXT	SEGMENT
_dwSpeed$ = -2152					; size = 4
_bComposition$ = -2148					; size = 4
_hOBS$ = -2144						; size = 4
_hOBSApi$ = -2140					; size = 4
tv227 = -2136						; size = 4
_info$1 = -2132						; size = 4
_key$ = -2128						; size = 4
_dwSize$ = -2124					; size = 4
_i$2 = -2120						; size = 4
_i$3 = -2116						; size = 4
_info$4 = -2112						; size = 4
_cpuHTT$ = -2107					; size = 1
_cpuExtModel$ = -2106					; size = 1
_cpuFamily$ = -2105					; size = 1
_cpuModel$ = -2104					; size = 1
_cpuType$ = -2103					; size = 1
_cpuExtFamily$ = -2102					; size = 1
_cpuSteppingID$ = -2101					; size = 1
_ms$ = -2100						; size = 32
_cpuInfo$ = -2068					; size = 16
_data$ = -2052						; size = 2048
__$ArrayPad$ = -4					; size = 4
?LogSystemStats@@YAXXZ PROC				; LogSystemStats, COMDAT

; 166  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 2152				; 00000868H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi

; 167  :     HKEY key;
; 168  :     TCHAR data[1024];
; 169  :     DWORD dwSize, dwSpeed;
; 170  : 
; 171  :     zero(data, 1024);

	push	1024					; 00000400H
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 172  : 
; 173  :     if(RegOpenKey(HKEY_LOCAL_MACHINE, TEXT("HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0"), &key) != ERROR_SUCCESS)

	lea	ecx, DWORD PTR _key$[ebp]
	push	ecx
	push	OFFSET $SG4294820257
	push	-2147483646				; 80000002H
	call	DWORD PTR __imp__RegOpenKeyW@12
	test	eax, eax
	je	SHORT $LN7@LogSystemS

; 174  :     {
; 175  :         AppWarning(TEXT("Could not open system information registry key"));

	push	OFFSET $SG4294820256
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 176  :         return;

	jmp	$LN8@LogSystemS
$LN7@LogSystemS:

; 177  :     }
; 178  : 
; 179  : #ifdef _WIN64
; 180  :     Log(TEXT("%s - 64bit (　^ω^)"), OBS_VERSION_STRING);
; 181  : #else
; 182  :     Log(TEXT("%s - 32bit (´・ω・｀)"), OBS_VERSION_STRING);

	push	OFFSET $SG4294820255
	push	OFFSET $SG4294820254
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 183  : #endif
; 184  : 
; 185  :     Log(TEXT("-------------------------------"));

	push	OFFSET $SG4294820253
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 186  : 
; 187  :     dwSize = 1024;

	mov	DWORD PTR _dwSize$[ebp], 1024		; 00000400H

; 188  :     RegQueryValueEx(key, TEXT("ProcessorNameString"), NULL, NULL, (LPBYTE)data, &dwSize);

	lea	edx, DWORD PTR _dwSize$[ebp]
	push	edx
	lea	eax, DWORD PTR _data$[ebp]
	push	eax
	push	0
	push	0
	push	OFFSET $SG4294820252
	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegQueryValueExW@24

; 189  :     Log(TEXT("CPU Name: %s"), sfix(data));

	lea	edx, DWORD PTR _data$[ebp]
	push	edx
	call	DWORD PTR __imp_?sfix@@YGPA_WPA_W@Z
	push	eax
	push	OFFSET $SG4294820251
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 190  : 
; 191  :     dwSize = 4;

	mov	DWORD PTR _dwSize$[ebp], 4

; 192  :     RegQueryValueEx(key, TEXT("~MHz"), NULL, NULL, (LPBYTE)&dwSpeed, &dwSize);

	lea	eax, DWORD PTR _dwSize$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dwSpeed$[ebp]
	push	ecx
	push	0
	push	0
	push	OFFSET $SG4294820250
	mov	edx, DWORD PTR _key$[ebp]
	push	edx
	call	DWORD PTR __imp__RegQueryValueExW@24

; 193  :     Log(TEXT("CPU Speed: %dMHz"), dwSpeed);

	mov	eax, DWORD PTR _dwSpeed$[ebp]
	push	eax
	push	OFFSET $SG4294820249
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 194  : 
; 195  :     RegCloseKey(key);

	mov	ecx, DWORD PTR _key$[ebp]
	push	ecx
	call	DWORD PTR __imp__RegCloseKey@4

; 196  : 
; 197  :     MEMORYSTATUS ms;
; 198  :     GlobalMemoryStatus(&ms);

	lea	edx, DWORD PTR _ms$[ebp]
	push	edx
	call	DWORD PTR __imp__GlobalMemoryStatus@4

; 199  : 
; 200  :     Log(TEXT("Physical Memory:  %ldMB Total, %ldMB Free"), (ms.dwTotalPhys/1048576), (ms.dwAvailPhys/1048576));

	mov	eax, DWORD PTR _ms$[ebp+12]
	shr	eax, 20					; 00000014H
	push	eax
	mov	ecx, DWORD PTR _ms$[ebp+8]
	shr	ecx, 20					; 00000014H
	push	ecx
	push	OFFSET $SG4294820248
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 201  : 
; 202  :     int cpuInfo[4];
; 203  :     __cpuid(cpuInfo, 1);

	lea	esi, DWORD PTR _cpuInfo$[ebp]
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	mov	DWORD PTR [esi], eax
	mov	DWORD PTR [esi+4], ebx
	mov	DWORD PTR [esi+8], ecx
	mov	DWORD PTR [esi+12], edx

; 204  :     BYTE cpuSteppingID  = cpuInfo[0] & 0xF;

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cpuInfo$[ebp+eax]
	and	ecx, 15					; 0000000fH
	mov	BYTE PTR _cpuSteppingID$[ebp], cl

; 205  :     BYTE cpuModel       = ((cpuInfo[0]>>4) & 0xF) + ((cpuInfo[0]>>12) & 0xF0);

	mov	edx, 4
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _cpuInfo$[ebp+eax]
	sar	ecx, 4
	and	ecx, 15					; 0000000fH
	mov	edx, 4
	imul	eax, edx, 0
	mov	edx, DWORD PTR _cpuInfo$[ebp+eax]
	sar	edx, 12					; 0000000cH
	and	edx, 240				; 000000f0H
	add	ecx, edx
	mov	BYTE PTR _cpuModel$[ebp], cl

; 206  :     BYTE cpuFamily      = ((cpuInfo[0]>>8) & 0xF) + ((cpuInfo[0]>>20) & 0xFF);

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _cpuInfo$[ebp+ecx]
	sar	edx, 8
	and	edx, 15					; 0000000fH
	mov	eax, 4
	imul	ecx, eax, 0
	mov	eax, DWORD PTR _cpuInfo$[ebp+ecx]
	sar	eax, 20					; 00000014H
	and	eax, 255				; 000000ffH
	add	edx, eax
	mov	BYTE PTR _cpuFamily$[ebp], dl

; 207  :     BYTE cpuType        = (cpuInfo[0]>>12) & 0x3;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cpuInfo$[ebp+edx]
	sar	eax, 12					; 0000000cH
	and	eax, 3
	mov	BYTE PTR _cpuType$[ebp], al

; 208  :     BYTE cpuExtModel    = (cpuInfo[0]>>17) & 0xF;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cpuInfo$[ebp+edx]
	sar	eax, 17					; 00000011H
	and	eax, 15					; 0000000fH
	mov	BYTE PTR _cpuExtModel$[ebp], al

; 209  :     BYTE cpuExtFamily   = (cpuInfo[0]>>21) & 0xFF;

	mov	ecx, 4
	imul	edx, ecx, 0
	mov	eax, DWORD PTR _cpuInfo$[ebp+edx]
	sar	eax, 21					; 00000015H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _cpuExtFamily$[ebp], al

; 210  : 
; 211  :     BYTE cpuHTT         = (cpuInfo[3]>>28) & 1;

	mov	ecx, 4
	imul	edx, ecx, 3
	mov	eax, DWORD PTR _cpuInfo$[ebp+edx]
	sar	eax, 28					; 0000001cH
	and	eax, 1
	mov	BYTE PTR _cpuHTT$[ebp], al

; 212  : 
; 213  :     Log(TEXT("stepping id: %u, model %u, family %u, type %u, extmodel %u, extfamily %u, HTT %u, logical cores %u, total cores %u"), cpuSteppingID, cpuModel, cpuFamily, cpuType, cpuExtModel, cpuExtFamily, cpuHTT, OSGetLogicalCores(), OSGetTotalCores());

	call	DWORD PTR __imp_?OSGetTotalCores@@YGHXZ
	push	eax
	call	DWORD PTR __imp_?OSGetLogicalCores@@YGHXZ
	push	eax
	movzx	ecx, BYTE PTR _cpuHTT$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _cpuExtFamily$[ebp]
	push	edx
	movzx	eax, BYTE PTR _cpuExtModel$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cpuType$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _cpuFamily$[ebp]
	push	edx
	movzx	eax, BYTE PTR _cpuModel$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _cpuSteppingID$[ebp]
	push	ecx
	push	OFFSET $SG4294820247
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 40					; 00000028H

; 214  : 
; 215  :     for(UINT i=0; i<App->NumMonitors(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN6@LogSystemS
$LN5@LogSystemS:
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	mov	DWORD PTR _i$3[ebp], edx
$LN6@LogSystemS:
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?NumMonitors@OBS@@QBEIXZ		; OBS::NumMonitors
	cmp	DWORD PTR _i$3[ebp], eax
	jae	SHORT $LN4@LogSystemS

; 216  :     {
; 217  :         const MonitorInfo &info = App->GetMonitor(i);

	mov	eax, DWORD PTR _i$3[ebp]
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z	; OBS::GetMonitor
	mov	DWORD PTR _info$4[ebp], eax

; 218  :         Log(TEXT("monitor %u: pos={%d, %d}, size={%d, %d}"), i+1, info.rect.left, info.rect.top, info.rect.right-info.rect.left, info.rect.bottom-info.rect.top);

	mov	ecx, DWORD PTR _info$4[ebp]
	mov	edx, DWORD PTR _info$4[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _info$4[ebp]
	mov	edx, DWORD PTR _info$4[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _info$4[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _info$4[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _i$3[ebp]
	add	edx, 1
	push	edx
	push	OFFSET $SG4294820246
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 24					; 00000018H

; 219  :     }

	jmp	$LN5@LogSystemS
$LN4@LogSystemS:

; 220  : 
; 221  :     LogWindowsVersion();

	call	?LogWindowsVersion@@YAXXZ		; LogWindowsVersion

; 222  : 
; 223  :     BOOL bComposition;
; 224  :     DwmIsCompositionEnabled(&bComposition);

	lea	eax, DWORD PTR _bComposition$[ebp]
	push	eax
	call	DWORD PTR __imp__DwmIsCompositionEnabled@4

; 225  :     Log(TEXT("Aero is %s"), bComposition ? TEXT("Enabled") : TEXT("Disabled"));

	cmp	DWORD PTR _bComposition$[ebp], 0
	je	SHORT $LN10@LogSystemS
	mov	DWORD PTR tv227[ebp], OFFSET $SG4294820245
	jmp	SHORT $LN11@LogSystemS
$LN10@LogSystemS:
	mov	DWORD PTR tv227[ebp], OFFSET $SG4294820244
$LN11@LogSystemS:
	mov	ecx, DWORD PTR tv227[ebp]
	push	ecx
	push	OFFSET $SG4294820243
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 8

; 226  : 
; 227  :     HMODULE hOBS    = GetModuleHandle(NULL);

	push	0
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR _hOBS$[ebp], eax

; 228  :     HMODULE hOBSApi = GetModuleHandle(TEXT("OBSApi"));

	push	OFFSET $SG4294820242
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR _hOBSApi$[ebp], eax

; 229  : 
; 230  :     Log(TEXT("-------------------------------"));

	push	OFFSET $SG4294820241
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 231  :     Log(TEXT("OBS Modules:"));

	push	OFFSET $SG4294820240
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 232  :     Log(TEXT("Base Address     Module"));

	push	OFFSET $SG4294820239
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 233  : 
; 234  :     LogModule(TEXT("OBS.exe"), hOBS);

	mov	edx, DWORD PTR _hOBS$[ebp]
	push	edx
	push	OFFSET $SG4294820238
	call	?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z	; LogModule
	add	esp, 8

; 235  :     LogModule(TEXT("OBSApi.dll"), hOBSApi);

	mov	eax, DWORD PTR _hOBSApi$[ebp]
	push	eax
	push	OFFSET $SG4294820237
	call	?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z	; LogModule
	add	esp, 8

; 236  : 
; 237  :     for (UINT i=0; i<App->NumPlugins(); i++) {

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN3@LogSystemS
$LN2@LogSystemS:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN3@LogSystemS:
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?NumPlugins@OBS@@QBEIXZ			; OBS::NumPlugins
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN1@LogSystemS

; 238  :         const PluginInfo *info = App->GetPluginInfo(i);

	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetPluginInfo@OBS@@QBEPBUPluginInfo@@I@Z ; OBS::GetPluginInfo
	mov	DWORD PTR _info$1[ebp], eax

; 239  :         LogModule(info->strFile, info->hModule);

	mov	eax, DWORD PTR _info$1[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	ecx, DWORD PTR _info$1[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	?LogModule@@YAXPB_WPAUHINSTANCE__@@@Z	; LogModule
	add	esp, 8

; 240  :     }

	jmp	SHORT $LN2@LogSystemS
$LN1@LogSystemS:

; 241  : 
; 242  :     LogVideoCardStats();

	call	?LogVideoCardStats@@YAXXZ		; LogVideoCardStats
$LN8@LogSystemS:

; 243  : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?LogSystemStats@@YAXXZ ENDP				; LogSystemStats
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?InvertPre47Scenes@@YAXXZ
_TEXT	SEGMENT
_scenesConfig$ = -40					; size = 12
_strScenesPath$ = -28					; size = 8
_scene$1 = -20						; size = 4
_numScenes$2 = -16					; size = 4
_sources$3 = -12					; size = 4
_scenes$4 = -8						; size = 4
_i$5 = -4						; size = 4
?InvertPre47Scenes@@YAXXZ PROC				; InvertPre47Scenes, COMDAT

; 246  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H

; 247  :     String strScenesPath;

	lea	ecx, DWORD PTR _strScenesPath$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 248  :     strScenesPath << lpAppDataPath << TEXT("\\scenes.xconfig");

	push	OFFSET $SG4294820236
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strScenesPath$[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 249  : 
; 250  :     XConfig scenesConfig;

	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_??0XConfig@@QAE@XZ

; 251  :     if(scenesConfig.Open(strScenesPath))

	lea	ecx, DWORD PTR _strScenesPath$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_?Open@XConfig@@QAE_NPB_W@Z
	movzx	eax, al
	test	eax, eax
	je	$LN6@InvertPre4

; 252  :     {
; 253  :         XElement *scenes = scenesConfig.GetElement(TEXT("scenes"));

	push	OFFSET $SG4294820235
	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_?GetElement@XConfig@@QAEPAVXElement@@PB_W@Z
	mov	DWORD PTR _scenes$4[ebp], eax

; 254  :         if(!scenes)

	cmp	DWORD PTR _scenes$4[ebp], 0
	jne	SHORT $LN5@InvertPre4

; 255  :             return;

	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_??1XConfig@@QAE@XZ
	lea	ecx, DWORD PTR _strScenesPath$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN7@InvertPre4
$LN5@InvertPre4:

; 256  : 
; 257  :         UINT numScenes = scenes->NumElements();

	push	0
	mov	ecx, DWORD PTR _scenes$4[ebp]
	call	DWORD PTR __imp_?NumElements@XElement@@QAEKPB_W@Z
	mov	DWORD PTR _numScenes$2[ebp], eax

; 258  :         for(UINT i=0; i<numScenes; i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN4@InvertPre4
$LN3@InvertPre4:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN4@InvertPre4:
	mov	edx, DWORD PTR _i$5[ebp]
	cmp	edx, DWORD PTR _numScenes$2[ebp]
	jae	SHORT $LN2@InvertPre4

; 259  :         {
; 260  :             XElement *scene = scenes->GetElementByID(i);

	mov	eax, DWORD PTR _i$5[ebp]
	push	eax
	mov	ecx, DWORD PTR _scenes$4[ebp]
	call	DWORD PTR __imp_?GetElementByID@XElement@@QBEPAV1@K@Z
	mov	DWORD PTR _scene$1[ebp], eax

; 261  :             XElement *sources = scene->GetElement(TEXT("sources"));

	push	OFFSET $SG4294820234
	mov	ecx, DWORD PTR _scene$1[ebp]
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _sources$3[ebp], eax

; 262  :             if(!sources)

	cmp	DWORD PTR _sources$3[ebp], 0
	jne	SHORT $LN1@InvertPre4

; 263  :                 continue;

	jmp	SHORT $LN3@InvertPre4
$LN1@InvertPre4:

; 264  : 
; 265  :             sources->ReverseOrder();

	mov	ecx, DWORD PTR _sources$3[ebp]
	call	DWORD PTR __imp_?ReverseOrder@XElement@@QAEXXZ

; 266  :         }

	jmp	SHORT $LN3@InvertPre4
$LN2@InvertPre4:

; 267  : 
; 268  :         scenesConfig.Close(true);

	push	1
	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_?Close@XConfig@@QAEX_N@Z
$LN6@InvertPre4:

; 269  :     }
; 270  : }

	lea	ecx, DWORD PTR _scenesConfig$[ebp]
	call	DWORD PTR __imp_??1XConfig@@QAE@XZ
	lea	ecx, DWORD PTR _strScenesPath$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN7@InvertPre4:
	mov	esp, ebp
	pop	ebp
	ret	0
?InvertPre47Scenes@@YAXXZ ENDP				; InvertPre47Scenes
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?FindSceneCollection@@YA?AVString@@V1@@Z
_TEXT	SEGMENT
_result$ = -8						; size = 8
___$ReturnUdt$ = 8					; size = 4
_scenecollection$ = 12					; size = 8
?FindSceneCollection@@YA?AVString@@V1@@Z PROC		; FindSceneCollection, COMDAT

; 273  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 274  :     String result = FormattedString(L"%s\\sceneCollection\\%s.xconfig", lpAppDataPath, scenecollection.Array());

	lea	ecx, DWORD PTR _scenecollection$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	push	OFFSET $SG4294820233
	lea	eax, DWORD PTR _result$[ebp]
	push	eax
	call	DWORD PTR __imp_?FormattedString@@YA?AVString@@PB_WZZ
	add	esp, 16					; 00000010H

; 275  :     if (OSFileExists(result))

	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	je	SHORT $LN1@FindSceneC

; 276  :         return result;

	lea	ecx, DWORD PTR _result$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _scenecollection$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	SHORT $LN2@FindSceneC
$LN1@FindSceneC:

; 277  : 
; 278  :     return String();

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	lea	ecx, DWORD PTR _result$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _scenecollection$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
$LN2@FindSceneC:

; 279  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindSceneCollection@@YA?AVString@@V1@@Z ENDP		; FindSceneCollection
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?SetupSceneCollection@@YAXPB_W@Z
_TEXT	SEGMENT
$T1 = -608						; size = 8
$T2 = -600						; size = 8
$T3 = -592						; size = 8
$T4 = -584						; size = 8
$T5 = -576						; size = 8
_strXconfig$ = -568					; size = 8
tv142 = -560						; size = 4
tv77 = -556						; size = 4
_hFind$6 = -552						; size = 4
_strSceneCollection$ = -548				; size = 8
$T7 = -537						; size = 1
$T8 = -536						; size = 4
_ofd$9 = -532						; size = 528
__$ArrayPad$ = -4					; size = 4
_scenecollection$ = 8					; size = 4
?SetupSceneCollection@@YAXPB_W@Z PROC			; SetupSceneCollection, COMDAT

; 282  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 608				; 00000260H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR $T8[ebp], 0

; 283  :     String strSceneCollection = scenecollection ? scenecollection : GlobalConfig->GetString(TEXT("General"), TEXT("SceneCollection"));

	cmp	DWORD PTR _scenecollection$[ebp], 0
	je	SHORT $LN11@SetupScene
	mov	eax, DWORD PTR _scenecollection$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN12@SetupScene
$LN11@SetupScene:
	or	DWORD PTR $T8[ebp], 1
	push	0
	push	OFFSET $SG4294820232
	push	OFFSET $SG4294820231
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	mov	DWORD PTR tv77[ebp], eax
$LN12@SetupScene:
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	eax, DWORD PTR $T8[ebp]
	and	eax, 1
	je	SHORT $LN15@SetupScene
	and	DWORD PTR $T8[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN15@SetupScene:

; 284  :     String strXconfig;

	lea	ecx, DWORD PTR _strXconfig$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 285  : 
; 286  :     if (scenecollection)

	cmp	DWORD PTR _scenecollection$[ebp], 0
	je	SHORT $LN8@SetupScene

; 287  :         GlobalConfig->SetString(TEXT("General"), TEXT("SceneCollection"), scenecollection);

	mov	ecx, DWORD PTR _scenecollection$[ebp]
	push	ecx
	push	OFFSET $SG4294820230
	push	OFFSET $SG4294820229
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z
$LN8@SetupScene:

; 288  : 
; 289  :     if (!strSceneCollection.IsValid() || FindSceneCollection(strSceneCollection).IsEmpty())

	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN13@SetupScene
	or	DWORD PTR $T8[ebp], 2
	sub	esp, 8
	mov	ecx, esp
	lea	edx, DWORD PTR _strSceneCollection$[ebp]
	push	edx
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	?FindSceneCollection@@YA?AVString@@V1@@Z ; FindSceneCollection
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	jne	SHORT $LN13@SetupScene
	mov	DWORD PTR tv142[ebp], 0
	jmp	SHORT $LN14@SetupScene
$LN13@SetupScene:
	mov	DWORD PTR tv142[ebp], 1
$LN14@SetupScene:
	mov	cl, BYTE PTR tv142[ebp]
	mov	BYTE PTR $T7[ebp], cl
	mov	edx, DWORD PTR $T8[ebp]
	and	edx, 2
	je	SHORT $LN16@SetupScene
	and	DWORD PTR $T8[ebp], -3			; fffffffdH
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN16@SetupScene:
	movzx	eax, BYTE PTR $T7[ebp]
	test	eax, eax
	je	$LN7@SetupScene

; 290  :     {
; 291  :         OSFindData ofd;
; 292  : 
; 293  :         strXconfig.Clear() << lpAppDataPath << TEXT("\\sceneCollection\\*.xconfig");

	push	OFFSET $SG4294820228
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strXconfig$[ebp]
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 294  :         HANDLE hFind = OSFindFirstFile(strXconfig, ofd);

	lea	ecx, DWORD PTR _ofd$9[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strXconfig$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z
	mov	DWORD PTR _hFind$6[ebp], eax

; 295  :         if (hFind)

	cmp	DWORD PTR _hFind$6[ebp], 0
	je	$LN6@SetupScene
$LN5@SetupScene:

; 296  :         {
; 297  :             do
; 298  :             {
; 299  :                 if (ofd.bDirectory) continue;

	cmp	DWORD PTR _ofd$9[ebp+520], 0
	je	SHORT $LN2@SetupScene
	jmp	SHORT $LN4@SetupScene
$LN2@SetupScene:

; 300  : 
; 301  :                 strSceneCollection = GetPathWithoutExtension(ofd.fileName);

	lea	edx, DWORD PTR _ofd$9[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	DWORD PTR __imp_?GetPathWithoutExtension@@YA?AVString@@PB_W@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 302  :                 GlobalConfig->SetString(TEXT("General"), TEXT("SceneCollection"), strSceneCollection);

	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820227
	push	OFFSET $SG4294820226
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 303  :                 break;

	jmp	SHORT $LN3@SetupScene
$LN4@SetupScene:

; 304  : 
; 305  :             } while (OSFindNextFile(hFind, ofd));

	lea	ecx, DWORD PTR _ofd$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _hFind$6[ebp]
	push	edx
	call	DWORD PTR __imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z
	test	eax, eax
	jne	SHORT $LN5@SetupScene
$LN3@SetupScene:

; 306  :             OSFindClose(hFind);

	mov	eax, DWORD PTR _hFind$6[ebp]
	push	eax
	call	DWORD PTR __imp_?OSFindClose@@YGXPAX@Z
$LN6@SetupScene:

; 307  :         }
; 308  : 
; 309  :         if (strSceneCollection.IsEmpty())

	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	$LN7@SetupScene

; 310  :         {
; 311  :             CopyFile(String() << lpAppDataPath << L"\\scenes.xconfig", String() << lpAppDataPath << L"\\sceneCollection\\scenes.xconfig", true);

	push	1
	push	OFFSET $SG4294820225
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820224
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__CopyFileW@12
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 312  :             strSceneCollection = L"scenes";

	push	OFFSET $SG4294820223
	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 313  :             GlobalConfig->SetString(L"General", L"SceneCollection", strSceneCollection);

	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820222
	push	OFFSET $SG4294820221
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z
$LN7@SetupScene:

; 314  :         }
; 315  :     }
; 316  : }

	lea	ecx, DWORD PTR _strXconfig$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strSceneCollection$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupSceneCollection@@YAXPB_W@Z ENDP			; SetupSceneCollection
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?SetupIni@@YAXPB_W@Z
_TEXT	SEGMENT
$T1 = -588						; size = 8
$T2 = -580						; size = 8
_lastVersion$ = -572					; size = 4
tv145 = -568						; size = 4
tv77 = -564						; size = 4
_hFind$3 = -560						; size = 4
_strProfile$ = -556					; size = 8
_strIni$ = -548						; size = 8
$T4 = -540						; size = 4
_bFoundProfile$ = -533					; size = 1
_ofd$5 = -532						; size = 528
__$ArrayPad$ = -4					; size = 4
_profile$ = 8						; size = 4
?SetupIni@@YAXPB_W@Z PROC				; SetupIni, COMDAT

; 319  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 588				; 0000024cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR $T4[ebp], 0

; 320  :     //first, find out which profile we're using
; 321  : 
; 322  :     String strProfile = profile ? profile : GlobalConfig->GetString(TEXT("General"), TEXT("Profile"));

	cmp	DWORD PTR _profile$[ebp], 0
	je	SHORT $LN15@SetupIni
	mov	eax, DWORD PTR _profile$[ebp]
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN16@SetupIni
$LN15@SetupIni:
	or	DWORD PTR $T4[ebp], 1
	push	0
	push	OFFSET $SG4294820220
	push	OFFSET $SG4294820219
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	mov	DWORD PTR tv77[ebp], eax
$LN16@SetupIni:
	mov	edx, DWORD PTR tv77[ebp]
	push	edx
	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	eax, DWORD PTR $T4[ebp]
	and	eax, 1
	je	SHORT $LN19@SetupIni
	and	DWORD PTR $T4[ebp], -2			; fffffffeH
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN19@SetupIni:

; 323  :     DWORD lastVersion = GlobalConfig->GetInt(TEXT("General"), TEXT("LastAppVersion"));

	push	0
	push	OFFSET $SG4294820218
	push	OFFSET $SG4294820217
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _lastVersion$[ebp], eax

; 324  :     String strIni;

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 325  : 
; 326  :     if (profile)

	cmp	DWORD PTR _profile$[ebp], 0
	je	SHORT $LN12@SetupIni

; 327  :         GlobalConfig->SetString(TEXT("General"), TEXT("Profile"), profile);

	mov	ecx, DWORD PTR _profile$[ebp]
	push	ecx
	push	OFFSET $SG4294820216
	push	OFFSET $SG4294820215
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z
$LN12@SetupIni:

; 328  : 
; 329  :     //--------------------------------------------
; 330  :     // 0.47a fix (invert sources in all scenes)
; 331  : 
; 332  :     if(lastVersion < 0x470)

	cmp	DWORD PTR _lastVersion$[ebp], 1136	; 00000470H
	jae	SHORT $LN11@SetupIni

; 333  :         InvertPre47Scenes();

	call	?InvertPre47Scenes@@YAXXZ		; InvertPre47Scenes
$LN11@SetupIni:

; 334  : 
; 335  :     //--------------------------------------------
; 336  :     // try to find and open the file, otherwise use the first one available
; 337  : 
; 338  :     bool bFoundProfile = false;

	mov	BYTE PTR _bFoundProfile$[ebp], 0

; 339  : 
; 340  :     if(strProfile.IsValid())

	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN10@SetupIni

; 341  :     {
; 342  :         strIni << lpAppDataPath << TEXT("\\profiles\\") << strProfile << TEXT(".ini");

	push	OFFSET $SG4294820213
	lea	edx, DWORD PTR _strProfile$[ebp]
	push	edx
	push	OFFSET $SG4294820214
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 343  :         bFoundProfile = OSFileExists(strIni) != 0;

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	je	SHORT $LN17@SetupIni
	mov	DWORD PTR tv145[ebp], 1
	jmp	SHORT $LN18@SetupIni
$LN17@SetupIni:
	mov	DWORD PTR tv145[ebp], 0
$LN18@SetupIni:
	mov	al, BYTE PTR tv145[ebp]
	mov	BYTE PTR _bFoundProfile$[ebp], al
$LN10@SetupIni:

; 344  :     }
; 345  : 
; 346  :     if(!bFoundProfile)

	movzx	ecx, BYTE PTR _bFoundProfile$[ebp]
	test	ecx, ecx
	jne	$LN8@SetupIni

; 347  :     {
; 348  :         OSFindData ofd;
; 349  : 
; 350  :         strIni.Clear() << lpAppDataPath << TEXT("\\profiles\\*.ini");

	push	OFFSET $SG4294820212
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 351  :         HANDLE hFind = OSFindFirstFile(strIni, ofd);

	lea	edx, DWORD PTR _ofd$5[ebp]
	push	edx
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z
	mov	DWORD PTR _hFind$3[ebp], eax

; 352  :         if(hFind)

	cmp	DWORD PTR _hFind$3[ebp], 0
	je	$LN8@SetupIni
$LN7@SetupIni:

; 353  :         {
; 354  :             do
; 355  :             {
; 356  :                 if(ofd.bDirectory) continue;

	cmp	DWORD PTR _ofd$5[ebp+520], 0
	je	SHORT $LN4@SetupIni
	jmp	SHORT $LN6@SetupIni
$LN4@SetupIni:

; 357  : 
; 358  :                 strProfile = GetPathWithoutExtension(ofd.fileName);

	lea	eax, DWORD PTR _ofd$5[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetPathWithoutExtension@@YA?AVString@@PB_W@Z
	add	esp, 8
	push	eax
	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 359  :                 GlobalConfig->SetString(TEXT("General"), TEXT("Profile"), strProfile);

	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820211
	push	OFFSET $SG4294820210
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 360  :                 bFoundProfile = true;

	mov	BYTE PTR _bFoundProfile$[ebp], 1

; 361  : 
; 362  :                 break;

	jmp	SHORT $LN5@SetupIni
$LN6@SetupIni:

; 363  : 
; 364  :             } while(OSFindNextFile(hFind, ofd));

	lea	edx, DWORD PTR _ofd$5[ebp]
	push	edx
	mov	eax, DWORD PTR _hFind$3[ebp]
	push	eax
	call	DWORD PTR __imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z
	test	eax, eax
	jne	SHORT $LN7@SetupIni
$LN5@SetupIni:

; 365  : 
; 366  :             OSFindClose(hFind);

	mov	ecx, DWORD PTR _hFind$3[ebp]
	push	ecx
	call	DWORD PTR __imp_?OSFindClose@@YGXPAX@Z
$LN8@SetupIni:

; 367  :         }
; 368  :     }
; 369  : 
; 370  :     //--------------------------------------------
; 371  :     // open, or if no profile found, create one
; 372  : 
; 373  :     if(bFoundProfile)

	movzx	edx, BYTE PTR _bFoundProfile$[ebp]
	test	edx, edx
	je	SHORT $LN2@SetupIni

; 374  :     {
; 375  :         strIni.Clear() << lpAppDataPath << TEXT("\\profiles\\") << strProfile << TEXT(".ini");

	push	OFFSET $SG4294820208
	lea	eax, DWORD PTR _strProfile$[ebp]
	push	eax
	push	OFFSET $SG4294820209
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 376  : 
; 377  :         if(AppConfig->Open(strIni))

	push	0
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?Open@ConfigFile@@QAEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN2@SetupIni

; 378  :             return;

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN13@SetupIni
$LN2@SetupIni:

; 379  :     }
; 380  : 
; 381  :     strProfile = TEXT("Untitled");

	push	OFFSET $SG4294820207
	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 382  :     GlobalConfig->SetString(TEXT("General"), TEXT("Profile"), strProfile);

	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820206
	push	OFFSET $SG4294820205
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 383  : 
; 384  :     strIni.Clear() << lpAppDataPath << TEXT("\\profiles\\") << strProfile << TEXT(".ini");

	push	OFFSET $SG4294820203
	lea	ecx, DWORD PTR _strProfile$[ebp]
	push	ecx
	push	OFFSET $SG4294820204
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 385  : 
; 386  :     if(!AppConfig->Create(strIni))

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?Create@ConfigFile@@QAEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN1@SetupIni

; 387  :         CrashError(TEXT("Could not create '%s'"), strIni.Array());

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820202
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN1@SetupIni:

; 388  : 
; 389  :     AppConfig->SetString(TEXT("Audio"),          TEXT("Device"),        TEXT("Default"));

	push	OFFSET $SG4294820201
	push	OFFSET $SG4294820200
	push	OFFSET $SG4294820199
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 390  :     AppConfig->SetFloat (TEXT("Audio"),          TEXT("MicVolume"),     1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294820198
	push	OFFSET $SG4294820197
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetFloat@ConfigFile@@QAEXPB_W0M@Z

; 391  :     AppConfig->SetFloat (TEXT("Audio"),          TEXT("DesktopVolume"), 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294820196
	push	OFFSET $SG4294820195
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetFloat@ConfigFile@@QAEXPB_W0M@Z

; 392  : 
; 393  :     AppConfig->SetInt   (TEXT("Video"),          TEXT("Monitor"),       0);

	push	0
	push	OFFSET $SG4294820194
	push	OFFSET $SG4294820193
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 394  :     AppConfig->SetInt   (TEXT("Video"),          TEXT("FPS"),           30);

	push	30					; 0000001eH
	push	OFFSET $SG4294820192
	push	OFFSET $SG4294820191
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 395  :     AppConfig->SetFloat (TEXT("Video"),          TEXT("Downscale"),     1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	OFFSET $SG4294820190
	push	OFFSET $SG4294820189
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetFloat@ConfigFile@@QAEXPB_W0M@Z

; 396  :     AppConfig->SetInt   (TEXT("Video"),          TEXT("DisableAero"),   0);

	push	0
	push	OFFSET $SG4294820188
	push	OFFSET $SG4294820187
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 397  : 
; 398  :     AppConfig->SetInt   (TEXT("Video Encoding"), TEXT("BufferSize"),    1000);

	push	1000					; 000003e8H
	push	OFFSET $SG4294820186
	push	OFFSET $SG4294820185
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 399  :     AppConfig->SetInt   (TEXT("Video Encoding"), TEXT("MaxBitrate"),    1000);

	push	1000					; 000003e8H
	push	OFFSET $SG4294820184
	push	OFFSET $SG4294820183
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 400  :     AppConfig->SetString(TEXT("Video Encoding"), TEXT("Preset"),        TEXT("veryfast"));

	push	OFFSET $SG4294820182
	push	OFFSET $SG4294820181
	push	OFFSET $SG4294820180
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 401  :     AppConfig->SetInt   (TEXT("Video Encoding"), TEXT("Quality"),       8);

	push	8
	push	OFFSET $SG4294820179
	push	OFFSET $SG4294820178
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 402  : 
; 403  :     AppConfig->SetInt   (TEXT("Audio Encoding"), TEXT("Format"),        1);

	push	1
	push	OFFSET $SG4294820177
	push	OFFSET $SG4294820176
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 404  :     AppConfig->SetString(TEXT("Audio Encoding"), TEXT("Bitrate"),       TEXT("128"));

	push	OFFSET $SG4294820175
	push	OFFSET $SG4294820174
	push	OFFSET $SG4294820173
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 405  :     AppConfig->SetInt   (TEXT("Audio Encoding"), TEXT("isStereo"),      1);

	push	1
	push	OFFSET $SG4294820172
	push	OFFSET $SG4294820171
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 406  : 
; 407  :     AppConfig->SetInt   (TEXT("Publish"),        TEXT("Service"),       0);

	push	0
	push	OFFSET $SG4294820170
	push	OFFSET $SG4294820169
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 408  :     AppConfig->SetInt   (TEXT("Publish"),        TEXT("Mode"),          0);

	push	0
	push	OFFSET $SG4294820168
	push	OFFSET $SG4294820167
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 409  : };

	lea	ecx, DWORD PTR _strIni$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strProfile$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN13@SetupIni:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SetupIni@@YAXPB_W@Z ENDP				; SetupIni
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?LoadGlobalIni@@YAXXZ
_TEXT	SEGMENT
_strLangFile$1 = -36					; size = 8
_strGlobalIni$ = -28					; size = 8
_str639Lang$2 = -20					; size = 8
_bufSize$3 = -12					; size = 4
tv69 = -8						; size = 4
$T4 = -4						; size = 4
?LoadGlobalIni@@YAXXZ PROC				; LoadGlobalIni, COMDAT

; 412  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 413  :     GlobalConfig = new ConfigFile;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN6@LoadGlobal
	mov	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??0ConfigFile@@QAE@XZ
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN7@LoadGlobal
$LN6@LoadGlobal:
	mov	DWORD PTR tv69[ebp], 0
$LN7@LoadGlobal:
	mov	eax, DWORD PTR tv69[ebp]
	mov	DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A, eax ; GlobalConfig

; 414  : 
; 415  :     String strGlobalIni;

	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 416  :     strGlobalIni << lpAppDataPath << TEXT("\\global.ini");

	push	OFFSET $SG4294820166
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 417  : 
; 418  :     if(!GlobalConfig->Open(strGlobalIni))

	push	0
	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?Open@ConfigFile@@QAEHPB_WH@Z
	test	eax, eax
	jne	$LN3@LoadGlobal

; 419  :     {
; 420  :         if(!GlobalConfig->Create(strGlobalIni))

	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?Create@ConfigFile@@QAEHPB_W@Z
	test	eax, eax
	jne	SHORT $LN2@LoadGlobal

; 421  :             CrashError(TEXT("Could not create '%s'"), strGlobalIni.Array());

	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820165
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN2@LoadGlobal:

; 422  : 
; 423  :         //----------------------
; 424  :         // first, try to set the app to the system language, defaulting to english if the language doesn't exist
; 425  : 		//设置本地化语言
; 426  :         DWORD bufSize = GetLocaleInfoEx(LOCALE_NAME_USER_DEFAULT, LOCALE_SISO639LANGNAME, NULL, 0);

	push	0
	push	0
	push	89					; 00000059H
	push	0
	call	DWORD PTR __imp__GetLocaleInfoEx@16
	mov	DWORD PTR _bufSize$3[ebp], eax

; 427  : 
; 428  :         String str639Lang;

	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 429  :         str639Lang.SetLength(bufSize);

	mov	ecx, DWORD PTR _bufSize$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 430  : 
; 431  :         GetLocaleInfoEx(LOCALE_NAME_USER_DEFAULT, LOCALE_SISO639LANGNAME, str639Lang.Array(), bufSize+1);

	mov	edx, DWORD PTR _bufSize$3[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	89					; 00000059H
	push	0
	call	DWORD PTR __imp__GetLocaleInfoEx@16

; 432  : 
; 433  :         String strLangFile;

	lea	ecx, DWORD PTR _strLangFile$1[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 434  :         strLangFile << TEXT("locale/") << str639Lang << TEXT(".txt");

	push	OFFSET $SG4294820163
	lea	eax, DWORD PTR _str639Lang$2[ebp]
	push	eax
	push	OFFSET $SG4294820164
	lea	ecx, DWORD PTR _strLangFile$1[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 435  : 
; 436  :         if(!OSFileExists(strLangFile))

	lea	ecx, DWORD PTR _strLangFile$1[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN1@LoadGlobal

; 437  :             str639Lang = TEXT("en");

	push	OFFSET $SG4294820162
	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z
$LN1@LoadGlobal:

; 438  : 
; 439  :         //----------------------
; 440  : 
; 441  :         GlobalConfig->SetString(TEXT("General"), TEXT("Language"), str639Lang);

	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820161
	push	OFFSET $SG4294820160
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 442  :         GlobalConfig->SetInt(TEXT("General"), TEXT("MaxLogs"), 20);

	push	20					; 00000014H
	push	OFFSET $SG4294820159
	push	OFFSET $SG4294820158
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 443  :     }

	lea	ecx, DWORD PTR _strLangFile$1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _str639Lang$2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN3@LoadGlobal:

; 444  : }

	lea	ecx, DWORD PTR _strGlobalIni$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN5@LoadGlobal:
	mov	esp, ebp
	pop	ebp
	ret	0
?LoadGlobalIni@@YAXXZ ENDP				; LoadGlobalIni
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?InitializeExceptionHandler@@YAXXZ
_TEXT	SEGMENT
_dwFlags$1 = -16					; size = 4
_procSetProcessUserModeExceptionPolicy$2 = -12		; size = 4
_procGetProcessUserModeExceptionPolicy$3 = -8		; size = 4
_k32$ = -4						; size = 4
?InitializeExceptionHandler@@YAXXZ PROC			; InitializeExceptionHandler, COMDAT

; 460  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 461  :     HMODULE k32;
; 462  : 
; 463  :     //standard app-wide unhandled exception filter
; 464  :     SetUnhandledExceptionFilter(OBSExceptionHandler);

	push	OFFSET ?OBSExceptionHandler@@YGJPAU_EXCEPTION_POINTERS@@@Z ; OBSExceptionHandler
	call	DWORD PTR __imp__SetUnhandledExceptionFilter@4

; 465  : 
; 466  :     //fix for exceptions being swallowed inside callbacks (see KB976038)
; 467  :     k32 = GetModuleHandle(TEXT("KERNEL32"));

	push	OFFSET $SG4294820157
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR _k32$[ebp], eax

; 468  :     if (k32)

	cmp	DWORD PTR _k32$[ebp], 0
	je	SHORT $LN4@Initialize

; 469  :     {
; 470  :         DWORD dwFlags;
; 471  :         getUserModeExceptionProc procGetProcessUserModeExceptionPolicy;
; 472  :         setUserModeExceptionProc procSetProcessUserModeExceptionPolicy;
; 473  : 
; 474  :         procGetProcessUserModeExceptionPolicy = (getUserModeExceptionProc)GetProcAddress(k32, "GetProcessUserModeExceptionPolicy");

	push	OFFSET $SG4294820156
	mov	eax, DWORD PTR _k32$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _procGetProcessUserModeExceptionPolicy$3[ebp], eax

; 475  :         procSetProcessUserModeExceptionPolicy = (setUserModeExceptionProc)GetProcAddress(k32, "SetProcessUserModeExceptionPolicy");

	push	OFFSET $SG4294820155
	mov	ecx, DWORD PTR _k32$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _procSetProcessUserModeExceptionPolicy$2[ebp], eax

; 476  : 
; 477  :         if (procGetProcessUserModeExceptionPolicy && procSetProcessUserModeExceptionPolicy)

	cmp	DWORD PTR _procGetProcessUserModeExceptionPolicy$3[ebp], 0
	je	SHORT $LN4@Initialize
	cmp	DWORD PTR _procSetProcessUserModeExceptionPolicy$2[ebp], 0
	je	SHORT $LN4@Initialize

; 478  :         {
; 479  :             if (procGetProcessUserModeExceptionPolicy(&dwFlags))

	lea	edx, DWORD PTR _dwFlags$1[ebp]
	push	edx
	call	DWORD PTR _procGetProcessUserModeExceptionPolicy$3[ebp]
	test	eax, eax
	je	SHORT $LN4@Initialize

; 480  :                 procSetProcessUserModeExceptionPolicy(dwFlags & ~1);

	mov	eax, DWORD PTR _dwFlags$1[ebp]
	and	eax, -2					; fffffffeH
	push	eax
	call	DWORD PTR _procSetProcessUserModeExceptionPolicy$2[ebp]
$LN4@Initialize:

; 481  :         }
; 482  :     }
; 483  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?InitializeExceptionHandler@@YAXXZ ENDP			; InitializeExceptionHandler
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT ?SetWorkingFolder@@YAXXZ
_TEXT	SEGMENT
_modulePath$ = -12					; size = 8
_p$1 = -4						; size = 4
?SetWorkingFolder@@YAXXZ PROC				; SetWorkingFolder, COMDAT

; 486  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 487  :     String modulePath;

	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 488  : 
; 489  :     if (GetFileAttributes(TEXT("locale\\en.txt")) != INVALID_FILE_ATTRIBUTES)

	push	OFFSET $SG4294820154
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	je	SHORT $LN3@SetWorking

; 490  :         return;

	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN4@SetWorking
$LN3@SetWorking:

; 491  : 
; 492  :     modulePath.SetLength(MAX_PATH);

	push	260					; 00000104H
	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 493  : 
; 494  :     if (GetModuleFileName(NULL, modulePath, modulePath.Length()-1))

	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	0
	call	DWORD PTR __imp__GetModuleFileNameW@12
	test	eax, eax
	je	SHORT $LN2@SetWorking

; 495  :     {
; 496  :         TCHAR *p;
; 497  : 
; 498  :         p = srchr(modulePath, '\\');

	push	92					; 0000005cH
	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?srchr@@YGPA_WPB_W_W@Z
	mov	DWORD PTR _p$1[ebp], eax

; 499  :         if (p)

	cmp	DWORD PTR _p$1[ebp], 0
	je	SHORT $LN1@SetWorking

; 500  :             *p = 0;

	xor	eax, eax
	mov	ecx, DWORD PTR _p$1[ebp]
	mov	WORD PTR [ecx], ax
$LN1@SetWorking:

; 501  :         
; 502  :         SetCurrentDirectory(modulePath);

	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__SetCurrentDirectoryW@4
$LN2@SetWorking:

; 503  :     }
; 504  : }

	lea	ecx, DWORD PTR _modulePath$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN4@SetWorking:
	mov	esp, ebp
	pop	ebp
	ret	0
?SetWorkingFolder@@YAXXZ ENDP				; SetWorkingFolder
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_gdipInput$ = -1016					; size = 16
_captureHookLog$1 = -1000				; size = 24
_msg$2 = -976						; size = 28
$T3 = -948						; size = 8
$T4 = -940						; size = 8
$T5 = -932						; size = 8
tv600 = -924						; size = 4
$T6 = -920						; size = 4
$T7 = -916						; size = 4
_strColorIdx$8 = -912					; size = 8
tv464 = -904						; size = 4
$T9 = -900						; size = 4
_gdipToken$ = -896					; size = 4
_strPMFileName$10 = -892				; size = 8
$T11 = -884						; size = 4
_hAccel$12 = -880					; size = 4
$T13 = -876						; size = 4
tv854 = -872						; size = 4
_strLogFileWildcard$14 = -868				; size = 8
tv849 = -860						; size = 4
_strLog$15 = -856					; size = 8
tv785 = -848						; size = 4
_strColorIdx$16 = -844					; size = 8
_strFirstLog$17 = -836					; size = 8
$T18 = -828						; size = 4
_servicesPath$19 = -824					; size = 8
_strPluginDataPath$20 = -816				; size = 8
_strDirectory$21 = -808					; size = 8
_strLogsPath$22 = -800					; size = 8
_strCaptureHookLog$23 = -792				; size = 8
_strSceneCollectionPath$24 = -784			; size = 8
_strContents$25 = -776					; size = 8
_strCrashPath$26 = -768					; size = 8
_langFile$27 = -760					; size = 8
_strUpdatePath$28 = -752				; size = 8
_strProfilesPath$29 = -744				; size = 8
_strAllocator$30 = -736					; size = 8
$T31 = -728						; size = 4
_dirSize$32 = -724					; size = 4
_profile$ = -720					; size = 4
$T33 = -716						; size = 4
_strLanguage$34 = -712					; size = 8
tv553 = -704						; size = 4
$T35 = -700						; size = 4
tv721 = -696						; size = 4
_size$36 = -692						; size = 4
_sceneCollection$ = -688				; size = 4
_bDisableComposition$37 = -684				; size = 4
$T38 = -680						; size = 4
$T39 = -676						; size = 4
_userService$ = -672					; size = 4
_hFindLogs$40 = -668					; size = 4
$T41 = -664						; size = 4
_strAppDataPath$42 = -660				; size = 8
_pGCHLogMF$43 = -652					; size = 4
_numArgs$ = -648					; size = 4
_numLogs$44 = -644					; size = 4
_i$45 = -640						; size = 4
_i$46 = -636						; size = 4
_lpAllocator$47 = -632					; size = 4
_skipGCHLog$48 = -625					; size = 1
_args$ = -624						; size = 4
_bDisableMutex$ = -617					; size = 1
_i$49 = -616						; size = 4
_st$50 = -612						; size = 16
_ofd$51 = -596						; size = 528
_colors$52 = -68					; size = 64
__$ArrayPad$ = -4					; size = 4
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nShowCmd$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 507  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1016				; 000003f8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 508  : 	
; 509  : 	//check  is support SSE2
; 510  :     if (!OBSTools::HasSSE2Support())

	call	?HasSSE2Support@OBSTools@@SAHXZ		; OBSTools::HasSSE2Support
	test	eax, eax
	jne	SHORT $LN62@WinMain

; 511  :     {
; 512  :         OBSMessageBox (NULL, TEXT("OBS requires an SSE2-compatible CPU."), TEXT("Unsupported CPU"), MB_ICONERROR);

	push	16					; 00000010H
	push	OFFSET $SG4294820153
	push	OFFSET $SG4294820152
	push	0
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 513  :         return 1;

	mov	eax, 1
	jmp	$LN63@WinMain
$LN62@WinMain:

; 514  :     }
; 515  : 
; 516  : #if defined _M_X64 && _MSC_VER == 1800
; 517  :     //workaround AVX2 bug in VS2013, http://connect.microsoft.com/VisualStudio/feedback/details/811093
; 518  :     _set_FMA3_enable(0);
; 519  : #endif
; 520  : 	//提升权限
; 521  :     LoadSeDebugPrivilege();

	call	?LoadSeDebugPrivilege@@YAHXZ		; LoadSeDebugPrivilege

; 522  : 	//命令行参数解析
; 523  :     int numArgs;
; 524  :     LPWSTR *args = CommandLineToArgvW(GetCommandLineW(), &numArgs);

	lea	eax, DWORD PTR _numArgs$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCommandLineW@0
	push	eax
	call	DWORD PTR __imp__CommandLineToArgvW@8
	mov	DWORD PTR _args$[ebp], eax

; 525  :     LPWSTR profile = NULL;

	mov	DWORD PTR _profile$[ebp], 0

; 526  :     LPWSTR sceneCollection = NULL;

	mov	DWORD PTR _sceneCollection$[ebp], 0

; 527  :     LPWSTR userService = NULL;

	mov	DWORD PTR _userService$[ebp], 0

; 528  : 
; 529  :     bool bDisableMutex = false;

	mov	BYTE PTR _bDisableMutex$[ebp], 0

; 530  : 
; 531  :     for(int i=1; i<numArgs; i++)

	mov	DWORD PTR _i$49[ebp], 1
	jmp	SHORT $LN61@WinMain
$LN60@WinMain:
	mov	ecx, DWORD PTR _i$49[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$49[ebp], ecx
$LN61@WinMain:
	mov	edx, DWORD PTR _i$49[ebp]
	cmp	edx, DWORD PTR _numArgs$[ebp]
	jge	$LN59@WinMain

; 532  :     {
; 533  :         if(scmpi(args[i], TEXT("-multi")) == 0)

	push	OFFSET $SG4294820151
	mov	eax, DWORD PTR _i$49[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN58@WinMain

; 534  :             bDisableMutex = true;

	mov	BYTE PTR _bDisableMutex$[ebp], 1
	jmp	$LN45@WinMain
$LN58@WinMain:

; 535  :         else if(scmpi(args[i], TEXT("-portable")) == 0)

	push	OFFSET $SG4294820150
	mov	eax, DWORD PTR _i$49[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN56@WinMain

; 536  :             bIsPortable = true;

	mov	BYTE PTR ?bIsPortable@@3_NA, 1		; bIsPortable
	jmp	$LN45@WinMain
$LN56@WinMain:

; 537  :         else if (scmpi(args[i], TEXT("-start")) == 0)

	push	OFFSET $SG4294820149
	mov	eax, DWORD PTR _i$49[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN54@WinMain

; 538  :             bStreamOnStart = true;//命令行启动流

	mov	BYTE PTR ?bStreamOnStart@@3_NA, 1	; bStreamOnStart
	jmp	$LN45@WinMain
$LN54@WinMain:

; 539  :         else if (scmpi(args[i], L"-profile") == 0)

	push	OFFSET $SG4294820148
	mov	eax, DWORD PTR _i$49[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN52@WinMain

; 540  :         {
; 541  :             if (++i < numArgs)

	mov	eax, DWORD PTR _i$49[ebp]
	add	eax, 1
	mov	DWORD PTR _i$49[ebp], eax
	mov	ecx, DWORD PTR _i$49[ebp]
	cmp	ecx, DWORD PTR _numArgs$[ebp]
	jge	SHORT $LN51@WinMain

; 542  :                 profile = args[i];

	mov	edx, DWORD PTR _i$49[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _profile$[ebp], ecx
$LN51@WinMain:

; 543  :         }

	jmp	$LN45@WinMain
$LN52@WinMain:

; 544  :         else if (scmpi(args[i], L"-scenecollection") == 0)

	push	OFFSET $SG4294820147
	mov	edx, DWORD PTR _i$49[ebp]
	mov	eax, DWORD PTR _args$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN49@WinMain

; 545  :         {
; 546  :             if (++i < numArgs)

	mov	edx, DWORD PTR _i$49[ebp]
	add	edx, 1
	mov	DWORD PTR _i$49[ebp], edx
	mov	eax, DWORD PTR _i$49[ebp]
	cmp	eax, DWORD PTR _numArgs$[ebp]
	jge	SHORT $LN48@WinMain

; 547  :                 sceneCollection = args[i];

	mov	ecx, DWORD PTR _i$49[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _sceneCollection$[ebp], eax
$LN48@WinMain:

; 548  :         }

	jmp	SHORT $LN45@WinMain
$LN49@WinMain:

; 549  :         else if (scmpi(args[i], L"-installservice") == 0)

	push	OFFSET $SG4294820146
	mov	ecx, DWORD PTR _i$49[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN45@WinMain

; 550  :         {
; 551  :             if (++i < numArgs)

	mov	ecx, DWORD PTR _i$49[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$49[ebp], ecx
	mov	edx, DWORD PTR _i$49[ebp]
	cmp	edx, DWORD PTR _numArgs$[ebp]
	jge	SHORT $LN45@WinMain

; 552  :             {
; 553  :                 bDisableMutex = true;

	mov	BYTE PTR _bDisableMutex$[ebp], 1

; 554  :                 userService = args[i];

	mov	eax, DWORD PTR _i$49[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _userService$[ebp], edx
$LN45@WinMain:

; 555  :             }
; 556  :         }
; 557  :     }

	jmp	$LN60@WinMain
$LN59@WinMain:

; 558  : 
; 559  :     //------------------------------------------------------------
; 560  :     //make sure only one instance of the application can be open at a time
; 561  : 
; 562  :     hOBSMutex = CreateMutex(NULL, TRUE, TEXT("OBSMutex"));

	push	OFFSET $SG4294820145
	push	1
	push	0
	call	DWORD PTR __imp__CreateMutexW@12
	mov	DWORD PTR ?hOBSMutex@@3PAXA, eax	; hOBSMutex

; 563  :     if(!bDisableMutex && GetLastError() == ERROR_ALREADY_EXISTS)

	movzx	eax, BYTE PTR _bDisableMutex$[ebp]
	test	eax, eax
	jne	SHORT $LN44@WinMain
	call	DWORD PTR __imp__GetLastError@0
	cmp	eax, 183				; 000000b7H
	jne	SHORT $LN44@WinMain

; 564  :     {
; 565  :         hwndMain = FindWindow(OBS_WINDOW_CLASS, NULL);

	push	0
	push	OFFSET $SG4294820144
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR ?hwndMain@@3PAUHWND__@@A, eax	; hwndMain

; 566  :         if(hwndMain)

	cmp	DWORD PTR ?hwndMain@@3PAUHWND__@@A, 0	; hwndMain
	je	SHORT $LN43@WinMain

; 567  :             SetForegroundWindow(hwndMain);

	mov	ecx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	ecx
	call	DWORD PTR __imp__SetForegroundWindow@4
$LN43@WinMain:

; 568  : 
; 569  :         CloseHandle(hOBSMutex);

	mov	edx, DWORD PTR ?hOBSMutex@@3PAXA	; hOBSMutex
	push	edx
	call	DWORD PTR __imp__CloseHandle@4

; 570  :         return 0;

	xor	eax, eax
	jmp	$LN63@WinMain
$LN44@WinMain:

; 571  :     }
; 572  : 
; 573  :     //------------------------------------------------------------
; 574  : 	// first init 
; 575  :     hinstMain = hInstance;

	mov	eax, DWORD PTR _hInstance$[ebp]
	mov	DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A, eax ; hinstMain

; 576  :     // let developer know heap corruption as soon as 
; 577  :     HeapSetInformation(NULL, HeapEnableTerminationOnCorruption, NULL, 0);

	push	0
	push	0
	push	1
	push	0
	call	DWORD PTR __imp__HeapSetInformation@16

; 578  : 
; 579  :     SetProcessDEPPolicy(PROCESS_DEP_ENABLE | PROCESS_DEP_DISABLE_ATL_THUNK_EMULATION);

	push	3
	call	DWORD PTR __imp__SetProcessDEPPolicy@4

; 580  : 
; 581  :     InitializeExceptionHandler();

	call	?InitializeExceptionHandler@@YAXXZ	; InitializeExceptionHandler

; 582  : 
; 583  : 	//init gdiplus
; 584  :     ULONG_PTR gdipToken;
; 585  :     const Gdiplus::GdiplusStartupInput gdipInput;

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _gdipInput$[ebp]
	call	??0GdiplusStartupInput@Gdiplus@@QAE@P6GXW4DebugEventLevel@1@PAD@ZHH@Z ; Gdiplus::GdiplusStartupInput::GdiplusStartupInput

; 586  :     Gdiplus::GdiplusStartup(&gdipToken, &gdipInput, NULL);

	push	0
	lea	ecx, DWORD PTR _gdipInput$[ebp]
	push	ecx
	lea	edx, DWORD PTR _gdipToken$[ebp]
	push	edx
	call	DWORD PTR __imp__GdiplusStartup@12

; 587  : 
; 588  :     if(InitXT(NULL, TEXT("FastAlloc")))

	push	OFFSET $SG4294820143
	push	0
	call	DWORD PTR __imp_?InitXT@@YGHPB_W0@Z
	test	eax, eax
	je	$LN42@WinMain

; 589  :     {
; 590  :         InitSockets();

	call	?InitSockets@@YAXXZ			; InitSockets

; 591  :         //CoInitializeEx(NULL, COINIT_MULTITHREADED);
; 592  :         CoInitialize(0);

	push	0
	call	DWORD PTR __imp__CoInitialize@4

; 593  :         EnableProfiling(TRUE);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	1
	call	DWORD PTR __imp_?EnableProfiling@@YGXHMM@Z

; 594  : 
; 595  :         //always make sure we're running inside our app folder so that locale files and plugins work
; 596  :         SetWorkingFolder();

	call	?SetWorkingFolder@@YAXXZ		; SetWorkingFolder

; 597  : 		//获取当前工作目录
; 598  :         //get current working dir
; 599  :         {
; 600  :             String strDirectory;

	lea	ecx, DWORD PTR _strDirectory$21[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 601  :             UINT dirSize = GetCurrentDirectory(0, 0);

	push	0
	push	0
	call	DWORD PTR __imp__GetCurrentDirectoryW@8
	mov	DWORD PTR _dirSize$32[ebp], eax

; 602  :             strDirectory.SetLength(dirSize);

	mov	eax, DWORD PTR _dirSize$32[ebp]
	push	eax
	lea	ecx, DWORD PTR _strDirectory$21[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 603  :             GetCurrentDirectory(dirSize, strDirectory.Array());

	lea	ecx, DWORD PTR _strDirectory$21[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _dirSize$32[ebp]
	push	ecx
	call	DWORD PTR __imp__GetCurrentDirectoryW@8

; 604  : 
; 605  :             scpy(lpAppPath, strDirectory);

	lea	ecx, DWORD PTR _strDirectory$21[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET ?lpAppPath@@3PA_WA		; lpAppPath
	call	DWORD PTR __imp_?scpy@@YGXPA_WPB_W@Z

; 606  :         }

	lea	ecx, DWORD PTR _strDirectory$21[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 607  : 
; 608  :         //if -portable isn't specified in command line check if there's a file named "obs_portable_mode" in current working dir, if so, obs goes into portable mode
; 609  :         if(!bIsPortable)

	movzx	edx, BYTE PTR ?bIsPortable@@3_NA	; bIsPortable
	test	edx, edx
	jne	SHORT $LN41@WinMain

; 610  :         {
; 611  :             String strPMFileName = lpAppPath;

	push	OFFSET ?lpAppPath@@3PA_WA		; lpAppPath
	lea	ecx, DWORD PTR _strPMFileName$10[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 612  :             strPMFileName += TEXT("\\obs_portable_mode");

	push	OFFSET $SG4294820142
	lea	ecx, DWORD PTR _strPMFileName$10[ebp]
	call	DWORD PTR __imp_??YString@@QAEAAV0@PB_W@Z

; 613  :             if(OSFileExists(strPMFileName))

	lea	ecx, DWORD PTR _strPMFileName$10[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	je	SHORT $LN40@WinMain

; 614  :                 bIsPortable = true;

	mov	BYTE PTR ?bIsPortable@@3_NA, 1		; bIsPortable
$LN40@WinMain:

; 615  :         }

	lea	ecx, DWORD PTR _strPMFileName$10[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN41@WinMain:

; 616  : 
; 617  :         TSTR lpAllocator = NULL;

	mov	DWORD PTR _lpAllocator$47[ebp], 0

; 618  : 
; 619  :         {
; 620  :             if(bIsPortable)

	movzx	eax, BYTE PTR ?bIsPortable@@3_NA	; bIsPortable
	test	eax, eax
	je	SHORT $LN39@WinMain

; 621  :                 scpy(lpAppDataPath, lpAppPath);

	push	OFFSET ?lpAppPath@@3PA_WA		; lpAppPath
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	call	DWORD PTR __imp_?scpy@@YGXPA_WPB_W@Z

; 622  :             else

	jmp	SHORT $LN38@WinMain
$LN39@WinMain:

; 623  :             {
; 624  : 				//获取用户数据目录
; 625  :                 SHGetFolderPath(NULL, CSIDL_APPDATA, NULL, SHGFP_TYPE_CURRENT, lpAppDataPath);

	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	push	0
	push	0
	push	26					; 0000001aH
	push	0
	call	DWORD PTR __imp__SHGetFolderPathW@20

; 626  :                 scat_n(lpAppDataPath, TEXT("\\OBS"), 4);

	push	4
	push	OFFSET $SG4294820141
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	call	DWORD PTR __imp_?scat_n@@YGXPA_WPB_WI@Z
$LN38@WinMain:

; 627  :             }
; 628  : 
; 629  :             if(!OSFileExists(lpAppDataPath) && !OSCreateDirectory(lpAppDataPath))

	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN37@WinMain
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN37@WinMain

; 630  :                 CrashError(TEXT("Couldn't create directory '%s'"), lpAppDataPath);

	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	push	OFFSET $SG4294820140
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN37@WinMain:

; 631  : 
; 632  :             String strAppDataPath = lpAppDataPath;

	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 633  :             String strProfilesPath = strAppDataPath + TEXT("\\profiles");

	push	OFFSET $SG4294820139
	lea	ecx, DWORD PTR _strProfilesPath$29[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 634  :             if(!OSFileExists(strProfilesPath) && !OSCreateDirectory(strProfilesPath))

	lea	ecx, DWORD PTR _strProfilesPath$29[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN36@WinMain
	lea	ecx, DWORD PTR _strProfilesPath$29[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN36@WinMain

; 635  :                 CrashError(TEXT("Couldn't create directory '%s'"), strProfilesPath.Array());

	lea	ecx, DWORD PTR _strProfilesPath$29[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820138
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN36@WinMain:

; 636  : 
; 637  :             String strSceneCollectionPath = strAppDataPath + TEXT("\\sceneCollection");

	push	OFFSET $SG4294820137
	lea	edx, DWORD PTR _strSceneCollectionPath$24[ebp]
	push	edx
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 638  :             if (!OSFileExists(strSceneCollectionPath) && !OSCreateDirectory(strSceneCollectionPath))

	lea	ecx, DWORD PTR _strSceneCollectionPath$24[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN35@WinMain
	lea	ecx, DWORD PTR _strSceneCollectionPath$24[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN35@WinMain

; 639  :                 CrashError(TEXT("Couldn't create directory '%s'"), strSceneCollectionPath.Array());

	lea	ecx, DWORD PTR _strSceneCollectionPath$24[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820136
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN35@WinMain:

; 640  : 
; 641  :             String strLogsPath = strAppDataPath + TEXT("\\logs");

	push	OFFSET $SG4294820135
	lea	eax, DWORD PTR _strLogsPath$22[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 642  :             if(!OSFileExists(strLogsPath) && !OSCreateDirectory(strLogsPath))

	lea	ecx, DWORD PTR _strLogsPath$22[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN34@WinMain
	lea	ecx, DWORD PTR _strLogsPath$22[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN34@WinMain

; 643  :                 CrashError(TEXT("Couldn't create directory '%s'"), strLogsPath.Array());

	lea	ecx, DWORD PTR _strLogsPath$22[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820134
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN34@WinMain:

; 644  : 
; 645  :             String strCrashPath = strAppDataPath + TEXT("\\crashDumps");

	push	OFFSET $SG4294820133
	lea	ecx, DWORD PTR _strCrashPath$26[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 646  :             if(!OSFileExists(strCrashPath) && !OSCreateDirectory(strCrashPath))

	lea	ecx, DWORD PTR _strCrashPath$26[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN33@WinMain
	lea	ecx, DWORD PTR _strCrashPath$26[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN33@WinMain

; 647  :                 CrashError(TEXT("Couldn't create directory '%s'"), strCrashPath.Array());

	lea	ecx, DWORD PTR _strCrashPath$26[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820132
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN33@WinMain:

; 648  : 
; 649  :             String strPluginDataPath = strAppDataPath + TEXT("\\pluginData");

	push	OFFSET $SG4294820131
	lea	edx, DWORD PTR _strPluginDataPath$20[ebp]
	push	edx
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 650  :             if(!OSFileExists(strPluginDataPath) && !OSCreateDirectory(strPluginDataPath))

	lea	ecx, DWORD PTR _strPluginDataPath$20[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN32@WinMain
	lea	ecx, DWORD PTR _strPluginDataPath$20[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN32@WinMain

; 651  :                 CrashError(TEXT("Couldn't create directory '%s'"), strPluginDataPath.Array());

	lea	ecx, DWORD PTR _strPluginDataPath$20[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820130
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN32@WinMain:

; 652  : 
; 653  :             String strUpdatePath = strAppDataPath + TEXT("\\updates");

	push	OFFSET $SG4294820129
	lea	eax, DWORD PTR _strUpdatePath$28[ebp]
	push	eax
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 654  :             if(!OSFileExists(strUpdatePath) && !OSCreateDirectory(strUpdatePath))

	lea	ecx, DWORD PTR _strUpdatePath$28[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN31@WinMain
	lea	ecx, DWORD PTR _strUpdatePath$28[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN31@WinMain

; 655  :                 CrashError(TEXT("Couldn't create directory '%s'"), strUpdatePath.Array());

	lea	ecx, DWORD PTR _strUpdatePath$28[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820128
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN31@WinMain:

; 656  : 
; 657  :             String servicesPath = strAppDataPath + L"\\services";

	push	OFFSET $SG4294820127
	lea	ecx, DWORD PTR _servicesPath$19[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??HString@@QBE?AV0@PB_W@Z

; 658  :             if (!OSFileExists(servicesPath) && !OSCreateDirectory(servicesPath))

	lea	ecx, DWORD PTR _servicesPath$19[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFileExists@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN30@WinMain
	lea	ecx, DWORD PTR _servicesPath$19[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSCreateDirectory@@YGHPB_W@Z
	test	eax, eax
	jne	SHORT $LN30@WinMain

; 659  :                 CrashError(TEXT("Couldn't create directory '%s'"), servicesPath.Array());

	lea	ecx, DWORD PTR _servicesPath$19[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820126
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN30@WinMain:

; 660  : 			//设置本地化内容
; 661  :             LoadGlobalIni();

	call	?LoadGlobalIni@@YAXXZ			; LoadGlobalIni

; 662  : 
; 663  :             String strAllocator = GlobalConfig->GetString(TEXT("General"), TEXT("Allocator"));

	push	0
	push	OFFSET $SG4294820125
	push	OFFSET $SG4294820124
	lea	edx, DWORD PTR _strAllocator$30[ebp]
	push	edx
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z

; 664  :             if(strAllocator.IsValid())

	lea	ecx, DWORD PTR _strAllocator$30[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN29@WinMain

; 665  :             {
; 666  :                 UINT size = strAllocator.DataLength();

	lea	ecx, DWORD PTR _strAllocator$30[ebp]
	call	DWORD PTR __imp_?DataLength@String@@QBEIXZ
	mov	DWORD PTR _size$36[ebp], eax

; 667  :                 lpAllocator = (TSTR)malloc(size);

	mov	eax, DWORD PTR _size$36[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _lpAllocator$47[ebp], eax

; 668  :                 mcpy(lpAllocator, strAllocator.Array(), size);

	mov	ecx, DWORD PTR _size$36[ebp]
	push	ecx
	lea	ecx, DWORD PTR _strAllocator$30[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	edx, DWORD PTR _lpAllocator$47[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN29@WinMain:

; 669  :             }
; 670  : 
; 671  :             RegisterServiceFileHandler();

	call	?RegisterServiceFileHandler@@YAXXZ	; RegisterServiceFileHandler

; 672  :         }

	lea	ecx, DWORD PTR _strAllocator$30[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _servicesPath$19[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strUpdatePath$28[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strPluginDataPath$20[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strCrashPath$26[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strLogsPath$22[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strSceneCollectionPath$24[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strProfilesPath$29[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strAppDataPath$42[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 673  : 
; 674  :        if(lpAllocator)

	cmp	DWORD PTR _lpAllocator$47[ebp], 0
	je	SHORT $LN28@WinMain

; 675  :         {
; 676  :             delete GlobalConfig;

	mov	eax, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	mov	DWORD PTR $T13[ebp], eax
	mov	ecx, DWORD PTR $T13[ebp]
	mov	DWORD PTR $T35[ebp], ecx
	cmp	DWORD PTR $T35[ebp], 0
	je	SHORT $LN65@WinMain
	push	1
	mov	ecx, DWORD PTR $T35[ebp]
	call	??_GConfigFile@@QAEPAXI@Z
	mov	DWORD PTR tv464[ebp], eax
	jmp	SHORT $LN66@WinMain
$LN65@WinMain:
	mov	DWORD PTR tv464[ebp], 0
$LN66@WinMain:

; 677  : 
; 678  :             ResetXTAllocator(lpAllocator);

	mov	edx, DWORD PTR _lpAllocator$47[ebp]
	push	edx
	call	DWORD PTR __imp_?ResetXTAllocator@@YGXPB_W@Z

; 679  :             free(lpAllocator);

	mov	eax, DWORD PTR _lpAllocator$47[ebp]
	push	eax
	call	_free
	add	esp, 4

; 680  : 
; 681  :             LoadGlobalIni();

	call	?LoadGlobalIni@@YAXXZ			; LoadGlobalIni
$LN28@WinMain:

; 682  :         }
; 683  : 
; 684  : 
; 685  :         //-----------------------------------------------------
; 686  :         // load locale  该变量在initXT中初始化，使用Str宏可以自动化解析
; 687  : 	   //首先加载english，后本地化语言
; 688  :         if (!locale->LoadStringFile(TEXT("locale/en.txt")))

	push	0
	push	OFFSET $SG4294820123
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z
	test	eax, eax
	jne	SHORT $LN27@WinMain

; 689  :             AppWarning(TEXT("Could not open locale string file '%s'"), TEXT("locale/en.txt"));

	push	OFFSET $SG4294820122
	push	OFFSET $SG4294820121
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN27@WinMain:

; 690  : 
; 691  :         String strLanguage = GlobalConfig->GetString(TEXT("General"), TEXT("Language"), TEXT("en"));

	push	OFFSET $SG4294820120
	push	OFFSET $SG4294820119
	push	OFFSET $SG4294820118
	lea	edx, DWORD PTR _strLanguage$34[ebp]
	push	edx
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z

; 692  :         if (!strLanguage.CompareI(TEXT("en")))

	push	OFFSET $SG4294820117
	lea	ecx, DWORD PTR _strLanguage$34[ebp]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	jne	$LN26@WinMain

; 693  :         {
; 694  :             String langFile;

	lea	ecx, DWORD PTR _langFile$27[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 695  :             langFile << TEXT("locale/") << strLanguage << TEXT(".txt");

	push	OFFSET $SG4294820115
	lea	eax, DWORD PTR _strLanguage$34[ebp]
	push	eax
	push	OFFSET $SG4294820116
	lea	ecx, DWORD PTR _langFile$27[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 696  : 
; 697  :             if (!locale->LoadStringFile(langFile))

	push	0
	lea	ecx, DWORD PTR _langFile$27[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LoadStringFile@LocaleStringLookup@@QAEHPB_W_N@Z
	test	eax, eax
	jne	SHORT $LN25@WinMain

; 698  :                 AppWarning(TEXT("Could not open locale string file '%s'"), langFile.Array());

	lea	ecx, DWORD PTR _langFile$27[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820114
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN25@WinMain:

; 699  :         }

	lea	ecx, DWORD PTR _langFile$27[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN26@WinMain:

; 700  : 
; 701  :         // install user service here after we've loaded XT and locale
; 702  :         if (userService)

	cmp	DWORD PTR _userService$[ebp], 0
	je	SHORT $LN24@WinMain

; 703  :         {
; 704  :             if (!InstallUserService(userService))

	mov	edx, DWORD PTR _userService$[ebp]
	push	edx
	call	?InstallUserService@@YA_NPA_W@Z		; InstallUserService
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN23@WinMain

; 705  :                 return 1;

	mov	DWORD PTR $T6[ebp], 1
	lea	ecx, DWORD PTR _strLanguage$34[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR $T6[ebp]
	jmp	$LN63@WinMain
$LN23@WinMain:

; 706  :             return 0;

	mov	DWORD PTR $T7[ebp], 0
	lea	ecx, DWORD PTR _strLanguage$34[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	eax, DWORD PTR $T7[ebp]
	jmp	$LN63@WinMain
$LN24@WinMain:

; 707  :         }
; 708  : 
; 709  :         //--------------------------------------------
; 710  : 
; 711  :         GlobalConfig->SetString(TEXT("General"), TEXT("LastAppDirectory"), lpAppPath);

	push	OFFSET ?lpAppPath@@3PA_WA		; lpAppPath
	push	OFFSET $SG4294820113
	push	OFFSET $SG4294820112
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 712  : 
; 713  :         //--------------------------------------------
; 714  : 
; 715  :         AppConfig = new ConfigFile;

	push	28					; 0000001cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T31[ebp], eax
	cmp	DWORD PTR $T31[ebp], 0
	je	SHORT $LN67@WinMain
	mov	ecx, DWORD PTR $T31[ebp]
	call	DWORD PTR __imp_??0ConfigFile@@QAE@XZ
	mov	DWORD PTR tv553[ebp], eax
	jmp	SHORT $LN68@WinMain
$LN67@WinMain:
	mov	DWORD PTR tv553[ebp], 0
$LN68@WinMain:
	mov	ecx, DWORD PTR tv553[ebp]
	mov	DWORD PTR ?AppConfig@@3PAVConfigFile@@A, ecx ; AppConfig

; 716  :         SetupIni(profile);

	mov	edx, DWORD PTR _profile$[ebp]
	push	edx
	call	?SetupIni@@YAXPB_W@Z			; SetupIni
	add	esp, 4

; 717  :         SetupSceneCollection(sceneCollection);

	mov	eax, DWORD PTR _sceneCollection$[ebp]
	push	eax
	call	?SetupSceneCollection@@YAXPB_W@Z	; SetupSceneCollection
	add	esp, 4

; 718  : 
; 719  :         //--------------------------------------------
; 720  : 
; 721  :         DWORD colors[16];
; 722  :         for (int i=0; i<16; i++) {

	mov	DWORD PTR _i$45[ebp], 0
	jmp	SHORT $LN22@WinMain
$LN21@WinMain:
	mov	ecx, DWORD PTR _i$45[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$45[ebp], ecx
$LN22@WinMain:
	cmp	DWORD PTR _i$45[ebp], 16		; 00000010H
	jge	$LN20@WinMain

; 723  :             String strColorIdx = "Color";

	push	OFFSET $SG4294820111
	lea	ecx, DWORD PTR _strColorIdx$8[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z

; 724  :             strColorIdx << IntString(i);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _i$45[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strColorIdx$8[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 725  :             colors[i] = GlobalConfig->GetInt(TEXT("CustomColors"), strColorIdx, 0xFFFFFF);

	push	16777215				; 00ffffffH
	lea	ecx, DWORD PTR _strColorIdx$8[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820110
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	ecx, DWORD PTR _i$45[ebp]
	mov	DWORD PTR _colors$52[ebp+ecx*4], eax

; 726  :         }

	lea	ecx, DWORD PTR _strColorIdx$8[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN21@WinMain
$LN20@WinMain:

; 727  : 
; 728  :         CCSetCustomColors(colors);

	lea	edx, DWORD PTR _colors$52[ebp]
	push	edx
	call	DWORD PTR __imp_?CCSetCustomColors@@YAXPAK@Z
	add	esp, 4

; 729  : 		//----------------------------------------------------------------------------
; 730  : 		//清理旧的日志文件
; 731  :         String strLogFileWildcard;

	lea	ecx, DWORD PTR _strLogFileWildcard$14[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 732  :         strLogFileWildcard << lpAppDataPath << TEXT("\\logs\\*.log");

	push	OFFSET $SG4294820109
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strLogFileWildcard$14[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 733  : 
; 734  :         OSFindData ofd;
; 735  :         HANDLE hFindLogs = OSFindFirstFile(strLogFileWildcard, ofd);

	lea	eax, DWORD PTR _ofd$51[ebp]
	push	eax
	lea	ecx, DWORD PTR _strLogFileWildcard$14[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSFindFirstFile@@YGPAXPB_WAAUOSFindData@@@Z
	mov	DWORD PTR _hFindLogs$40[ebp], eax

; 736  :         if(hFindLogs)

	cmp	DWORD PTR _hFindLogs$40[ebp], 0
	je	$LN19@WinMain

; 737  :         {
; 738  :             int numLogs = 0;

	mov	DWORD PTR _numLogs$44[ebp], 0

; 739  :             String strFirstLog;

	lea	ecx, DWORD PTR _strFirstLog$17[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
$LN18@WinMain:

; 740  : 
; 741  :             do
; 742  :             {
; 743  :                 if(ofd.bDirectory) continue;

	cmp	DWORD PTR _ofd$51[ebp+520], 0
	je	SHORT $LN15@WinMain
	jmp	SHORT $LN14@WinMain
$LN15@WinMain:

; 744  :                 if(!numLogs++)

	mov	ecx, DWORD PTR _numLogs$44[ebp]
	mov	DWORD PTR tv600[ebp], ecx
	mov	edx, DWORD PTR _numLogs$44[ebp]
	add	edx, 1
	mov	DWORD PTR _numLogs$44[ebp], edx
	cmp	DWORD PTR tv600[ebp], 0
	jne	SHORT $LN14@WinMain

; 745  :                     strFirstLog << lpAppDataPath << TEXT("\\logs\\") << ofd.fileName;

	lea	eax, DWORD PTR _ofd$51[ebp]
	push	eax
	push	OFFSET $SG4294820108
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strFirstLog$17[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
$LN14@WinMain:

; 746  :             } while(OSFindNextFile(hFindLogs, ofd));

	lea	ecx, DWORD PTR _ofd$51[ebp]
	push	ecx
	mov	edx, DWORD PTR _hFindLogs$40[ebp]
	push	edx
	call	DWORD PTR __imp_?OSFindNextFile@@YGHPAXAAUOSFindData@@@Z
	test	eax, eax
	jne	SHORT $LN18@WinMain

; 747  : 
; 748  :             OSFindClose(hFindLogs);

	mov	eax, DWORD PTR _hFindLogs$40[ebp]
	push	eax
	call	DWORD PTR __imp_?OSFindClose@@YGXPAX@Z

; 749  : 
; 750  :             if(numLogs >= GlobalConfig->GetInt(TEXT("General"), TEXT("MaxLogs"), 20))

	push	20					; 00000014H
	push	OFFSET $SG4294820107
	push	OFFSET $SG4294820106
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	cmp	DWORD PTR _numLogs$44[ebp], eax
	jl	SHORT $LN13@WinMain

; 751  :                 OSDeleteFile(strFirstLog);

	lea	ecx, DWORD PTR _strFirstLog$17[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?OSDeleteFile@@YGHPB_W@Z
$LN13@WinMain:

; 752  :         }

	lea	ecx, DWORD PTR _strFirstLog$17[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN19@WinMain:

; 753  : 		//----------------------------------------------------------------------------
; 754  : 		//init log file name
; 755  :         SYSTEMTIME st;
; 756  :         GetLocalTime(&st);

	lea	ecx, DWORD PTR _st$50[ebp]
	push	ecx
	call	DWORD PTR __imp__GetLocalTime@4

; 757  : 
; 758  :         String strLog;

	lea	ecx, DWORD PTR _strLog$15[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 759  :         strLog << lpAppDataPath << FormattedString(TEXT("\\logs\\%u-%02u-%02u-%02u%02u-%02u"), st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond) << TEXT(".log");

	push	OFFSET $SG4294820104
	movzx	edx, WORD PTR _st$50[ebp+12]
	push	edx
	movzx	eax, WORD PTR _st$50[ebp+10]
	push	eax
	movzx	ecx, WORD PTR _st$50[ebp+8]
	push	ecx
	movzx	edx, WORD PTR _st$50[ebp+6]
	push	edx
	movzx	eax, WORD PTR _st$50[ebp+2]
	push	eax
	movzx	ecx, WORD PTR _st$50[ebp]
	push	ecx
	push	OFFSET $SG4294820105
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	DWORD PTR __imp_?FormattedString@@YA?AVString@@PB_WZZ
	add	esp, 32					; 00000020H
	push	eax
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strLog$15[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 760  : 
; 761  :         InitXTLog(strLog);

	lea	ecx, DWORD PTR _strLog$15[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?InitXTLog@@YGXPB_W@Z

; 762  : 
; 763  :         //-----------------------------------------------------------------------------
; 764  : 
; 765  :         BOOL bDisableComposition = AppConfig->GetInt(TEXT("Video"), TEXT("DisableAero"), 0);

	push	0
	push	OFFSET $SG4294820103
	push	OFFSET $SG4294820102
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _bDisableComposition$37[ebp], eax

; 766  : 		//DwmEnableComposition调用这个函数可关闭整个系统的玻璃效果
; 767  :         if(bDisableComposition)

	cmp	DWORD PTR _bDisableComposition$37[ebp], 0
	je	SHORT $LN12@WinMain

; 768  :           DwmEnableComposition(DWM_EC_DISABLECOMPOSITION);

	push	0
	call	DWORD PTR __imp__DwmEnableComposition@4
$LN12@WinMain:

; 769  : 
; 770  :         //--------------------------------------------
; 771  : 
; 772  :         String strCaptureHookLog;

	lea	ecx, DWORD PTR _strCaptureHookLog$23[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 773  :         strCaptureHookLog << lpAppDataPath << L"\\pluginData\\captureHookLog.txt";

	push	OFFSET $SG4294820101
	push	OFFSET ?lpAppDataPath@@3PA_WA		; lpAppDataPath
	lea	ecx, DWORD PTR _strCaptureHookLog$23[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 774  :         
; 775  :         OSFileChangeData *pGCHLogMF = NULL;

	mov	DWORD PTR _pGCHLogMF$43[ebp], 0

; 776  :         pGCHLogMF = OSMonitorFileStart (strCaptureHookLog, true);

	push	1
	sub	esp, 8
	mov	ecx, esp
	lea	eax, DWORD PTR _strCaptureHookLog$23[ebp]
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@ABV0@@Z
	call	DWORD PTR __imp_?OSMonitorFileStart@@YGPAUOSFileChangeData@@VString@@_N@Z
	mov	DWORD PTR _pGCHLogMF$43[ebp], eax

; 777  : 
; 778  : 
; 779  : 		//--------------core code loaded--------------------------------
; 780  : 		
; 781  :         App = new OBS;   

	push	1432					; 00000598H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T39[ebp], eax
	cmp	DWORD PTR $T39[ebp], 0
	je	SHORT $LN69@WinMain
	mov	ecx, DWORD PTR $T39[ebp]
	call	??0OBS@@QAE@XZ				; OBS::OBS
	mov	DWORD PTR tv721[ebp], eax
	jmp	SHORT $LN70@WinMain
$LN69@WinMain:
	mov	DWORD PTR tv721[ebp], 0
$LN70@WinMain:
	mov	ecx, DWORD PTR tv721[ebp]
	mov	DWORD PTR ?App@@3PAVOBS@@A, ecx		; App

; 782  : 		//--------------------------------------------------------------
; 783  :         App->LoadAllPlugins();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?LoadAllPlugins@OBS@@QAEXXZ		; OBS::LoadAllPlugins

; 784  : 		//启动流预览
; 785  : 		SendMessage(hwndMain, WM_COMMAND, MAKEWPARAM(ID_TESTSTREAM, 0), NULL);

	push	0
	push	5015					; 00001397H
	push	273					; 00000111H
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 786  : 		//加速键表
; 787  :         HACCEL hAccel = LoadAccelerators(hinstMain, MAKEINTRESOURCE(IDR_ACCELERATOR1));

	push	125					; 0000007dH
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp__LoadAcceleratorsW@8
	mov	DWORD PTR _hAccel$12[ebp], eax
$LN11@WinMain:

; 788  : 
; 789  :         MSG msg;
; 790  :         while(GetMessage(&msg, NULL, 0, 0))

	push	0
	push	0
	push	0
	lea	ecx, DWORD PTR _msg$2[ebp]
	push	ecx
	call	DWORD PTR __imp__GetMessageW@16
	test	eax, eax
	je	SHORT $LN10@WinMain

; 791  :         {
; 792  :             if(!TranslateAccelerator(hwndMain, hAccel, &msg) && !IsDialogMessage(hwndMain, &msg))

	lea	edx, DWORD PTR _msg$2[ebp]
	push	edx
	mov	eax, DWORD PTR _hAccel$12[ebp]
	push	eax
	mov	ecx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	ecx
	call	DWORD PTR __imp__TranslateAcceleratorW@12
	test	eax, eax
	jne	SHORT $LN9@WinMain
	lea	edx, DWORD PTR _msg$2[ebp]
	push	edx
	mov	eax, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	eax
	call	DWORD PTR __imp__IsDialogMessageW@8
	test	eax, eax
	jne	SHORT $LN9@WinMain

; 793  :             {
; 794  :                 TranslateMessage(&msg);

	lea	ecx, DWORD PTR _msg$2[ebp]
	push	ecx
	call	DWORD PTR __imp__TranslateMessage@4

; 795  :                 DispatchMessage(&msg);

	lea	edx, DWORD PTR _msg$2[ebp]
	push	edx
	call	DWORD PTR __imp__DispatchMessageW@4
$LN9@WinMain:

; 796  :             }
; 797  :         }

	jmp	SHORT $LN11@WinMain
$LN10@WinMain:

; 798  : 
; 799  :         delete App;

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR $T9[ebp], eax
	mov	ecx, DWORD PTR $T9[ebp]
	mov	DWORD PTR $T41[ebp], ecx
	cmp	DWORD PTR $T41[ebp], 0
	je	SHORT $LN71@WinMain
	push	1
	mov	edx, DWORD PTR $T41[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T41[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv785[ebp], eax
	jmp	SHORT $LN72@WinMain
$LN71@WinMain:
	mov	DWORD PTR tv785[ebp], 0
$LN72@WinMain:

; 800  : 
; 801  :         //--------------------------------------------
; 802  : 
; 803  :         CCGetCustomColors(colors);

	lea	eax, DWORD PTR _colors$52[ebp]
	push	eax
	call	DWORD PTR __imp_?CCGetCustomColors@@YAXPAK@Z
	add	esp, 4

; 804  :         for (int i=0; i<16; i++) {

	mov	DWORD PTR _i$46[ebp], 0
	jmp	SHORT $LN8@WinMain
$LN7@WinMain:
	mov	ecx, DWORD PTR _i$46[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$46[ebp], ecx
$LN8@WinMain:
	cmp	DWORD PTR _i$46[ebp], 16		; 00000010H
	jge	SHORT $LN6@WinMain

; 805  :             String strColorIdx = "Color";

	push	OFFSET $SG4294820100
	lea	ecx, DWORD PTR _strColorIdx$16[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PBD@Z

; 806  :             strColorIdx << IntString(i);

	push	10					; 0000000aH
	mov	edx, DWORD PTR _i$46[ebp]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strColorIdx$16[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 807  :             GlobalConfig->SetInt(TEXT("CustomColors"), strColorIdx, colors[i]);

	mov	ecx, DWORD PTR _i$46[ebp]
	mov	edx, DWORD PTR _colors$52[ebp+ecx*4]
	push	edx
	lea	ecx, DWORD PTR _strColorIdx$16[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294820099
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 808  :         }

	lea	ecx, DWORD PTR _strColorIdx$16[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN7@WinMain
$LN6@WinMain:

; 809  : 
; 810  :         GlobalConfig->SetInt(TEXT("General"), TEXT("LastAppVersion"), OBS_VERSION);

	push	25863					; 00006507H
	push	OFFSET $SG4294820098
	push	OFFSET $SG4294820097
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 811  : 
; 812  :         delete AppConfig;

	mov	eax, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	mov	DWORD PTR $T18[ebp], eax
	mov	ecx, DWORD PTR $T18[ebp]
	mov	DWORD PTR $T33[ebp], ecx
	cmp	DWORD PTR $T33[ebp], 0
	je	SHORT $LN73@WinMain
	push	1
	mov	ecx, DWORD PTR $T33[ebp]
	call	??_GConfigFile@@QAEPAXI@Z
	mov	DWORD PTR tv849[ebp], eax
	jmp	SHORT $LN74@WinMain
$LN73@WinMain:
	mov	DWORD PTR tv849[ebp], 0
$LN74@WinMain:

; 813  :         delete GlobalConfig;

	mov	edx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	mov	DWORD PTR $T11[ebp], edx
	mov	eax, DWORD PTR $T11[ebp]
	mov	DWORD PTR $T38[ebp], eax
	cmp	DWORD PTR $T38[ebp], 0
	je	SHORT $LN75@WinMain
	push	1
	mov	ecx, DWORD PTR $T38[ebp]
	call	??_GConfigFile@@QAEPAXI@Z
	mov	DWORD PTR tv854[ebp], eax
	jmp	SHORT $LN76@WinMain
$LN75@WinMain:
	mov	DWORD PTR tv854[ebp], 0
$LN76@WinMain:

; 814  : 
; 815  :         if(bDisableComposition)

	cmp	DWORD PTR _bDisableComposition$37[ebp], 0
	je	SHORT $LN5@WinMain

; 816  :             DwmEnableComposition(DWM_EC_ENABLECOMPOSITION);

	push	1
	call	DWORD PTR __imp__DwmEnableComposition@4
$LN5@WinMain:

; 817  : 
; 818  :         TerminateSockets();

	call	?TerminateSockets@@YAXXZ		; TerminateSockets

; 819  : 
; 820  :         bool skipGCHLog = false;

	mov	BYTE PTR _skipGCHLog$48[ebp], 0

; 821  : 
; 822  :         if(pGCHLogMF)

	cmp	DWORD PTR _pGCHLogMF$43[ebp], 0
	je	SHORT $LN4@WinMain

; 823  :         {
; 824  :             if(!OSFileHasChanged(pGCHLogMF))

	mov	ecx, DWORD PTR _pGCHLogMF$43[ebp]
	push	ecx
	call	DWORD PTR __imp_?OSFileHasChanged@@YGHPAUOSFileChangeData@@@Z
	test	eax, eax
	jne	SHORT $LN3@WinMain

; 825  :                 skipGCHLog = true;

	mov	BYTE PTR _skipGCHLog$48[ebp], 1
$LN3@WinMain:

; 826  : 
; 827  :             OSMonitorFileDestroy(pGCHLogMF);

	mov	edx, DWORD PTR _pGCHLogMF$43[ebp]
	push	edx
	call	DWORD PTR __imp_?OSMonitorFileDestroy@@YGXPAUOSFileChangeData@@@Z
$LN4@WinMain:

; 828  :         }
; 829  : 
; 830  :         //FIXME: File monitoring needs fixing.  Half the time game capture logs are not
; 831  :         //getting attached even when users clearly used it.
; 832  :         if(true) //!skipGCHLog)

	mov	eax, 1
	test	eax, eax
	je	$LN2@WinMain

; 833  :         {
; 834  :             XFile captureHookLog;

	lea	ecx, DWORD PTR _captureHookLog$1[ebp]
	call	DWORD PTR __imp_??0XFile@@QAE@XZ

; 835  : 
; 836  :             if (captureHookLog.Open(strCaptureHookLog, XFILE_READ|XFILE_SHARED, XFILE_OPENEXISTING))

	push	3
	push	5
	lea	ecx, DWORD PTR _strCaptureHookLog$23[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _captureHookLog$1[ebp]
	call	DWORD PTR __imp_?Open@XFile@@QAEHPB_WKK@Z
	test	eax, eax
	je	SHORT $LN1@WinMain

; 837  :             {
; 838  :                 String strContents;

	lea	ecx, DWORD PTR _strContents$25[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 839  :                 captureHookLog.ReadFileToString(strContents);

	lea	ecx, DWORD PTR _strContents$25[ebp]
	push	ecx
	lea	ecx, DWORD PTR _captureHookLog$1[ebp]
	call	DWORD PTR __imp_?ReadFileToString@XFile@@QAEXAAVString@@@Z

; 840  :                 LogRaw(L"\r\n\r\nLast game capture log:");

	push	0
	push	OFFSET $SG4294820096
	call	DWORD PTR __imp_?LogRaw@@YAXPB_WI@Z
	add	esp, 8

; 841  :                 LogRaw(strContents.Array(), strContents.Length());

	lea	ecx, DWORD PTR _strContents$25[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	push	eax
	lea	ecx, DWORD PTR _strContents$25[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?LogRaw@@YAXPB_WI@Z
	add	esp, 8

; 842  :             }

	lea	ecx, DWORD PTR _strContents$25[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN1@WinMain:

; 843  :         }

	lea	ecx, DWORD PTR _captureHookLog$1[ebp]
	call	DWORD PTR __imp_??1XFile@@QAE@XZ
$LN2@WinMain:

; 844  :     }

	lea	ecx, DWORD PTR _strCaptureHookLog$23[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strLog$15[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strLogFileWildcard$14[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strLanguage$34[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN42@WinMain:

; 845  : 
; 846  :     Gdiplus::GdiplusShutdown(gdipToken);

	mov	edx, DWORD PTR _gdipToken$[ebp]
	push	edx
	call	DWORD PTR __imp__GdiplusShutdown@4

; 847  : 
; 848  :     TerminateXT();

	call	DWORD PTR __imp_?TerminateXT@@YGXXZ

; 849  : 
; 850  :     //------------------------------------------------------------
; 851  : 
; 852  :     CloseHandle(hOBSMutex);

	mov	eax, DWORD PTR ?hOBSMutex@@3PAXA	; hOBSMutex
	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 853  : 
; 854  :     LocalFree(args);

	mov	ecx, DWORD PTR _args$[ebp]
	push	ecx
	call	DWORD PTR __imp__LocalFree@4

; 855  : 
; 856  :     return 0;

	xor	eax, eax
$LN63@WinMain:

; 857  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GConfigFile@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GConfigFile@@QAEPAXI@Z PROC				; ConfigFile::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ConfigFile@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GConfigFile@@QAEPAXI@Z ENDP				; ConfigFile::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UPluginInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UPluginInfo@@@@QBEIXZ PROC			; List<PluginInfo>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UPluginInfo@@@@QBEIXZ ENDP			; List<PluginInfo>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??H?$List@UPluginInfo@@@@QBEPAUPluginInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??H?$List@UPluginInfo@@@@QBEPAUPluginInfo@@I@Z PROC	; List<PluginInfo>::operator+, COMDAT
; _this$ = ecx

; 400  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         assert(index < num);
; 402  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return NULL; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUPluginInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	xor	eax, eax
	jmp	SHORT $LN3@operator
$LN1@operator:

; 403  :         return array+index;

	imul	eax, DWORD PTR _index$[ebp], 96
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
$LN3@operator:

; 404  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??H?$List@UPluginInfo@@@@QBEPAUPluginInfo@@I@Z ENDP	; List<PluginInfo>::operator+
_TEXT	ENDS
END
