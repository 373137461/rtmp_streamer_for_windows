; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\D3D10Shader.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R0?AVD3D10VertexShader@@@8			; D3D10VertexShader `RTTI Type Descriptor'
PUBLIC	??_R3D3D10PixelShader@@8			; D3D10PixelShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R3D3D10VertexShader@@8			; D3D10VertexShader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R4D3D10PixelShader@@6B@			; D3D10PixelShader::`RTTI Complete Object Locator'
PUBLIC	??_R0?AUShaderParam@@@8				; ShaderParam `RTTI Type Descriptor'
PUBLIC	??_R0?AUShaderSampler@@@8			; ShaderSampler `RTTI Type Descriptor'
PUBLIC	??_R1A@?0A@EA@Shader@@8				; Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2Shader@@8					; Shader::`RTTI Base Class Array'
PUBLIC	??_R3Shader@@8					; Shader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7D3D10PixelShader@@6B@			; D3D10PixelShader::`vftable'
PUBLIC	??_R4D3D10Shader@@6B@				; D3D10Shader::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@D3D10VertexShader@@8		; D3D10VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R3D3D10Shader@@8				; D3D10Shader::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2D3D10Shader@@8				; D3D10Shader::`RTTI Base Class Array'
PUBLIC	??_R0?AVShader@@@8				; Shader `RTTI Type Descriptor'
PUBLIC	??_R0?AVD3D10Shader@@@8				; D3D10Shader `RTTI Type Descriptor'
PUBLIC	??_R2D3D10VertexShader@@8			; D3D10VertexShader::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@D3D10PixelShader@@8		; D3D10PixelShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@D3D10Shader@@8			; D3D10Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVD3D10PixelShader@@@8			; D3D10PixelShader `RTTI Type Descriptor'
PUBLIC	??_R2D3D10PixelShader@@8			; D3D10PixelShader::`RTTI Base Class Array'
PUBLIC	??_7D3D10VertexShader@@6B@			; D3D10VertexShader::`vftable'
PUBLIC	??_7D3D10Shader@@6B@				; D3D10Shader::`vftable'
PUBLIC	??_R4D3D10VertexShader@@6B@			; D3D10VertexShader::`RTTI Complete Object Locator'
PUBLIC	??_C@_1GG@PPOALHLL@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAC?$AAo?$AAp?$AAy?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw?$AAi?$AAt@ ; `string'
PUBLIC	??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	__imp_?tstr_createUTF8@@YAPADPB_W@Z:PROC
EXTRN	__imp__D3DX10CompileFromMemory@52:PROC
EXTRN	__imp_??1Shader@@UAE@XZ:PROC
EXTRN	__imp_??0Shader@@QAE@XZ:PROC
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@
CONST	SEGMENT
??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@ DB 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ':', 00H, ':', 00H, 'A', 00H
	DB	'p', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'A', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, ':', 00H, ' ', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, 'a', 00H, 'r'
	DB	00H, 'r', 00H, 'a', 00H, 'y', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	't', 00H, 'h', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 'o', 00H, 'v', 00H
	DB	'e', 00H, ' ', 00H, 'z', 00H, 'e', 00H, 'r', 00H, 'o', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@PPOALHLL@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAC?$AAo?$AAp?$AAy?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw?$AAi?$AAt@
CONST	SEGMENT
??_C@_1GG@PPOALHLL@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAC?$AAo?$AAp?$AAy?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw?$AAi?$AAt@ DB 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ':', 00H, ':', 00H, 'C', 00H
	DB	'o', 00H, 'p', 00H, 'y', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'a'
	DB	00H, 'y', 00H, ':', 00H, ' ', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'a'
	DB	00H, 'y', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'b', 00H, 'o', 00H, 'v', 00H, 'e', 00H, ' ', 00H
	DB	'z', 00H, 'e', 00H, 'r', 00H, 'o', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_R4D3D10VertexShader@@6B@
rdata$r	SEGMENT
??_R4D3D10VertexShader@@6B@ DD 00H			; D3D10VertexShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10VertexShader@@@8
	DD	FLAT:??_R3D3D10VertexShader@@8
rdata$r	ENDS
;	COMDAT ??_7D3D10Shader@@6B@
CONST	SEGMENT
??_7D3D10Shader@@6B@ DD FLAT:??_R4D3D10Shader@@6B@	; D3D10Shader::`vftable'
	DD	FLAT:??_ED3D10Shader@@UAEPAXI@Z
	DD	FLAT:__purecall
	DD	FLAT:?NumParams@D3D10Shader@@UBEHXZ
	DD	FLAT:?GetParameter@D3D10Shader@@UBEPAXI@Z
	DD	FLAT:?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z
	DD	FLAT:?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z
	DD	FLAT:?SetBool@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetFloat@D3D10Shader@@UAEXPAXM@Z
	DD	FLAT:?SetInt@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z
	DD	FLAT:?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z
	DD	FLAT:?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z
	DD	FLAT:?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z
	DD	FLAT:?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z
	DD	FLAT:?SetValue@D3D10Shader@@UAEXPAXPBXK@Z
	DD	FLAT:?LoadDefaults@D3D10Shader@@UAEXXZ
CONST	ENDS
;	COMDAT ??_7D3D10VertexShader@@6B@
CONST	SEGMENT
??_7D3D10VertexShader@@6B@ DD FLAT:??_R4D3D10VertexShader@@6B@ ; D3D10VertexShader::`vftable'
	DD	FLAT:??_ED3D10VertexShader@@UAEPAXI@Z
	DD	FLAT:?GetType@D3D10VertexShader@@UBE?AW4ShaderType@@XZ
	DD	FLAT:?NumParams@D3D10Shader@@UBEHXZ
	DD	FLAT:?GetParameter@D3D10Shader@@UBEPAXI@Z
	DD	FLAT:?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z
	DD	FLAT:?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z
	DD	FLAT:?SetBool@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetFloat@D3D10Shader@@UAEXPAXM@Z
	DD	FLAT:?SetInt@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z
	DD	FLAT:?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z
	DD	FLAT:?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z
	DD	FLAT:?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z
	DD	FLAT:?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z
	DD	FLAT:?SetValue@D3D10Shader@@UAEXPAXPBXK@Z
	DD	FLAT:?LoadDefaults@D3D10Shader@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R2D3D10PixelShader@@8
rdata$r	SEGMENT
??_R2D3D10PixelShader@@8 DD FLAT:??_R1A@?0A@EA@D3D10PixelShader@@8 ; D3D10PixelShader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@D3D10Shader@@8
	DD	FLAT:??_R1A@?0A@EA@Shader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10PixelShader@@@8
data$r	SEGMENT
??_R0?AVD3D10PixelShader@@@8 DD FLAT:??_7type_info@@6B@	; D3D10PixelShader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10PixelShader@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10Shader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10Shader@@8 DD FLAT:??_R0?AVD3D10Shader@@@8 ; D3D10Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10Shader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10PixelShader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10PixelShader@@8 DD FLAT:??_R0?AVD3D10PixelShader@@@8 ; D3D10PixelShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10PixelShader@@8
rdata$r	ENDS
;	COMDAT ??_R2D3D10VertexShader@@8
rdata$r	SEGMENT
??_R2D3D10VertexShader@@8 DD FLAT:??_R1A@?0A@EA@D3D10VertexShader@@8 ; D3D10VertexShader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@D3D10Shader@@8
	DD	FLAT:??_R1A@?0A@EA@Shader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10Shader@@@8
data$r	SEGMENT
??_R0?AVD3D10Shader@@@8 DD FLAT:??_7type_info@@6B@	; D3D10Shader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10Shader@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AVShader@@@8
data$r	SEGMENT
??_R0?AVShader@@@8 DD FLAT:??_7type_info@@6B@		; Shader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVShader@@', 00H
data$r	ENDS
;	COMDAT ??_R2D3D10Shader@@8
rdata$r	SEGMENT
??_R2D3D10Shader@@8 DD FLAT:??_R1A@?0A@EA@D3D10Shader@@8 ; D3D10Shader::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@Shader@@8
rdata$r	ENDS
;	COMDAT ??_R3D3D10Shader@@8
rdata$r	SEGMENT
??_R3D3D10Shader@@8 DD 00H				; D3D10Shader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2D3D10Shader@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@D3D10VertexShader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@D3D10VertexShader@@8 DD FLAT:??_R0?AVD3D10VertexShader@@@8 ; D3D10VertexShader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3D3D10VertexShader@@8
rdata$r	ENDS
;	COMDAT ??_R4D3D10Shader@@6B@
rdata$r	SEGMENT
??_R4D3D10Shader@@6B@ DD 00H				; D3D10Shader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10Shader@@@8
	DD	FLAT:??_R3D3D10Shader@@8
rdata$r	ENDS
;	COMDAT ??_7D3D10PixelShader@@6B@
CONST	SEGMENT
??_7D3D10PixelShader@@6B@ DD FLAT:??_R4D3D10PixelShader@@6B@ ; D3D10PixelShader::`vftable'
	DD	FLAT:??_ED3D10PixelShader@@UAEPAXI@Z
	DD	FLAT:?GetType@D3D10PixelShader@@UBE?AW4ShaderType@@XZ
	DD	FLAT:?NumParams@D3D10Shader@@UBEHXZ
	DD	FLAT:?GetParameter@D3D10Shader@@UBEPAXI@Z
	DD	FLAT:?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z
	DD	FLAT:?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z
	DD	FLAT:?SetBool@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetFloat@D3D10Shader@@UAEXPAXM@Z
	DD	FLAT:?SetInt@D3D10Shader@@UAEXPAXH@Z
	DD	FLAT:?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z
	DD	FLAT:?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z
	DD	FLAT:?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z
	DD	FLAT:?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z
	DD	FLAT:?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z
	DD	FLAT:?SetValue@D3D10Shader@@UAEXPAXPBXK@Z
	DD	FLAT:?LoadDefaults@D3D10Shader@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R3Shader@@8
rdata$r	SEGMENT
??_R3Shader@@8 DD 00H					; Shader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2Shader@@8
rdata$r	ENDS
;	COMDAT ??_R2Shader@@8
rdata$r	SEGMENT
??_R2Shader@@8 DD FLAT:??_R1A@?0A@EA@Shader@@8		; Shader::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@Shader@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@Shader@@8 DD FLAT:??_R0?AVShader@@@8	; Shader::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3Shader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUShaderSampler@@@8
data$r	SEGMENT
??_R0?AUShaderSampler@@@8 DD FLAT:??_7type_info@@6B@	; ShaderSampler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUShaderSampler@@', 00H
data$r	ENDS
;	COMDAT ??_R0?AUShaderParam@@@8
data$r	SEGMENT
??_R0?AUShaderParam@@@8 DD FLAT:??_7type_info@@6B@	; ShaderParam `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUShaderParam@@', 00H
data$r	ENDS
;	COMDAT ??_R4D3D10PixelShader@@6B@
rdata$r	SEGMENT
??_R4D3D10PixelShader@@6B@ DD 00H			; D3D10PixelShader::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVD3D10PixelShader@@@8
	DD	FLAT:??_R3D3D10PixelShader@@8
rdata$r	ENDS
;	COMDAT ??_R3D3D10VertexShader@@8
rdata$r	SEGMENT
??_R3D3D10VertexShader@@8 DD 00H			; D3D10VertexShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2D3D10VertexShader@@8
rdata$r	ENDS
;	COMDAT ??_R3D3D10PixelShader@@8
rdata$r	SEGMENT
??_R3D3D10PixelShader@@8 DD 00H				; D3D10PixelShader::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2D3D10PixelShader@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVD3D10VertexShader@@@8
data$r	SEGMENT
??_R0?AVD3D10VertexShader@@@8 DD FLAT:??_7type_info@@6B@ ; D3D10VertexShader `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVD3D10VertexShader@@', 00H
	ORG $+2
$SG4294919815 DB 'vs_4_0', 00H
	ORG $+1
$SG4294919814 DB 'vs_4_0_level_9_3', 00H
$SG4294919807 DB 'V', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 'P', 00H, 'r', 00H
	DB	'o', 00H, 'j', 00H, 00H, 00H
	ORG $+2
$SG4294919806 DB 'ps_4_0', 00H
	ORG $+1
$SG4294919805 DB 'ps_4_0_level_9_3', 00H
$SG4294919816 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H
	DB	'%', 00H, 's', 00H, '''', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
	ORG $+2
$SG4294919813 DB 'main', 00H
	ORG $+2
$SG4294919812 DB 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, ':', 00H, 0dH, 00H, 0aH, 00H, 0dH, 00H, 0aH
	DB	00H, '%', 00H, 'S', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H
$SG4294919811 DB 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H
	DB	'''', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e'
	DB	00H, 'd', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294919810 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
	ORG $+3
$SG4294919809 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H
	DB	'%', 00H, 's', 00H, '''', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H
	DB	00H
$SG4294919808 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, 't', 00H, 'e', 00H, 'x', 00H, ' ', 00H, 'l', 00H, 'a'
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 's'
	DB	00H, '''', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%'
	DB	00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294919804 DB 'main', 00H
$SG4294919803 DB 'E', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H
	DB	'''', 00H, ':', 00H, 0dH, 00H, 0aH, 00H, 0dH, 00H, 0aH, 00H, '%'
	DB	00H, 'S', 00H, 0dH, 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG4294919802 DB 'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H
	DB	'l', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H
	DB	' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H
	DB	'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0'
	DB	00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
$SG4294919801 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o'
	DB	00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'p', 00H
	DB	'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H
	DB	'%', 00H, 's', 00H, '''', 00H, 00H, 00H
$SG4294919800 DB 'U', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'i', 00H
	DB	'x', 00H, 'e', 00H, 'l', 00H, ' ', 00H, 's', 00H, 'h', 00H, 'a'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, ',', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 's'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294919799 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':'
	DB	00H, 'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 's', 00H, ':'
	DB	00H, ' ', 00H, 's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '''', 00H
	DB	'%', 00H, 's', 00H, '''', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H
$SG4294919798 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':'
	DB	00H, 'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 's', 00H, ':'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'f', 00H, 'i'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	's', 00H, ',', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 'g', 00H, 'i', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, ':', 00H, ' ', 00H, '%', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't'
	DB	00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' ', 00H
	DB	'%', 00H, 'd', 00H, 00H, 00H
$SG4294919797 DB 'D', 00H, '3', 00H, 'D', 00H, '1', 00H, '0', 00H, 'S', 00H
	DB	'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ':', 00H, ':'
	DB	00H, 'U', 00H, 'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 's', 00H, ':'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H
	DB	' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ',', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H
	DB	'X', 00H, 00H, 00H
PUBLIC	??$_Uninit_copy@DD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<char,char>
PUBLIC	??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z	; std::_Rechecked<char *,char *>
PUBLIC	??$_Uninit_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Uninit_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Unchecked@PAD@std@@YAPADPAD@Z		; std::_Unchecked<char *>
PUBLIC	??$_Uninitialized_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Uninitialized_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<char *,int>
PUBLIC	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
PUBLIC	??$distance@PAD@std@@YAHPAD0@Z			; std::distance<char *>
PUBLIC	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ; std::vector<char,std::allocator<char> >::_Xlen
PUBLIC	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
PUBLIC	?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to
PUBLIC	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
PUBLIC	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ; std::_Ptr_cat<char,char>
PUBLIC	??$_Assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Assign<char *>
PUBLIC	??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ; std::_Iter_cat<char *>
PUBLIC	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear
PUBLIC	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z ; std::vector<char,std::allocator<char> >::assign<char *>
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
PUBLIC	??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
PUBLIC	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
PUBLIC	?Clear@?$ComPtr@UID3D10VertexShader@@@@QAEXXZ	; ComPtr<ID3D10VertexShader>::Clear
PUBLIC	?Kill@?$ComPtr@UID3D10VertexShader@@@@AAEXXZ	; ComPtr<ID3D10VertexShader>::Kill
PUBLIC	?Clear@?$ComPtr@UID3D10Blob@@@@QAEXXZ		; ComPtr<ID3D10Blob>::Clear
PUBLIC	?Kill@?$ComPtr@UID3D10Blob@@@@AAEXXZ		; ComPtr<ID3D10Blob>::Kill
PUBLIC	?Clear@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAEXXZ ; List<D3D10_INPUT_ELEMENT_DESC>::Clear
PUBLIC	?Array@?$List@UShaderParam@@@@QBEPAUShaderParam@@XZ ; List<ShaderParam>::Array
PUBLIC	?Array@?$List@UShaderSampler@@@@QBEPAUShaderSampler@@XZ ; List<ShaderSampler>::Array
PUBLIC	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >
PUBLIC	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy
PUBLIC	?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
PUBLIC	?AppendArray@?$List@E@@QAEXPBEI@Z		; List<unsigned char>::AppendArray
PUBLIC	?CopyArray@?$List@E@@QAEXPBEI@Z			; List<unsigned char>::CopyArray
PUBLIC	?Assign@?$ComPtr@UID3D10VertexShader@@@@QAEPAPAUID3D10VertexShader@@XZ ; ComPtr<ID3D10VertexShader>::Assign
PUBLIC	?Detach@?$ComPtr@UID3D10VertexShader@@@@QAEPAUID3D10VertexShader@@XZ ; ComPtr<ID3D10VertexShader>::Detach
PUBLIC	??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ	; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
PUBLIC	??0?$ComPtr@UID3D10VertexShader@@@@QAE@XZ	; ComPtr<ID3D10VertexShader>::ComPtr<ID3D10VertexShader>
PUBLIC	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ	; ComPtr<ID3D10Blob>::operator->
PUBLIC	??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ	; ComPtr<ID3D10Blob>::operator ID3D10Blob *
PUBLIC	?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::Assign
PUBLIC	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ		; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
PUBLIC	??0?$ComPtr@UID3D10Blob@@@@QAE@XZ		; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>
PUBLIC	?Num@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEIXZ	; List<D3D10_INPUT_ELEMENT_DESC>::Num
PUBLIC	?Array@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEPAUD3D10_INPUT_ELEMENT_DESC@@XZ ; List<D3D10_INPUT_ELEMENT_DESC>::Array
PUBLIC	??1?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ	; List<D3D10_INPUT_ELEMENT_DESC>::~List<D3D10_INPUT_ELEMENT_DESC>
PUBLIC	??0?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ	; List<D3D10_INPUT_ELEMENT_DESC>::List<D3D10_INPUT_ELEMENT_DESC>
PUBLIC	??H?$List@UShaderParam@@@@QBEPAUShaderParam@@I@Z ; List<ShaderParam>::operator+
PUBLIC	??A?$List@UShaderParam@@@@QBEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
PUBLIC	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
PUBLIC	?Clear@?$List@UShaderParam@@@@QAEXXZ		; List<ShaderParam>::Clear
PUBLIC	?TransferFrom@?$List@UShaderParam@@@@QAEXAAV1@@Z ; List<ShaderParam>::TransferFrom
PUBLIC	?Num@?$List@UShaderParam@@@@QBEIXZ		; List<ShaderParam>::Num
PUBLIC	??1?$List@UShaderParam@@@@QAE@XZ		; List<ShaderParam>::~List<ShaderParam>
PUBLIC	??0?$List@UShaderParam@@@@QAE@XZ		; List<ShaderParam>::List<ShaderParam>
PUBLIC	??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z ; List<ShaderSampler>::operator[]
PUBLIC	?Clear@?$List@UShaderSampler@@@@QAEXXZ		; List<ShaderSampler>::Clear
PUBLIC	?TransferFrom@?$List@UShaderSampler@@@@QAEXAAV1@@Z ; List<ShaderSampler>::TransferFrom
PUBLIC	?Num@?$List@UShaderSampler@@@@QBEIXZ		; List<ShaderSampler>::Num
PUBLIC	??1?$List@UShaderSampler@@@@QAE@XZ		; List<ShaderSampler>::~List<ShaderSampler>
PUBLIC	??0?$List@UShaderSampler@@@@QAE@XZ		; List<ShaderSampler>::List<ShaderSampler>
PUBLIC	?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ ; std::vector<char,std::allocator<char> >::front
PUBLIC	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
PUBLIC	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
PUBLIC	??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ	; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
PUBLIC	?Clear@?$List@E@@QAEXXZ				; List<unsigned char>::Clear
PUBLIC	?AppendList@?$List@E@@QAEXABV1@@Z		; List<unsigned char>::AppendList
PUBLIC	?CopyList@?$List@E@@QAEXABV1@@Z			; List<unsigned char>::CopyList
PUBLIC	?SetSize@?$List@E@@QAEHI@Z			; List<unsigned char>::SetSize
PUBLIC	?Num@?$List@E@@QBEIXZ				; List<unsigned char>::Num
PUBLIC	?Array@?$List@E@@QBEPAEXZ			; List<unsigned char>::Array
PUBLIC	??1?$List@E@@QAE@XZ				; List<unsigned char>::~List<unsigned char>
PUBLIC	??0?$List@E@@QAE@XZ				; List<unsigned char>::List<unsigned char>
PUBLIC	?UpdateParams@D3D10Shader@@IAEXXZ		; D3D10Shader::UpdateParams
PUBLIC	?SetValue@D3D10Shader@@UAEXPAXPBXK@Z		; D3D10Shader::SetValue
PUBLIC	?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z ; D3D10Shader::SetTexture
PUBLIC	?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z	; D3D10Shader::SetVector4
PUBLIC	?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z	; D3D10Shader::SetVector2
PUBLIC	?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z	; D3D10Shader::SetVector
PUBLIC	?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z		; D3D10Shader::SetMatrix
PUBLIC	?SetInt@D3D10Shader@@UAEXPAXH@Z			; D3D10Shader::SetInt
PUBLIC	?SetFloat@D3D10Shader@@UAEXPAXM@Z		; D3D10Shader::SetFloat
PUBLIC	?SetBool@D3D10Shader@@UAEXPAXH@Z		; D3D10Shader::SetBool
PUBLIC	?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z ; D3D10Shader::GetParameterInfo
PUBLIC	?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z	; D3D10Shader::GetParameterByName
PUBLIC	?GetParameter@D3D10Shader@@UBEPAXI@Z		; D3D10Shader::GetParameter
PUBLIC	?NumParams@D3D10Shader@@UBEHXZ			; D3D10Shader::NumParams
PUBLIC	??1D3D10PixelShader@@UAE@XZ			; D3D10PixelShader::~D3D10PixelShader
PUBLIC	??1D3D10VertexShader@@UAE@XZ			; D3D10VertexShader::~D3D10VertexShader
PUBLIC	??1D3D10Shader@@UAE@XZ				; D3D10Shader::~D3D10Shader
PUBLIC	?CreatePixelShader@D3D10PixelShader@@CAPAVShader@@PB_W0@Z ; D3D10PixelShader::CreatePixelShader
PUBLIC	??_GD3D10PixelShader@@UAEPAXI@Z			; D3D10PixelShader::`scalar deleting destructor'
PUBLIC	??0D3D10PixelShader@@QAE@XZ			; D3D10PixelShader::D3D10PixelShader
PUBLIC	?CreatePixelShaderFromBlob@D3D10PixelShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10PixelShader::CreatePixelShaderFromBlob
PUBLIC	?CreatePixelShaderBlob@D3D10PixelShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10PixelShader::CreatePixelShaderBlob
PUBLIC	?CreateVertexShader@D3D10VertexShader@@CAPAVShader@@PB_W0@Z ; D3D10VertexShader::CreateVertexShader
PUBLIC	??_GD3D10Shader@@UAEPAXI@Z			; D3D10Shader::`scalar deleting destructor'
PUBLIC	??0D3D10Shader@@QAE@XZ				; D3D10Shader::D3D10Shader
PUBLIC	??_GD3D10VertexShader@@UAEPAXI@Z		; D3D10VertexShader::`scalar deleting destructor'
PUBLIC	??0D3D10VertexShader@@QAE@XZ			; D3D10VertexShader::D3D10VertexShader
PUBLIC	?CreateVertexShaderFromBlob@D3D10VertexShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10VertexShader::CreateVertexShaderFromBlob
PUBLIC	?CreateVertexShaderBlob@D3D10VertexShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10VertexShader::CreateVertexShaderBlob
PUBLIC	?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z ; D3D10Shader::ProcessData
PUBLIC	?LoadDefaults@D3D10Shader@@UAEXXZ		; D3D10Shader::LoadDefaults
PUBLIC	?GetType@D3D10PixelShader@@UBE?AW4ShaderType@@XZ ; D3D10PixelShader::GetType
PUBLIC	?GetType@D3D10VertexShader@@UBE?AW4ShaderType@@XZ ; D3D10VertexShader::GetType
PUBLIC	??1CodeTokenizer@@QAE@XZ			; CodeTokenizer::~CodeTokenizer
PUBLIC	?FreeData@ShaderProcessor@@QAEXXZ		; ShaderProcessor::FreeData
PUBLIC	??1ShaderProcessor@@QAE@XZ			; ShaderProcessor::~ShaderProcessor
PUBLIC	??0ShaderProcessor@@QAE@XZ			; ShaderProcessor::ShaderProcessor
PUBLIC	?FreeData@ShaderSampler@@QAEXXZ			; ShaderSampler::FreeData
PUBLIC	?FreeData@ShaderParam@@QAEXXZ			; ShaderParam::FreeData
PUBLIC	??0CodeTokenizer@@QAE@XZ			; CodeTokenizer::CodeTokenizer
PUBLIC	?LoadTexture@@YAXPAVTexture@@I@Z		; LoadTexture
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
EXTRN	??_ED3D10VertexShader@@UAEPAXI@Z:PROC		; D3D10VertexShader::`vector deleting destructor'
EXTRN	??_ED3D10PixelShader@@UAEPAXI@Z:PROC		; D3D10PixelShader::`vector deleting destructor'
EXTRN	??_ED3D10Shader@@UAEPAXI@Z:PROC			; D3D10Shader::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 43   : 		{	// orphan all iterators

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 44   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 54   : 		{	// adopt this iterator by parent

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 55   : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?LoadTexture@@YAXPAVTexture@@I@Z
_TEXT	SEGMENT
_texture$ = 8						; size = 4
_idTexture$ = 12					; size = 4
?LoadTexture@@YAXPAVTexture@@I@Z PROC			; LoadTexture, COMDAT

; 671  : inline void  LoadTexture(Texture *texture, UINT idTexture=0)    {GS->LoadTexture(texture, idTexture);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _idTexture$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texture$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+72]
	call	eax
	pop	ebp
	ret	0
?LoadTexture@@YAXPAVTexture@@I@Z ENDP			; LoadTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\codetokenizer.h
;	COMDAT ??0CodeTokenizer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CodeTokenizer@@QAE@XZ PROC				; CodeTokenizer::CodeTokenizer, COMDAT
; _this$ = ecx

; 30   :     inline CodeTokenizer() {lpCode = lpTemp = NULL;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CodeTokenizer@@QAE@XZ ENDP				; CodeTokenizer::CodeTokenizer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?FreeData@ShaderParam@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?FreeData@ShaderParam@@QAEXXZ PROC			; ShaderParam::FreeData, COMDAT
; _this$ = ecx

; 154  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  :         name.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ

; 156  :         curValue.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear

; 157  :         defaultValue.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear

; 158  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeData@ShaderParam@@QAEXXZ ENDP			; ShaderParam::FreeData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?FreeData@ShaderSampler@@QAEXXZ
_TEXT	SEGMENT
tv73 = -16						; size = 4
$T1 = -12						; size = 4
_this$ = -8						; size = 4
$T2 = -4						; size = 4
?FreeData@ShaderSampler@@QAEXXZ PROC			; ShaderSampler::FreeData, COMDAT
; _this$ = ecx

; 169  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 170  :         name.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?Clear@String@@QAEAAV1@XZ

; 171  :         delete sampler;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN3@FreeData
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN1@FreeData
$LN3@FreeData:
	mov	DWORD PTR tv73[ebp], 0
$LN1@FreeData:

; 172  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeData@ShaderSampler@@QAEXXZ ENDP			; ShaderSampler::FreeData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ??0ShaderProcessor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ShaderProcessor@@QAE@XZ PROC				; ShaderProcessor::ShaderProcessor, COMDAT
; _this$ = ecx

; 193  :     inline ShaderProcessor()  {zero(this, sizeof(ShaderProcessor));}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CodeTokenizer@@QAE@XZ		; CodeTokenizer::CodeTokenizer
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??0?$List@UShaderSampler@@@@QAE@XZ	; List<ShaderSampler>::List<ShaderSampler>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$List@UShaderParam@@@@QAE@XZ	; List<ShaderParam>::List<ShaderParam>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ ; List<D3D10_INPUT_ELEMENT_DESC>::List<D3D10_INPUT_ELEMENT_DESC>
	push	52					; 00000034H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ShaderProcessor@@QAE@XZ ENDP				; ShaderProcessor::ShaderProcessor
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ??1ShaderProcessor@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ShaderProcessor@@QAE@XZ PROC				; ShaderProcessor::~ShaderProcessor, COMDAT
; _this$ = ecx

; 194  :     inline ~ShaderProcessor() {FreeData();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FreeData@ShaderProcessor@@QAEXXZ	; ShaderProcessor::FreeData
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ ; List<D3D10_INPUT_ELEMENT_DESC>::~List<D3D10_INPUT_ELEMENT_DESC>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$List@UShaderParam@@@@QAE@XZ	; List<ShaderParam>::~List<ShaderParam>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??1?$List@UShaderSampler@@@@QAE@XZ	; List<ShaderSampler>::~List<ShaderSampler>
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CodeTokenizer@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ShaderProcessor@@QAE@XZ ENDP				; ShaderProcessor::~ShaderProcessor
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?FreeData@ShaderProcessor@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = -4						; size = 4
?FreeData@ShaderProcessor@@QAEXXZ PROC			; ShaderProcessor::FreeData, COMDAT
; _this$ = ecx

; 197  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 198  :         UINT i;
; 199  :         for(i=0; i<Samplers.Num(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@FreeData
$LN5@FreeData:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@FreeData:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@UShaderSampler@@@@QBEIXZ	; List<ShaderSampler>::Num
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@FreeData

; 200  :             Samplers[i].FreeData();

	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z ; List<ShaderSampler>::operator[]
	mov	ecx, eax
	call	?FreeData@ShaderSampler@@QAEXXZ		; ShaderSampler::FreeData
	jmp	SHORT $LN5@FreeData
$LN4@FreeData:

; 201  :         Samplers.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Clear@?$List@UShaderSampler@@@@QAEXXZ	; List<ShaderSampler>::Clear

; 202  :         for(i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@FreeData
$LN2@FreeData:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@FreeData:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN1@FreeData

; 203  :             Params[i].FreeData();

	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	ecx, eax
	call	?FreeData@ShaderParam@@QAEXXZ		; ShaderParam::FreeData
	jmp	SHORT $LN2@FreeData
$LN1@FreeData:

; 204  :         Params.Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Clear@?$List@UShaderParam@@@@QAEXXZ	; List<ShaderParam>::Clear

; 205  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?FreeData@ShaderProcessor@@QAEXXZ ENDP			; ShaderProcessor::FreeData
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1CodeTokenizer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CodeTokenizer@@QAE@XZ PROC				; CodeTokenizer::~CodeTokenizer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1CodeTokenizer@@QAE@XZ ENDP				; CodeTokenizer::~CodeTokenizer
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?GetType@D3D10VertexShader@@UBE?AW4ShaderType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@D3D10VertexShader@@UBE?AW4ShaderType@@XZ PROC	; D3D10VertexShader::GetType, COMDAT
; _this$ = ecx

; 292  :     virtual ShaderType GetType() const {return ShaderType_Vertex;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@D3D10VertexShader@@UBE?AW4ShaderType@@XZ ENDP	; D3D10VertexShader::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10system.h
;	COMDAT ?GetType@D3D10PixelShader@@UBE?AW4ShaderType@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetType@D3D10PixelShader@@UBE?AW4ShaderType@@XZ PROC	; D3D10PixelShader::GetType, COMDAT
; _this$ = ecx

; 310  :     virtual ShaderType GetType() const {return ShaderType_Pixel;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, 1
	mov	esp, ebp
	pop	ebp
	ret	0
?GetType@D3D10PixelShader@@UBE?AW4ShaderType@@XZ ENDP	; D3D10PixelShader::GetType
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?LoadDefaults@D3D10Shader@@UAEXXZ
_TEXT	SEGMENT
_this$ = -12						; size = 4
_param$1 = -8						; size = 4
_i$2 = -4						; size = 4
?LoadDefaults@D3D10Shader@@UAEXXZ PROC			; D3D10Shader::LoadDefaults, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 24   :     for(UINT i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@LoadDefaul
$LN3@LoadDefaul:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@LoadDefaul:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN5@LoadDefaul

; 25   :     {
; 26   :         ShaderParam &param = Params[i];

	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	DWORD PTR _param$1[ebp], eax

; 27   : 
; 28   :         if(param.defaultValue.Num())

	mov	ecx, DWORD PTR _param$1[ebp]
	add	ecx, 32					; 00000020H
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	test	eax, eax
	je	SHORT $LN1@LoadDefaul

; 29   :         {
; 30   :             param.bChanged = TRUE;

	mov	edx, DWORD PTR _param$1[ebp]
	mov	DWORD PTR [edx+40], 1

; 31   :             param.curValue.CopyList(param.defaultValue);

	mov	eax, DWORD PTR _param$1[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _param$1[ebp]
	add	ecx, 24					; 00000018H
	call	?CopyList@?$List@E@@QAEXABV1@@Z		; List<unsigned char>::CopyList
$LN1@LoadDefaul:

; 32   :         }
; 33   :     }

	jmp	SHORT $LN3@LoadDefaul
$LN5@LoadDefaul:

; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?LoadDefaults@D3D10Shader@@UAEXXZ ENDP			; D3D10Shader::LoadDefaults
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z
_TEXT	SEGMENT
_param$1 = -48						; size = 4
_err$2 = -44						; size = 4
tv145 = -40						; size = 4
tv83 = -36						; size = 4
_i$3 = -32						; size = 4
_this$ = -28						; size = 4
_bd$4 = -24						; size = 20
__$ArrayPad$ = -4					; size = 4
_processor$ = 8						; size = 4
_lpFileName$ = 12					; size = 4
?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z PROC ; D3D10Shader::ProcessData, COMDAT
; _this$ = ecx

; 37   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 48					; 00000030H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 38   :     Params.TransferFrom(processor.Params);

	mov	eax, DWORD PTR _processor$[ebp]
	add	eax, 28					; 0000001cH
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?TransferFrom@?$List@UShaderParam@@@@QAEXAAV1@@Z ; List<ShaderParam>::TransferFrom

; 39   :     Samplers.TransferFrom(processor.Samplers);

	mov	ecx, DWORD PTR _processor$[ebp]
	add	ecx, 20					; 00000014H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?TransferFrom@?$List@UShaderSampler@@@@QAEXAAV1@@Z ; List<ShaderSampler>::TransferFrom

; 40   : 
; 41   :     constantSize = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 0

; 42   :     for(UINT i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$3[ebp], 0
	jmp	SHORT $LN13@ProcessDat
$LN12@ProcessDat:
	mov	eax, DWORD PTR _i$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i$3[ebp], eax
$LN13@ProcessDat:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$3[ebp], eax
	jae	$LN11@ProcessDat

; 43   :     {
; 44   :         ShaderParam &param = Params[i];

	mov	ecx, DWORD PTR _i$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	DWORD PTR _param$1[ebp], eax

; 45   : 
; 46   :         switch(param.type)

	mov	edx, DWORD PTR _param$1[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR tv83[ebp], eax
	mov	ecx, DWORD PTR tv83[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv83[ebp], ecx
	cmp	DWORD PTR tv83[ebp], 8
	ja	SHORT $LN9@ProcessDat
	mov	edx, DWORD PTR tv83[ebp]
	jmp	DWORD PTR $LN16@ProcessDat[edx*4]
$LN8@ProcessDat:

; 47   :         {
; 48   :             case Parameter_Bool:
; 49   :             case Parameter_Float:
; 50   :             case Parameter_Int:         constantSize += sizeof(float); break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN9@ProcessDat
$LN7@ProcessDat:

; 51   :             case Parameter_Vector2:     constantSize += sizeof(float)*2; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN9@ProcessDat
$LN6@ProcessDat:

; 52   :             case Parameter_Vector:      constantSize += sizeof(float)*3; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN9@ProcessDat
$LN5@ProcessDat:

; 53   :             case Parameter_Vector4:     constantSize += sizeof(float)*4; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 16					; 00000010H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN9@ProcessDat
$LN4@ProcessDat:

; 54   :             case Parameter_Matrix3x3:   constantSize += sizeof(float)*3*3; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 36					; 00000024H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
	jmp	SHORT $LN9@ProcessDat
$LN3@ProcessDat:

; 55   :             case Parameter_Matrix:      constantSize += sizeof(float)*4*4; break;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	add	ecx, 64					; 00000040H
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], ecx
$LN9@ProcessDat:

; 56   :         }
; 57   :     }

	jmp	$LN12@ProcessDat
$LN11@ProcessDat:

; 58   : 
; 59   :     if(constantSize)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@ProcessDat

; 60   :     {
; 61   :         D3D10_BUFFER_DESC bd;
; 62   :         zero(&bd, sizeof(bd));

	push	20					; 00000014H
	lea	ecx, DWORD PTR _bd$4[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 63   : 
; 64   :         bd.ByteWidth        = (constantSize+15)&0xFFFFFFF0; //align to 128bit boundry

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	add	eax, 15					; 0000000fH
	and	eax, -16				; fffffff0H
	mov	DWORD PTR _bd$4[ebp], eax

; 65   :         bd.Usage            = D3D10_USAGE_DYNAMIC;

	mov	DWORD PTR _bd$4[ebp+4], 2

; 66   :         bd.BindFlags        = D3D10_BIND_CONSTANT_BUFFER;

	mov	DWORD PTR _bd$4[ebp+8], 4

; 67   :         bd.CPUAccessFlags   = D3D10_CPU_ACCESS_WRITE;

	mov	DWORD PTR _bd$4[ebp+12], 65536		; 00010000H

; 68   : 
; 69   :         HRESULT err = GetD3D()->CreateBuffer(&bd, NULL, &constantBuffer);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	push	0
	lea	edx, DWORD PTR _bd$4[ebp]
	push	edx
	mov	eax, DWORD PTR tv145[ebp]
	push	eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+284]
	call	eax
	mov	DWORD PTR _err$2[ebp], eax

; 70   :         if(FAILED(err))

	cmp	DWORD PTR _err$2[ebp], 0
	jge	SHORT $LN2@ProcessDat

; 71   :         {
; 72   :             AppWarning(TEXT("Unable to create constant buffer for shader '%s', result = %08lX"), lpFileName, err);

	mov	ecx, DWORD PTR _err$2[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919816
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 73   :             return false;

	xor	al, al
	jmp	SHORT $LN14@ProcessDat
$LN2@ProcessDat:

; 74   :         }
; 75   :     }
; 76   : 
; 77   :     LoadDefaults();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	call	eax

; 78   : 
; 79   :     return true;

	mov	al, 1
$LN14@ProcessDat:

; 80   : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN16@ProcessDat:
	DD	$LN8@ProcessDat
	DD	$LN8@ProcessDat
	DD	$LN8@ProcessDat
	DD	$LN9@ProcessDat
	DD	$LN7@ProcessDat
	DD	$LN6@ProcessDat
	DD	$LN5@ProcessDat
	DD	$LN4@ProcessDat
	DD	$LN3@ProcessDat
?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z ENDP ; D3D10Shader::ProcessData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreateVertexShaderBlob@D3D10VertexShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z
_TEXT	SEGMENT
_lpErrors$1 = -72					; size = 4
tv132 = -68						; size = 4
_lpVSType$ = -64					; size = 4
tv204 = -60						; size = 4
_d3d10Sys$ = -56					; size = 4
tv182 = -52						; size = 4
tv166 = -48						; size = 4
tv173 = -44						; size = 4
_err$ = -40						; size = 4
tv152 = -36						; size = 4
tv144 = -32						; size = 4
_lpAnsiFileName$ = -28					; size = 4
tv71 = -24						; size = 4
_lpAnsiShader$ = -20					; size = 4
tv201 = -16						; size = 4
_errorMessages$ = -12					; size = 4
_shaderBlob$ = -8					; size = 4
tv207 = -1						; size = 1
_blob$ = 8						; size = 4
_lpShader$ = 12						; size = 4
_lpFileName$ = 16					; size = 4
?CreateVertexShaderBlob@D3D10VertexShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z PROC ; D3D10VertexShader::CreateVertexShaderBlob, COMDAT

; 83   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi

; 84   :     D3D10System *d3d10Sys = static_cast<D3D10System*>(GS);

	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _d3d10Sys$[ebp], ecx

; 85   :     LPCSTR lpVSType = d3d10Sys->bDisableCompatibilityMode ? "vs_4_0" : "vs_4_0_level_9_3";

	mov	edx, DWORD PTR _d3d10Sys$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN6@CreateVert
	mov	DWORD PTR tv71[ebp], OFFSET $SG4294919815
	jmp	SHORT $LN7@CreateVert
$LN6@CreateVert:
	mov	DWORD PTR tv71[ebp], OFFSET $SG4294919814
$LN7@CreateVert:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _lpVSType$[ebp], ecx

; 86   : 
; 87   :     ComPtr<ID3D10Blob> errorMessages, shaderBlob;

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??0?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??0?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>

; 88   : 
; 89   :     LPSTR lpAnsiShader = tstr_createUTF8(lpShader);

	mov	edx, DWORD PTR _lpShader$[ebp]
	push	edx
	call	DWORD PTR __imp_?tstr_createUTF8@@YAPADPB_W@Z
	add	esp, 4
	mov	DWORD PTR _lpAnsiShader$[ebp], eax

; 90   :     LPSTR lpAnsiFileName = tstr_createUTF8(lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	call	DWORD PTR __imp_?tstr_createUTF8@@YAPADPB_W@Z
	add	esp, 4
	mov	DWORD PTR _lpAnsiFileName$[ebp], eax

; 91   : 
; 92   :     HRESULT err = D3DX10CompileFromMemory(lpAnsiShader, strlen(lpAnsiShader), lpAnsiFileName, NULL, NULL, "main", lpVSType, D3D10_SHADER_OPTIMIZATION_LEVEL3, 0, NULL, shaderBlob.Assign(), errorMessages.Assign(), NULL);

	mov	ecx, DWORD PTR _lpAnsiShader$[ebp]
	mov	DWORD PTR tv201[ebp], ecx
	mov	edx, DWORD PTR tv201[ebp]
	add	edx, 1
	mov	DWORD PTR tv204[ebp], edx
$LL8@CreateVert:
	mov	eax, DWORD PTR tv201[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv207[ebp], cl
	add	DWORD PTR tv201[ebp], 1
	cmp	BYTE PTR tv207[ebp], 0
	jne	SHORT $LL8@CreateVert
	mov	edx, DWORD PTR tv201[ebp]
	sub	edx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv132[ebp], edx
	push	0
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::Assign
	push	eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::Assign
	push	eax
	push	0
	push	0
	push	32768					; 00008000H
	mov	eax, DWORD PTR _lpVSType$[ebp]
	push	eax
	push	OFFSET $SG4294919813
	push	0
	push	0
	mov	ecx, DWORD PTR _lpAnsiFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	mov	eax, DWORD PTR _lpAnsiShader$[ebp]
	push	eax
	call	DWORD PTR __imp__D3DX10CompileFromMemory@52
	mov	DWORD PTR _err$[ebp], eax

; 93   : 
; 94   :     Free(lpAnsiFileName);

	mov	ecx, DWORD PTR _lpAnsiFileName$[ebp]
	push	ecx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 95   :     Free(lpAnsiShader);

	mov	edx, DWORD PTR _lpAnsiShader$[ebp]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 96   : 
; 97   :     if (FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	$LN3@CreateVert

; 98   :     {
; 99   :         if (errorMessages)

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator ID3D10Blob *
	test	eax, eax
	je	SHORT $LN2@CreateVert

; 100  :         {
; 101  :             if (errorMessages->GetBufferSize())

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	test	eax, eax
	je	SHORT $LN2@CreateVert

; 102  :             {
; 103  :                 LPSTR lpErrors = (LPSTR)errorMessages->GetBufferPointer();

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	mov	DWORD PTR _lpErrors$1[ebp], eax

; 104  :                 Log(TEXT("Error compiling vertex shader '%s':\r\n\r\n%S\r\n"), lpFileName, lpErrors);

	mov	edx, DWORD PTR _lpErrors$1[ebp]
	push	edx
	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	push	OFFSET $SG4294919812
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN2@CreateVert:

; 105  :             }
; 106  :         }
; 107  : 
; 108  :         CrashError(TEXT("Compilation of vertex shader '%s' failed, result = %08lX"), lpFileName, err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919811
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 109  :         return;

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	jmp	SHORT $LN5@CreateVert
$LN3@CreateVert:

; 110  :     }
; 111  : 
; 112  :     blob.assign((char*)shaderBlob->GetBufferPointer(), (char*)shaderBlob->GetBufferPointer() + shaderBlob->GetBufferSize());

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv166[ebp], eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv173[ebp], eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv182[ebp], eax
	mov	eax, DWORD PTR tv173[ebp]
	push	eax
	mov	ecx, DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR tv166[ebp]
	push	ecx
	mov	edx, DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	eax, esi
	push	eax
	mov	edx, DWORD PTR tv182[ebp]
	push	edx
	mov	eax, DWORD PTR tv182[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z ; std::vector<char,std::allocator<char> >::assign<char *>

; 113  : }

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
$LN5@CreateVert:
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CreateVertexShaderBlob@D3D10VertexShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ENDP ; D3D10VertexShader::CreateVertexShaderBlob
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreateVertexShaderFromBlob@D3D10VertexShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z
_TEXT	SEGMENT
_shaderProcessor$ = -116				; size = 52
$T1 = -64						; size = 4
$T2 = -60						; size = 4
tv184 = -56						; size = 4
$T3 = -52						; size = 4
_vShaderLayout$ = -48					; size = 4
$T4 = -44						; size = 4
$T5 = -40						; size = 4
$T6 = -36						; size = 4
tv159 = -32						; size = 4
$T7 = -28						; size = 4
tv133 = -24						; size = 4
tv82 = -20						; size = 4
$T8 = -16						; size = 4
_err$ = -12						; size = 4
_vShader$ = -8						; size = 4
_shader$ = -4						; size = 4
_blob$ = 8						; size = 4
_lpShader$ = 12						; size = 4
_lpFileName$ = 16					; size = 4
?CreateVertexShaderFromBlob@D3D10VertexShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z PROC ; D3D10VertexShader::CreateVertexShaderFromBlob, COMDAT

; 116  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 116				; 00000074H

; 117  :     ShaderProcessor shaderProcessor;

	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??0ShaderProcessor@@QAE@XZ		; ShaderProcessor::ShaderProcessor

; 118  :     if (!shaderProcessor.ProcessShader(lpShader, lpFileName))

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	?ProcessShader@ShaderProcessor@@QAEHPB_W0@Z ; ShaderProcessor::ProcessShader
	test	eax, eax
	jne	SHORT $LN5@CreateVert

; 119  :         AppWarning(TEXT("Unable to process vertex shader '%s'"), lpFileName); //don't exit, leave it to the actual shader compiler to tell the errors

	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919810
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN5@CreateVert:

; 120  : 
; 121  :     //-----------------------------------------------
; 122  : 
; 123  :     if (!blob.size())

	mov	ecx, DWORD PTR _blob$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	test	eax, eax
	jne	SHORT $LN4@CreateVert

; 124  :         return nullptr;

	mov	DWORD PTR $T6[ebp], 0
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T6[ebp]
	jmp	$LN7@CreateVert
$LN4@CreateVert:

; 125  : 
; 126  :     ComPtr<ID3D10VertexShader> vShader;

	lea	ecx, DWORD PTR _vShader$[ebp]
	call	??0?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ; ComPtr<ID3D10VertexShader>::ComPtr<ID3D10VertexShader>

; 127  :     ID3D10InputLayout *vShaderLayout;
; 128  : 
; 129  :     HRESULT err = GetD3D()->CreateVertexShader(&blob.front(), blob.size(), vShader.Assign());

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv82[ebp], eax
	lea	ecx, DWORD PTR _vShader$[ebp]
	call	?Assign@?$ComPtr@UID3D10VertexShader@@@@QAEPAPAUID3D10VertexShader@@XZ ; ComPtr<ID3D10VertexShader>::Assign
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ ; std::vector<char,std::allocator<char> >::front
	push	eax
	mov	eax, DWORD PTR tv82[ebp]
	push	eax
	mov	ecx, DWORD PTR tv82[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+316]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 130  :     if (FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@CreateVert

; 131  :     {
; 132  :         CrashError(TEXT("Unable to create vertex shader '%s', result = %08lX"), lpFileName, err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919809
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 133  :         return NULL;

	mov	DWORD PTR $T5[ebp], 0
	lea	ecx, DWORD PTR _vShader$[ebp]
	call	??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T5[ebp]
	jmp	$LN7@CreateVert
$LN3@CreateVert:

; 134  :     }
; 135  : 
; 136  :     err = GetD3D()->CreateInputLayout(shaderProcessor.generatedLayout.Array(), shaderProcessor.generatedLayout.Num(), &blob.front(), blob.size(), &vShaderLayout);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv133[ebp], eax
	lea	eax, DWORD PTR _vShaderLayout$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ ; std::vector<char,std::allocator<char> >::front
	push	eax
	lea	ecx, DWORD PTR _shaderProcessor$[ebp+36]
	call	?Num@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEIXZ ; List<D3D10_INPUT_ELEMENT_DESC>::Num
	push	eax
	lea	ecx, DWORD PTR _shaderProcessor$[ebp+36]
	call	?Array@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEPAUD3D10_INPUT_ELEMENT_DESC@@XZ ; List<D3D10_INPUT_ELEMENT_DESC>::Array
	push	eax
	mov	ecx, DWORD PTR tv133[ebp]
	push	ecx
	mov	edx, DWORD PTR tv133[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+312]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 137  :     if (FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@CreateVert

; 138  :     {
; 139  :         CrashError(TEXT("Unable to create vertex layout for vertex shader '%s', result = %08lX"), lpFileName, err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	push	OFFSET $SG4294919808
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 140  :         return NULL;

	mov	DWORD PTR $T4[ebp], 0
	lea	ecx, DWORD PTR _vShader$[ebp]
	call	??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN7@CreateVert
$LN2@CreateVert:

; 141  :     }
; 142  : 
; 143  :     //-----------------------------------------------
; 144  : 
; 145  :     D3D10VertexShader *shader = new D3D10VertexShader;

	push	48					; 00000030H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN8@CreateVert
	mov	ecx, DWORD PTR $T7[ebp]
	call	??0D3D10VertexShader@@QAE@XZ
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN9@CreateVert
$LN8@CreateVert:
	mov	DWORD PTR tv159[ebp], 0
$LN9@CreateVert:
	mov	ecx, DWORD PTR tv159[ebp]
	mov	DWORD PTR _shader$[ebp], ecx

; 146  :     shader->vertexShader = vShader.Detach();

	lea	ecx, DWORD PTR _vShader$[ebp]
	call	?Detach@?$ComPtr@UID3D10VertexShader@@@@QAEPAUID3D10VertexShader@@XZ ; ComPtr<ID3D10VertexShader>::Detach
	mov	edx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR [edx+32], eax

; 147  :     shader->inputLayout = vShaderLayout;

	mov	eax, DWORD PTR _shader$[ebp]
	mov	ecx, DWORD PTR _vShaderLayout$[ebp]
	mov	DWORD PTR [eax+36], ecx

; 148  :     if (!shader->ProcessData(shaderProcessor, lpFileName))

	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	lea	eax, DWORD PTR _shaderProcessor$[ebp]
	push	eax
	mov	ecx, DWORD PTR _shader$[ebp]
	call	?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z ; D3D10Shader::ProcessData
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN1@CreateVert

; 149  :     {
; 150  :         delete shader;

	mov	edx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T8[ebp], eax
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN10@CreateVert
	push	1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv184[ebp], eax
	jmp	SHORT $LN11@CreateVert
$LN10@CreateVert:
	mov	DWORD PTR tv184[ebp], 0
$LN11@CreateVert:

; 151  :         return NULL;

	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR _vShader$[ebp]
	call	??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN7@CreateVert
$LN1@CreateVert:

; 152  :     }
; 153  : 
; 154  :     shader->bHasNormals = shaderProcessor.bHasNormals;

	mov	ecx, DWORD PTR _shader$[ebp]
	mov	dl, BYTE PTR _shaderProcessor$[ebp+44]
	mov	BYTE PTR [ecx+40], dl

; 155  :     shader->bHasColors = shaderProcessor.bHasColors;

	mov	eax, DWORD PTR _shader$[ebp]
	mov	cl, BYTE PTR _shaderProcessor$[ebp+45]
	mov	BYTE PTR [eax+41], cl

; 156  :     shader->bHasTangents = shaderProcessor.bHasTangents;

	mov	edx, DWORD PTR _shader$[ebp]
	mov	al, BYTE PTR _shaderProcessor$[ebp+46]
	mov	BYTE PTR [edx+42], al

; 157  :     shader->nTextureCoords = shaderProcessor.numTextureCoords;

	mov	ecx, DWORD PTR _shader$[ebp]
	mov	edx, DWORD PTR _shaderProcessor$[ebp+48]
	mov	DWORD PTR [ecx+44], edx

; 158  :     shader->hViewProj = shader->GetParameterByName(TEXT("ViewProj"));

	push	OFFSET $SG4294919807
	mov	eax, DWORD PTR _shader$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _shader$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	ecx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 159  : 
; 160  :     return shader;

	mov	edx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR $T1[ebp], edx
	lea	ecx, DWORD PTR _vShader$[ebp]
	call	??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T1[ebp]
$LN7@CreateVert:

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateVertexShaderFromBlob@D3D10VertexShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ENDP ; D3D10VertexShader::CreateVertexShaderFromBlob
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10VertexShader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10VertexShader@@QAE@XZ PROC			; D3D10VertexShader::D3D10VertexShader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3D10Shader@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10VertexShader@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10VertexShader@@QAE@XZ ENDP			; D3D10VertexShader::D3D10VertexShader
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10VertexShader@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10VertexShader@@UAEPAXI@Z PROC			; D3D10VertexShader::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10VertexShader@@UAE@XZ		; D3D10VertexShader::~D3D10VertexShader
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10VertexShader@@UAEPAXI@Z ENDP			; D3D10VertexShader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10Shader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10Shader@@QAE@XZ PROC				; D3D10Shader::D3D10Shader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0Shader@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10Shader@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$List@UShaderParam@@@@QAE@XZ	; List<ShaderParam>::List<ShaderParam>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$List@UShaderSampler@@@@QAE@XZ	; List<ShaderSampler>::List<ShaderSampler>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10Shader@@QAE@XZ ENDP				; D3D10Shader::D3D10Shader
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10Shader@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10Shader@@UAEPAXI@Z PROC				; D3D10Shader::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10Shader@@UAE@XZ			; D3D10Shader::~D3D10Shader
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10Shader@@UAEPAXI@Z ENDP				; D3D10Shader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreateVertexShader@D3D10VertexShader@@CAPAVShader@@PB_W0@Z
_TEXT	SEGMENT
_blob$ = -16						; size = 12
$T1 = -4						; size = 4
_lpShader$ = 8						; size = 4
_lpFileName$ = 12					; size = 4
?CreateVertexShader@D3D10VertexShader@@CAPAVShader@@PB_W0@Z PROC ; D3D10VertexShader::CreateVertexShader, COMDAT

; 164  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 165  :     ShaderBlob blob;

	lea	ecx, DWORD PTR _blob$[ebp]
	call	??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >

; 166  :     CreateVertexShaderBlob(blob, lpShader, lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	edx, DWORD PTR _blob$[ebp]
	push	edx
	call	?CreateVertexShaderBlob@D3D10VertexShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10VertexShader::CreateVertexShaderBlob
	add	esp, 12					; 0000000cH

; 167  :     return CreateVertexShaderFromBlob(blob, lpShader, lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	edx, DWORD PTR _blob$[ebp]
	push	edx
	call	?CreateVertexShaderFromBlob@D3D10VertexShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10VertexShader::CreateVertexShaderFromBlob
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR _blob$[ebp]
	call	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]

; 168  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreateVertexShader@D3D10VertexShader@@CAPAVShader@@PB_W0@Z ENDP ; D3D10VertexShader::CreateVertexShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreatePixelShaderBlob@D3D10PixelShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z
_TEXT	SEGMENT
_lpErrors$1 = -72					; size = 4
tv132 = -68						; size = 4
_lpPSType$ = -64					; size = 4
tv204 = -60						; size = 4
_d3d10Sys$ = -56					; size = 4
tv182 = -52						; size = 4
tv166 = -48						; size = 4
tv173 = -44						; size = 4
_err$ = -40						; size = 4
tv152 = -36						; size = 4
tv144 = -32						; size = 4
_lpAnsiFileName$ = -28					; size = 4
tv71 = -24						; size = 4
_lpAnsiShader$ = -20					; size = 4
tv201 = -16						; size = 4
_errorMessages$ = -12					; size = 4
_shaderBlob$ = -8					; size = 4
tv207 = -1						; size = 1
_blob$ = 8						; size = 4
_lpShader$ = 12						; size = 4
_lpFileName$ = 16					; size = 4
?CreatePixelShaderBlob@D3D10PixelShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z PROC ; D3D10PixelShader::CreatePixelShaderBlob, COMDAT

; 171  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	esi

; 172  :     D3D10System *d3d10Sys = static_cast<D3D10System*>(GS);

	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _d3d10Sys$[ebp], ecx

; 173  :     LPCSTR lpPSType = d3d10Sys->bDisableCompatibilityMode ? "ps_4_0" : "ps_4_0_level_9_3";

	mov	edx, DWORD PTR _d3d10Sys$[ebp]
	movzx	eax, BYTE PTR [edx+96]
	test	eax, eax
	je	SHORT $LN6@CreatePixe
	mov	DWORD PTR tv71[ebp], OFFSET $SG4294919806
	jmp	SHORT $LN7@CreatePixe
$LN6@CreatePixe:
	mov	DWORD PTR tv71[ebp], OFFSET $SG4294919805
$LN7@CreatePixe:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _lpPSType$[ebp], ecx

; 174  : 
; 175  :     ComPtr<ID3D10Blob> errorMessages, shaderBlob;

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??0?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??0?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>

; 176  : 
; 177  :     LPSTR lpAnsiShader = tstr_createUTF8(lpShader);

	mov	edx, DWORD PTR _lpShader$[ebp]
	push	edx
	call	DWORD PTR __imp_?tstr_createUTF8@@YAPADPB_W@Z
	add	esp, 4
	mov	DWORD PTR _lpAnsiShader$[ebp], eax

; 178  :     LPSTR lpAnsiFileName = tstr_createUTF8(lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	call	DWORD PTR __imp_?tstr_createUTF8@@YAPADPB_W@Z
	add	esp, 4
	mov	DWORD PTR _lpAnsiFileName$[ebp], eax

; 179  : 
; 180  :     HRESULT err = D3DX10CompileFromMemory(lpAnsiShader, strlen(lpAnsiShader), lpAnsiFileName, NULL, NULL, "main", lpPSType, D3D10_SHADER_OPTIMIZATION_LEVEL3, 0, NULL, shaderBlob.Assign(), errorMessages.Assign(), NULL);

	mov	ecx, DWORD PTR _lpAnsiShader$[ebp]
	mov	DWORD PTR tv201[ebp], ecx
	mov	edx, DWORD PTR tv201[ebp]
	add	edx, 1
	mov	DWORD PTR tv204[ebp], edx
$LL8@CreatePixe:
	mov	eax, DWORD PTR tv201[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR tv207[ebp], cl
	add	DWORD PTR tv201[ebp], 1
	cmp	BYTE PTR tv207[ebp], 0
	jne	SHORT $LL8@CreatePixe
	mov	edx, DWORD PTR tv201[ebp]
	sub	edx, DWORD PTR tv204[ebp]
	mov	DWORD PTR tv132[ebp], edx
	push	0
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::Assign
	push	eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::Assign
	push	eax
	push	0
	push	0
	push	32768					; 00008000H
	mov	eax, DWORD PTR _lpPSType$[ebp]
	push	eax
	push	OFFSET $SG4294919804
	push	0
	push	0
	mov	ecx, DWORD PTR _lpAnsiFileName$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv132[ebp]
	push	edx
	mov	eax, DWORD PTR _lpAnsiShader$[ebp]
	push	eax
	call	DWORD PTR __imp__D3DX10CompileFromMemory@52
	mov	DWORD PTR _err$[ebp], eax

; 181  : 
; 182  :     Free(lpAnsiFileName);

	mov	ecx, DWORD PTR _lpAnsiFileName$[ebp]
	push	ecx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 183  :     Free(lpAnsiShader);

	mov	edx, DWORD PTR _lpAnsiShader$[ebp]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 184  : 
; 185  :     if (FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	$LN3@CreatePixe

; 186  :     {
; 187  :         if (errorMessages)

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator ID3D10Blob *
	test	eax, eax
	je	SHORT $LN2@CreatePixe

; 188  :         {
; 189  :             if (errorMessages->GetBufferSize())

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR tv144[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	test	eax, eax
	je	SHORT $LN2@CreatePixe

; 190  :             {
; 191  :                 LPSTR lpErrors = (LPSTR)errorMessages->GetBufferPointer();

	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv152[ebp], eax
	mov	ecx, DWORD PTR tv152[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR tv152[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	mov	DWORD PTR _lpErrors$1[ebp], eax

; 192  :                 Log(TEXT("Error compiling pixel shader '%s':\r\n\r\n%S\r\n"), lpFileName, lpErrors);

	mov	edx, DWORD PTR _lpErrors$1[ebp]
	push	edx
	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	push	OFFSET $SG4294919803
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 12					; 0000000cH
$LN2@CreatePixe:

; 193  :             }
; 194  :         }
; 195  : 
; 196  :         CrashError(TEXT("Compilation of pixel shader '%s' failed, result = %08lX"), lpFileName, err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919802
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 197  :         return;

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	jmp	SHORT $LN5@CreatePixe
$LN3@CreatePixe:

; 198  :     }
; 199  : 
; 200  :     blob.assign((char*)shaderBlob->GetBufferPointer(), (char*)shaderBlob->GetBufferPointer() + shaderBlob->GetBufferSize());

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv166[ebp], eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv173[ebp], eax
	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ; ComPtr<ID3D10Blob>::operator->
	mov	DWORD PTR tv182[ebp], eax
	mov	eax, DWORD PTR tv173[ebp]
	push	eax
	mov	ecx, DWORD PTR tv173[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	esi, eax
	mov	ecx, DWORD PTR tv166[ebp]
	push	ecx
	mov	edx, DWORD PTR tv166[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	add	eax, esi
	push	eax
	mov	edx, DWORD PTR tv182[ebp]
	push	edx
	mov	eax, DWORD PTR tv182[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z ; std::vector<char,std::allocator<char> >::assign<char *>

; 201  : }

	lea	ecx, DWORD PTR _shaderBlob$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
	lea	ecx, DWORD PTR _errorMessages$[ebp]
	call	??1?$ComPtr@UID3D10Blob@@@@QAE@XZ	; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
$LN5@CreatePixe:
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?CreatePixelShaderBlob@D3D10PixelShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ENDP ; D3D10PixelShader::CreatePixelShaderBlob
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreatePixelShaderFromBlob@D3D10PixelShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z
_TEXT	SEGMENT
_shaderProcessor$ = -104				; size = 52
$T1 = -52						; size = 4
$T2 = -48						; size = 4
tv153 = -44						; size = 4
$T3 = -40						; size = 4
_pShader$ = -36						; size = 4
$T4 = -32						; size = 4
$T5 = -28						; size = 4
tv131 = -24						; size = 4
$T6 = -20						; size = 4
_err$ = -16						; size = 4
tv79 = -12						; size = 4
$T7 = -8						; size = 4
_shader$ = -4						; size = 4
_blob$ = 8						; size = 4
_lpShader$ = 12						; size = 4
_lpFileName$ = 16					; size = 4
?CreatePixelShaderFromBlob@D3D10PixelShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z PROC ; D3D10PixelShader::CreatePixelShaderFromBlob, COMDAT

; 204  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 104				; 00000068H

; 205  :     ShaderProcessor shaderProcessor;

	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??0ShaderProcessor@@QAE@XZ		; ShaderProcessor::ShaderProcessor

; 206  :     if (!shaderProcessor.ProcessShader(lpShader, lpFileName))

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	?ProcessShader@ShaderProcessor@@QAEHPB_W0@Z ; ShaderProcessor::ProcessShader
	test	eax, eax
	jne	SHORT $LN4@CreatePixe

; 207  :         AppWarning(TEXT("Unable to process pixel shader '%s'"), lpFileName); //don't exit, leave it to the actual shader compiler to tell the errors

	mov	edx, DWORD PTR _lpFileName$[ebp]
	push	edx
	push	OFFSET $SG4294919801
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN4@CreatePixe:

; 208  : 
; 209  :     //-----------------------------------------------
; 210  : 
; 211  :     if (!blob.size())

	mov	ecx, DWORD PTR _blob$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	test	eax, eax
	jne	SHORT $LN3@CreatePixe

; 212  :         return nullptr;

	mov	DWORD PTR $T5[ebp], 0
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T5[ebp]
	jmp	$LN6@CreatePixe
$LN3@CreatePixe:

; 213  : 
; 214  :     ID3D10PixelShader *pShader;
; 215  : 
; 216  :     HRESULT err = GetD3D()->CreatePixelShader(&blob.front(), blob.size(), &pShader);

	call	?GetD3D@@YAPAUID3D10Device@@XZ		; GetD3D
	mov	DWORD PTR tv79[ebp], eax
	lea	eax, DWORD PTR _pShader$[ebp]
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::size
	push	eax
	mov	ecx, DWORD PTR _blob$[ebp]
	call	?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ ; std::vector<char,std::allocator<char> >::front
	push	eax
	mov	ecx, DWORD PTR tv79[ebp]
	push	ecx
	mov	edx, DWORD PTR tv79[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+328]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 217  :     if (FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@CreatePixe

; 218  :     {
; 219  :         CrashError(TEXT("Unable to create pixel shader '%s', result = %08lX"), lpFileName, err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	push	OFFSET $SG4294919800
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ

; 220  :         return NULL;

	mov	DWORD PTR $T4[ebp], 0
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T4[ebp]
	jmp	$LN6@CreatePixe
$LN2@CreatePixe:

; 221  :     }
; 222  : 
; 223  :     //-----------------------------------------------
; 224  : 
; 225  :     D3D10PixelShader *shader = new D3D10PixelShader;

	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN7@CreatePixe
	mov	ecx, DWORD PTR $T6[ebp]
	call	??0D3D10PixelShader@@QAE@XZ
	mov	DWORD PTR tv131[ebp], eax
	jmp	SHORT $LN8@CreatePixe
$LN7@CreatePixe:
	mov	DWORD PTR tv131[ebp], 0
$LN8@CreatePixe:
	mov	ecx, DWORD PTR tv131[ebp]
	mov	DWORD PTR _shader$[ebp], ecx

; 226  :     shader->pixelShader = pShader;

	mov	edx, DWORD PTR _shader$[ebp]
	mov	eax, DWORD PTR _pShader$[ebp]
	mov	DWORD PTR [edx+32], eax

; 227  :     if (!shader->ProcessData(shaderProcessor, lpFileName))

	mov	ecx, DWORD PTR _lpFileName$[ebp]
	push	ecx
	lea	edx, DWORD PTR _shaderProcessor$[ebp]
	push	edx
	mov	ecx, DWORD PTR _shader$[ebp]
	call	?ProcessData@D3D10Shader@@IAE_NAAUShaderProcessor@@PB_W@Z ; D3D10Shader::ProcessData
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@CreatePixe

; 228  :     {
; 229  :         delete shader;

	mov	ecx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T7[ebp], edx
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN9@CreatePixe
	push	1
	mov	eax, DWORD PTR $T7[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv153[ebp], eax
	jmp	SHORT $LN10@CreatePixe
$LN9@CreatePixe:
	mov	DWORD PTR tv153[ebp], 0
$LN10@CreatePixe:

; 230  :         return NULL;

	mov	DWORD PTR $T2[ebp], 0
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T2[ebp]
	jmp	SHORT $LN6@CreatePixe
$LN1@CreatePixe:

; 231  :     }
; 232  : 
; 233  :     return shader;

	mov	ecx, DWORD PTR _shader$[ebp]
	mov	DWORD PTR $T1[ebp], ecx
	lea	ecx, DWORD PTR _shaderProcessor$[ebp]
	call	??1ShaderProcessor@@QAE@XZ		; ShaderProcessor::~ShaderProcessor
	mov	eax, DWORD PTR $T1[ebp]
$LN6@CreatePixe:

; 234  : 
; 235  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreatePixelShaderFromBlob@D3D10PixelShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ENDP ; D3D10PixelShader::CreatePixelShaderFromBlob
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0D3D10PixelShader@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0D3D10PixelShader@@QAE@XZ PROC			; D3D10PixelShader::D3D10PixelShader, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0D3D10Shader@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10PixelShader@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0D3D10PixelShader@@QAE@XZ ENDP			; D3D10PixelShader::D3D10PixelShader
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GD3D10PixelShader@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GD3D10PixelShader@@UAEPAXI@Z PROC			; D3D10PixelShader::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10PixelShader@@UAE@XZ		; D3D10PixelShader::~D3D10PixelShader
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GD3D10PixelShader@@UAEPAXI@Z ENDP			; D3D10PixelShader::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?CreatePixelShader@D3D10PixelShader@@CAPAVShader@@PB_W0@Z
_TEXT	SEGMENT
_blob$ = -16						; size = 12
$T1 = -4						; size = 4
_lpShader$ = 8						; size = 4
_lpFileName$ = 12					; size = 4
?CreatePixelShader@D3D10PixelShader@@CAPAVShader@@PB_W0@Z PROC ; D3D10PixelShader::CreatePixelShader, COMDAT

; 238  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 239  :     ShaderBlob blob;

	lea	ecx, DWORD PTR _blob$[ebp]
	call	??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >

; 240  :     CreatePixelShaderBlob(blob, lpShader, lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	edx, DWORD PTR _blob$[ebp]
	push	edx
	call	?CreatePixelShaderBlob@D3D10PixelShader@@CAXAAV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10PixelShader::CreatePixelShaderBlob
	add	esp, 12					; 0000000cH

; 241  :     return CreatePixelShaderFromBlob(blob, lpShader, lpFileName);

	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpShader$[ebp]
	push	ecx
	lea	edx, DWORD PTR _blob$[ebp]
	push	edx
	call	?CreatePixelShaderFromBlob@D3D10PixelShader@@CAPAVShader@@ABV?$vector@DV?$allocator@D@std@@@std@@PB_W1@Z ; D3D10PixelShader::CreatePixelShaderFromBlob
	add	esp, 12					; 0000000cH
	mov	DWORD PTR $T1[ebp], eax
	lea	ecx, DWORD PTR _blob$[ebp]
	call	??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
	mov	eax, DWORD PTR $T1[ebp]

; 242  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CreatePixelShader@D3D10PixelShader@@CAPAVShader@@PB_W0@Z ENDP ; D3D10PixelShader::CreatePixelShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ??1D3D10Shader@@UAE@XZ
_TEXT	SEGMENT
_i$1 = -12						; size = 4
_i$2 = -8						; size = 4
_this$ = -4						; size = 4
??1D3D10Shader@@UAE@XZ PROC				; D3D10Shader::~D3D10Shader, COMDAT
; _this$ = ecx

; 245  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10Shader@@6B@

; 246  :     for(UINT i=0; i<Samplers.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN7@D3D10Shade
$LN6@D3D10Shade:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN7@D3D10Shade:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Num@?$List@UShaderSampler@@@@QBEIXZ	; List<ShaderSampler>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN5@D3D10Shade

; 247  :         Samplers[i].FreeData();

	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z ; List<ShaderSampler>::operator[]
	mov	ecx, eax
	call	?FreeData@ShaderSampler@@QAEXXZ		; ShaderSampler::FreeData
	jmp	SHORT $LN6@D3D10Shade
$LN5@D3D10Shade:

; 248  :     for(UINT i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@D3D10Shade
$LN3@D3D10Shade:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@D3D10Shade:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN2@D3D10Shade

; 249  :         Params[i].FreeData();

	mov	ecx, DWORD PTR _i$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	ecx, eax
	call	?FreeData@ShaderParam@@QAEXXZ		; ShaderParam::FreeData
	jmp	SHORT $LN3@D3D10Shade
$LN2@D3D10Shade:

; 250  : 
; 251  :     SafeRelease(constantBuffer);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	SHORT $LN8@D3D10Shade
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
$LN8@D3D10Shade:

; 252  : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$List@UShaderSampler@@@@QAE@XZ	; List<ShaderSampler>::~List<ShaderSampler>
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$List@UShaderParam@@@@QAE@XZ	; List<ShaderParam>::~List<ShaderParam>
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1Shader@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10Shader@@UAE@XZ ENDP				; D3D10Shader::~D3D10Shader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ??1D3D10VertexShader@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1D3D10VertexShader@@UAE@XZ PROC			; D3D10VertexShader::~D3D10VertexShader, COMDAT
; _this$ = ecx

; 255  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10VertexShader@@6B@

; 256  :     SafeRelease(vertexShader);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN2@D3D10Verte
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN2@D3D10Verte:

; 257  :     SafeRelease(inputLayout);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+36], 0
	je	SHORT $LN3@D3D10Verte
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+36]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+36], 0
$LN3@D3D10Verte:

; 258  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10Shader@@UAE@XZ			; D3D10Shader::~D3D10Shader
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10VertexShader@@UAE@XZ ENDP			; D3D10VertexShader::~D3D10VertexShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ??1D3D10PixelShader@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1D3D10PixelShader@@UAE@XZ PROC			; D3D10PixelShader::~D3D10PixelShader, COMDAT
; _this$ = ecx

; 261  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7D3D10PixelShader@@6B@

; 262  :     SafeRelease(pixelShader);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+32], 0
	je	SHORT $LN2@D3D10Pixel
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+32]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
$LN2@D3D10Pixel:

; 263  : }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1D3D10Shader@@UAE@XZ			; D3D10Shader::~D3D10Shader
	mov	esp, ebp
	pop	ebp
	ret	0
??1D3D10PixelShader@@UAE@XZ ENDP			; D3D10PixelShader::~D3D10PixelShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?NumParams@D3D10Shader@@UBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumParams@D3D10Shader@@UBEHXZ PROC			; D3D10Shader::NumParams, COMDAT
; _this$ = ecx

; 267  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 268  :     return Params.Num();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num

; 269  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?NumParams@D3D10Shader@@UBEHXZ ENDP			; D3D10Shader::NumParams
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?GetParameter@D3D10Shader@@UBEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parameter$ = 8						; size = 4
?GetParameter@D3D10Shader@@UBEPAXI@Z PROC		; D3D10Shader::GetParameter, COMDAT
; _this$ = ecx

; 272  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 273  :     if(parameter >= Params.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _parameter$[ebp], eax
	jb	SHORT $LN1@GetParamet

; 274  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@GetParamet
$LN1@GetParamet:

; 275  :     return (HANDLE)(Params+parameter);

	mov	eax, DWORD PTR _parameter$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??H?$List@UShaderParam@@@@QBEPAUShaderParam@@I@Z ; List<ShaderParam>::operator+
$LN2@GetParamet:

; 276  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetParameter@D3D10Shader@@UBEPAXI@Z ENDP		; D3D10Shader::GetParameter
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z
_TEXT	SEGMENT
_param$1 = -12						; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_lpName$ = 8						; size = 4
?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z PROC	; D3D10Shader::GetParameterByName, COMDAT
; _this$ = ecx

; 279  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 280  :     for(UINT i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@GetParamet
$LN3@GetParamet:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@GetParamet:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN2@GetParamet

; 281  :     {
; 282  :         ShaderParam &param = Params[i];

	mov	ecx, DWORD PTR _i$2[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@UShaderParam@@@@QBEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	DWORD PTR _param$1[ebp], eax

; 283  :         if(param.name == lpName)

	mov	edx, DWORD PTR _lpName$[ebp]
	push	edx
	mov	ecx, DWORD PTR _param$1[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_??8String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN1@GetParamet

; 284  :             return (HANDLE)&param;

	mov	eax, DWORD PTR _param$1[ebp]
	jmp	SHORT $LN5@GetParamet
$LN1@GetParamet:

; 285  :     }

	jmp	SHORT $LN3@GetParamet
$LN2@GetParamet:

; 286  : 
; 287  :     return NULL;

	xor	eax, eax
$LN5@GetParamet:

; 288  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetParameterByName@D3D10Shader@@UBEPAXPB_W@Z ENDP	; D3D10Shader::GetParameterByName
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_paramInfo$ = 12					; size = 4
?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z PROC ; D3D10Shader::GetParameterInfo, COMDAT
; _this$ = ecx

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 305  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN1@GetParamet
	jmp	SHORT $LN2@GetParamet
$LN1@GetParamet:

; 306  : 
; 307  :     paramInfo.type = param->type;

	mov	ecx, DWORD PTR _paramInfo$[ebp]
	mov	edx, DWORD PTR _param$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+8], eax

; 308  :     paramInfo.name = param->name;

	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 4
	push	ecx
	mov	ecx, DWORD PTR _paramInfo$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN2@GetParamet:

; 309  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?GetParameterInfo@D3D10Shader@@UBEXPAXAAUShaderParameterInfo@@@Z ENDP ; D3D10Shader::GetParameterInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetBool@D3D10Shader@@UAEXPAXH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bSizeChanged$ = -12					; size = 4
_curVal$ = -8						; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_bValue$ = 12						; size = 4
?SetBool@D3D10Shader@@UAEXPAXH@Z PROC			; D3D10Shader::SetBool, COMDAT
; _this$ = ecx

; 313  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 314  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN3@SetBool
	jmp	SHORT $LN4@SetBool
$LN3@SetBool:

; 315  : 
; 316  :     BOOL bSizeChanged = param->curValue.SetSize(sizeof(BOOL));

	push	4
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize
	mov	DWORD PTR _bSizeChanged$[ebp], eax

; 317  :     BOOL &curVal = *(BOOL*)param->curValue.Array();

	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	DWORD PTR _curVal$[ebp], eax

; 318  : 
; 319  :     if(bSizeChanged || curVal != bValue)

	cmp	DWORD PTR _bSizeChanged$[ebp], 0
	jne	SHORT $LN1@SetBool
	mov	ecx, DWORD PTR _curVal$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _bValue$[ebp]
	je	SHORT $LN4@SetBool
$LN1@SetBool:

; 320  :     {
; 321  :         curVal = bValue;

	mov	eax, DWORD PTR _curVal$[ebp]
	mov	ecx, DWORD PTR _bValue$[ebp]
	mov	DWORD PTR [eax], ecx

; 322  :         param->bChanged = TRUE;

	mov	edx, DWORD PTR _param$[ebp]
	mov	DWORD PTR [edx+40], 1
$LN4@SetBool:

; 323  :     }
; 324  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetBool@D3D10Shader@@UAEXPAXH@Z ENDP			; D3D10Shader::SetBool
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetFloat@D3D10Shader@@UAEXPAXM@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bSizeChanged$ = -12					; size = 4
_curVal$ = -8						; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_fValue$ = 12						; size = 4
?SetFloat@D3D10Shader@@UAEXPAXM@Z PROC			; D3D10Shader::SetFloat, COMDAT
; _this$ = ecx

; 327  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 328  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN3@SetFloat
	jmp	SHORT $LN4@SetFloat
$LN3@SetFloat:

; 329  : 
; 330  :     BOOL bSizeChanged = param->curValue.SetSize(sizeof(float));

	push	4
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize
	mov	DWORD PTR _bSizeChanged$[ebp], eax

; 331  :     float &curVal = *(float*)param->curValue.Array();

	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	DWORD PTR _curVal$[ebp], eax

; 332  : 
; 333  :     if(bSizeChanged || curVal != fValue)

	cmp	DWORD PTR _bSizeChanged$[ebp], 0
	jne	SHORT $LN1@SetFloat
	mov	ecx, DWORD PTR _curVal$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	ucomiss	xmm0, DWORD PTR _fValue$[ebp]
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN2@SetFloat
$LN1@SetFloat:

; 334  :     {
; 335  :         curVal = fValue;

	mov	edx, DWORD PTR _curVal$[ebp]
	movss	xmm0, DWORD PTR _fValue$[ebp]
	movss	DWORD PTR [edx], xmm0

; 336  :         param->bChanged = TRUE;

	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR [eax+40], 1
$LN2@SetFloat:
$LN4@SetFloat:

; 337  :     }
; 338  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetFloat@D3D10Shader@@UAEXPAXM@Z ENDP			; D3D10Shader::SetFloat
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetInt@D3D10Shader@@UAEXPAXH@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bSizeChanged$ = -12					; size = 4
_curVal$ = -8						; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_iValue$ = 12						; size = 4
?SetInt@D3D10Shader@@UAEXPAXH@Z PROC			; D3D10Shader::SetInt, COMDAT
; _this$ = ecx

; 341  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 342  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN3@SetInt
	jmp	SHORT $LN4@SetInt
$LN3@SetInt:

; 343  : 
; 344  :     BOOL bSizeChanged = param->curValue.SetSize(sizeof(int));

	push	4
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize
	mov	DWORD PTR _bSizeChanged$[ebp], eax

; 345  :     int &curVal = *(int*)param->curValue.Array();

	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	DWORD PTR _curVal$[ebp], eax

; 346  : 
; 347  :     if(bSizeChanged || curVal != iValue)

	cmp	DWORD PTR _bSizeChanged$[ebp], 0
	jne	SHORT $LN1@SetInt
	mov	ecx, DWORD PTR _curVal$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _iValue$[ebp]
	je	SHORT $LN4@SetInt
$LN1@SetInt:

; 348  :     {
; 349  :         curVal = iValue;

	mov	eax, DWORD PTR _curVal$[ebp]
	mov	ecx, DWORD PTR _iValue$[ebp]
	mov	DWORD PTR [eax], ecx

; 350  :         param->bChanged = TRUE;

	mov	edx, DWORD PTR _param$[ebp]
	mov	DWORD PTR [edx+40], 1
$LN4@SetInt:

; 351  :     }
; 352  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetInt@D3D10Shader@@UAEXPAXH@Z ENDP			; D3D10Shader::SetInt
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hObject$ = 8						; size = 4
_matrix$ = 12						; size = 4
?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z PROC		; D3D10Shader::SetMatrix, COMDAT
; _this$ = ecx

; 355  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 356  :     SetValue(hObject, matrix, sizeof(float)*4*4);

	push	64					; 00000040H
	mov	eax, DWORD PTR _matrix$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 357  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetMatrix@D3D10Shader@@UAEXPAXPAM@Z ENDP		; D3D10Shader::SetMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hObject$ = 8						; size = 4
_value$ = 12						; size = 4
?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z PROC		; D3D10Shader::SetVector, COMDAT
; _this$ = ecx

; 360  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 361  :     SetValue(hObject, value.ptr, sizeof(float)*3);

	push	12					; 0000000cH
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 362  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetVector@D3D10Shader@@UAEXPAXABUVect@@@Z ENDP		; D3D10Shader::SetVector
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hObject$ = 8						; size = 4
_value$ = 12						; size = 4
?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z PROC	; D3D10Shader::SetVector2, COMDAT
; _this$ = ecx

; 365  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 366  :     SetValue(hObject, value.ptr, sizeof(Vect2));

	push	8
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 367  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetVector2@D3D10Shader@@UAEXPAXABUVect2@@@Z ENDP	; D3D10Shader::SetVector2
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_hObject$ = 8						; size = 4
_value$ = 12						; size = 4
?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z PROC	; D3D10Shader::SetVector4, COMDAT
; _this$ = ecx

; 370  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 371  :     SetValue(hObject, value.ptr, sizeof(Vect4));

	push	16					; 00000010H
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hObject$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+56]
	call	edx

; 372  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetVector4@D3D10Shader@@UAEXPAXABUVect4@@@Z ENDP	; D3D10Shader::SetVector4
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
_bSizeChanged$ = -12					; size = 4
_curVal$ = -8						; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_texture$ = 12						; size = 4
?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z PROC	; D3D10Shader::SetTexture, COMDAT
; _this$ = ecx

; 375  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 376  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN3@SetTexture
	jmp	SHORT $LN4@SetTexture
$LN3@SetTexture:

; 377  : 
; 378  :     BOOL bSizeChanged = param->curValue.SetSize(sizeof(const BaseTexture*));

	push	4
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize
	mov	DWORD PTR _bSizeChanged$[ebp], eax

; 379  :     const BaseTexture *&curVal = *(const BaseTexture**)param->curValue.Array();

	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	DWORD PTR _curVal$[ebp], eax

; 380  : 
; 381  :     if(bSizeChanged || curVal != texture)

	cmp	DWORD PTR _bSizeChanged$[ebp], 0
	jne	SHORT $LN1@SetTexture
	mov	ecx, DWORD PTR _curVal$[ebp]
	mov	edx, DWORD PTR [ecx]
	cmp	edx, DWORD PTR _texture$[ebp]
	je	SHORT $LN4@SetTexture
$LN1@SetTexture:

; 382  :     {
; 383  :         curVal = texture;

	mov	eax, DWORD PTR _curVal$[ebp]
	mov	ecx, DWORD PTR _texture$[ebp]
	mov	DWORD PTR [eax], ecx

; 384  :         param->bChanged = TRUE;

	mov	edx, DWORD PTR _param$[ebp]
	mov	DWORD PTR [edx+40], 1
$LN4@SetTexture:

; 385  :     }
; 386  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetTexture@D3D10Shader@@UAEXPAXPAVBaseTexture@@@Z ENDP	; D3D10Shader::SetTexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?SetValue@D3D10Shader@@UAEXPAXPBXK@Z
_TEXT	SEGMENT
_this$ = -12						; size = 4
_bSizeChanged$ = -8					; size = 4
_param$ = -4						; size = 4
_hObject$ = 8						; size = 4
_val$ = 12						; size = 4
_dwSize$ = 16						; size = 4
?SetValue@D3D10Shader@@UAEXPAXPBXK@Z PROC		; D3D10Shader::SetValue, COMDAT
; _this$ = ecx

; 389  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 390  :     GetValidHandle();

	mov	eax, DWORD PTR _hObject$[ebp]
	mov	DWORD PTR _param$[ebp], eax
	cmp	DWORD PTR _hObject$[ebp], 0
	jne	SHORT $LN3@SetValue
	jmp	SHORT $LN4@SetValue
$LN3@SetValue:

; 391  : 
; 392  :     BOOL bSizeChanged = param->curValue.SetSize(dwSize);

	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize
	mov	DWORD PTR _bSizeChanged$[ebp], eax

; 393  : 
; 394  :     if(bSizeChanged || !mcmp(param->curValue.Array(), val, dwSize))

	cmp	DWORD PTR _bSizeChanged$[ebp], 0
	jne	SHORT $LN1@SetValue
	mov	edx, DWORD PTR _dwSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _val$[ebp]
	push	eax
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	call	?mcmp@@YGHPBX0I@Z			; mcmp
	test	eax, eax
	jne	SHORT $LN4@SetValue
$LN1@SetValue:

; 395  :     {
; 396  :         mcpy(param->curValue.Array(), val, dwSize);

	mov	ecx, DWORD PTR _dwSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _val$[ebp]
	push	edx
	mov	ecx, DWORD PTR _param$[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH

; 397  :         param->bChanged = TRUE;

	mov	eax, DWORD PTR _param$[ebp]
	mov	DWORD PTR [eax+40], 1
$LN4@SetValue:

; 398  :     }
; 399  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetValue@D3D10Shader@@UAEXPAXPBXK@Z ENDP		; D3D10Shader::SetValue
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\d3d10shader.cpp
;	COMDAT ?UpdateParams@D3D10Shader@@IAEXXZ
_TEXT	SEGMENT
_shaderConstantData$ = -36				; size = 8
_outData$1 = -28					; size = 4
_texture$2 = -24					; size = 4
_err$3 = -20						; size = 4
_i$4 = -16						; size = 4
_this$ = -12						; size = 4
_param$5 = -8						; size = 4
_bUpload$ = -1						; size = 1
?UpdateParams@D3D10Shader@@IAEXXZ PROC			; D3D10Shader::UpdateParams, COMDAT
; _this$ = ecx

; 402  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	DWORD PTR _this$[ebp], ecx

; 403  :     List<BYTE> shaderConstantData;

	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	??0?$List@E@@QAE@XZ			; List<unsigned char>::List<unsigned char>

; 404  :     bool bUpload = false;

	mov	BYTE PTR _bUpload$[ebp], 0

; 405  : 
; 406  :     for(UINT i=0; i<Params.Num(); i++)

	mov	DWORD PTR _i$4[ebp], 0
	jmp	SHORT $LN11@UpdatePara
$LN10@UpdatePara:
	mov	eax, DWORD PTR _i$4[ebp]
	add	eax, 1
	mov	DWORD PTR _i$4[ebp], eax
$LN11@UpdatePara:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	cmp	DWORD PTR _i$4[ebp], eax
	jae	$LN9@UpdatePara

; 407  :     {
; 408  :         ShaderParam &param = Params[i];

	mov	ecx, DWORD PTR _i$4[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ; List<ShaderParam>::operator[]
	mov	DWORD PTR _param$5[ebp], eax

; 409  : 
; 410  :         if(param.type != Parameter_Texture)

	mov	edx, DWORD PTR _param$5[ebp]
	cmp	DWORD PTR [edx], 10			; 0000000aH
	je	SHORT $LN8@UpdatePara

; 411  :         {
; 412  :             if(!param.curValue.Num())

	mov	ecx, DWORD PTR _param$5[ebp]
	add	ecx, 24					; 00000018H
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	test	eax, eax
	jne	SHORT $LN7@UpdatePara

; 413  :             {
; 414  :                 AppWarning(TEXT("D3D10Shader::UpdateParams: shader parameter '%s' not set"), param.name.Array());

	mov	ecx, DWORD PTR _param$5[ebp]
	add	ecx, 4
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294919799
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 415  :                 bUpload = false;

	mov	BYTE PTR _bUpload$[ebp], 0

; 416  :                 break;

	jmp	SHORT $LN9@UpdatePara
$LN7@UpdatePara:

; 417  :             }
; 418  : 
; 419  :             shaderConstantData.AppendList(param.curValue);

	mov	eax, DWORD PTR _param$5[ebp]
	add	eax, 24					; 00000018H
	push	eax
	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	?AppendList@?$List@E@@QAEXABV1@@Z	; List<unsigned char>::AppendList

; 420  : 
; 421  :             if(param.bChanged)

	mov	ecx, DWORD PTR _param$5[ebp]
	cmp	DWORD PTR [ecx+40], 0
	je	SHORT $LN6@UpdatePara

; 422  :             {
; 423  :                 bUpload = true;

	mov	BYTE PTR _bUpload$[ebp], 1

; 424  :                 param.bChanged = false;

	mov	edx, DWORD PTR _param$5[ebp]
	mov	DWORD PTR [edx+40], 0
$LN6@UpdatePara:

; 425  :             }
; 426  :         }
; 427  :         else

	jmp	SHORT $LN5@UpdatePara
$LN8@UpdatePara:

; 428  :         {
; 429  :             if(param.curValue.Num())

	mov	ecx, DWORD PTR _param$5[ebp]
	add	ecx, 24					; 00000018H
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	test	eax, eax
	je	SHORT $LN5@UpdatePara

; 430  :             {
; 431  :                 Texture *texture = *(Texture**)param.curValue.Array();

	mov	ecx, DWORD PTR _param$5[ebp]
	add	ecx, 24					; 00000018H
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _texture$2[ebp], eax

; 432  :                 LoadTexture(texture, param.textureID);

	mov	ecx, DWORD PTR _param$5[ebp]
	mov	edx, DWORD PTR [ecx+16]
	push	edx
	mov	eax, DWORD PTR _texture$2[ebp]
	push	eax
	call	?LoadTexture@@YAXPAVTexture@@I@Z	; LoadTexture
	add	esp, 8
$LN5@UpdatePara:

; 433  :             }
; 434  :         }
; 435  :     }

	jmp	$LN10@UpdatePara
$LN9@UpdatePara:

; 436  : 
; 437  :     if(shaderConstantData.Num() != constantSize)

	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+28]
	je	SHORT $LN3@UpdatePara

; 438  :     {
; 439  :         AppWarning(TEXT("D3D10Shader::UpdateParams: invalid parameter specifications, constant size given: %d, constant size expected: %d"), shaderConstantData.Num(), constantSize);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	push	eax
	push	OFFSET $SG4294919798
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 12					; 0000000cH

; 440  :         bUpload = false;

	mov	BYTE PTR _bUpload$[ebp], 0
$LN3@UpdatePara:

; 441  :     }
; 442  : 
; 443  :     if(bUpload)

	movzx	ecx, BYTE PTR _bUpload$[ebp]
	test	ecx, ecx
	je	SHORT $LN2@UpdatePara

; 444  :     {
; 445  :         BYTE *outData;
; 446  : 
; 447  :         HRESULT err;
; 448  :         if(FAILED(err = constantBuffer->Map(D3D10_MAP_WRITE_DISCARD, 0, (void**)&outData)))

	lea	edx, DWORD PTR _outData$1[ebp]
	push	edx
	push	0
	push	4
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+40]
	call	edx
	mov	DWORD PTR _err$3[ebp], eax
	cmp	DWORD PTR _err$3[ebp], 0
	jge	SHORT $LN1@UpdatePara

; 449  :         {
; 450  :             AppWarning(TEXT("D3D10Shader::UpdateParams: could not map constant buffer, result = %08lX"), err);

	mov	eax, DWORD PTR _err$3[ebp]
	push	eax
	push	OFFSET $SG4294919797
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8

; 451  :             return;

	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	??1?$List@E@@QAE@XZ			; List<unsigned char>::~List<unsigned char>
	jmp	SHORT $LN12@UpdatePara
$LN1@UpdatePara:

; 452  :         }
; 453  : 
; 454  :         mcpy(outData, shaderConstantData.Array(), shaderConstantData.Num());

	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	push	eax
	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	mov	ecx, DWORD PTR _outData$1[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH

; 455  :         constantBuffer->Unmap();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+44]
	call	ecx
$LN2@UpdatePara:

; 456  :     }
; 457  : }

	lea	ecx, DWORD PTR _shaderConstantData$[ebp]
	call	??1?$List@E@@QAE@XZ			; List<unsigned char>::~List<unsigned char>
$LN12@UpdatePara:
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateParams@D3D10Shader@@IAEXXZ ENDP			; D3D10Shader::UpdateParams
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@E@@QAE@XZ PROC				; List<unsigned char>::List<unsigned char>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@E@@QAE@XZ ENDP				; List<unsigned char>::List<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@E@@QAE@XZ PROC				; List<unsigned char>::~List<unsigned char>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@E@@QAE@XZ ENDP				; List<unsigned char>::~List<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@E@@QBEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@E@@QBEPAEXZ PROC				; List<unsigned char>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@E@@QBEPAEXZ ENDP				; List<unsigned char>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@E@@QBEIXZ PROC				; List<unsigned char>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@E@@QBEIXZ ENDP				; List<unsigned char>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?SetSize@?$List@E@@QAEHI@Z
_TEXT	SEGMENT
_bClear$ = -16						; size = 4
_oldNum$ = -12						; size = 4
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?SetSize@?$List@E@@QAEHI@Z PROC				; List<unsigned char>::SetSize, COMDAT
; _this$ = ecx

; 205  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 206  :         if(num == n)

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR _n$[ebp]
	jne	SHORT $LN4@SetSize

; 207  :             return FALSE;

	xor	eax, eax
	jmp	$LN5@SetSize
	jmp	SHORT $LN3@SetSize
$LN4@SetSize:

; 208  :         else if(!n)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN3@SetSize

; 209  :         {
; 210  :             Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@E@@QAEXXZ			; List<unsigned char>::Clear

; 211  :             return TRUE;

	mov	eax, 1
	jmp	SHORT $LN5@SetSize
$LN3@SetSize:

; 212  :         }
; 213  : 
; 214  :         BOOL bClear=(n>num);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jbe	SHORT $LN7@SetSize
	mov	DWORD PTR tv70[ebp], 1
	jmp	SHORT $LN8@SetSize
$LN7@SetSize:
	mov	DWORD PTR tv70[ebp], 0
$LN8@SetSize:
	mov	ecx, DWORD PTR tv70[ebp]
	mov	DWORD PTR _bClear$[ebp], ecx

; 215  :         UINT oldNum=num;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _oldNum$[ebp], eax

; 216  : 
; 217  :         num = n;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR [ecx+4], edx

; 218  :         array = (T*)ReAllocate(array, sizeof(T)*num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?MainAllocator@@3PAVAlloc@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 219  : 
; 220  :         if(bClear)

	cmp	DWORD PTR _bClear$[ebp], 0
	je	SHORT $LN1@SetSize

; 221  :             zero(&array[oldNum], sizeof(T)*(num-oldNum));

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _oldNum$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _oldNum$[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero
$LN1@SetSize:

; 222  : 
; 223  :         return TRUE;

	mov	eax, 1
$LN5@SetSize:

; 224  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$List@E@@QAEHI@Z ENDP				; List<unsigned char>::SetSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?CopyList@?$List@E@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?CopyList@?$List@E@@QAEXABV1@@Z PROC			; List<unsigned char>::CopyList, COMDAT
; _this$ = ecx

; 292  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 293  :         CopyArray(list.Array(), list.Num());

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyArray@?$List@E@@QAEXPBEI@Z		; List<unsigned char>::CopyArray

; 294  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?CopyList@?$List@E@@QAEXABV1@@Z ENDP			; List<unsigned char>::CopyList
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?AppendList@?$List@E@@QAEXABV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?AppendList@?$List@E@@QAEXABV1@@Z PROC			; List<unsigned char>::AppendList, COMDAT
; _this$ = ecx

; 302  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 303  :         AppendArray(list.Array(), list.Num());

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Num@?$List@E@@QBEIXZ			; List<unsigned char>::Num
	push	eax
	mov	ecx, DWORD PTR _list$[ebp]
	call	?Array@?$List@E@@QBEPAEXZ		; List<unsigned char>::Array
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AppendArray@?$List@E@@QAEXPBEI@Z	; List<unsigned char>::AppendArray

; 304  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?AppendList@?$List@E@@QAEXABV1@@Z ENDP			; List<unsigned char>::AppendList
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@E@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@E@@QAEXXZ PROC				; List<unsigned char>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@E@@QAEXXZ ENDP				; List<unsigned char>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 680  : 		{	// construct empty vector

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx
	lea	ecx, DWORD PTR $T1[ebp]
	call	??0?$allocator@D@std@@QAE@XZ		; std::allocator<char>::allocator<char>
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >

; 681  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ PROC	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 944  : 		{	// destroy the object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 945  : 		_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 946  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@DV?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::vector<char,std::allocator<char> >::~vector<char,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC	; std::vector<char,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1147 : 		{	// return length of sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1148 : 		return (this->_Mylast - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx]

; 1149 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP	; std::vector<char,std::allocator<char> >::size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
$T1 = -8						; size = 4
_this$ = -4						; size = 4
?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ PROC ; std::vector<char,std::allocator<char> >::front, COMDAT
; _this$ = ecx

; 1228 : 		{	// return first element of nonmutable sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1229 : 		return (*begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::vector<char,std::allocator<char> >::begin
	mov	ecx, eax
	call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*

; 1230 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?front@?$vector@DV?$allocator@D@std@@@std@@QBEABDXZ ENDP ; std::vector<char,std::allocator<char> >::front
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UShaderSampler@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@UShaderSampler@@@@QAE@XZ PROC			; List<ShaderSampler>::List<ShaderSampler>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UShaderSampler@@@@QAE@XZ ENDP			; List<ShaderSampler>::List<ShaderSampler>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@UShaderSampler@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@UShaderSampler@@@@QAE@XZ PROC			; List<ShaderSampler>::~List<ShaderSampler>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UShaderSampler@@@@QAEXXZ	; List<ShaderSampler>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UShaderSampler@@@@QAE@XZ ENDP			; List<ShaderSampler>::~List<ShaderSampler>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UShaderSampler@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UShaderSampler@@@@QBEIXZ PROC		; List<ShaderSampler>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UShaderSampler@@@@QBEIXZ ENDP		; List<ShaderSampler>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?TransferFrom@?$List@UShaderSampler@@@@QAEXAAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?TransferFrom@?$List@UShaderSampler@@@@QAEXAAV1@@Z PROC	; List<ShaderSampler>::TransferFrom, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         if(array) Clear();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@TransferFr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UShaderSampler@@@@QAEXXZ	; List<ShaderSampler>::Clear
$LN1@TransferFr:

; 309  :         array = list.Array();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Array@?$List@UShaderSampler@@@@QBEPAUShaderSampler@@XZ ; List<ShaderSampler>::Array
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 310  :         num   = list.Num();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Num@?$List@UShaderSampler@@@@QBEIXZ	; List<ShaderSampler>::Num
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 311  :         zero(&list, sizeof(List<T>));

	push	8
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 312  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?TransferFrom@?$List@UShaderSampler@@@@QAEXAAV1@@Z ENDP	; List<ShaderSampler>::TransferFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@UShaderSampler@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@UShaderSampler@@@@QAEXXZ PROC		; List<ShaderSampler>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@UShaderSampler@@@@QAEXXZ ENDP		; List<ShaderSampler>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z PROC ; List<ShaderSampler>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUShaderSampler@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 12					; 0000000cH
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 12
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UShaderSampler@@@@QAEAAUShaderSampler@@I@Z ENDP ; List<ShaderSampler>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UShaderParam@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@UShaderParam@@@@QAE@XZ PROC			; List<ShaderParam>::List<ShaderParam>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UShaderParam@@@@QAE@XZ ENDP			; List<ShaderParam>::List<ShaderParam>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@UShaderParam@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@UShaderParam@@@@QAE@XZ PROC			; List<ShaderParam>::~List<ShaderParam>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UShaderParam@@@@QAEXXZ	; List<ShaderParam>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UShaderParam@@@@QAE@XZ ENDP			; List<ShaderParam>::~List<ShaderParam>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UShaderParam@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UShaderParam@@@@QBEIXZ PROC			; List<ShaderParam>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UShaderParam@@@@QBEIXZ ENDP			; List<ShaderParam>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?TransferFrom@?$List@UShaderParam@@@@QAEXAAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_list$ = 8						; size = 4
?TransferFrom@?$List@UShaderParam@@@@QAEXAAV1@@Z PROC	; List<ShaderParam>::TransferFrom, COMDAT
; _this$ = ecx

; 307  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 308  :         if(array) Clear();

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@TransferFr
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UShaderParam@@@@QAEXXZ	; List<ShaderParam>::Clear
$LN1@TransferFr:

; 309  :         array = list.Array();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Array@?$List@UShaderParam@@@@QBEPAUShaderParam@@XZ ; List<ShaderParam>::Array
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 310  :         num   = list.Num();

	mov	ecx, DWORD PTR _list$[ebp]
	call	?Num@?$List@UShaderParam@@@@QBEIXZ	; List<ShaderParam>::Num
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 311  :         zero(&list, sizeof(List<T>));

	push	8
	mov	eax, DWORD PTR _list$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 312  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?TransferFrom@?$List@UShaderParam@@@@QAEXAAV1@@Z ENDP	; List<ShaderParam>::TransferFrom
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@UShaderParam@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@UShaderParam@@@@QAEXXZ PROC		; List<ShaderParam>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@UShaderParam@@@@QAEXXZ ENDP		; List<ShaderParam>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z PROC	; List<ShaderParam>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUShaderParam@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 44					; 0000002cH
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 44
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UShaderParam@@@@QAEAAUShaderParam@@I@Z ENDP	; List<ShaderParam>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UShaderParam@@@@QBEAAUShaderParam@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UShaderParam@@@@QBEAAUShaderParam@@I@Z PROC	; List<ShaderParam>::operator[], COMDAT
; _this$ = ecx

; 386  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  :         assert(index < num);
; 388  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0]; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUShaderParam@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 44					; 0000002cH
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 389  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 44
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 390  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UShaderParam@@@@QBEAAUShaderParam@@I@Z ENDP	; List<ShaderParam>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??H?$List@UShaderParam@@@@QBEPAUShaderParam@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??H?$List@UShaderParam@@@@QBEPAUShaderParam@@I@Z PROC	; List<ShaderParam>::operator+, COMDAT
; _this$ = ecx

; 400  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 401  :         assert(index < num);
; 402  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return NULL; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUShaderParam@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	xor	eax, eax
	jmp	SHORT $LN3@operator
$LN1@operator:

; 403  :         return array+index;

	imul	eax, DWORD PTR _index$[ebp], 44
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
$LN3@operator:

; 404  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??H?$List@UShaderParam@@@@QBEPAUShaderParam@@I@Z ENDP	; List<ShaderParam>::operator+
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ PROC	; List<D3D10_INPUT_ELEMENT_DESC>::List<D3D10_INPUT_ELEMENT_DESC>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ ENDP	; List<D3D10_INPUT_ELEMENT_DESC>::List<D3D10_INPUT_ELEMENT_DESC>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ PROC	; List<D3D10_INPUT_ELEMENT_DESC>::~List<D3D10_INPUT_ELEMENT_DESC>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAEXXZ ; List<D3D10_INPUT_ELEMENT_DESC>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAE@XZ ENDP	; List<D3D10_INPUT_ELEMENT_DESC>::~List<D3D10_INPUT_ELEMENT_DESC>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEPAUD3D10_INPUT_ELEMENT_DESC@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEPAUD3D10_INPUT_ELEMENT_DESC@@XZ PROC ; List<D3D10_INPUT_ELEMENT_DESC>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEPAUD3D10_INPUT_ELEMENT_DESC@@XZ ENDP ; List<D3D10_INPUT_ELEMENT_DESC>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEIXZ PROC	; List<D3D10_INPUT_ELEMENT_DESC>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QBEIXZ ENDP	; List<D3D10_INPUT_ELEMENT_DESC>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??0?$ComPtr@UID3D10Blob@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ComPtr@UID3D10Blob@@@@QAE@XZ PROC			; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>, COMDAT
; _this$ = ecx

; 45   : 	inline ComPtr() : ptr(NULL)                  {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ComPtr@UID3D10Blob@@@@QAE@XZ ENDP			; ComPtr<ID3D10Blob>::ComPtr<ID3D10Blob>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??1?$ComPtr@UID3D10Blob@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ComPtr@UID3D10Blob@@@@QAE@XZ PROC			; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>, COMDAT
; _this$ = ecx

; 49   : 	inline ~ComPtr()                             {Kill();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Kill@?$ComPtr@UID3D10Blob@@@@AAEXXZ	; ComPtr<ID3D10Blob>::Kill
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ComPtr@UID3D10Blob@@@@QAE@XZ ENDP			; ComPtr<ID3D10Blob>::~ComPtr<ID3D10Blob>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ PROC ; ComPtr<ID3D10Blob>::Assign, COMDAT
; _this$ = ecx

; 99   : 	inline T **Assign()                {Clear(); return &ptr;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$ComPtr@UID3D10Blob@@@@QAEXXZ	; ComPtr<ID3D10Blob>::Clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Assign@?$ComPtr@UID3D10Blob@@@@QAEPAPAUID3D10Blob@@XZ ENDP ; ComPtr<ID3D10Blob>::Assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ PROC	; ComPtr<ID3D10Blob>::operator ID3D10Blob *, COMDAT
; _this$ = ecx

; 102  : 	inline    operator T*() const      {return ptr;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ENDP	; ComPtr<ID3D10Blob>::operator ID3D10Blob *
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ PROC	; ComPtr<ID3D10Blob>::operator->, COMDAT
; _this$ = ecx

; 103  : 	inline T *operator->() const       {return ptr;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$ComPtr@UID3D10Blob@@@@QBEPAUID3D10Blob@@XZ ENDP	; ComPtr<ID3D10Blob>::operator->
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??0?$ComPtr@UID3D10VertexShader@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$ComPtr@UID3D10VertexShader@@@@QAE@XZ PROC		; ComPtr<ID3D10VertexShader>::ComPtr<ID3D10VertexShader>, COMDAT
; _this$ = ecx

; 45   : 	inline ComPtr() : ptr(NULL)                  {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ENDP		; ComPtr<ID3D10VertexShader>::ComPtr<ID3D10VertexShader>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ PROC		; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>, COMDAT
; _this$ = ecx

; 49   : 	inline ~ComPtr()                             {Kill();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Kill@?$ComPtr@UID3D10VertexShader@@@@AAEXXZ ; ComPtr<ID3D10VertexShader>::Kill
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$ComPtr@UID3D10VertexShader@@@@QAE@XZ ENDP		; ComPtr<ID3D10VertexShader>::~ComPtr<ID3D10VertexShader>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Detach@?$ComPtr@UID3D10VertexShader@@@@QAEPAUID3D10VertexShader@@XZ
_TEXT	SEGMENT
_ptr_$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$ComPtr@UID3D10VertexShader@@@@QAEPAUID3D10VertexShader@@XZ PROC ; ComPtr<ID3D10VertexShader>::Detach, COMDAT
; _this$ = ecx

; 60   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 61   :         T *ptr_ = ptr;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _ptr_$[ebp], ecx

; 62   :         ptr = nullptr;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 63   :         return ptr_;

	mov	eax, DWORD PTR _ptr_$[ebp]

; 64   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$ComPtr@UID3D10VertexShader@@@@QAEPAUID3D10VertexShader@@XZ ENDP ; ComPtr<ID3D10VertexShader>::Detach
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Assign@?$ComPtr@UID3D10VertexShader@@@@QAEPAPAUID3D10VertexShader@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Assign@?$ComPtr@UID3D10VertexShader@@@@QAEPAPAUID3D10VertexShader@@XZ PROC ; ComPtr<ID3D10VertexShader>::Assign, COMDAT
; _this$ = ecx

; 99   : 	inline T **Assign()                {Clear(); return &ptr;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$ComPtr@UID3D10VertexShader@@@@QAEXXZ ; ComPtr<ID3D10VertexShader>::Clear
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?Assign@?$ComPtr@UID3D10VertexShader@@@@QAEPAPAUID3D10VertexShader@@XZ ENDP ; ComPtr<ID3D10VertexShader>::Assign
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?CopyArray@?$List@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_new_array$ = 8						; size = 4
_n$ = 12						; size = 4
?CopyArray@?$List@E@@QAEXPBEI@Z PROC			; List<unsigned char>::CopyArray, COMDAT
; _this$ = ecx

; 140  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 141  :         if(!new_array && n)

	cmp	DWORD PTR _new_array$[ebp], 0
	jne	SHORT $LN2@CopyArray
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN2@CopyArray

; 142  :         {
; 143  :             AppWarning(TEXT("List::CopyArray:  NULL array with count above zero"));

	push	OFFSET ??_C@_1GG@PPOALHLL@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAC?$AAo?$AAp?$AAy?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw?$AAi?$AAt@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 144  :             return;

	jmp	SHORT $LN3@CopyArray
$LN2@CopyArray:

; 145  :         }
; 146  : 
; 147  :         SetSize(n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize

; 148  : 
; 149  :         if(!num) {array=NULL; return;}

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@CopyArray
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN3@CopyArray
$LN1@CopyArray:

; 150  : 
; 151  :         mcpy(array, (void*)new_array, sizeof(T)*num);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _new_array$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN3@CopyArray:

; 152  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?CopyArray@?$List@E@@QAEXPBEI@Z ENDP			; List<unsigned char>::CopyArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?AppendArray@?$List@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_oldnum$ = -8						; size = 4
_this$ = -4						; size = 4
_new_array$ = 8						; size = 4
_n$ = 12						; size = 4
?AppendArray@?$List@E@@QAEXPBEI@Z PROC			; List<unsigned char>::AppendArray, COMDAT
; _this$ = ecx

; 183  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 184  :         if(!new_array && n)

	cmp	DWORD PTR _new_array$[ebp], 0
	jne	SHORT $LN3@AppendArra
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN3@AppendArra

; 185  :         {
; 186  :             AppWarning(TEXT("List::AppendArray:  NULL array with count above zero"));

	push	OFFSET ??_C@_1GK@FGBPJKAO@?$AAL?$AAi?$AAs?$AAt?$AA?3?$AA?3?$AAA?$AAp?$AAp?$AAe?$AAn?$AAd?$AAA?$AAr?$AAr?$AAa?$AAy?$AA?3?$AA?5?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AAa?$AAr?$AAr?$AAa?$AAy?$AA?5?$AAw@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 187  :             return;

	jmp	SHORT $LN4@AppendArra
$LN3@AppendArra:

; 188  :         }
; 189  : 
; 190  :         if(!n)

	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LN2@AppendArra

; 191  :             return;

	jmp	SHORT $LN4@AppendArra
$LN2@AppendArra:

; 192  : 
; 193  :         int oldnum = num;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _oldnum$[ebp], ecx

; 194  : 
; 195  :         SetSize(n+num);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _n$[ebp]
	add	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetSize@?$List@E@@QAEHI@Z		; List<unsigned char>::SetSize

; 196  : 
; 197  :         assert(num);
; 198  : 
; 199  :         if(!num) {array=NULL; return;}

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	jne	SHORT $LN1@AppendArra
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
	jmp	SHORT $LN4@AppendArra
$LN1@AppendArra:

; 200  : 
; 201  :         mcpy(&array[oldnum], (void*)new_array, sizeof(T)*n);

	mov	eax, DWORD PTR _n$[ebp]
	push	eax
	mov	ecx, DWORD PTR _new_array$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _oldnum$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@AppendArra:

; 202  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?AppendArray@?$List@E@@QAEXPBEI@Z ENDP			; List<unsigned char>::AppendArray
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::vector<char,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 1029 : 		{	// return iterator for beginning of nonmutable sequence

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1030 : 		return (const_iterator(this->_Myfirst, this));

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1031 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?begin@?$vector@DV?$allocator@D@std@@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::vector<char,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ PROC	; std::vector<char,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1622 : 		{	// free all storage

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1623 : 		if (this->_Myfirst != pointer())

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Tidy

; 1624 : 			{	// something to free, destroy and deallocate it
; 1625 : 			this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1626 : 			_Destroy(this->_Myfirst, this->_Mylast);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1627 : 			this->_Getal().deallocate(this->_Myfirst,
; 1628 : 				this->_Myend - this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+8]
	sub	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate

; 1629 : 			this->_Myfirst = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0

; 1630 : 			this->_Mylast = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0

; 1631 : 			this->_Myend = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
$LN2@Tidy:

; 1632 : 			}
; 1633 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??0?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 588  : 	_Vector_alloc(const _Alloc& = _Alloc())

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >

; 589  : 		{	// construct allocator from _Al
; 590  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@UShaderSampler@@@@QBEPAUShaderSampler@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@UShaderSampler@@@@QBEPAUShaderSampler@@XZ PROC ; List<ShaderSampler>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@UShaderSampler@@@@QBEPAUShaderSampler@@XZ ENDP ; List<ShaderSampler>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Array@?$List@UShaderParam@@@@QBEPAUShaderParam@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Array@?$List@UShaderParam@@@@QBEPAUShaderParam@@XZ PROC ; List<ShaderParam>::Array, COMDAT
; _this$ = ecx

; 41   :     inline T* Array() const             {return array;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Array@?$List@UShaderParam@@@@QBEPAUShaderParam@@XZ ENDP ; List<ShaderParam>::Array
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Clear@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAEXXZ PROC	; List<D3D10_INPUT_ELEMENT_DESC>::Clear, COMDAT
; _this$ = ecx

; 334  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 335  :         if(array)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 336  :         {
; 337  :             /*if(IsBadWritePtr(array, sizeof(T)*num))
; 338  :                 CrashError(TEXT("what the.."));*/
; 339  :             Free(array);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4

; 340  :             array = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 341  :             num = 0;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 342  :         }
; 343  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$List@UD3D10_INPUT_ELEMENT_DESC@@@@QAEXXZ ENDP	; List<D3D10_INPUT_ELEMENT_DESC>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Kill@?$ComPtr@UID3D10Blob@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Kill@?$ComPtr@UID3D10Blob@@@@AAEXXZ PROC		; ComPtr<ID3D10Blob>::Kill, COMDAT
; _this$ = ecx

; 30   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 		if (ptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Kill

; 32   : 			ptr->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Kill:

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Kill@?$ComPtr@UID3D10Blob@@@@AAEXXZ ENDP		; ComPtr<ID3D10Blob>::Kill
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Clear@?$ComPtr@UID3D10Blob@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$ComPtr@UID3D10Blob@@@@QAEXXZ PROC		; ComPtr<ID3D10Blob>::Clear, COMDAT
; _this$ = ecx

; 52   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if (ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 54   : 			ptr->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 55   : 			ptr = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Clear:

; 56   : 		}
; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$ComPtr@UID3D10Blob@@@@QAEXXZ ENDP		; ComPtr<ID3D10Blob>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Kill@?$ComPtr@UID3D10VertexShader@@@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Kill@?$ComPtr@UID3D10VertexShader@@@@AAEXXZ PROC	; ComPtr<ID3D10VertexShader>::Kill, COMDAT
; _this$ = ecx

; 30   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 31   : 		if (ptr)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Kill

; 32   : 			ptr->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
$LN2@Kill:

; 33   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Kill@?$ComPtr@UID3D10VertexShader@@@@AAEXXZ ENDP	; ComPtr<ID3D10VertexShader>::Kill
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\comptr.hpp
;	COMDAT ?Clear@?$ComPtr@UID3D10VertexShader@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$ComPtr@UID3D10VertexShader@@@@QAEXXZ PROC	; ComPtr<ID3D10VertexShader>::Clear, COMDAT
; _this$ = ecx

; 52   : 	{

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 53   : 		if (ptr) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Clear

; 54   : 			ptr->Release();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax

; 55   : 			ptr = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Clear:

; 56   : 		}
; 57   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$ComPtr@UID3D10VertexShader@@@@QAEXXZ ENDP	; ComPtr<ID3D10VertexShader>::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 65   : 		{	// return designated object

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 66   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 67   : 		if (this->_Getcont() == 0
; 68   : 			|| this->_Ptr == 0
; 69   : 			|| this->_Ptr < ((_Myvec *)this->_Getcont())->_Myfirst
; 70   : 			|| ((_Myvec *)this->_Getcont())->_Mylast <= this->_Ptr)
; 71   : 			{	// report error
; 72   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 73   : 			_SCL_SECURE_OUT_OF_RANGE;
; 74   : 			}
; 75   : 
; 76   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 77   : 		_SCL_SECURE_VALIDATE(this->_Getcont() != 0);
; 78   : 		_SCL_SECURE_VALIDATE_RANGE(
; 79   : 			this->_Ptr != _Tptr()
; 80   : 			&& ((_Myvec *)this->_Getcont())->_Myfirst <= this->_Ptr
; 81   : 			&& this->_Ptr < ((_Myvec *)this->_Getcont())->_Mylast);
; 82   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 83   : 
; 84   : 		_Analysis_assume_(this->_Ptr != _Tptr());
; 85   : 
; 86   : 		return (*this->_Ptr);

	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]

; 87   : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::_Destroy, COMDAT
; _this$ = ecx

; 1565 : 		{	// destroy [_First, _Last) using allocator

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1566 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal

; 1567 : 		_Destroy_range(_First, _Last, _Alval);

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
	add	esp, 12					; 0000000cH

; 1568 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 641  : 		{	// get reference to allocator

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 642  : 		return (_Alty());

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 643  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 480  : 	_Vector_val()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 481  : 		{	// initialize values
; 482  : 		_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 483  : 		_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 484  : 		_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 485  : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$_Vector_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<char> >::_Vector_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 47   : 		{	// construct with pointer _Parg

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [eax], ecx

; 48   : 		this->_Adopt(_Pvector);

	mov	edx, DWORD PTR __Pvector$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	; std::_Iterator_base0::_Adopt

; 49   : 		}

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -2						; size = 1
$T2 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z PROC ; std::vector<char,std::allocator<char> >::assign<char *>, COMDAT
; _this$ = ecx

; 1287 : 		typename enable_if<_Is_iterator<_Iter>::value,

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1288 : 			void>::type
; 1289 : 		assign(_Iter _First, _Iter _Last)
; 1290 : 		{	// assign [_First, _Last)
; 1291 : 		clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ; std::vector<char,std::allocator<char> >::clear

; 1292 : 		_Assign(_First, _Last, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ; std::_Iter_cat<char *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR $T2[ebp], dl
	movzx	eax, BYTE PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uforward_iterator_tag@1@@Z ; std::vector<char,std::allocator<char> >::_Assign<char *>

; 1293 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
??$assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0@Z ENDP ; std::vector<char,std::allocator<char> >::assign<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 95   : 	{	// destroy [_First, _Last)

	push	ebp
	mov	ebp, esp
	push	ecx

; 96   : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));

	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ; std::_Ptr_cat<char,char>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
	add	esp, 16					; 00000010H

; 97   : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ PROC	; std::vector<char,std::allocator<char> >::clear, COMDAT
; _this$ = ecx

; 1507 : 		{	// erase all

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1508 : 		this->_Orphan_all();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Orphan_all@_Container_base0@std@@QAEXXZ ; std::_Container_base0::_Orphan_all

; 1509 : 		_Destroy(this->_Myfirst, this->_Mylast);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Destroy@?$vector@DV?$allocator@D@std@@@std@@IAEXPAD0@Z ; std::vector<char,std::allocator<char> >::_Destroy

; 1510 : 		this->_Mylast = this->_Myfirst;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx+4], eax

; 1511 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?clear@?$vector@DV?$allocator@D@std@@@std@@QAEXXZ ENDP	; std::vector<char,std::allocator<char> >::clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z PROC ; std::_Iter_cat<char *>, COMDAT

; 405  : 	{	// return category from iterator argument

	push	ebp
	mov	ebp, esp
	push	ecx

; 406  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 407  : 	return (_Cat);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	cl, BYTE PTR __Cat$[ebp]
	mov	BYTE PTR [eax], cl
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 408  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ENDP ; std::_Iter_cat<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??$_Assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Newcapacity$1 = -12					; size = 4
__Newsize$ = -8						; size = 4
_this$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uforward_iterator_tag@1@@Z PROC ; std::vector<char,std::allocator<char> >::_Assign<char *>, COMDAT
; _this$ = ecx

; 1303 : 		void _Assign(_Iter _First, _Iter _Last, forward_iterator_tag)

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1304 : 		{	// assign [_First, _Last), forward iterators
; 1305 : 		if (_First == _Last)

	mov	eax, DWORD PTR __First$[ebp]
	cmp	eax, DWORD PTR __Last$[ebp]
	jne	SHORT $LN2@Assign

; 1306 : 			return;	// nothing to do

	jmp	SHORT $LN3@Assign
$LN2@Assign:

; 1307 : 
; 1308 : 		size_type _Newsize = _STD distance(_First, _Last);

	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	call	??$distance@PAD@std@@YAHPAD0@Z		; std::distance<char *>
	add	esp, 8
	mov	DWORD PTR __Newsize$[ebp], eax

; 1309 : 
; 1310 : 		if (capacity() < _Newsize)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
	cmp	eax, DWORD PTR __Newsize$[ebp]
	jae	SHORT $LN1@Assign

; 1311 : 			{	// need more room, try to get it
; 1312 : 			size_type _Newcapacity = _Grow_to(_Newsize);

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ; std::vector<char,std::allocator<char> >::_Grow_to
	mov	DWORD PTR __Newcapacity$1[ebp], eax

; 1313 : 			_Tidy();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Tidy@?$vector@DV?$allocator@D@std@@@std@@IAEXXZ ; std::vector<char,std::allocator<char> >::_Tidy

; 1314 : 			_Buy(_Newcapacity);

	mov	ecx, DWORD PTR __Newcapacity$1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ; std::vector<char,std::allocator<char> >::_Buy
$LN1@Assign:

; 1315 : 			}
; 1316 : 
; 1317 : 		this->_Mylast = _Ucopy(_First, _Last, this->_Myfirst);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __Last$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN3@Assign:

; 1318 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Assign@PAD@?$vector@DV?$allocator@D@std@@@std@@QAEXPAD0Uforward_iterator_tag@1@@Z ENDP ; std::vector<char,std::allocator<char> >::_Assign<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z PROC ; std::_Ptr_cat<char,char>, COMDAT

; 444  : 	{	// return pointer category from pointers

	push	ebp
	mov	ebp, esp
	push	ecx

; 445  : 	typename _Ptr_cat_helper<_Elem1, _Elem2>::type _Cat;
; 446  : 	return (_Cat);

	mov	al, BYTE PTR __Cat$[ebp]

; 447  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ENDP ; std::_Ptr_cat<char,char>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xmemory0
;	COMDAT ??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 89   : 	{	// destroy [_First, _Last), scalar type (do nothing)

	push	ebp
	mov	ebp, esp

; 90   : 	}

	pop	ebp
	ret	0
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAXPAD0AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::capacity, COMDAT
; _this$ = ecx

; 1009 : 		{	// return current length of allocated storage

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1010 : 		return (this->_Myend - this->_Myfirst);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	sub	eax, DWORD PTR [ecx]

; 1011 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::capacity
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
__Capacity$ = 8						; size = 4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z PROC	; std::vector<char,std::allocator<char> >::_Buy, COMDAT
; _this$ = ecx

; 1546 : 		{	// allocate array with _Capacity elements

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1547 : 		this->_Myfirst = pointer();

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0

; 1548 : 		this->_Mylast = pointer();

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0

; 1549 : 		this->_Myend = pointer();

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0

; 1550 : 
; 1551 : 		if (_Capacity == 0)

	cmp	DWORD PTR __Capacity$[ebp], 0
	jne	SHORT $LN4@Buy

; 1552 : 			return (false);

	xor	al, al
	jmp	SHORT $LN6@Buy
	jmp	SHORT $LN3@Buy
$LN4@Buy:

; 1553 : 		else if (max_size() < _Capacity)

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN2@Buy

; 1554 : 			_Xlen();	// result too long

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ; std::vector<char,std::allocator<char> >::_Xlen

; 1555 : 		else

	jmp	SHORT $LN3@Buy
$LN2@Buy:

; 1556 : 			{	// nonempty array, allocate storage
; 1557 : 			this->_Myfirst = this->_Getal().allocate(_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax

; 1558 : 			this->_Mylast = this->_Myfirst;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax+4], edx

; 1559 : 			this->_Myend = this->_Myfirst + _Capacity;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR __Capacity$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN3@Buy:

; 1560 : 			}
; 1561 : 		return (true);

	mov	al, 1
$LN6@Buy:

; 1562 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Buy@?$vector@DV?$allocator@D@std@@@std@@IAE_NI@Z ENDP	; std::vector<char,std::allocator<char> >::_Buy
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z
_TEXT	SEGMENT
tv73 = -12						; size = 4
_this$ = -8						; size = 4
__Capacity$ = -4					; size = 4
__Count$ = 8						; size = 4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z PROC ; std::vector<char,std::allocator<char> >::_Grow_to, COMDAT
; _this$ = ecx

; 1571 : 		{	// grow by 50% or at least to _Count

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 1572 : 		size_type _Capacity = capacity();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?capacity@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::capacity
	mov	DWORD PTR __Capacity$[ebp], eax

; 1573 : 
; 1574 : 		_Capacity = max_size() - _Capacity / 2 < _Capacity
; 1575 : 			? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

	mov	ecx, DWORD PTR _this$[ebp]
	call	?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ; std::vector<char,std::allocator<char> >::max_size
	mov	ecx, DWORD PTR __Capacity$[ebp]
	shr	ecx, 1
	sub	eax, ecx
	cmp	eax, DWORD PTR __Capacity$[ebp]
	jae	SHORT $LN4@Grow_to
	mov	DWORD PTR tv73[ebp], 0
	jmp	SHORT $LN5@Grow_to
$LN4@Grow_to:
	mov	edx, DWORD PTR __Capacity$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR __Capacity$[ebp]
	mov	DWORD PTR tv73[ebp], edx
$LN5@Grow_to:
	mov	eax, DWORD PTR tv73[ebp]
	mov	DWORD PTR __Capacity$[ebp], eax

; 1576 : 		if (_Capacity < _Count)

	mov	ecx, DWORD PTR __Capacity$[ebp]
	cmp	ecx, DWORD PTR __Count$[ebp]
	jae	SHORT $LN1@Grow_to

; 1577 : 			_Capacity = _Count;

	mov	edx, DWORD PTR __Count$[ebp]
	mov	DWORD PTR __Capacity$[ebp], edx
$LN1@Grow_to:

; 1578 : 		return (_Capacity);

	mov	eax, DWORD PTR __Capacity$[ebp]

; 1579 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
?_Grow_to@?$vector@DV?$allocator@D@std@@@std@@IBEII@Z ENDP ; std::vector<char,std::allocator<char> >::_Grow_to
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
$T1 = -1						; size = 1
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ PROC ; std::vector<char,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1152 : 		{	// return maximum possible length of sequence

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1153 : 		return (this->_Getal().max_size());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal
	mov	ecx, eax
	call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char> >::max_size

; 1154 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?max_size@?$vector@DV?$allocator@D@std@@@std@@QBEIXZ ENDP ; std::vector<char,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ PROC	; std::vector<char,std::allocator<char> >::_Xlen, COMDAT
; _this$ = ecx

; 1753 : 		{	// report a length_error

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 1754 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	?_Xlength_error@std@@YAXPBD@Z		; std::_Xlength_error
$LN2@Xlen:

; 1755 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Xlen@?$vector@DV?$allocator@D@std@@@std@@IBEXXZ ENDP	; std::vector<char,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$distance@PAD@std@@YAHPAD0@Z
_TEXT	SEGMENT
__Off$ = -8						; size = 4
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
??$distance@PAD@std@@YAHPAD0@Z PROC			; std::distance<char *>, COMDAT

; 756  : 	{	// return distance between iterators

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 757  : 	typename iterator_traits<_InIt>::difference_type _Off = 0;

	mov	DWORD PTR __Off$[ebp], 0

; 758  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

	lea	eax, DWORD PTR __First$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	call	??$_Iter_cat@PAD@std@@YA?AUrandom_access_iterator_tag@0@ABQAD@Z ; std::_Iter_cat<char *>
	add	esp, 8
	mov	dl, BYTE PTR [eax]
	movzx	eax, dl
	push	eax
	lea	ecx, DWORD PTR __Off$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z ; std::_Distance2<char *,int>
	add	esp, 16					; 00000010H

; 759  : 	return (_Off);

	mov	eax, DWORD PTR __Off$[ebp]

; 760  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$distance@PAD@std@@YAHPAD0@Z ENDP			; std::distance<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\vector
;	COMDAT ??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__Alval$ = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z PROC ; std::vector<char,std::allocator<char> >::_Ucopy<char *>, COMDAT
; _this$ = ecx

; 1636 : 		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 1637 : 		{	// copy initializing [_First, _Last), using allocator
; 1638 : 		_Alty _Alval(this->_Getal());

	lea	eax, DWORD PTR __Alval$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Vector_alloc<0,std::_Vec_base_types<char,std::allocator<char> > >::_Getal

; 1639 : 		return (_Uninitialized_copy(_First, _Last,
; 1640 : 			_Ptr, _Alval));

	lea	ecx, DWORD PTR __Alval$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edx
	mov	eax, DWORD PTR __Last$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Uninitialized_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Uninitialized_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
	add	esp, 16					; 00000010H

; 1641 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??$_Ucopy@PAD@?$vector@DV?$allocator@D@std@@@std@@IAEPADPAD00@Z ENDP ; std::vector<char,std::allocator<char> >::_Ucopy<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z PROC ; std::_Distance2<char *,int>, COMDAT

; 741  : 	{	// add to _Off distance between random-access iterators

	push	ebp
	mov	ebp, esp

; 742  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 743  : 	if (_First != _Last)
; 744  : 		{	// check for null pointers
; 745  : 		_DEBUG_POINTER(_First);
; 746  : 		_DEBUG_POINTER(_Last);
; 747  : 		}
; 748  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 749  : 
; 750  : 	_Off += _Last - _First;

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	ecx, DWORD PTR __Off$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	edx, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [edx], eax

; 751  : 	}

	pop	ebp
	ret	0
??$_Distance2@PADH@std@@YAXPAD0AAHUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<char *,int>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Uninitialized_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 424  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp

; 425  : 	return (_Rechecked(_Dest,
; 426  : 		_Uninit_copy(_Unchecked(_First), _Unchecked(_Last),
; 427  : 			_Unchecked(_Dest), _Al)));

	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Unchecked@PAD@std@@YAPADPAD@Z	; std::_Unchecked<char *>
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	call	??$_Unchecked@PAD@std@@YAPADPAD@Z	; std::_Unchecked<char *>
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Unchecked@PAD@std@@YAPADPAD@Z	; std::_Unchecked<char *>
	add	esp, 4
	push	eax
	call	??$_Uninit_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ; std::_Uninit_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
	add	esp, 16					; 00000010H
	push	eax
	lea	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	call	??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z ; std::_Rechecked<char *,char *>
	add	esp, 8
	mov	eax, DWORD PTR [eax]

; 428  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Uninitialized_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$_Unchecked@PAD@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAD@std@@YAPADPAD@Z PROC			; std::_Unchecked<char *>, COMDAT

; 280  : 	{	// construct unchecked from checked, generic

	push	ebp
	mov	ebp, esp

; 281  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 282  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAD@std@@YAPADPAD@Z ENDP			; std::_Unchecked<char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -1						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninit_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z PROC ; std::_Uninit_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 414  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	push	ebp
	mov	ebp, esp
	push	ecx

; 415  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 416  : 		_Ptr_cat(_First, _Dest)));

	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	mov	ecx, DWORD PTR __First$[ebp]
	push	ecx
	call	??$_Ptr_cat@DD@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAD0@Z ; std::_Ptr_cat<char,char>
	add	esp, 8
	mov	BYTE PTR $T1[ebp], al
	movzx	edx, BYTE PTR $T1[ebp]
	push	edx
	mov	eax, DWORD PTR __Al$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Dest$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Last$[ebp]
	push	edx
	mov	eax, DWORD PTR __First$[ebp]
	push	eax
	call	??$_Uninit_copy@DD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<char,char>
	add	esp, 20					; 00000014H

; 417  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@PADPADU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@@Z ENDP ; std::_Uninit_copy<char *,char *,std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z PROC	; std::_Rechecked<char *,char *>, COMDAT

; 288  : 	{	// reset checked from unchecked, generic

	push	ebp
	mov	ebp, esp

; 289  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 290  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]

; 291  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PADPAD@std@@YAAAPADAAPADPAD@Z ENDP	; std::_Rechecked<char *,char *>
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xmemory
;	COMDAT ??$_Uninit_copy@DD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__Count$ = -4						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@DD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC ; std::_Uninit_copy<char,char>, COMDAT

; 401  : 	{	// copy [_First, _Last) to raw _Dest, scalar type

	push	ebp
	mov	ebp, esp
	push	ecx

; 402  : 	_DEBUG_RANGE(_First, _Last);
; 403  : 	_DEBUG_POINTER(_Dest);
; 404  : 	size_t _Count = (size_t)(_Last - _First);

	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, DWORD PTR __First$[ebp]
	mov	DWORD PTR __Count$[ebp], eax

; 405  : 	return ((_Ty2 *)_CSTD memmove(&*_Dest, &*_First,
; 406  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ecx
	mov	edx, DWORD PTR __First$[ebp]
	push	edx
	mov	eax, DWORD PTR __Dest$[ebp]
	push	eax
	call	_memmove
	add	esp, 12					; 0000000cH
	add	eax, DWORD PTR __Count$[ebp]

; 407  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninit_copy@DD@std@@YAPADPAD00AAU?$_Wrap_alloc@V?$allocator@D@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<char,char>
_TEXT	ENDS
END
