; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\SettingsAudio.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R4SettingsAudio@@6B@				; SettingsAudio::`RTTI Complete Object Locator'
PUBLIC	??_R3SettingsAudio@@8				; SettingsAudio::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2SettingsAudio@@8				; SettingsAudio::`RTTI Base Class Array'
PUBLIC	??_7SettingsAudio@@6B@				; SettingsAudio::`vftable'
PUBLIC	??_R1A@?0A@EA@SettingsAudio@@8			; SettingsAudio::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVSettingsAudio@@@8			; SettingsAudio `RTTI Type Descriptor'
EXTRN	__imp_?SetDefaults@SettingsPane@@UAEXXZ:PROC
EXTRN	?SetDefaults@SettingsPane@@UAEXXZ:PROC		; SettingsPane::SetDefaults
;	COMDAT ??_R0?AVSettingsAudio@@@8
data$r	SEGMENT
??_R0?AVSettingsAudio@@@8 DD FLAT:??_7type_info@@6B@	; SettingsAudio `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVSettingsAudio@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@SettingsAudio@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@SettingsAudio@@8 DD FLAT:??_R0?AVSettingsAudio@@@8 ; SettingsAudio::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3SettingsAudio@@8
rdata$r	ENDS
;	COMDAT ??_7SettingsAudio@@6B@
CONST	SEGMENT
??_7SettingsAudio@@6B@ DD FLAT:??_R4SettingsAudio@@6B@	; SettingsAudio::`vftable'
	DD	FLAT:??_ESettingsAudio@@UAEPAXI@Z
	DD	FLAT:?GetCategory@SettingsAudio@@UBEPB_WXZ
	DD	FLAT:?CreatePane@SettingsAudio@@UAEPAUHWND__@@PAU2@@Z
	DD	FLAT:?DestroyPane@SettingsAudio@@UAEXXZ
	DD	FLAT:?ProcMessage@SettingsAudio@@UAEHIIJ@Z
	DD	FLAT:?ApplySettings@SettingsAudio@@UAEXXZ
	DD	FLAT:?CancelSettings@SettingsAudio@@UAEXXZ
	DD	FLAT:?HasDefaults@SettingsAudio@@UBE_NXZ
	DD	FLAT:?SetDefaults@SettingsPane@@UAEXXZ
	DD	FLAT:?OptimizeSettings@SettingsPane@@UAEXXZ
CONST	ENDS
;	COMDAT ??_R2SettingsAudio@@8
rdata$r	SEGMENT
??_R2SettingsAudio@@8 DD FLAT:??_R1A@?0A@EA@SettingsAudio@@8 ; SettingsAudio::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@SettingsPane@@8
rdata$r	ENDS
;	COMDAT ??_R3SettingsAudio@@8
rdata$r	SEGMENT
??_R3SettingsAudio@@8 DD 00H				; SettingsAudio::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2SettingsAudio@@8
rdata$r	ENDS
;	COMDAT ??_R4SettingsAudio@@6B@
rdata$r	SEGMENT
??_R4SettingsAudio@@6B@ DD 00H				; SettingsAudio::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVSettingsAudio@@@8
	DD	FLAT:??_R3SettingsAudio@@8
	ORG $+2
$SG4294754832 DB 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754833 DB 'D', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 00H, 00H
$SG4294754834 DB 'S', 00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 's', 00H, '.', 00H, 'A', 00H, 'u', 00H, 'd', 00H, 'i'
	DB	00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294754828 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754829 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294754830 DB 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294754831 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754824 DB 'F', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'M', 00H
	DB	'i', 00H, 'c', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'o', 00H, 00H
	DB	00H
	ORG $+2
$SG4294754825 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754826 DB 'P', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'T', 00H, 'o', 00H
	DB	'T', 00H, 'a', 00H, 'l', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 'y', 00H, 00H, 00H
$SG4294754827 DB 'D', 00H, 'i', 00H, 's', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
$SG4294754820 DB 'M', 00H, 'i', 00H, 'c', 00H, 'B', 00H, 'o', 00H, 'o', 00H
	DB	's', 00H, 't', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754821 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754822 DB 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H
	DB	'p', 00H, 'B', 00H, 'o', 00H, 'o', 00H, 's', 00H, 't', 00H, 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG4294754823 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754816 DB 'M', 00H, 'i', 00H, 'c', 00H, 'T', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, 00H, 00H
$SG4294754817 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294754818 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754819 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754812 DB 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754813 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754814 DB 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754815 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754808 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294754809 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754810 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294754811 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754804 DB 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG4294754805 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754806 DB 'P', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754807 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754800 DB 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'D', 00H
	DB	'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 'F'
	DB	00H, 'o', 00H, 'r', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 'd', 00H, 00H, 00H
$SG4294754801 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754802 DB 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'O', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, 00H, 00H
$SG4294754803 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754796 DB 'F', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'M', 00H
	DB	'i', 00H, 'c', 00H, 'M', 00H, 'o', 00H, 'n', 00H, 'o', 00H, 00H
	DB	00H
	ORG $+2
$SG4294754797 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754798 DB 'P', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'T', 00H, 'o', 00H
	DB	'T', 00H, 'a', 00H, 'l', 00H, 'k', 00H, 'D', 00H, 'e', 00H, 'l'
	DB	00H, 'a', 00H, 'y', 00H, 00H, 00H
$SG4294754799 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754792 DB 'M', 00H, 'i', 00H, 'c', 00H, 'B', 00H, 'o', 00H, 'o', 00H
	DB	's', 00H, 't', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i'
	DB	00H, 'p', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754793 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754794 DB 'D', 00H, 'e', 00H, 's', 00H, 'k', 00H, 't', 00H, 'o', 00H
	DB	'p', 00H, 'B', 00H, 'o', 00H, 'o', 00H, 's', 00H, 't', 00H, 'M'
	DB	00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 'l', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+2
$SG4294754795 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754788 DB 'M', 00H, 'i', 00H, 'c', 00H, 'T', 00H, 'i', 00H, 'm', 00H
	DB	'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, 00H, 00H
$SG4294754789 DB 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 00H, 00H
$SG4294754790 DB 'S', 00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294754791 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754785 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
$SG4294754786 DB 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H
	DB	'y', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'O', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, 00H, 00H
$SG4294754787 DB 'A', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, 00H, 00H
PUBLIC	?ProcMessage@SettingsAudio@@UAEHIIJ@Z		; SettingsAudio::ProcMessage
PUBLIC	?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z ; SettingsAudio::RefreshDevices
PUBLIC	?HasDefaults@SettingsAudio@@UBE_NXZ		; SettingsAudio::HasDefaults
PUBLIC	?CancelSettings@SettingsAudio@@UAEXXZ		; SettingsAudio::CancelSettings
PUBLIC	?ApplySettings@SettingsAudio@@UAEXXZ		; SettingsAudio::ApplySettings
PUBLIC	?DestroyPane@SettingsAudio@@UAEXXZ		; SettingsAudio::DestroyPane
PUBLIC	?CreatePane@SettingsAudio@@UAEPAUHWND__@@PAU2@@Z ; SettingsAudio::CreatePane
PUBLIC	?GetCategory@SettingsAudio@@UBEPB_WXZ		; SettingsAudio::GetCategory
PUBLIC	??1SettingsAudio@@UAE@XZ			; SettingsAudio::~SettingsAudio
PUBLIC	??1AudioDeviceStorage@SettingsAudio@@QAE@XZ	; SettingsAudio::AudioDeviceStorage::~AudioDeviceStorage
PUBLIC	??0AudioDeviceStorage@SettingsAudio@@QAE@XZ	; SettingsAudio::AudioDeviceStorage::AudioDeviceStorage
PUBLIC	??_GSettingsAudio@@UAEPAXI@Z			; SettingsAudio::`scalar deleting destructor'
PUBLIC	?ResetMic@OBS@@QAEXXZ				; OBS::ResetMic
PUBLIC	??0SettingsAudio@@QAE@XZ			; SettingsAudio::SettingsAudio
EXTRN	??_ESettingsAudio@@UAEPAXI@Z:PROC		; SettingsAudio::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
_BSS	ENDS
;	COMDAT ?$S1@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4IA
_BSS	SEGMENT
?$S1@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4IA DD 01H DUP (?) ; S1<`template-parameter-2',SettingsAudio::tCategory,unsigned int, ?? &>
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?name@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4PB_WB
_BSS	SEGMENT
?name@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4PB_WB DD 01H DUP (?) ; `SettingsAudio::GetCategory'::`2'::name
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ??0SettingsAudio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0SettingsAudio@@QAE@XZ PROC				; SettingsAudio::SettingsAudio, COMDAT
; _this$ = ecx

; 27   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0SettingsPane@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SettingsAudio@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AudioDeviceStorage@SettingsAudio@@QAE@XZ

; 28   : }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0SettingsAudio@@QAE@XZ ENDP				; SettingsAudio::SettingsAudio
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?ResetMic@OBS@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ResetMic@OBS@@QAEXXZ PROC				; OBS::ResetMic, COMDAT
; _this$ = ecx

; 1335 :     inline void ResetMic() {if (bRunning && micAudio) ResetWASAPIAudioDevice(micAudio);}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+622]
	test	ecx, ecx
	je	SHORT $LN2@ResetMic
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+116], 0
	je	SHORT $LN2@ResetMic
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+116]
	push	ecx
	call	?ResetWASAPIAudioDevice@@YAXPAVAudioSource@@@Z ; ResetWASAPIAudioDevice
	add	esp, 4
$LN2@ResetMic:
	mov	esp, ebp
	pop	ebp
	ret	0
?ResetMic@OBS@@QAEXXZ ENDP				; OBS::ResetMic
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GSettingsAudio@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GSettingsAudio@@UAEPAXI@Z PROC			; SettingsAudio::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1SettingsAudio@@UAE@XZ		; SettingsAudio::~SettingsAudio
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GSettingsAudio@@UAEPAXI@Z ENDP			; SettingsAudio::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0AudioDeviceStorage@SettingsAudio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0AudioDeviceStorage@SettingsAudio@@QAE@XZ PROC	; SettingsAudio::AudioDeviceStorage::AudioDeviceStorage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0AudioDeviceList@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0AudioDeviceList@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0AudioDeviceStorage@SettingsAudio@@QAE@XZ ENDP	; SettingsAudio::AudioDeviceStorage::AudioDeviceStorage
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1AudioDeviceStorage@SettingsAudio@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1AudioDeviceStorage@SettingsAudio@@QAE@XZ PROC	; SettingsAudio::AudioDeviceStorage::~AudioDeviceStorage, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1AudioDeviceList@@QAE@XZ		; AudioDeviceList::~AudioDeviceList
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1AudioDeviceList@@QAE@XZ		; AudioDeviceList::~AudioDeviceList
	mov	esp, ebp
	pop	ebp
	ret	0
??1AudioDeviceStorage@SettingsAudio@@QAE@XZ ENDP	; SettingsAudio::AudioDeviceStorage::~AudioDeviceStorage
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ??1SettingsAudio@@UAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1SettingsAudio@@UAE@XZ PROC				; SettingsAudio::~SettingsAudio, COMDAT
; _this$ = ecx

; 31   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7SettingsAudio@@6B@

; 32   : }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AudioDeviceStorage@SettingsAudio@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1SettingsPane@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1SettingsAudio@@UAE@XZ ENDP				; SettingsAudio::~SettingsAudio
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?GetCategory@SettingsAudio@@UBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetCategory@SettingsAudio@@UBEPB_WXZ PROC		; SettingsAudio::GetCategory, COMDAT
; _this$ = ecx

; 35   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   :     static CTSTR name = Str("Settings.Audio");

	mov	eax, DWORD PTR ?$S1@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4IA
	and	eax, 1
	jne	SHORT $LN1@GetCategor
	mov	ecx, DWORD PTR ?$S1@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4IA, ecx
	push	OFFSET $SG4294754834
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR ?name@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4PB_WB, eax
$LN1@GetCategor:

; 37   :     return name;

	mov	eax, DWORD PTR ?name@?1??GetCategory@SettingsAudio@@UBEPB_WXZ@4PB_WB

; 38   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCategory@SettingsAudio@@UBEPB_WXZ ENDP		; SettingsAudio::GetCategory
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?CreatePane@SettingsAudio@@UAEPAUHWND__@@PAU2@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_parentHwnd$ = 8					; size = 4
?CreatePane@SettingsAudio@@UAEPAUHWND__@@PAU2@@Z PROC	; SettingsAudio::CreatePane, COMDAT
; _this$ = ecx

; 41   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 42   :     hwnd = OBSCreateDialog(hinstMain, MAKEINTRESOURCE(IDD_SETTINGS_AUDIO), parentHwnd, (DLGPROC)DialogProc, (LPARAM)this);

	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?DialogProc@SettingsPane@@SGHPAUHWND__@@IIJ@Z
	push	ecx
	mov	edx, DWORD PTR _parentHwnd$[ebp]
	push	edx
	push	119					; 00000077H
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSCreateDialog@@YAPAUHWND__@@PAUHINSTANCE__@@PB_WPAU1@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax

; 43   :     return hwnd;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreatePane@SettingsAudio@@UAEPAUHWND__@@PAU2@@Z ENDP	; SettingsAudio::CreatePane
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?DestroyPane@SettingsAudio@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?DestroyPane@SettingsAudio@@UAEXXZ PROC			; SettingsAudio::DestroyPane, COMDAT
; _this$ = ecx

; 47   : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 48   :     DestroyWindow(hwnd);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__DestroyWindow@4

; 49   :     hwnd = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0

; 50   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?DestroyPane@SettingsAudio@@UAEXXZ ENDP			; SettingsAudio::DestroyPane
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?ApplySettings@SettingsAudio@@UAEXXZ
_TEXT	SEGMENT
tv383 = -80						; size = 8
tv368 = -72						; size = 8
_strPlaybackDevice$ = -64				; size = 8
_strDevice$ = -56					; size = 8
_bufferTime$ = -48					; size = 4
tv379 = -44						; size = 4
tv364 = -40						; size = 4
tv220 = -36						; size = 4
tv344 = -32						; size = 4
tv336 = -28						; size = 4
_iDevice$ = -24						; size = 4
_iPlaybackDevice$ = -20					; size = 4
_micTimeOffset$ = -16					; size = 4
_micBoostMultiple$ = -12				; size = 4
_desktopBoostMultiple$ = -8				; size = 4
_this$ = -4						; size = 4
?ApplySettings@SettingsAudio@@UAEXXZ PROC		; SettingsAudio::ApplySettings, COMDAT
; _this$ = ecx

; 53   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	mov	DWORD PTR _this$[ebp], ecx

; 54   :     UINT iPlaybackDevice = (UINT)SendMessage(GetDlgItem(hwnd, IDC_PLAYBACKDEVICES), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1142					; 00000476H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _iPlaybackDevice$[ebp], eax

; 55   :     String strPlaybackDevice;

	lea	ecx, DWORD PTR _strPlaybackDevice$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 56   : 
; 57   :     if(iPlaybackDevice == CB_ERR) {

	cmp	DWORD PTR _iPlaybackDevice$[ebp], -1
	jne	SHORT $LN19@ApplySetti

; 58   :         strPlaybackDevice = TEXT("Default");

	push	OFFSET $SG4294754833
	lea	ecx, DWORD PTR _strPlaybackDevice$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 59   :     }
; 60   :     else {

	jmp	SHORT $LN18@ApplySetti
$LN19@ApplySetti:

; 61   :         strPlaybackDevice = storage.playbackDevices.devices[iPlaybackDevice].strID;

	mov	edx, DWORD PTR _iPlaybackDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	push	eax
	lea	ecx, DWORD PTR _strPlaybackDevice$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN18@ApplySetti:

; 62   :     }
; 63   : 
; 64   :     AppConfig->SetString(TEXT("Audio"), TEXT("PlaybackDevice"), strPlaybackDevice);

	lea	ecx, DWORD PTR _strPlaybackDevice$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754832
	push	OFFSET $SG4294754831
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 65   : 
; 66   :     UINT iDevice = (UINT)SendMessage(GetDlgItem(hwnd, IDC_MICDEVICES), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1052					; 0000041cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _iDevice$[ebp], eax

; 67   : 
; 68   :     String strDevice;

	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 69   : 
; 70   :     if(iDevice == CB_ERR)

	cmp	DWORD PTR _iDevice$[ebp], -1
	jne	SHORT $LN17@ApplySetti

; 71   :         strDevice = TEXT("Disable");

	push	OFFSET $SG4294754830
	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@PB_W@Z

; 72   :     else

	jmp	SHORT $LN16@ApplySetti
$LN17@ApplySetti:

; 73   :         strDevice = storage.recordingDevices.devices[iDevice].strID;

	mov	edx, DWORD PTR _iDevice$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	push	eax
	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
$LN16@ApplySetti:

; 74   : 
; 75   : 
; 76   :     AppConfig->SetString(TEXT("Audio"), TEXT("Device"), strDevice);

	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754829
	push	OFFSET $SG4294754828
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 77   : 
; 78   : 
; 79   :     if(strDevice.CompareI(TEXT("Disable")))

	push	OFFSET $SG4294754827
	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN15@ApplySetti

; 80   :         EnableWindow(GetDlgItem(hwndMain, ID_MICVOLUME), FALSE);

	push	0
	push	5007					; 0000138fH
	mov	eax, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 81   :     else

	jmp	SHORT $LN14@ApplySetti
$LN15@ApplySetti:

; 82   :         EnableWindow(GetDlgItem(hwndMain, ID_MICVOLUME), TRUE);

	push	1
	push	5007					; 0000138fH
	mov	ecx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN14@ApplySetti:

; 83   : 
; 84   :     //------------------------------------
; 85   : 
; 86   :     App->pushToTalkDelay = (int)SendMessage(GetDlgItem(hwnd, IDC_PTTDELAY), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1081					; 00000439H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cdq
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [ecx+1248], eax
	mov	DWORD PTR [ecx+1252], edx

; 87   :     if(App->pushToTalkDelay < 0)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR tv336[ebp], edx
	mov	eax, DWORD PTR tv336[ebp]
	cmp	DWORD PTR [eax+1252], 0
	jg	SHORT $LN13@ApplySetti
	jl	SHORT $LN24@ApplySetti
	mov	ecx, DWORD PTR tv336[ebp]
	cmp	DWORD PTR [ecx+1248], 0
	jae	SHORT $LN13@ApplySetti
$LN24@ApplySetti:

; 88   :         App->pushToTalkDelay = 0;

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [edx+1248], 0
	mov	DWORD PTR [edx+1252], 0
	jmp	SHORT $LN11@ApplySetti
$LN13@ApplySetti:

; 89   :     else if(App->pushToTalkDelay > 2000)

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR tv344[ebp], eax
	mov	ecx, DWORD PTR tv344[ebp]
	cmp	DWORD PTR [ecx+1252], 0
	jl	SHORT $LN11@ApplySetti
	jg	SHORT $LN25@ApplySetti
	mov	edx, DWORD PTR tv344[ebp]
	cmp	DWORD PTR [edx+1248], 2000		; 000007d0H
	jbe	SHORT $LN11@ApplySetti
$LN25@ApplySetti:

; 90   :         App->pushToTalkDelay = 2000;

	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	DWORD PTR [eax+1248], 2000		; 000007d0H
	mov	DWORD PTR [eax+1252], 0
$LN11@ApplySetti:

; 91   :     AppConfig->SetInt(TEXT("Audio"), TEXT("PushToTalkDelay"), (int)App->pushToTalkDelay);

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	edx, DWORD PTR [ecx+1248]
	push	edx
	push	OFFSET $SG4294754826
	push	OFFSET $SG4294754825
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 92   : 
; 93   :     //------------------------------------
; 94   : 
; 95   :     App->bForceMicMono = SendMessage(GetDlgItem(hwnd, IDC_FORCEMONO), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN22@ApplySetti
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN23@ApplySetti
$LN22@ApplySetti:
	mov	DWORD PTR tv220[ebp], 0
$LN23@ApplySetti:
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	al, BYTE PTR tv220[ebp]
	mov	BYTE PTR [edx+1216], al

; 96   :     AppConfig->SetInt(TEXT("Audio"), TEXT("ForceMicMono"), App->bForceMicMono);

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	edx, BYTE PTR [ecx+1216]
	push	edx
	push	OFFSET $SG4294754824
	push	OFFSET $SG4294754823
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 97   : 
; 98   :     //------------------------------------
; 99   : 
; 100  :     DWORD desktopBoostMultiple = (DWORD)SendMessage(GetDlgItem(hwnd, IDC_DESKTOPBOOST), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1085					; 0000043dH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _desktopBoostMultiple$[ebp], eax

; 101  :     if(desktopBoostMultiple < 1)

	cmp	DWORD PTR _desktopBoostMultiple$[ebp], 1
	jae	SHORT $LN10@ApplySetti

; 102  :         desktopBoostMultiple = 1;

	mov	DWORD PTR _desktopBoostMultiple$[ebp], 1
	jmp	SHORT $LN8@ApplySetti
$LN10@ApplySetti:

; 103  :     else if(desktopBoostMultiple > 20)

	cmp	DWORD PTR _desktopBoostMultiple$[ebp], 20 ; 00000014H
	jbe	SHORT $LN8@ApplySetti

; 104  :         desktopBoostMultiple = 20;

	mov	DWORD PTR _desktopBoostMultiple$[ebp], 20 ; 00000014H
$LN8@ApplySetti:

; 105  :     GlobalConfig->SetInt(TEXT("Audio"), TEXT("DesktopBoostMultiple"), desktopBoostMultiple);

	mov	edx, DWORD PTR _desktopBoostMultiple$[ebp]
	push	edx
	push	OFFSET $SG4294754822
	push	OFFSET $SG4294754821
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 106  :     App->desktopBoost = float(desktopBoostMultiple);

	mov	eax, DWORD PTR _desktopBoostMultiple$[ebp]
	mov	DWORD PTR tv364[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv364[ebp]
	mov	ecx, DWORD PTR tv364[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv368[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv368[ebp]
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movss	DWORD PTR [edx+1220], xmm0

; 107  : 
; 108  :     //------------------------------------
; 109  : 
; 110  :     DWORD micBoostMultiple = (DWORD)SendMessage(GetDlgItem(hwnd, IDC_MICBOOST), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1079					; 00000437H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _micBoostMultiple$[ebp], eax

; 111  :     if(micBoostMultiple < 1)

	cmp	DWORD PTR _micBoostMultiple$[ebp], 1
	jae	SHORT $LN7@ApplySetti

; 112  :         micBoostMultiple = 1;

	mov	DWORD PTR _micBoostMultiple$[ebp], 1
	jmp	SHORT $LN5@ApplySetti
$LN7@ApplySetti:

; 113  :     else if(micBoostMultiple > 20)

	cmp	DWORD PTR _micBoostMultiple$[ebp], 20	; 00000014H
	jbe	SHORT $LN5@ApplySetti

; 114  :         micBoostMultiple = 20;

	mov	DWORD PTR _micBoostMultiple$[ebp], 20	; 00000014H
$LN5@ApplySetti:

; 115  :     AppConfig->SetInt(TEXT("Audio"), TEXT("MicBoostMultiple"), micBoostMultiple);

	mov	edx, DWORD PTR _micBoostMultiple$[ebp]
	push	edx
	push	OFFSET $SG4294754820
	push	OFFSET $SG4294754819
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 116  :     App->micBoost = float(micBoostMultiple);

	mov	eax, DWORD PTR _micBoostMultiple$[ebp]
	mov	DWORD PTR tv379[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv379[ebp]
	mov	ecx, DWORD PTR tv379[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv383[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv383[ebp]
	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movss	DWORD PTR [edx+1224], xmm0

; 117  : 
; 118  :     //------------------------------------
; 119  : 
; 120  :     int bufferTime = GlobalConfig->GetInt(TEXT("General"), TEXT("SceneBufferingTime"), 700);

	push	700					; 000002bcH
	push	OFFSET $SG4294754818
	push	OFFSET $SG4294754817
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _bufferTime$[ebp], eax

; 121  : 
; 122  :     int micTimeOffset = (int)SendMessage(GetDlgItem(hwnd, IDC_MICTIMEOFFSET), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1083					; 0000043bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _micTimeOffset$[ebp], eax

; 123  :     if(micTimeOffset < -bufferTime)

	mov	edx, DWORD PTR _bufferTime$[ebp]
	neg	edx
	cmp	DWORD PTR _micTimeOffset$[ebp], edx
	jge	SHORT $LN4@ApplySetti

; 124  :         micTimeOffset = -bufferTime;

	mov	eax, DWORD PTR _bufferTime$[ebp]
	neg	eax
	mov	DWORD PTR _micTimeOffset$[ebp], eax
	jmp	SHORT $LN2@ApplySetti
$LN4@ApplySetti:

; 125  :     else if(micTimeOffset > 20000)

	cmp	DWORD PTR _micTimeOffset$[ebp], 20000	; 00004e20H
	jle	SHORT $LN2@ApplySetti

; 126  :         micTimeOffset = 20000;

	mov	DWORD PTR _micTimeOffset$[ebp], 20000	; 00004e20H
$LN2@ApplySetti:

; 127  :     AppConfig->SetInt(TEXT("Audio"), TEXT("MicTimeOffset"), micTimeOffset);

	mov	ecx, DWORD PTR _micTimeOffset$[ebp]
	push	ecx
	push	OFFSET $SG4294754816
	push	OFFSET $SG4294754815
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 128  : 
; 129  :     if(App->bRunning && App->micAudio)

	mov	edx, DWORD PTR ?App@@3PAVOBS@@A		; App
	movzx	eax, BYTE PTR [edx+622]
	test	eax, eax
	je	SHORT $LN1@ApplySetti
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	cmp	DWORD PTR [ecx+116], 0
	je	SHORT $LN1@ApplySetti

; 130  :         App->micAudio->SetTimeOffset(micTimeOffset);

	mov	edx, DWORD PTR _micTimeOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR ?App@@3PAVOBS@@A		; App
	mov	ecx, DWORD PTR [eax+116]
	call	DWORD PTR __imp_?SetTimeOffset@AudioSource@@QAEXH@Z
$LN1@ApplySetti:

; 131  : }

	lea	ecx, DWORD PTR _strDevice$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strPlaybackDevice$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
?ApplySettings@SettingsAudio@@UAEXXZ ENDP		; SettingsAudio::ApplySettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?CancelSettings@SettingsAudio@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?CancelSettings@SettingsAudio@@UAEXXZ PROC		; SettingsAudio::CancelSettings, COMDAT
; _this$ = ecx

; 134  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 135  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?CancelSettings@SettingsAudio@@UAEXXZ ENDP		; SettingsAudio::CancelSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?HasDefaults@SettingsAudio@@UBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDefaults@SettingsAudio@@UBE_NXZ PROC		; SettingsAudio::HasDefaults, COMDAT
; _this$ = ecx

; 138  : {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 139  :     return false;

	xor	al, al

; 140  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?HasDefaults@SettingsAudio@@UBE_NXZ ENDP		; SettingsAudio::HasDefaults
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z
_TEXT	SEGMENT
$T1 = -76						; size = 8
$T2 = -68						; size = 8
$T3 = -60						; size = 8
$T4 = -52						; size = 8
_strPlaybackID$ = -44					; size = 8
_strDeviceID$ = -36					; size = 8
_hwndTemp$ = -28					; size = 4
_hwndPlayback$ = -24					; size = 4
_i$5 = -20						; size = 4
_i$6 = -16						; size = 4
_iDevice$ = -12						; size = 4
_iPlaybackDevice$ = -8					; size = 4
_this$ = -4						; size = 4
_desktopDeviceType$ = 8					; size = 4
?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z PROC ; SettingsAudio::RefreshDevices, COMDAT
; _this$ = ecx

; 165  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	mov	DWORD PTR _this$[ebp], ecx

; 166  :     storage.playbackDevices.FreeData();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?FreeData@AudioDeviceList@@QAEXXZ	; AudioDeviceList::FreeData

; 167  :     storage.recordingDevices.FreeData();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?FreeData@AudioDeviceList@@QAEXXZ	; AudioDeviceList::FreeData

; 168  : 
; 169  :     HWND hwndTemp = GetDlgItem(hwnd, IDC_MICDEVICES);

	push	1052					; 0000041cH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$[ebp], eax

; 170  :     HWND hwndPlayback = GetDlgItem(hwnd, IDC_PLAYBACKDEVICES);

	push	1142					; 00000476H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndPlayback$[ebp], eax

; 171  : 
; 172  :     SendMessage(hwndTemp, CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	mov	ecx, DWORD PTR _hwndTemp$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 173  :     SendMessage(hwndPlayback, CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	mov	edx, DWORD PTR _hwndPlayback$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 174  : 
; 175  :     GetAudioDevices(storage.playbackDevices, desktopDeviceType, bDisplayConnectedOnly, false);

	push	0
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _desktopDeviceType$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	call	?GetAudioDevices@@YAXAAUAudioDeviceList@@W4AudioDeviceType@@_N2@Z ; GetAudioDevices
	add	esp, 16					; 00000010H

; 176  : 
; 177  :     GetAudioDevices(storage.recordingDevices, ADT_RECORDING, bDisplayConnectedOnly, true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	1
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 20					; 00000014H
	push	eax
	call	?GetAudioDevices@@YAXAAUAudioDeviceList@@W4AudioDeviceType@@_N2@Z ; GetAudioDevices
	add	esp, 16					; 00000010H

; 178  : 
; 179  :     for(UINT i=0; i<storage.playbackDevices.devices.Num(); i++)

	mov	DWORD PTR _i$6[ebp], 0
	jmp	SHORT $LN20@RefreshDev
$LN19@RefreshDev:
	mov	ecx, DWORD PTR _i$6[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$6[ebp], ecx
$LN20@RefreshDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _i$6[ebp], eax
	jae	SHORT $LN18@RefreshDev

; 180  :         SendMessage(hwndPlayback, CB_ADDSTRING, 0, (LPARAM)storage.playbackDevices.devices[i].strName.Array());

	mov	edx, DWORD PTR _i$6[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	add	eax, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndPlayback$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN19@RefreshDev
$LN18@RefreshDev:

; 181  : 
; 182  :     for(UINT i=0; i<storage.recordingDevices.devices.Num(); i++)

	mov	DWORD PTR _i$5[ebp], 0
	jmp	SHORT $LN17@RefreshDev
$LN16@RefreshDev:
	mov	ecx, DWORD PTR _i$5[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$5[ebp], ecx
$LN17@RefreshDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _i$5[ebp], eax
	jae	SHORT $LN15@RefreshDev

; 183  :         SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)storage.recordingDevices.devices[i].strName.Array());

	mov	edx, DWORD PTR _i$5[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	add	eax, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN16@RefreshDev
$LN15@RefreshDev:

; 184  : 
; 185  :     String strPlaybackID;

	lea	ecx, DWORD PTR _strPlaybackID$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 186  :     String strDeviceID;

	lea	ecx, DWORD PTR _strDeviceID$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 187  : 
; 188  :     if (storage.playbackDevices.devices.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	test	eax, eax
	je	SHORT $LN14@RefreshDev

; 189  :         strPlaybackID = AppConfig->GetString(TEXT("Audio"), TEXT("PlaybackDevice"), storage.playbackDevices.devices[0].strID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754814
	push	OFFSET $SG4294754813
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	push	eax
	lea	ecx, DWORD PTR _strPlaybackID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 190  :     else

	jmp	SHORT $LN13@RefreshDev
$LN14@RefreshDev:

; 191  :         strPlaybackID = AppConfig->GetString(TEXT("Audio"), TEXT("PlaybackDevice"));

	push	0
	push	OFFSET $SG4294754812
	push	OFFSET $SG4294754811
	lea	edx, DWORD PTR $T3[ebp]
	push	edx
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	push	eax
	lea	ecx, DWORD PTR _strPlaybackID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN13@RefreshDev:

; 192  : 
; 193  :     if (storage.recordingDevices.devices.Num())

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	test	eax, eax
	je	SHORT $LN12@RefreshDev

; 194  :         strDeviceID = AppConfig->GetString(TEXT("Audio"), TEXT("Device"), storage.recordingDevices.devices[0].strID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754810
	push	OFFSET $SG4294754809
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	push	eax
	lea	ecx, DWORD PTR _strDeviceID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 195  :     else

	jmp	SHORT $LN11@RefreshDev
$LN12@RefreshDev:

; 196  :         strDeviceID = AppConfig->GetString(TEXT("Audio"), TEXT("Device"));

	push	0
	push	OFFSET $SG4294754808
	push	OFFSET $SG4294754807
	lea	ecx, DWORD PTR $T1[ebp]
	push	ecx
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetString@ConfigFile@@QAE?AVString@@PB_W00@Z
	push	eax
	lea	ecx, DWORD PTR _strDeviceID$[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN11@RefreshDev:

; 197  : 
; 198  :     UINT iPlaybackDevice;
; 199  :     for(iPlaybackDevice=0; iPlaybackDevice<storage.playbackDevices.devices.Num(); iPlaybackDevice++)

	mov	DWORD PTR _iPlaybackDevice$[ebp], 0
	jmp	SHORT $LN10@RefreshDev
$LN9@RefreshDev:
	mov	edx, DWORD PTR _iPlaybackDevice$[ebp]
	add	edx, 1
	mov	DWORD PTR _iPlaybackDevice$[ebp], edx
$LN10@RefreshDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _iPlaybackDevice$[ebp], eax
	jae	SHORT $LN8@RefreshDev

; 200  :     {
; 201  :         if(storage.playbackDevices.devices[iPlaybackDevice].strID == strPlaybackID)

	lea	eax, DWORD PTR _strPlaybackID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iPlaybackDevice$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??8String@@QBEHABV0@@Z
	test	eax, eax
	je	SHORT $LN7@RefreshDev

; 202  :         {
; 203  :             SendMessage(hwndPlayback, CB_SETCURSEL, iPlaybackDevice, 0);

	push	0
	mov	edx, DWORD PTR _iPlaybackDevice$[ebp]
	push	edx
	push	334					; 0000014eH
	mov	eax, DWORD PTR _hwndPlayback$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 204  :             break;

	jmp	SHORT $LN8@RefreshDev
$LN7@RefreshDev:

; 205  :         }
; 206  :     }

	jmp	SHORT $LN9@RefreshDev
$LN8@RefreshDev:

; 207  : 
; 208  :     UINT iDevice;
; 209  :     for(iDevice=0; iDevice<storage.recordingDevices.devices.Num(); iDevice++)

	mov	DWORD PTR _iDevice$[ebp], 0
	jmp	SHORT $LN6@RefreshDev
$LN5@RefreshDev:
	mov	ecx, DWORD PTR _iDevice$[ebp]
	add	ecx, 1
	mov	DWORD PTR _iDevice$[ebp], ecx
$LN6@RefreshDev:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _iDevice$[ebp], eax
	jae	SHORT $LN4@RefreshDev

; 210  :     {
; 211  :         if(storage.recordingDevices.devices[iDevice].strID == strDeviceID)

	lea	edx, DWORD PTR _strDeviceID$[ebp]
	push	edx
	mov	eax, DWORD PTR _iDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??8String@@QBEHABV0@@Z
	test	eax, eax
	je	SHORT $LN3@RefreshDev

; 212  :         {
; 213  :             SendMessage(hwndTemp, CB_SETCURSEL, iDevice, 0);

	push	0
	mov	ecx, DWORD PTR _iDevice$[ebp]
	push	ecx
	push	334					; 0000014eH
	mov	edx, DWORD PTR _hwndTemp$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 214  :             break;

	jmp	SHORT $LN4@RefreshDev
$LN3@RefreshDev:

; 215  :         }
; 216  :     }

	jmp	SHORT $LN5@RefreshDev
$LN4@RefreshDev:

; 217  : 
; 218  :     if (iPlaybackDevice && iPlaybackDevice == storage.playbackDevices.devices.Num())

	cmp	DWORD PTR _iPlaybackDevice$[ebp], 0
	je	SHORT $LN2@RefreshDev
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _iPlaybackDevice$[ebp], eax
	jne	SHORT $LN2@RefreshDev

; 219  :     {
; 220  :         AppConfig->SetString(TEXT("Audio"), TEXT("PlaybackDevice"), storage.playbackDevices.devices[0].strID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754806
	push	OFFSET $SG4294754805
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 221  :         SendMessage(hwndPlayback, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	mov	eax, DWORD PTR _hwndPlayback$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 222  : 
; 223  :         SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN2@RefreshDev:

; 224  :     }
; 225  : 
; 226  :     if (iDevice && iDevice == storage.recordingDevices.devices.Num())

	cmp	DWORD PTR _iDevice$[ebp], 0
	je	SHORT $LN1@RefreshDev
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Num@?$List@UAudioDeviceInfo@@@@QBEIXZ	; List<AudioDeviceInfo>::Num
	cmp	DWORD PTR _iDevice$[ebp], eax
	jne	SHORT $LN1@RefreshDev

; 227  :     {
; 228  :         AppConfig->SetString(TEXT("Audio"), TEXT("Device"), storage.recordingDevices.devices[0].strID);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$List@UAudioDeviceInfo@@@@QAEAAUAudioDeviceInfo@@I@Z ; List<AudioDeviceInfo>::operator[]
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294754804
	push	OFFSET $SG4294754803
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetString@ConfigFile@@QAEXPB_W00@Z

; 229  :         SendMessage(hwndTemp, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	mov	ecx, DWORD PTR _hwndTemp$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 230  : 
; 231  :         SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN1@RefreshDev:

; 232  :     }
; 233  : }

	lea	ecx, DWORD PTR _strDeviceID$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strPlaybackID$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	4
?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z ENDP ; SettingsAudio::RefreshDevices
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\settingsaudio.cpp
;	COMDAT ?ProcMessage@SettingsAudio@@UAEHIIJ@Z
_TEXT	SEGMENT
_bForceMono$1 = -68					; size = 4
_pttDelay$2 = -64					; size = 4
tv318 = -60						; size = 4
tv306 = -56						; size = 4
tv297 = -52						; size = 4
tv175 = -48						; size = 4
tv136 = -44						; size = 4
tv86 = -40						; size = 4
tv79 = -36						; size = 4
_bufferTime$3 = -32					; size = 4
tv64 = -28						; size = 4
tv300 = -24						; size = 4
_micTimeOffset$4 = -20					; size = 4
_micBoost$5 = -16					; size = 4
_desktopBoost$6 = -12					; size = 4
_this$ = -8						; size = 4
_bDataChanged$7 = -1					; size = 1
_message$ = 8						; size = 4
_wParam$ = 12						; size = 4
_lParam$ = 16						; size = 4
?ProcMessage@SettingsAudio@@UAEHIIJ@Z PROC		; SettingsAudio::ProcMessage, COMDAT
; _this$ = ecx

; 236  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx

; 237  :     switch(message)

	mov	eax, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 2
	je	$LN15@ProcMessag
	cmp	DWORD PTR tv64[ebp], 272		; 00000110H
	je	SHORT $LN26@ProcMessag
	cmp	DWORD PTR tv64[ebp], 273		; 00000111H
	je	$LN15@ProcMessag
	jmp	$LN27@ProcMessag
$LN26@ProcMessag:

; 238  :     {
; 239  :         case WM_INITDIALOG:
; 240  :             {
; 241  :                 LocalizeWindow(hwnd);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 242  : 
; 243  :                 //--------------------------------------------
; 244  : 
; 245  :                 bDisplayConnectedOnly = GlobalConfig->GetInt(L"Audio", L"DisplayConntectedOnly", true) != 0;

	push	1
	push	OFFSET $SG4294754802
	push	OFFSET $SG4294754801
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN31@ProcMessag
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN32@ProcMessag
$LN31@ProcMessag:
	mov	DWORD PTR tv79[ebp], 0
$LN32@ProcMessag:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv79[ebp]
	mov	BYTE PTR [eax+8], cl

; 246  :                 SendMessage(GetDlgItem(hwnd, IDC_CONNECTEDONLY), BM_SETCHECK, bDisplayConnectedOnly ? BST_CHECKED : BST_UNCHECKED, 0);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	test	eax, eax
	je	SHORT $LN33@ProcMessag
	mov	DWORD PTR tv86[ebp], 1
	jmp	SHORT $LN34@ProcMessag
$LN33@ProcMessag:
	mov	DWORD PTR tv86[ebp], 0
$LN34@ProcMessag:
	push	0
	mov	ecx, DWORD PTR tv86[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1099					; 0000044bH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 247  : 
; 248  :                 useInputDevices = AppConfig->GetInt(L"Audio", L"InputDevicesForDesktopSound", false) != 0;

	push	0
	push	OFFSET $SG4294754800
	push	OFFSET $SG4294754799
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	test	eax, eax
	je	SHORT $LN35@ProcMessag
	mov	DWORD PTR tv136[ebp], 1
	jmp	SHORT $LN36@ProcMessag
$LN35@ProcMessag:
	mov	DWORD PTR tv136[ebp], 0
$LN36@ProcMessag:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR tv136[ebp]
	mov	BYTE PTR [ecx+9], dl

; 249  : 
; 250  :                 //--------------------------------------------
; 251  : 
; 252  :                 int pttDelay = AppConfig->GetInt(TEXT("Audio"), TEXT("PushToTalkDelay"), 200);

	push	200					; 000000c8H
	push	OFFSET $SG4294754798
	push	OFFSET $SG4294754797
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _pttDelay$2[ebp], eax

; 253  :                 SendMessage(GetDlgItem(hwnd, IDC_PTTDELAY), UDM_SETRANGE32, 0, 2000);

	push	2000					; 000007d0H
	push	0
	push	1135					; 0000046fH
	push	1081					; 00000439H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 254  :                 SendMessage(GetDlgItem(hwnd, IDC_PTTDELAY), UDM_SETPOS32, 0, pttDelay);

	mov	edx, DWORD PTR _pttDelay$2[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1081					; 00000439H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 255  : 
; 256  :                 //--------------------------------------------
; 257  : 
; 258  :                 BOOL bForceMono = AppConfig->GetInt(TEXT("Audio"), TEXT("ForceMicMono"));

	push	0
	push	OFFSET $SG4294754796
	push	OFFSET $SG4294754795
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _bForceMono$1[ebp], eax

; 259  :                 SendMessage(GetDlgItem(hwnd, IDC_FORCEMONO), BM_SETCHECK, bForceMono ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bForceMono$1[ebp], 0
	je	SHORT $LN37@ProcMessag
	mov	DWORD PTR tv175[ebp], 1
	jmp	SHORT $LN38@ProcMessag
$LN37@ProcMessag:
	mov	DWORD PTR tv175[ebp], 0
$LN38@ProcMessag:
	push	0
	mov	edx, DWORD PTR tv175[ebp]
	push	edx
	push	241					; 000000f1H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 260  : 
; 261  :                 //--------------------------------------------
; 262  : 
; 263  :                 DWORD desktopBoost = GlobalConfig->GetInt(TEXT("Audio"), TEXT("DesktopBoostMultiple"), 1);

	push	1
	push	OFFSET $SG4294754794
	push	OFFSET $SG4294754793
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _desktopBoost$6[ebp], eax

; 264  :                 if(desktopBoost < 1)

	cmp	DWORD PTR _desktopBoost$6[ebp], 1
	jae	SHORT $LN25@ProcMessag

; 265  :                     desktopBoost = 1;

	mov	DWORD PTR _desktopBoost$6[ebp], 1
	jmp	SHORT $LN24@ProcMessag
$LN25@ProcMessag:

; 266  :                 else if(desktopBoost > 20)

	cmp	DWORD PTR _desktopBoost$6[ebp], 20	; 00000014H
	jbe	SHORT $LN24@ProcMessag

; 267  :                     desktopBoost = 20;

	mov	DWORD PTR _desktopBoost$6[ebp], 20	; 00000014H
$LN24@ProcMessag:

; 268  :                 SendMessage(GetDlgItem(hwnd, IDC_DESKTOPBOOST), UDM_SETRANGE32, 1, 20);

	push	20					; 00000014H
	push	1
	push	1135					; 0000046fH
	push	1085					; 0000043dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 269  :                 SendMessage(GetDlgItem(hwnd, IDC_DESKTOPBOOST), UDM_SETPOS32, 0, desktopBoost);

	mov	ecx, DWORD PTR _desktopBoost$6[ebp]
	push	ecx
	push	0
	push	1137					; 00000471H
	push	1085					; 0000043dH
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 270  : 
; 271  :                 //--------------------------------------------
; 272  : 
; 273  :                 DWORD micBoost = AppConfig->GetInt(TEXT("Audio"), TEXT("MicBoostMultiple"), 1);

	push	1
	push	OFFSET $SG4294754792
	push	OFFSET $SG4294754791
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _micBoost$5[ebp], eax

; 274  :                 if(micBoost < 1)

	cmp	DWORD PTR _micBoost$5[ebp], 1
	jae	SHORT $LN22@ProcMessag

; 275  :                     micBoost = 1;

	mov	DWORD PTR _micBoost$5[ebp], 1
	jmp	SHORT $LN21@ProcMessag
$LN22@ProcMessag:

; 276  :                 else if(micBoost > 20)

	cmp	DWORD PTR _micBoost$5[ebp], 20		; 00000014H
	jbe	SHORT $LN21@ProcMessag

; 277  :                     micBoost = 20;

	mov	DWORD PTR _micBoost$5[ebp], 20		; 00000014H
$LN21@ProcMessag:

; 278  :                 SendMessage(GetDlgItem(hwnd, IDC_MICBOOST), UDM_SETRANGE32, 1, 20);

	push	20					; 00000014H
	push	1
	push	1135					; 0000046fH
	push	1079					; 00000437H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 279  :                 SendMessage(GetDlgItem(hwnd, IDC_MICBOOST), UDM_SETPOS32, 0, micBoost);

	mov	eax, DWORD PTR _micBoost$5[ebp]
	push	eax
	push	0
	push	1137					; 00000471H
	push	1079					; 00000437H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 280  : 
; 281  :                 //--------------------------------------------
; 282  : 
; 283  :                 int bufferTime = GlobalConfig->GetInt(TEXT("General"), TEXT("SceneBufferingTime"), 700);

	push	700					; 000002bcH
	push	OFFSET $SG4294754790
	push	OFFSET $SG4294754789
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _bufferTime$3[ebp], eax

; 284  : 
; 285  :                 int micTimeOffset = AppConfig->GetInt(TEXT("Audio"), TEXT("MicTimeOffset"), 0);

	push	0
	push	OFFSET $SG4294754788
	push	OFFSET $SG4294754787
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	DWORD PTR _micTimeOffset$4[ebp], eax

; 286  :                 if(micTimeOffset < -bufferTime)

	mov	eax, DWORD PTR _bufferTime$3[ebp]
	neg	eax
	cmp	DWORD PTR _micTimeOffset$4[ebp], eax
	jge	SHORT $LN19@ProcMessag

; 287  :                     micTimeOffset = -bufferTime;

	mov	ecx, DWORD PTR _bufferTime$3[ebp]
	neg	ecx
	mov	DWORD PTR _micTimeOffset$4[ebp], ecx
	jmp	SHORT $LN18@ProcMessag
$LN19@ProcMessag:

; 288  :                 else if(micTimeOffset > 20000)

	cmp	DWORD PTR _micTimeOffset$4[ebp], 20000	; 00004e20H
	jle	SHORT $LN18@ProcMessag

; 289  :                     micTimeOffset = 20000;

	mov	DWORD PTR _micTimeOffset$4[ebp], 20000	; 00004e20H
$LN18@ProcMessag:

; 290  : 
; 291  :                 SendMessage(GetDlgItem(hwnd, IDC_MICTIMEOFFSET), UDM_SETRANGE32, -bufferTime, 20000);

	push	20000					; 00004e20H
	mov	edx, DWORD PTR _bufferTime$3[ebp]
	neg	edx
	push	edx
	push	1135					; 0000046fH
	push	1083					; 0000043bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 292  :                 SendMessage(GetDlgItem(hwnd, IDC_MICTIMEOFFSET), UDM_SETPOS32, 0, micTimeOffset);

	mov	edx, DWORD PTR _micTimeOffset$4[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1083					; 0000043bH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 293  : 
; 294  :                 //--------------------------------------------
; 295  : 
; 296  :                 SetChangedSettings(false);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z

; 297  : 
; 298  :                 RefreshDevices(useInputDevices ? ADT_RECORDING : ADT_PLAYBACK);

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	je	SHORT $LN39@ProcMessag
	mov	DWORD PTR tv297[ebp], 1
	jmp	SHORT $LN40@ProcMessag
$LN39@ProcMessag:
	mov	DWORD PTR tv297[ebp], 0
$LN40@ProcMessag:
	mov	ecx, DWORD PTR tv297[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z ; SettingsAudio::RefreshDevices

; 299  : 
; 300  :                 return TRUE;

	mov	eax, 1
	jmp	$LN29@ProcMessag
$LN15@ProcMessag:

; 301  :             }
; 302  : 
; 303  :         case WM_DESTROY:
; 304  :             {
; 305  :             }
; 306  : 
; 307  :         case WM_COMMAND:
; 308  :             {
; 309  :                 bool bDataChanged = false;

	mov	BYTE PTR _bDataChanged$7[ebp], 0

; 310  : 
; 311  :                 switch(LOWORD(wParam))

	movzx	edx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv300[ebp], edx
	mov	eax, DWORD PTR tv300[ebp]
	sub	eax, 1042				; 00000412H
	mov	DWORD PTR tv300[ebp], eax
	cmp	DWORD PTR tv300[ebp], 127		; 0000007fH
	ja	$LN13@ProcMessag
	mov	ecx, DWORD PTR tv300[ebp]
	movzx	edx, BYTE PTR $LN45@ProcMessag[ecx]
	jmp	DWORD PTR $LN46@ProcMessag[edx*4]
$LN12@ProcMessag:

; 312  :                 {
; 313  :                     case IDC_RESETMIC:
; 314  :                         {
; 315  :                             App->ResetMic();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?ResetMic@OBS@@QAEXXZ			; OBS::ResetMic

; 316  :                             break;

	jmp	$LN13@ProcMessag
$LN11@ProcMessag:

; 317  :                         }
; 318  : 
; 319  :                     case IDC_CONNECTEDONLY:
; 320  :                         {
; 321  :                             bDisplayConnectedOnly = !bDisplayConnectedOnly;

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	jne	SHORT $LN41@ProcMessag
	mov	DWORD PTR tv306[ebp], 1
	jmp	SHORT $LN42@ProcMessag
$LN41@ProcMessag:
	mov	DWORD PTR tv306[ebp], 0
$LN42@ProcMessag:
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR tv306[ebp]
	mov	BYTE PTR [edx+8], al

; 322  :                             GlobalConfig->SetInt(L"Audio", L"DisplayConntectedOnly", bDisplayConnectedOnly);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+8]
	push	edx
	push	OFFSET $SG4294754786
	push	OFFSET $SG4294754785
	mov	ecx, DWORD PTR ?GlobalConfig@@3PAVConfigFile@@A ; GlobalConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 323  : 
; 324  :                             RefreshDevices(useInputDevices ? ADT_RECORDING : ADT_PLAYBACK);

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	je	SHORT $LN43@ProcMessag
	mov	DWORD PTR tv318[ebp], 1
	jmp	SHORT $LN44@ProcMessag
$LN43@ProcMessag:
	mov	DWORD PTR tv318[ebp], 0
$LN44@ProcMessag:
	mov	edx, DWORD PTR tv318[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?RefreshDevices@SettingsAudio@@AAEXW4AudioDeviceType@@@Z ; SettingsAudio::RefreshDevices

; 325  :                             SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z

; 326  :                             break;

	jmp	SHORT $LN13@ProcMessag
$LN10@ProcMessag:

; 327  :                         }
; 328  : 
; 329  :                     case IDC_MICTIMEOFFSET_EDIT:
; 330  :                     case IDC_DESKTOPBOOST_EDIT:
; 331  :                     case IDC_MICBOOST_EDIT:
; 332  :                     case IDC_PTTDELAY_EDIT:
; 333  :                         if(HIWORD(wParam) == EN_CHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 768				; 00000300H
	jne	SHORT $LN9@ProcMessag

; 334  :                             SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN9@ProcMessag:

; 335  :                         break;

	jmp	SHORT $LN13@ProcMessag
$LN8@ProcMessag:

; 336  : 
; 337  :                     case IDC_FORCEMONO:
; 338  :                         if(HIWORD(wParam) == BN_CLICKED)

	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	test	eax, eax
	jne	SHORT $LN7@ProcMessag

; 339  :                             SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN7@ProcMessag:

; 340  :                         break;

	jmp	SHORT $LN13@ProcMessag
$LN6@ProcMessag:

; 341  : 
; 342  :                     case IDC_MICDEVICES:
; 343  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 1
	jne	SHORT $LN5@ProcMessag

; 344  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$7[ebp], 1
$LN5@ProcMessag:

; 345  :                         break;

	jmp	SHORT $LN13@ProcMessag
$LN4@ProcMessag:

; 346  : 
; 347  :                     case IDC_PLAYBACKDEVICES:
; 348  :                         if(HIWORD(wParam) == CBN_SELCHANGE)

	mov	eax, DWORD PTR _wParam$[ebp]
	shr	eax, 16					; 00000010H
	movzx	ecx, ax
	cmp	ecx, 1
	jne	SHORT $LN13@ProcMessag

; 349  :                             bDataChanged = true;

	mov	BYTE PTR _bDataChanged$7[ebp], 1
$LN13@ProcMessag:

; 350  :                         break;
; 351  :                 }
; 352  : 
; 353  :                 if(bDataChanged)

	movzx	edx, BYTE PTR _bDataChanged$7[ebp]
	test	edx, edx
	je	SHORT $LN27@ProcMessag

; 354  :                 {
; 355  :                     if (App->GetVideoEncoder())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetVideoEncoder@OBS@@QBEPAVVideoEncoder@@XZ ; OBS::GetVideoEncoder
	test	eax, eax
	je	SHORT $LN1@ProcMessag

; 356  :                         ShowWindow(GetDlgItem(hwnd, IDC_INFO), SW_SHOW);

	push	5
	push	1029					; 00000405H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__ShowWindow@8
$LN1@ProcMessag:

; 357  :                     SetChangedSettings(true);

	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_?SetChangedSettings@SettingsPane@@IAEX_N@Z
$LN27@ProcMessag:

; 358  :                 }
; 359  :                 break;
; 360  :             }
; 361  :     }
; 362  :     return FALSE;

	xor	eax, eax
$LN29@ProcMessag:

; 363  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN46@ProcMessag:
	DD	$LN8@ProcMessag
	DD	$LN6@ProcMessag
	DD	$LN10@ProcMessag
	DD	$LN11@ProcMessag
	DD	$LN4@ProcMessag
	DD	$LN12@ProcMessag
	DD	$LN13@ProcMessag
$LN45@ProcMessag:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	2
	DB	6
	DB	2
	DB	6
	DB	2
	DB	6
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
?ProcMessage@SettingsAudio@@UAEHIIJ@Z ENDP		; SettingsAudio::ProcMessage
_TEXT	ENDS
END
