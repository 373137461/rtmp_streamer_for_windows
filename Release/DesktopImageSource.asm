; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\DesktopImageSource.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_R0?AUMonitorInfo@@@8				; MonitorInfo `RTTI Type Descriptor'
PUBLIC	??_7DesktopImageSource@@6B@			; DesktopImageSource::`vftable'
PUBLIC	??_R3DesktopImageSource@@8			; DesktopImageSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_C@_1CM@MBFEGPKK@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KLHFFGNF@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FM@LLGIE@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@ ; `string'
PUBLIC	??_C@_1FK@EOHEKCF@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@ ; `string'
PUBLIC	??_C@_1FO@GKBKJCBC@?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAB?$AAi?$AAt?$AAB?$AAl?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?4?$AA?4?$AA?5?$AA?5?$AAj?$AAu@ ; `string'
PUBLIC	??_C@_1EM@NHJCPNFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAC?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAs?$AAu@ ; `string'
PUBLIC	??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@JOCEPBAM@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@IANIHGAM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@KADAIMEM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@FAIMKJFG@?$AAi?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@EMJJNNLD@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAM?$AAo?$AAu?$AAs?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@IFDFMFEP@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAL?$AAa?$AAy?$AAe?$AAr?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@LNKHJCKF@?$AAu?$AAs?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@GHDGFBMN@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@NPIKDGKI@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@FJAHKEC@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@LNCMBNCH@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@KKBOBJDL@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAi?$AAl?$AAi?$AAt?$AAy?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`52'::bRunOnce
PUBLIC	??_R1A@?0A@EA@DesktopImageSource@@8		; DesktopImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R2DesktopImageSource@@8			; DesktopImageSource::`RTTI Base Class Array'
PUBLIC	??_R0?AVDesktopImageSource@@@8			; DesktopImageSource `RTTI Type Descriptor'
PUBLIC	?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`75'::bRunOnce
PUBLIC	?bMadeCaptureRegionClass@@3_NA			; bMadeCaptureRegionClass
PUBLIC	??_R4DesktopImageSource@@6B@			; DesktopImageSource::`RTTI Complete Object Locator'
EXTRN	__imp__DefWindowProcW@16:PROC
EXTRN	__imp__GetWindowThreadProcessId@8:PROC
EXTRN	__imp__GetWindow@8:PROC
EXTRN	__imp_?ToInt@String@@QBEHH@Z:PROC
EXTRN	__imp__EndPaint@8:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__MoveToEx@16:PROC
EXTRN	__imp__GetWindowTextLengthW@4:PROC
EXTRN	__imp__GetWindowRect@8:PROC
EXTRN	__imp__GetTextExtentPoint32W@16:PROC
EXTRN	__imp__GetWindowDC@4:PROC
EXTRN	__imp__IsIconic@4:PROC
EXTRN	__imp__FillRect@12:PROC
EXTRN	__imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z:PROC
EXTRN	__imp__LineTo@12:PROC
EXTRN	__imp__CreateDIBSection@24:PROC
EXTRN	__imp__LoadCursorW@8:PROC
EXTRN	__imp_?LocaleIsRTL@@YA_NPAVLocaleStringLookup@@@Z:PROC
EXTRN	__imp_?GetPathFileName@@YA?AVString@@PB_WH@Z:PROC
EXTRN	__imp__DrawIcon@16:PROC
EXTRN	__imp__FindWindowW@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__BeginPaint@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__GetIconInfo@8:PROC
EXTRN	__imp__GetForegroundWindow@0:PROC
EXTRN	__imp_?GetBaseItem@XElement@@QBEPAVXBaseItem@@PB_W@Z:PROC
EXTRN	__imp__GetCursorInfo@4:PROC
EXTRN	__imp__CopyIcon@4:PROC
EXTRN	__imp_?GetCursorData@@YAPAEPAUHICON__@@AAU_ICONINFO@@AAI2@Z:PROC
EXTRN	__imp__GetWindowTextW@12:PROC
EXTRN	__imp__GetClassNameW@12:PROC
EXTRN	__imp__OpenProcess@12:PROC
EXTRN	__imp__QueryFullProcessImageNameW@16:PROC
EXTRN	__imp__GetDesktopWindow@0:PROC
EXTRN	__imp__SetWindowPos@28:PROC
EXTRN	__imp__SetLayeredWindowAttributes@16:PROC
EXTRN	__imp__IsWindow@4:PROC
EXTRN	__imp__CreateWindowExW@48:PROC
EXTRN	__imp__DwmIsCompositionEnabled@4:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__RegisterClassW@4:PROC
EXTRN	__imp__IsWindowVisible@4:PROC
EXTRN	__imp__GetDlgCtrlID@4:PROC
EXTRN	__imp__SetTextAlign@8:PROC
EXTRN	__imp__DestroyIcon@4:PROC
EXTRN	__imp__TextOutW@20:PROC
EXTRN	__imp__GetStockObject@4:PROC
;	COMDAT ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigDesktopSourceProc'::`2'::bMouseDown
_BSS	ENDS
;	COMDAT ?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA
_BSS	SEGMENT
?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA DB 01H DUP (?) ; `DesktopImageSource::Preprocess'::`52'::bRunOnce
_BSS	ENDS
;	COMDAT ?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA
_BSS	SEGMENT
?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA DB 01H DUP (?) ; `DesktopImageSource::Preprocess'::`75'::bRunOnce
?bMadeCaptureRegionClass@@3_NA DB 01H DUP (?)		; bMadeCaptureRegionClass
_BSS	ENDS
;	COMDAT ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigDesktopSourceProc'::`2'::bSelectingColor
_BSS	ENDS
;	COMDAT ??_R4DesktopImageSource@@6B@
rdata$r	SEGMENT
??_R4DesktopImageSource@@6B@ DD 00H			; DesktopImageSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVDesktopImageSource@@@8
	DD	FLAT:??_R3DesktopImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVDesktopImageSource@@@8
data$r	SEGMENT
??_R0?AVDesktopImageSource@@@8 DD FLAT:??_7type_info@@6B@ ; DesktopImageSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVDesktopImageSource@@', 00H
data$r	ENDS
;	COMDAT ??_R2DesktopImageSource@@8
rdata$r	SEGMENT
??_R2DesktopImageSource@@8 DD FLAT:??_R1A@?0A@EA@DesktopImageSource@@8 ; DesktopImageSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@DesktopImageSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@DesktopImageSource@@8 DD FLAT:??_R0?AVDesktopImageSource@@@8 ; DesktopImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3DesktopImageSource@@8
rdata$r	ENDS
;	COMDAT ??_C@_1CE@KKBOBJDL@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAi?$AAl?$AAi?$AAt?$AAy?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@KKBOBJDL@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAi?$AAl?$AAi?$AAt?$AAy?$AAM?$AAo?$AAd?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'b', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y', 00H, 'M'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@LNCMBNCH@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@LNCMBNCH@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAY?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'C', 00H, 'Y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@FJAHKEC@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@FJAHKEC@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAX?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'C', 00H, 'X', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@NPIKDGKI@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@NPIKDGKI@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAY?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'Y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@GHDGFBMN@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@GHDGFBMN@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAX?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'X', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@LNKHJCKF@?$AAu?$AAs?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@LNKHJCKF@?$AAu?$AAs?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'P', 00H, 'o', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@IFDFMFEP@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAL?$AAa?$AAy?$AAe?$AAr?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@IFDFMFEP@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAL?$AAa?$AAy?$AAe?$AAr?$AAe?$AAd?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'L', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EMJJNNLD@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAM?$AAo?$AAu?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EMJJNNLD@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAM?$AAo?$AAu?$AAs?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FAIMKJFG@?$AAi?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FAIMKJFG@?$AAi?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ DB 'i'
	DB	00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KADAIMEM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KADAIMEM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'C', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@IANIHGAM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1O@IANIHGAM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@ DB 'w', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@JOCEPBAM@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@JOCEPBAM@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@
CONST	SEGMENT
??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@ DB 'g', 00H, 'a', 00H
	DB	'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@NHJCPNFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAC?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAs?$AAu@
CONST	SEGMENT
??_C@_1EM@NHJCPNFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAC?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAs?$AAu@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'D', 00H, 'C', 00H, ' ', 00H, 'f', 00H, 'r', 00H, 'o', 00H
	DB	'm', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'u', 00H, 'r', 00H
	DB	'f', 00H, 'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GKBKJCBC@?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAB?$AAi?$AAt?$AAB?$AAl?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?4?$AA?4?$AA?5?$AA?5?$AAj?$AAu@
CONST	SEGMENT
??_C@_1FO@GKBKJCBC@?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAB?$AAi?$AAt?$AAB?$AAl?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?4?$AA?4?$AA?5?$AA?5?$AAj?$AAu@ DB 'C'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'B', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '(', 00H, '%', 00H, 'd', 00H, ')', 00H, '.'
	DB	00H, '.', 00H, ' ', 00H, ' ', 00H, 'j', 00H, 'u', 00H, 's', 00H
	DB	't', 00H, ' ', 00H, 's', 00H, 'o', 00H, ' ', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, ' ', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@EOHEKCF@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@
CONST	SEGMENT
??_C@_1FK@EOHEKCF@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@ DB 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a'
	DB	00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'F'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@LLGIE@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@
CONST	SEGMENT
??_C@_1FM@LLGIE@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@ DB 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 's', 00H
	DB	'.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a'
	DB	00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r'
	DB	00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'o', 00H, 'w', 00H, 'M', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 'm', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KLHFFGNF@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KLHFFGNF@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 'C'
	DB	00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MBFEGPKK@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@MBFEGPKK@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'M', 00H
	DB	'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_R3DesktopImageSource@@8
rdata$r	SEGMENT
??_R3DesktopImageSource@@8 DD 00H			; DesktopImageSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2DesktopImageSource@@8
rdata$r	ENDS
;	COMDAT ??_7DesktopImageSource@@6B@
CONST	SEGMENT
??_7DesktopImageSource@@6B@ DD FLAT:??_R4DesktopImageSource@@6B@ ; DesktopImageSource::`vftable'
	DD	FLAT:??_EDesktopImageSource@@UAEPAXI@Z
	DD	FLAT:?Preprocess@DesktopImageSource@@UAEXXZ
	DD	FLAT:?Tick@DesktopImageSource@@UAEXM@Z
	DD	FLAT:?Render@DesktopImageSource@@UAEXABUVect2@@0@Z
	DD	FLAT:?GetSize@DesktopImageSource@@UBE?AUVect2@@XZ
	DD	FLAT:?UpdateSettings@DesktopImageSource@@UAEXXZ
	DD	FLAT:?BeginScene@DesktopImageSource@@UAEXXZ
	DD	FLAT:?EndScene@DesktopImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceLeaveScene@DesktopImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceEnterScene@DesktopImageSource@@UAEXXZ
	DD	FLAT:?SetFloat@ImageSource@@UAEXPB_WM@Z
	DD	FLAT:?SetInt@DesktopImageSource@@UAEXPB_WH@Z
	DD	FLAT:?SetString@ImageSource@@UAEXPB_W0@Z
	DD	FLAT:?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z
	DD	FLAT:?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z
	DD	FLAT:?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z
	DD	FLAT:?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z
	DD	FLAT:?GetFloat@ImageSource@@UBE_NPB_WAAM@Z
	DD	FLAT:?GetInt@ImageSource@@UBE_NPB_WAAH@Z
	DD	FLAT:?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z
	DD	FLAT:?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z
	DD	FLAT:?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z
	DD	FLAT:?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z
	DD	FLAT:?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z
CONST	ENDS
;	COMDAT ??_R0?AUMonitorInfo@@@8
data$r	SEGMENT
??_R0?AUMonitorInfo@@@8 DD FLAT:??_7type_info@@6B@	; MonitorInfo `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUMonitorInfo@@', 00H
$SG4294889992 DB '\', 00H, 00H, 00H
$SG4294889993 DB '/', 00H, 00H, 00H
$SG4294889991 DB '[', 00H, 00H, 00H
$SG4294889988 DB 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H, 't', 00H, 'i', 00H
	DB	'p', 00H, 's', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, '3', 00H, '2', 00H, 00H, 00H
$SG4294889986 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294889987 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'W', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294889994 DB 'u', 00H, 'n', 00H, 'k', 00H, 'n', 00H, 'o', 00H, 'w', 00H
	DB	'n', 00H, 00H, 00H
$SG4294889984 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
	ORG $+2
$SG4294889995 DB 'b', 00H, 'a', 00H, 't', 00H, 't', 00H, 'l', 00H, 'e', 00H
	DB	'f', 00H, 'i', 00H, 'e', 00H, 'l', 00H, 'd', 00H, 00H, 00H
$SG4294889975 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H
	DB	00H
$SG4294889972 DB 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'b', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
$SG4294889970 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294889990 DB ']', 00H, ':', 00H, ' ', 00H, 00H, 00H
$SG4294889971 DB 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
	ORG $+3
$SG4294889989 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'R', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'n'
	DB	00H, 'd', 00H, 'o', 00H, 'w', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H
	ORG $+2
$SG4294889985 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'H', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294889982 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294889983 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG4294889980 DB 0dH, 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG4294889981 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'a', 00H
	DB	'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG4294889978 DB 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	00H, 00H
	ORG $+2
$SG4294889976 DB 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG4294889968 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG4294889979 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'a', 00H
	DB	'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'e'
	DB	00H, 'r', 00H, 'o', 00H, 00H, 00H
$SG4294889977 DB 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG4294889974 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889969 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294889973 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'C', 00H, 'a', 00H
	DB	'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'L', 00H, 'a'
	DB	00H, 'y', 00H, 'e', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'T', 00H
	DB	'i', 00H, 'p', 00H, 00H, 00H
$SG4294889966 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'Y', 00H, 00H, 00H
$SG4294889967 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'X', 00H, 00H, 00H
$SG4294889964 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889965 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'S', 00H, 'e', 00H
	DB	'l', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'R', 00H, 'e', 00H, 'g'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, 'T', 00H, 'o', 00H, 'o', 00H
	DB	'l', 00H, 't', 00H, 'i', 00H, 'p', 00H, 00H, 00H
$SG4294889962 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294889963 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294889960 DB 'u', 00H, 's', 00H, 'e', 00H, 'P', 00H, 'o', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG4294889961 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889958 DB 'g', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H
$SG4294889959 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294889956 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889957 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889954 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889955 DB 'g', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H
$SG4294889952 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'M', 00H, 'i', 00H, 'n'
	DB	00H, 'i', 00H, 'm', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
$SG4294889948 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'W', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294889953 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'N', 00H, 'o', 00H, 't'
	DB	00H, 'F', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889951 DB 'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 'T', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'y', 00H
	DB	00H, 00H
$SG4294889947 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294889950 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'W', 00H, 'a', 00H, 'r'
	DB	00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'T', 00H, 'i', 00H
	DB	't', 00H, 'l', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG4294889945 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294889949 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'W', 00H, 'a', 00H, 'r'
	DB	00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG4294889946 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'H', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294889944 DB 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	00H, 00H
	ORG $+2
$SG4294889942 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294889943 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889940 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294889941 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889938 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294889939 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889936 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294889937 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H
$SG4294889934 DB 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG4294889935 DB 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	00H, 00H
	ORG $+2
$SG4294889932 DB 'r', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e'
	DB	00H, 00H, 00H
$SG4294889933 DB 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG4294889930 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889931 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG4294889928 DB 'u', 00H, 's', 00H, 'e', 00H, 'P', 00H, 'o', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG4294889929 DB 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'b', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H
$SG4294889926 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG4294889927 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'X', 00H, 00H, 00H
	ORG $+2
$SG4294889924 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'Y', 00H, 00H, 00H
$SG4294889925 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'X', 00H, 00H, 00H
$SG4294889922 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294889923 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889920 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889921 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294889918 DB 'g', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H
$SG4294889919 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294889912 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294889916 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w'
	DB	00H, 'a', 00H, 'r', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'p', 00H
	DB	't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'S', 00H, 'o', 00H, 'u'
	DB	00H, 'r', 00H, 'c', 00H, 'e', 00H, '.', 00H, 'W', 00H, 'a', 00H
	DB	'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'A', 00H, 'e'
	DB	00H, 'r', 00H, 'o', 00H, 00H, 00H
$SG4294889917 DB 'W', 00H, 'a', 00H, 'r', 00H, 'n', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 00H, 00H
$SG4294889914 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889915 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294889913 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294889910 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294889911 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294889908 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889909 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294889906 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294889907 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294889904 DB 'g', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H
$SG4294889905 DB 'g', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'a', 00H, 00H, 00H
$SG4294889902 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'D', 00H, 'e', 00H, 's', 00H, 'k'
	DB	00H, 't', 00H, 'o', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H
	DB	'r', 00H, 'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, ' ', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG4294889903 DB 'C', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, 'T', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 'y', 00H
	DB	00H, 00H
$SG4294889900 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294889901 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294889898 DB 'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG4294889899 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'X', 00H, 00H, 00H
$SG4294889896 DB 'c', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG4294889897 DB 'c', 00H, 'a', 00H, 'p', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, 'C', 00H, 'Y', 00H, 00H, 00H
$SG4294889894 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294889895 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'W', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, 00H, 00H
$SG4294889892 DB 'V', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'o', 00H, 00H, 00H
$SG4294889893 DB 'B', 00H, 'a', 00H, 's', 00H, 'e', 00H, 'H', 00H, 'e', 00H
	DB	'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 00H, 00H
PUBLIC	??1?$List@UDeviceOutputData@@@@QAE@XZ		; List<DeviceOutputData>::~List<DeviceOutputData>
PUBLIC	??0?$List@UDeviceOutputData@@@@QAE@XZ		; List<DeviceOutputData>::List<DeviceOutputData>
PUBLIC	??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
PUBLIC	??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
PUBLIC	?Num@?$List@UMonitorInfo@@@@QBEIXZ		; List<MonitorInfo>::Num
PUBLIC	?ConfigureMonitorCaptureSource@@YG_NPAVXElement@@_N@Z ; ConfigureMonitorCaptureSource
PUBLIC	?ConfigureWindowCaptureSource@@YG_NPAVXElement@@_N@Z ; ConfigureWindowCaptureSource
PUBLIC	?ConfigureDesktopSource@@YG_NPAVXElement@@_N@Z	; ConfigureDesktopSource
PUBLIC	??1ConfigDesktopSourceInfo@@QAE@XZ		; ConfigDesktopSourceInfo::~ConfigDesktopSourceInfo
PUBLIC	?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z	; ConfigDesktopSourceProc
PUBLIC	?RegionWindowProc@@YGJPAUHWND__@@IIJ@Z		; RegionWindowProc
PUBLIC	??0RegionWindowData@@QAE@XZ			; RegionWindowData::RegionWindowData
PUBLIC	?SelectTargetWindow@@YAXPAUHWND__@@_N@Z		; SelectTargetWindow
PUBLIC	?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z	; SetDesktopCaptureType
PUBLIC	??0ConfigDesktopSourceInfo@@QAE@XZ		; ConfigDesktopSourceInfo::ConfigDesktopSourceInfo
PUBLIC	?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z ; RefreshWindowList
PUBLIC	?CreateDesktopSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateDesktopSource
PUBLIC	??0DeviceOutputs@@QAE@XZ			; DeviceOutputs::DeviceOutputs
PUBLIC	??_GDesktopImageSource@@UAEPAXI@Z		; DesktopImageSource::`scalar deleting destructor'
PUBLIC	?SetInt@DesktopImageSource@@UAEXPB_WH@Z		; DesktopImageSource::SetInt
PUBLIC	?UpdateSettings@DesktopImageSource@@UAEXXZ	; DesktopImageSource::UpdateSettings
PUBLIC	?GetSize@DesktopImageSource@@UBE?AUVect2@@XZ	; DesktopImageSource::GetSize
PUBLIC	?Render@DesktopImageSource@@UAEXABUVect2@@0@Z	; DesktopImageSource::Render
PUBLIC	?Preprocess@DesktopImageSource@@UAEXXZ		; DesktopImageSource::Preprocess
PUBLIC	?EndPreprocess@DesktopImageSource@@QAEXXZ	; DesktopImageSource::EndPreprocess
PUBLIC	?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z ; DesktopImageSource::ReleaseCurrentHDC
PUBLIC	?GetCurrentHDC@DesktopImageSource@@QAEPAUHDC__@@XZ ; DesktopImageSource::GetCurrentHDC
PUBLIC	?PreprocessWindows8MonitorCapture@DesktopImageSource@@QAEXXZ ; DesktopImageSource::PreprocessWindows8MonitorCapture
PUBLIC	?Tick@DesktopImageSource@@UAEXM@Z		; DesktopImageSource::Tick
PUBLIC	?GlobalSourceLeaveScene@DesktopImageSource@@UAEXXZ ; DesktopImageSource::GlobalSourceLeaveScene
PUBLIC	?GlobalSourceEnterScene@DesktopImageSource@@UAEXXZ ; DesktopImageSource::GlobalSourceEnterScene
PUBLIC	?EndScene@DesktopImageSource@@UAEXXZ		; DesktopImageSource::EndScene
PUBLIC	?BeginScene@DesktopImageSource@@UAEXXZ		; DesktopImageSource::BeginScene
PUBLIC	??1DesktopImageSource@@UAE@XZ			; DesktopImageSource::~DesktopImageSource
PUBLIC	??0DesktopImageSource@@QAE@IPAVXElement@@@Z	; DesktopImageSource::DesktopImageSource
PUBLIC	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z		; OBS::GetMonitor
PUBLIC	?NumMonitors@OBS@@QBEIXZ			; OBS::NumMonitors
PUBLIC	?GetFrameTime@OBS@@QBEIXZ			; OBS::GetFrameTime
PUBLIC	?IsRunning@OBS@@QBE_NXZ				; OBS::IsRunning
PUBLIC	??1DeviceOutputs@@QAE@XZ			; DeviceOutputs::~DeviceOutputs
PUBLIC	??0MonitorInfo@@QAE@XZ				; MonitorInfo::MonitorInfo
PUBLIC	?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z	; DrawSpriteEx
PUBLIC	?LoadSamplerState@@YAXPAVSamplerState@@I@Z	; LoadSamplerState
PUBLIC	?CreateGDITexture@@YAPAVTexture@@II@Z		; CreateGDITexture
PUBLIC	_IsolationAwareCreateWindowExW@48
PUBLIC	_IsolationAwareRegisterClassW@4
PUBLIC	?regionWindowData@@3URegionWindowData@@A	; regionWindowData
EXTRN	??_EDesktopImageSource@@UAEPAXI@Z:PROC		; DesktopImageSource::`vector deleting destructor'
;	COMDAT ?$S1@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4IA
_BSS	SEGMENT
?$S1@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; S1<`template-parameter-2',nfigDesktopSourceProc,GHPAUHWND__,unsigned int,unsigned int,long>
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

?regionWindowData@@3URegionWindowData@@A DB 024H DUP (?) ; regionWindowData
_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
_BSS	SEGMENT
?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A DB 010H DUP (?) ; `ConfigDesktopSourceProc'::`2'::colorData
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_IsolationAwareRegisterClassW@4 DD 0fffffffeH
	DD	00H
	DD	0ffffffb8H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN19@IsolationA
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_IsolationAwareCreateWindowExW@48 DD 0fffffffeH
	DD	00H
	DD	0ffffffb8H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN19@IsolationA
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
_regionWindowData$initializer$ DD FLAT:??__EregionWindowData@@YAXXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winuser.inl
;	COMDAT _IsolationAwareRegisterClassW@4
_TEXT	SEGMENT
_dwLastError$2 = -56					; size = 4
_fActivateActCtxSuccess$ = -52				; size = 4
_fPreserveLastError$3 = -48				; size = 4
_ulpCookie$ = -44					; size = 4
tv78 = -40						; size = 4
tv75 = -36						; size = 4
tv68 = -32						; size = 4
_result$ = -28						; size = 2
__$SEHRec$ = -24					; size = 24
_lpWndClass$ = 8					; size = 4
_IsolationAwareRegisterClassW@4 PROC			; COMDAT

; 132  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_IsolationAwareRegisterClassW@4
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -40				; ffffffd8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 133  :     ATOM result = 0 ;

	xor	eax, eax
	mov	WORD PTR _result$[ebp], ax

; 134  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], 0

; 135  :     const BOOL fActivateActCtxSuccess =
; 136  : #ifdef _M_IX86
; 137  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 138  : #endif
; 139  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN7@IsolationA
	lea	ecx, DWORD PTR _ulpCookie$[ebp]
	push	ecx
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	test	eax, eax
	jne	SHORT $LN7@IsolationA
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN8@IsolationA
$LN7@IsolationA:
	mov	DWORD PTR tv68[ebp], 1
$LN8@IsolationA:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _fActivateActCtxSuccess$[ebp], edx

; 140  :     if (!fActivateActCtxSuccess)

	cmp	DWORD PTR _fActivateActCtxSuccess$[ebp], 0
	jne	SHORT $LN4@IsolationA

; 141  :         return result;

	mov	ax, WORD PTR _result$[ebp]
	jmp	$LN13@IsolationA
$LN4@IsolationA:

; 142  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 143  :     {
; 144  :         result = RegisterClassW(lpWndClass);

	mov	eax, DWORD PTR _lpWndClass$[ebp]
	push	eax
	call	DWORD PTR __imp__RegisterClassW@4
	mov	WORD PTR _result$[ebp], ax

; 145  :     }
; 146  :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN16@IsolationA
	jmp	SHORT $LN17@IsolationA
$LN14@IsolationA:
$LN19@IsolationA:
$LN16@IsolationA:

; 147  :     {
; 148  : #ifdef _M_IX86
; 149  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN15@IsolationA

; 150  : #endif
; 151  :         {
; 152  :             const BOOL fPreserveLastError = (result == 0 );

	movzx	ecx, WORD PTR _result$[ebp]
	test	ecx, ecx
	jne	SHORT $LN9@IsolationA
	mov	DWORD PTR tv75[ebp], 1
	jmp	SHORT $LN10@IsolationA
$LN9@IsolationA:
	mov	DWORD PTR tv75[ebp], 0
$LN10@IsolationA:
	mov	edx, DWORD PTR tv75[ebp]
	mov	DWORD PTR _fPreserveLastError$3[ebp], edx

; 153  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN11@IsolationA
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR tv78[ebp], eax
	jmp	SHORT $LN12@IsolationA
$LN11@IsolationA:
	mov	DWORD PTR tv78[ebp], 0
$LN12@IsolationA:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _dwLastError$2[ebp], eax

; 154  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	ecx, DWORD PTR _ulpCookie$[ebp]
	push	ecx
	push	0
	call	_IsolationAwareDeactivateActCtx@8

; 155  :             if (fPreserveLastError)

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN15@IsolationA

; 156  :                 SetLastError(dwLastError);

	mov	edx, DWORD PTR _dwLastError$2[ebp]
	push	edx
	call	DWORD PTR __imp__SetLastError@4
$LN15@IsolationA:
$LN18@IsolationA:
	ret	0
$LN17@IsolationA:

; 157  :         }
; 158  :     }
; 159  :     return result;

	mov	ax, WORD PTR _result$[ebp]
$LN13@IsolationA:

; 160  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_IsolationAwareRegisterClassW@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winuser.inl
;	COMDAT _IsolationAwareCreateWindowExW@48
_TEXT	SEGMENT
_dwLastError$2 = -56					; size = 4
_fActivateActCtxSuccess$ = -52				; size = 4
_fPreserveLastError$3 = -48				; size = 4
_ulpCookie$ = -44					; size = 4
tv88 = -40						; size = 4
tv85 = -36						; size = 4
tv68 = -32						; size = 4
_windowResult$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_dwExStyle$ = 8						; size = 4
_lpClassName$ = 12					; size = 4
_lpWindowName$ = 16					; size = 4
_dwStyle$ = 20						; size = 4
_X$ = 24						; size = 4
_Y$ = 28						; size = 4
_nWidth$ = 32						; size = 4
_nHeight$ = 36						; size = 4
_hWndParent$ = 40					; size = 4
_hMenu$ = 44						; size = 4
_hInstance$ = 48					; size = 4
_lpParam$ = 52						; size = 4
_IsolationAwareCreateWindowExW@48 PROC			; COMDAT

; 442  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_IsolationAwareCreateWindowExW@48
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -40				; ffffffd8H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 443  :     HWND windowResult = NULL;

	mov	DWORD PTR _windowResult$[ebp], 0

; 444  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], 0

; 445  :     const BOOL fActivateActCtxSuccess =
; 446  : #ifdef _M_IX86
; 447  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 448  : #endif
; 449  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN7@IsolationA
	lea	eax, DWORD PTR _ulpCookie$[ebp]
	push	eax
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	test	eax, eax
	jne	SHORT $LN7@IsolationA
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN8@IsolationA
$LN7@IsolationA:
	mov	DWORD PTR tv68[ebp], 1
$LN8@IsolationA:
	mov	ecx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _fActivateActCtxSuccess$[ebp], ecx

; 450  :     if (!fActivateActCtxSuccess)

	cmp	DWORD PTR _fActivateActCtxSuccess$[ebp], 0
	jne	SHORT $LN4@IsolationA

; 451  :         return windowResult;

	mov	eax, DWORD PTR _windowResult$[ebp]
	jmp	$LN13@IsolationA
$LN4@IsolationA:

; 452  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 453  :     {
; 454  :         windowResult = CreateWindowExW(dwExStyle,lpClassName,lpWindowName,dwStyle,X,Y,nWidth,nHeight,hWndParent,hMenu,hInstance,lpParam);

	mov	edx, DWORD PTR _lpParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _hInstance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hMenu$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hWndParent$[ebp]
	push	edx
	mov	eax, DWORD PTR _nHeight$[ebp]
	push	eax
	mov	ecx, DWORD PTR _nWidth$[ebp]
	push	ecx
	mov	edx, DWORD PTR _Y$[ebp]
	push	edx
	mov	eax, DWORD PTR _X$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwStyle$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpWindowName$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpClassName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dwExStyle$[ebp]
	push	ecx
	call	DWORD PTR __imp__CreateWindowExW@48
	mov	DWORD PTR _windowResult$[ebp], eax

; 455  :     }
; 456  :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN16@IsolationA
	jmp	SHORT $LN17@IsolationA
$LN14@IsolationA:
$LN19@IsolationA:
$LN16@IsolationA:

; 457  :     {
; 458  : #ifdef _M_IX86
; 459  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN15@IsolationA

; 460  : #endif
; 461  :         {
; 462  :             const BOOL fPreserveLastError = (windowResult == NULL);

	cmp	DWORD PTR _windowResult$[ebp], 0
	jne	SHORT $LN9@IsolationA
	mov	DWORD PTR tv85[ebp], 1
	jmp	SHORT $LN10@IsolationA
$LN9@IsolationA:
	mov	DWORD PTR tv85[ebp], 0
$LN10@IsolationA:
	mov	edx, DWORD PTR tv85[ebp]
	mov	DWORD PTR _fPreserveLastError$3[ebp], edx

; 463  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN11@IsolationA
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR tv88[ebp], eax
	jmp	SHORT $LN12@IsolationA
$LN11@IsolationA:
	mov	DWORD PTR tv88[ebp], 0
$LN12@IsolationA:
	mov	eax, DWORD PTR tv88[ebp]
	mov	DWORD PTR _dwLastError$2[ebp], eax

; 464  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	ecx, DWORD PTR _ulpCookie$[ebp]
	push	ecx
	push	0
	call	_IsolationAwareDeactivateActCtx@8

; 465  :             if (fPreserveLastError)

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN15@IsolationA

; 466  :                 SetLastError(dwLastError);

	mov	edx, DWORD PTR _dwLastError$2[ebp]
	push	edx
	call	DWORD PTR __imp__SetLastError@4
$LN15@IsolationA:
$LN18@IsolationA:
	ret	0
$LN17@IsolationA:

; 467  :         }
; 468  :     }
; 469  :     return windowResult;

	mov	eax, DWORD PTR _windowResult$[ebp]
$LN13@IsolationA:

; 470  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	48					; 00000030H
_IsolationAwareCreateWindowExW@48 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?CreateGDITexture@@YAPAVTexture@@II@Z
_TEXT	SEGMENT
_width$ = 8						; size = 4
_height$ = 12						; size = 4
?CreateGDITexture@@YAPAVTexture@@II@Z PROC		; CreateGDITexture, COMDAT

; 649  :     {return GS->CreateGDITexture(width, height);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _height$[ebp]
	push	eax
	mov	ecx, DWORD PTR _width$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+36]
	call	eax
	pop	ebp
	ret	0
?CreateGDITexture@@YAPAVTexture@@II@Z ENDP		; CreateGDITexture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?LoadSamplerState@@YAXPAVSamplerState@@I@Z
_TEXT	SEGMENT
_sampler$ = 8						; size = 4
_idSampler$ = 12					; size = 4
?LoadSamplerState@@YAXPAVSamplerState@@I@Z PROC		; LoadSamplerState, COMDAT

; 672  : inline void  LoadSamplerState(SamplerState *sampler, UINT idSampler=0) {GS->LoadSamplerState(sampler, idSampler);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _idSampler$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sampler$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+76]
	call	eax
	pop	ebp
	ret	0
?LoadSamplerState@@YAXPAVSamplerState@@I@Z ENDP		; LoadSamplerState
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z
_TEXT	SEGMENT
_texture$ = 8						; size = 4
_color$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
_u$ = 32						; size = 4
_v$ = 36						; size = 4
_u2$ = 40						; size = 4
_v2$ = 44						; size = 4
?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z PROC		; DrawSpriteEx, COMDAT

; 717  :     {GS->DrawSpriteEx(texture, color, x, y, x2, y2, u, v, u2, v2);}

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _v2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _u2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _v$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _u$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texture$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+116]
	call	eax
	pop	ebp
	ret	0
?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z ENDP		; DrawSpriteEx
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ??0MonitorInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0MonitorInfo@@QAE@XZ PROC				; MonitorInfo::MonitorInfo, COMDAT
; _this$ = ecx

; 208  :     inline MonitorInfo() {zero(this, sizeof(MonitorInfo));}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0MonitorInfo@@QAE@XZ ENDP				; MonitorInfo::MonitorInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ??1DeviceOutputs@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1DeviceOutputs@@QAE@XZ PROC				; DeviceOutputs::~DeviceOutputs, COMDAT
; _this$ = ecx

; 240  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 241  :         ClearData();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearData@DeviceOutputs@@QAEXXZ	; DeviceOutputs::ClearData

; 242  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$List@UDeviceOutputData@@@@QAE@XZ	; List<DeviceOutputData>::~List<DeviceOutputData>
	mov	esp, ebp
	pop	ebp
	ret	0
??1DeviceOutputs@@QAE@XZ ENDP				; DeviceOutputs::~DeviceOutputs
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?IsRunning@OBS@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsRunning@OBS@@QBE_NXZ PROC				; OBS::IsRunning, COMDAT
; _this$ = ecx

; 1236 :     inline bool IsRunning()    const {return bRunning;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR [eax+622]
	mov	esp, ebp
	pop	ebp
	ret	0
?IsRunning@OBS@@QBE_NXZ ENDP				; OBS::IsRunning
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?GetFrameTime@OBS@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetFrameTime@OBS@@QBEIXZ PROC				; OBS::GetFrameTime, COMDAT
; _this$ = ecx

; 1238 :     inline UINT GetFrameTime() const {return frameTime;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+888]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetFrameTime@OBS@@QBEIXZ ENDP				; OBS::GetFrameTime
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?NumMonitors@OBS@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?NumMonitors@OBS@@QBEIXZ PROC				; OBS::NumMonitors, COMDAT
; _this$ = ecx

; 1240 :     inline UINT NumMonitors()  const {return monitors.Num();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	?Num@?$List@UMonitorInfo@@@@QBEIXZ	; List<MonitorInfo>::Num
	mov	esp, ebp
	pop	ebp
	ret	0
?NumMonitors@OBS@@QBEIXZ ENDP				; OBS::NumMonitors
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obs.h
;	COMDAT ?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 4
?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z PROC		; OBS::GetMonitor, COMDAT
; _this$ = ecx

; 1241 :     inline const MonitorInfo& GetMonitor(UINT id) const {if(id < monitors.Num()) return monitors[id]; else return monitors[0];}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	?Num@?$List@UMonitorInfo@@@@QBEIXZ	; List<MonitorInfo>::Num
	cmp	DWORD PTR _id$[ebp], eax
	jae	SHORT $LN2@GetMonitor
	mov	eax, DWORD PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
	jmp	SHORT $LN3@GetMonitor
	jmp	SHORT $LN3@GetMonitor
$LN2@GetMonitor:
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 156				; 0000009cH
	call	??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
$LN3@GetMonitor:
	mov	esp, ebp
	pop	ebp
	ret	4
?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z ENDP		; OBS::GetMonitor
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ??0DesktopImageSource@@QAE@IPAVXElement@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_frameTime$ = 8						; size = 4
_data$ = 12						; size = 4
??0DesktopImageSource@@QAE@IPAVXElement@@@Z PROC	; DesktopImageSource::DesktopImageSource, COMDAT
; _this$ = ecx

; 79   :     DesktopImageSource(UINT frameTime, XElement *data)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ImageSource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DesktopImageSource@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??0String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 176				; 000000b0H
	call	??0MonitorInfo@@QAE@XZ			; MonitorInfo::MonitorInfo

; 80   :     {
; 81   :         this->data = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+92], edx

; 82   :         duplicator = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+220], 0

; 83   :         
; 84   :         bInInit = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+216], 1

; 85   : 
; 86   :         UpdateSettings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSettings@DesktopImageSource@@UAEXXZ ; DesktopImageSource::UpdateSettings

; 87   : 
; 88   :         bInInit = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+216], 0

; 89   : 
; 90   :         curCaptureTexture = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+88], 0

; 91   :         this->frameTime = frameTime;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _frameTime$[ebp]
	mov	DWORD PTR [ecx+84], edx

; 92   : 
; 93   :         colorKeyShader      = CreatePixelShaderFromFile(TEXT("shaders\\ColorKey_RGB.pShader"));

	push	OFFSET ??_C@_1DK@KFIIOLPP@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA_?$AAR?$AAG?$AAB?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
	call	?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z ; CreatePixelShaderFromFile
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+52], eax

; 94   :         alphaIgnoreShader   = CreatePixelShaderFromFile(TEXT("shaders\\AlphaIgnore.pShader"));

	push	OFFSET ??_C@_1DI@KEBKHFHN@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAl?$AAp?$AAh?$AAa?$AAI?$AAg?$AAn?$AAo?$AAr?$AAe?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
	call	?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z ; CreatePixelShaderFromFile
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax

; 95   : 
; 96   :         if(captureType == 0)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	jne	SHORT $LN3@DesktopIma

; 97   :             Log(TEXT("Using Monitor Capture"));

	push	OFFSET ??_C@_1CM@MBFEGPKK@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAM?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4
	jmp	SHORT $LN4@DesktopIma
$LN3@DesktopIma:

; 98   :         else if(captureType == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 1
	jne	SHORT $LN4@DesktopIma

; 99   :             Log(TEXT("Using Window Capture"));

	push	OFFSET ??_C@_1CK@KLHFFGNF@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4
$LN4@DesktopIma:

; 100  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??0DesktopImageSource@@QAE@IPAVXElement@@@Z ENDP	; DesktopImageSource::DesktopImageSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ??1DesktopImageSource@@UAE@XZ
_TEXT	SEGMENT
tv166 = -68						; size = 4
$T1 = -64						; size = 4
tv158 = -60						; size = 4
$T2 = -56						; size = 4
tv150 = -52						; size = 4
$T3 = -48						; size = 4
tv138 = -44						; size = 4
$T4 = -40						; size = 4
tv93 = -36						; size = 4
$T5 = -32						; size = 4
$T6 = -28						; size = 4
$T7 = -24						; size = 4
$T8 = -20						; size = 4
$T9 = -16						; size = 4
$T10 = -12						; size = 4
_i$11 = -8						; size = 4
_this$ = -4						; size = 4
??1DesktopImageSource@@UAE@XZ PROC			; DesktopImageSource::~DesktopImageSource, COMDAT
; _this$ = ecx

; 103  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7DesktopImageSource@@6B@

; 104  :         for(int i=0; i<NUM_CAPTURE_TEXTURES; i++)

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN5@DesktopIma
$LN4@DesktopIma:
	mov	ecx, DWORD PTR _i$11[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$11[ebp], ecx
$LN5@DesktopIma:
	cmp	DWORD PTR _i$11[ebp], 2
	jge	SHORT $LN3@DesktopIma

; 105  :             delete renderTextures[i];

	mov	edx, DWORD PTR _i$11[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4+4]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T10[ebp], edx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN8@DesktopIma
	push	1
	mov	eax, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN9@DesktopIma
$LN8@DesktopIma:
	mov	DWORD PTR tv93[ebp], 0
$LN9@DesktopIma:
	jmp	SHORT $LN4@DesktopIma
$LN3@DesktopIma:

; 106  : 
; 107  :         if(warningID)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+96], 0
	je	SHORT $LN2@DesktopIma

; 108  :             App->RemoveStreamInfo(warningID);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+96]
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?RemoveStreamInfo@OBS@@QAEXI@Z		; OBS::RemoveStreamInfo
$LN2@DesktopIma:

; 109  : 
; 110  :         delete duplicator;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	mov	DWORD PTR $T4[ebp], edx
	mov	eax, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T9[ebp], eax
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN10@DesktopIma
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv138[ebp], eax
	jmp	SHORT $LN11@DesktopIma
$LN10@DesktopIma:
	mov	DWORD PTR tv138[ebp], 0
$LN11@DesktopIma:

; 111  :         delete cursorTexture;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T8[ebp], eax
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN12@DesktopIma
	push	1
	mov	ecx, DWORD PTR $T8[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv150[ebp], eax
	jmp	SHORT $LN13@DesktopIma
$LN12@DesktopIma:
	mov	DWORD PTR tv150[ebp], 0
$LN13@DesktopIma:

; 112  :         delete alphaIgnoreShader;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T7[ebp], eax
	cmp	DWORD PTR $T7[ebp], 0
	je	SHORT $LN14@DesktopIma
	push	1
	mov	ecx, DWORD PTR $T7[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T7[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN15@DesktopIma
$LN14@DesktopIma:
	mov	DWORD PTR tv158[ebp], 0
$LN15@DesktopIma:

; 113  :         delete colorKeyShader;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T6[ebp], eax
	cmp	DWORD PTR $T6[ebp], 0
	je	SHORT $LN16@DesktopIma
	push	1
	mov	ecx, DWORD PTR $T6[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T6[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv166[ebp], eax
	jmp	SHORT $LN17@DesktopIma
$LN16@DesktopIma:
	mov	DWORD PTR tv166[ebp], 0
$LN17@DesktopIma:

; 114  : 
; 115  :         if(bCompatibilityMode)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+128]
	test	edx, edx
	je	SHORT $LN6@DesktopIma

; 116  :         {
; 117  :             SelectObject(hdcCompatible, hbmpOld);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+140]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	call	DWORD PTR __imp__SelectObject@8

; 118  :             DeleteDC(hdcCompatible);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	DWORD PTR __imp__DeleteDC@4

; 119  :             DeleteObject(hbmpCompatible);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+136]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
$LN6@DesktopIma:

; 120  :         }
; 121  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ImageSource@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1DesktopImageSource@@UAE@XZ ENDP			; DesktopImageSource::~DesktopImageSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?BeginScene@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?BeginScene@DesktopImageSource@@UAEXXZ PROC		; DesktopImageSource::BeginScene, COMDAT
; _this$ = ecx

; 124  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 125  :         if(bWindows8MonitorCapture && !duplicator)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+172]
	test	ecx, ecx
	je	SHORT $LN2@BeginScene
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	jne	SHORT $LN2@BeginScene

; 126  :             duplicator = GS->CreateOutputDuplicator(deviceOutputID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax
$LN2@BeginScene:

; 127  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?BeginScene@DesktopImageSource@@UAEXXZ ENDP		; DesktopImageSource::BeginScene
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?EndScene@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
tv76 = -16						; size = 4
$T1 = -12						; size = 4
$T2 = -8						; size = 4
_this$ = -4						; size = 4
?EndScene@DesktopImageSource@@UAEXXZ PROC		; DesktopImageSource::EndScene, COMDAT
; _this$ = ecx

; 130  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	DWORD PTR _this$[ebp], ecx

; 131  :         if(bWindows8MonitorCapture && duplicator)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+172]
	test	ecx, ecx
	je	SHORT $LN2@EndScene
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	je	SHORT $LN2@EndScene

; 132  :         {
; 133  :             delete duplicator;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	mov	DWORD PTR $T1[ebp], ecx
	mov	edx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], edx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@EndScene
	push	1
	mov	eax, DWORD PTR $T2[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T2[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN5@EndScene
$LN4@EndScene:
	mov	DWORD PTR tv76[ebp], 0
$LN5@EndScene:

; 134  :             duplicator = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 0
$LN2@EndScene:

; 135  :         }
; 136  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndScene@DesktopImageSource@@UAEXXZ ENDP		; DesktopImageSource::EndScene
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?GlobalSourceEnterScene@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GlobalSourceEnterScene@DesktopImageSource@@UAEXXZ PROC	; DesktopImageSource::GlobalSourceEnterScene, COMDAT
; _this$ = ecx

; 142  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 143  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GlobalSourceEnterScene@DesktopImageSource@@UAEXXZ ENDP	; DesktopImageSource::GlobalSourceEnterScene
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?GlobalSourceLeaveScene@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GlobalSourceLeaveScene@DesktopImageSource@@UAEXXZ PROC	; DesktopImageSource::GlobalSourceLeaveScene, COMDAT
; _this$ = ecx

; 146  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 147  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GlobalSourceLeaveScene@DesktopImageSource@@UAEXXZ ENDP	; DesktopImageSource::GlobalSourceLeaveScene
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?Tick@DesktopImageSource@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fSeconds$ = 8						; size = 4
?Tick@DesktopImageSource@@UAEXM@Z PROC			; DesktopImageSource::Tick, COMDAT
; _this$ = ecx

; 152  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 153  :         if(bWindows8MonitorCapture && !duplicator)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+172]
	test	ecx, ecx
	je	$LN1@Tick
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	jne	SHORT $LN1@Tick

; 154  :         {
; 155  :             retryAcquire += fSeconds;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [eax+168]
	addss	xmm0, DWORD PTR _fSeconds$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movss	DWORD PTR [ecx+168], xmm0

; 156  :             if(retryAcquire > 1.0f)

	mov	edx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR [edx+168]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN1@Tick

; 157  :             {
; 158  :                 retryAcquire = 0.0f;

	mov	eax, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [eax+168], xmm0

; 159  : 
; 160  :                 lastRendered = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 161  :                 duplicator = GS->CreateOutputDuplicator(deviceOutputID);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax
$LN1@Tick:

; 162  :             }
; 163  :         }
; 164  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Tick@DesktopImageSource@@UAEXM@Z ENDP			; DesktopImageSource::Tick
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?PreprocessWindows8MonitorCapture@DesktopImageSource@@QAEXXZ
_TEXT	SEGMENT
_ii$1 = -100						; size = 20
_ci$2 = -80						; size = 20
tv181 = -60						; size = 4
$T3 = -56						; size = 4
tv133 = -52						; size = 4
$T4 = -48						; size = 4
tv83 = -44						; size = 4
$T5 = -40						; size = 4
_width$6 = -36						; size = 4
_height$7 = -32						; size = 4
_lpData$8 = -28						; size = 4
$T9 = -24						; size = 4
$T10 = -20						; size = 4
$T11 = -16						; size = 4
tv75 = -12						; size = 4
_hIcon$12 = -8						; size = 4
_this$ = -4						; size = 4
?PreprocessWindows8MonitorCapture@DesktopImageSource@@QAEXXZ PROC ; DesktopImageSource::PreprocessWindows8MonitorCapture, COMDAT
; _this$ = ecx

; 167  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	mov	DWORD PTR _this$[ebp], ecx

; 168  :         //----------------------------------------------------------
; 169  :         // capture monitor
; 170  : 
; 171  :         if(duplicator)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+220], 0
	je	$LN15@Preprocess

; 172  :         {
; 173  :             switch(duplicator->AcquireNextFrame(0))

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+220]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR tv75[ebp], eax
	cmp	DWORD PTR tv75[ebp], 0
	je	SHORT $LN11@Preprocess
	cmp	DWORD PTR tv75[ebp], 1
	je	$LN10@Preprocess
	cmp	DWORD PTR tv75[ebp], 2
	je	SHORT $LN12@Preprocess
	jmp	$LN13@Preprocess
$LN12@Preprocess:

; 174  :             {
; 175  :                 case DuplicatorInfo_Lost:
; 176  :                     {
; 177  :                         delete duplicator;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+220]
	mov	DWORD PTR $T5[ebp], edx
	mov	eax, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T11[ebp], eax
	cmp	DWORD PTR $T11[ebp], 0
	je	SHORT $LN18@Preprocess
	push	1
	mov	ecx, DWORD PTR $T11[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T11[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN19@Preprocess
$LN18@Preprocess:
	mov	DWORD PTR tv83[ebp], 0
$LN19@Preprocess:

; 178  :                         lastRendered = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 179  :                         duplicator = GS->CreateOutputDuplicator(deviceOutputID);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+164]
	push	eax
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax

; 180  :                         return;

	jmp	$LN16@Preprocess
$LN11@Preprocess:

; 181  :                     }
; 182  : 
; 183  :                 case DuplicatorInfo_Error:
; 184  :                     delete duplicator;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN20@Preprocess
	push	1
	mov	edx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv133[ebp], eax
	jmp	SHORT $LN21@Preprocess
$LN20@Preprocess:
	mov	DWORD PTR tv133[ebp], 0
$LN21@Preprocess:

; 185  :                     duplicator = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+220], 0

; 186  :                     lastRendered = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0

; 187  :                     return;

	jmp	$LN16@Preprocess
$LN10@Preprocess:

; 188  : 
; 189  :                 case DuplicatorInfo_Timeout:
; 190  :                     return;

	jmp	$LN16@Preprocess
$LN13@Preprocess:

; 191  :             }
; 192  : 
; 193  :             lastRendered = duplicator->GetCopyTexture();

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+220]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+220]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN15@Preprocess:

; 194  :         }
; 195  : 
; 196  :         //----------------------------------------------------------
; 197  :         // capture mouse
; 198  : 
; 199  :         bMouseCaptured = false;

	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+200], 0

; 200  :         if(bCaptureMouse)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN16@Preprocess

; 201  :         {
; 202  :             CURSORINFO ci;
; 203  :             zero(&ci, sizeof(ci));

	push	20					; 00000014H
	lea	ecx, DWORD PTR _ci$2[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 204  :             ci.cbSize = sizeof(ci);

	mov	DWORD PTR _ci$2[ebp], 20		; 00000014H

; 205  : 
; 206  :             if(GetCursorInfo(&ci))

	lea	edx, DWORD PTR _ci$2[ebp]
	push	edx
	call	DWORD PTR __imp__GetCursorInfo@4
	test	eax, eax
	je	$LN16@Preprocess

; 207  :             {
; 208  :                 mcpy(&cursorPos, &ci.ptScreenPos, sizeof(cursorPos));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ci$2[ebp+12]
	mov	DWORD PTR [eax+204], ecx
	mov	edx, DWORD PTR _ci$2[ebp+16]
	mov	DWORD PTR [eax+208], edx

; 209  : 
; 210  :                 if(ci.flags & CURSOR_SHOWING)

	mov	eax, DWORD PTR _ci$2[ebp+4]
	and	eax, 1
	je	$LN16@Preprocess

; 211  :                 {
; 212  :                     if(ci.hCursor == hCurrentCursor)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ci$2[ebp+8]
	cmp	edx, DWORD PTR [ecx+212]
	jne	SHORT $LN6@Preprocess

; 213  :                         bMouseCaptured = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], 1

; 214  :                     else

	jmp	$LN16@Preprocess
$LN6@Preprocess:

; 215  :                     {
; 216  :                         HICON hIcon = CopyIcon(ci.hCursor);

	mov	ecx, DWORD PTR _ci$2[ebp+8]
	push	ecx
	call	DWORD PTR __imp__CopyIcon@4
	mov	DWORD PTR _hIcon$12[ebp], eax

; 217  :                         hCurrentCursor = ci.hCursor;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _ci$2[ebp+8]
	mov	DWORD PTR [edx+212], eax

; 218  : 
; 219  :                         delete cursorTexture;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	DWORD PTR $T3[ebp], edx
	mov	eax, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T9[ebp], eax
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN22@Preprocess
	push	1
	mov	ecx, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv181[ebp], eax
	jmp	SHORT $LN23@Preprocess
$LN22@Preprocess:
	mov	DWORD PTR tv181[ebp], 0
$LN23@Preprocess:

; 220  :                         cursorTexture = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0

; 221  : 
; 222  :                         if(hIcon)

	cmp	DWORD PTR _hIcon$12[ebp], 0
	je	$LN16@Preprocess

; 223  :                         {
; 224  :                             ICONINFO ii;
; 225  :                             if(GetIconInfo(hIcon, &ii))

	lea	edx, DWORD PTR _ii$1[ebp]
	push	edx
	mov	eax, DWORD PTR _hIcon$12[ebp]
	push	eax
	call	DWORD PTR __imp__GetIconInfo@8
	test	eax, eax
	je	$LN3@Preprocess

; 226  :                             {
; 227  :                                 xHotspot = int(ii.xHotspot);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _ii$1[ebp+4]
	mov	DWORD PTR [ecx+152], edx

; 228  :                                 yHotspot = int(ii.yHotspot);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _ii$1[ebp+8]
	mov	DWORD PTR [eax+156], ecx

; 229  : 
; 230  :                                 UINT width, height;
; 231  :                                 LPBYTE lpData = GetCursorData(hIcon, ii, width, height);

	lea	edx, DWORD PTR _height$7[ebp]
	push	edx
	lea	eax, DWORD PTR _width$6[ebp]
	push	eax
	lea	ecx, DWORD PTR _ii$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _hIcon$12[ebp]
	push	edx
	call	DWORD PTR __imp_?GetCursorData@@YAPAEPAUHICON__@@AAU_ICONINFO@@AAI2@Z
	add	esp, 16					; 00000010H
	mov	DWORD PTR _lpData$8[ebp], eax

; 232  :                                 if(lpData && width && height)

	cmp	DWORD PTR _lpData$8[ebp], 0
	je	SHORT $LN2@Preprocess
	cmp	DWORD PTR _width$6[ebp], 0
	je	SHORT $LN2@Preprocess
	cmp	DWORD PTR _height$7[ebp], 0
	je	SHORT $LN2@Preprocess

; 233  :                                 {
; 234  :                                     cursorTexture = CreateTexture(width, height, GS_BGRA, lpData, FALSE);

	push	1
	push	0
	mov	eax, DWORD PTR _lpData$8[ebp]
	push	eax
	push	6
	mov	ecx, DWORD PTR _height$7[ebp]
	push	ecx
	mov	edx, DWORD PTR _width$6[ebp]
	push	edx
	call	?CreateTexture@@YAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z ; CreateTexture
	add	esp, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], eax

; 235  :                                     if(cursorTexture)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+148], 0
	je	SHORT $LN1@Preprocess

; 236  :                                         bMouseCaptured = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+200], 1
$LN1@Preprocess:

; 237  : 
; 238  :                                     Free(lpData);

	mov	ecx, DWORD PTR _lpData$8[ebp]
	push	ecx
	call	?Free@@YAXPAX@Z				; Free
	add	esp, 4
$LN2@Preprocess:

; 239  :                                 }
; 240  : 
; 241  :                                 DeleteObject(ii.hbmColor);

	mov	edx, DWORD PTR _ii$1[ebp+16]
	push	edx
	call	DWORD PTR __imp__DeleteObject@4

; 242  :                                 DeleteObject(ii.hbmMask);

	mov	eax, DWORD PTR _ii$1[ebp+12]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4
$LN3@Preprocess:

; 243  :                             }
; 244  : 
; 245  :                             DestroyIcon(hIcon);

	mov	ecx, DWORD PTR _hIcon$12[ebp]
	push	ecx
	call	DWORD PTR __imp__DestroyIcon@4
$LN16@Preprocess:

; 246  :                         }
; 247  :                     }
; 248  :                 }
; 249  :             }
; 250  :         }
; 251  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?PreprocessWindows8MonitorCapture@DesktopImageSource@@QAEXXZ ENDP ; DesktopImageSource::PreprocessWindows8MonitorCapture
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?GetCurrentHDC@DesktopImageSource@@QAEPAUHDC__@@XZ
_TEXT	SEGMENT
_hDC$ = -12						; size = 4
_captureTexture$ = -8					; size = 4
_this$ = -4						; size = 4
?GetCurrentHDC@DesktopImageSource@@QAEPAUHDC__@@XZ PROC	; DesktopImageSource::GetCurrentHDC, COMDAT
; _this$ = ecx

; 254  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 255  :         HDC hDC = NULL;

	mov	DWORD PTR _hDC$[ebp], 0

; 256  : 
; 257  :         Texture *captureTexture = renderTextures[curCaptureTexture];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _captureTexture$[ebp], eax

; 258  : 
; 259  :         if(bCompatibilityMode)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+128]
	test	edx, edx
	je	SHORT $LN3@GetCurrent

; 260  :         {
; 261  :             hDC = hdcCompatible;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	mov	DWORD PTR _hDC$[ebp], ecx
	jmp	SHORT $LN2@GetCurrent
$LN3@GetCurrent:

; 262  :             //zero(captureBits, width*height*4);
; 263  :         }
; 264  :         else if(captureTexture)

	cmp	DWORD PTR _captureTexture$[ebp], 0
	je	SHORT $LN2@GetCurrent

; 265  :             captureTexture->GetDC(hDC);

	lea	edx, DWORD PTR _hDC$[ebp]
	push	edx
	mov	eax, DWORD PTR _captureTexture$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _captureTexture$[ebp]
	mov	eax, DWORD PTR [edx+32]
	call	eax
$LN2@GetCurrent:

; 266  : 
; 267  :         return hDC;

	mov	eax, DWORD PTR _hDC$[ebp]

; 268  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?GetCurrentHDC@DesktopImageSource@@QAEPAUHDC__@@XZ ENDP	; DesktopImageSource::GetCurrentHDC
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z
_TEXT	SEGMENT
_captureTexture$ = -8					; size = 4
_this$ = -4						; size = 4
_hDC$ = 8						; size = 4
?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z PROC ; DesktopImageSource::ReleaseCurrentHDC, COMDAT
; _this$ = ecx

; 271  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 272  :         Texture *captureTexture = renderTextures[curCaptureTexture];

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR _captureTexture$[ebp], eax

; 273  : 
; 274  :         if(!bCompatibilityMode)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+128]
	test	edx, edx
	jne	SHORT $LN2@ReleaseCur

; 275  :             captureTexture->ReleaseDC();

	mov	eax, DWORD PTR _captureTexture$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _captureTexture$[ebp]
	mov	eax, DWORD PTR [edx+36]
	call	eax
$LN2@ReleaseCur:

; 276  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z ENDP ; DesktopImageSource::ReleaseCurrentHDC
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?EndPreprocess@DesktopImageSource@@QAEXXZ
_TEXT	SEGMENT
tv128 = -8						; size = 4
_this$ = -4						; size = 4
?EndPreprocess@DesktopImageSource@@QAEXXZ PROC		; DesktopImageSource::EndPreprocess, COMDAT
; _this$ = ecx

; 279  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 280  :         if(bCompatibilityMode)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+128]
	test	ecx, ecx
	je	SHORT $LN3@EndPreproc

; 281  :         {
; 282  :             renderTextures[0]->SetImage(captureBits, GS_IMAGEFORMAT_BGRA, width*4);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	shl	eax, 2
	push	eax
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+144]
	push	edx
	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx+4]
	mov	ecx, 4
	imul	edx, ecx, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+edx+4]
	mov	edx, DWORD PTR [eax+16]
	call	edx

; 283  :             lastRendered = renderTextures[0];

	mov	eax, 4
	imul	ecx, eax, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+ecx+4]
	mov	DWORD PTR [edx+12], ecx

; 284  :         }
; 285  :         else

	jmp	SHORT $LN4@EndPreproc
$LN3@EndPreproc:

; 286  :         {
; 287  :             lastRendered = renderTextures[curCaptureTexture];

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+88]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+4]
	mov	DWORD PTR [ecx+12], eax

; 288  : 
; 289  :             if(++curCaptureTexture == NUM_CAPTURE_TEXTURES)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+88]
	add	edx, 1
	mov	DWORD PTR tv128[ebp], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv128[ebp]
	mov	DWORD PTR [eax+88], ecx
	cmp	DWORD PTR tv128[ebp], 2
	jne	SHORT $LN4@EndPreproc

; 290  :                 curCaptureTexture = 0;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+88], 0
$LN4@EndPreproc:

; 291  :         }
; 292  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?EndPreprocess@DesktopImageSource@@QAEXXZ ENDP		; DesktopImageSource::EndPreprocess
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?Preprocess@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
_ii$1 = -656						; size = 20
_ci$2 = -636						; size = 20
_y$3 = -616						; size = 4
_bMouseCaptured$4 = -612				; size = 4
_strWarning$5 = -608					; size = 8
_x$6 = -600						; size = 4
_bSuccess$7 = -596					; size = 4
tv235 = -592						; size = 4
tv191 = -588						; size = 4
tv78 = -584						; size = 4
_hCaptureDC$8 = -580					; size = 4
_capturePos$9 = -576					; size = 8
_hIcon$10 = -568					; size = 4
_hDC$ = -564						; size = 4
_hwndCapture$11 = -560					; size = 4
_bWindowNotFound$12 = -553				; size = 1
_this$ = -552						; size = 4
_windowRect$13 = -548					; size = 16
_rc$14 = -532						; size = 16
_lpClassName$15 = -516					; size = 512
__$ArrayPad$ = -4					; size = 4
?Preprocess@DesktopImageSource@@UAEXXZ PROC		; DesktopImageSource::Preprocess, COMDAT
; _this$ = ecx

; 295  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 656				; 00000290H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 296  :         if(bWindows8MonitorCapture)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+172]
	test	ecx, ecx
	je	SHORT $LN33@Preprocess

; 297  :         {
; 298  :             PreprocessWindows8MonitorCapture();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?PreprocessWindows8MonitorCapture@DesktopImageSource@@QAEXXZ ; DesktopImageSource::PreprocessWindows8MonitorCapture

; 299  :             return;

	jmp	$LN34@Preprocess
$LN33@Preprocess:

; 300  :         }
; 301  : 
; 302  :         HDC hDC;
; 303  :         if(hDC = GetCurrentHDC())

	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetCurrentHDC@DesktopImageSource@@QAEPAUHDC__@@XZ ; DesktopImageSource::GetCurrentHDC
	mov	DWORD PTR _hDC$[ebp], eax
	cmp	DWORD PTR _hDC$[ebp], 0
	je	$LN32@Preprocess

; 304  :         {
; 305  :             //----------------------------------------------------------
; 306  :             // capture screen
; 307  : 
; 308  :             CURSORINFO ci;
; 309  :             zero(&ci, sizeof(ci));

	push	20					; 00000014H
	lea	edx, DWORD PTR _ci$2[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 310  :             ci.cbSize = sizeof(ci);

	mov	DWORD PTR _ci$2[ebp], 20		; 00000014H

; 311  :             BOOL bMouseCaptured;
; 312  : 
; 313  :             bMouseCaptured = bCaptureMouse && GetCursorInfo(&ci);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	SHORT $LN36@Preprocess
	lea	ecx, DWORD PTR _ci$2[ebp]
	push	ecx
	call	DWORD PTR __imp__GetCursorInfo@4
	test	eax, eax
	je	SHORT $LN36@Preprocess
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN37@Preprocess
$LN36@Preprocess:
	mov	DWORD PTR tv78[ebp], 0
$LN37@Preprocess:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _bMouseCaptured$4[ebp], edx

; 314  : 
; 315  :             bool bWindowNotFound = false;

	mov	BYTE PTR _bWindowNotFound$12[ebp], 0

; 316  :             HWND hwndCapture = NULL;

	mov	DWORD PTR _hwndCapture$11[ebp], 0

; 317  :             if(captureType == 1)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	$LN31@Preprocess

; 318  :             {
; 319  :                 if(hwndFoundWindow && IsWindow(hwndFoundWindow))

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	je	$LN30@Preprocess
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	DWORD PTR __imp__IsWindow@4
	test	eax, eax
	je	$LN30@Preprocess

; 320  :                 {
; 321  :                     TCHAR lpClassName[256];
; 322  :                     BOOL bSuccess = GetClassName(hwndFoundWindow, lpClassName, 255);

	push	255					; 000000ffH
	lea	ecx, DWORD PTR _lpClassName$15[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	DWORD PTR __imp__GetClassNameW@12
	mov	DWORD PTR _bSuccess$7[ebp], eax

; 323  : 
; 324  :                     if(bSuccess && scmpi(lpClassName, strWindowClass) == 0)

	cmp	DWORD PTR _bSuccess$7[ebp], 0
	je	SHORT $LN29@Preprocess
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _lpClassName$15[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN29@Preprocess

; 325  :                         hwndCapture = hwndFoundWindow;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR _hwndCapture$11[ebp], eax

; 326  :                     else

	jmp	SHORT $LN28@Preprocess
$LN29@Preprocess:

; 327  :                     {
; 328  :                         hwndCapture = FindWindow(strWindowClass, strWindow);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndCapture$11[ebp], eax

; 329  :                         if(!hwndCapture)

	cmp	DWORD PTR _hwndCapture$11[ebp], 0
	jne	SHORT $LN28@Preprocess

; 330  :                             hwndCapture = FindWindow(strWindowClass, NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndCapture$11[ebp], eax
$LN28@Preprocess:

; 331  :                     }
; 332  :                 }
; 333  :                 else

	jmp	SHORT $LN26@Preprocess
$LN30@Preprocess:

; 334  :                 {
; 335  :                     hwndCapture = FindWindow(strWindowClass, strWindow);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndCapture$11[ebp], eax

; 336  :                     if(!hwndCapture)

	cmp	DWORD PTR _hwndCapture$11[ebp], 0
	jne	SHORT $LN26@Preprocess

; 337  :                         hwndCapture = FindWindow(strWindowClass, NULL);

	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndCapture$11[ebp], eax
$LN26@Preprocess:

; 338  :                 }
; 339  : 
; 340  :                 //note to self - hwndFoundWindow is used to make sure it doesn't pick up another window unintentionally if the title changes
; 341  :                 hwndFoundWindow = hwndCapture;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _hwndCapture$11[ebp]
	mov	DWORD PTR [ecx+48], edx

; 342  : 
; 343  :                 if(!hwndCapture)

	cmp	DWORD PTR _hwndCapture$11[ebp], 0
	jne	SHORT $LN24@Preprocess

; 344  :                     bWindowNotFound = true;

	mov	BYTE PTR _bWindowNotFound$12[ebp], 1
$LN24@Preprocess:

; 345  :                 if(hwndCapture && (IsIconic(hwndCapture) || !IsWindowVisible(hwndCapture)))

	cmp	DWORD PTR _hwndCapture$11[ebp], 0
	je	$LN23@Preprocess
	mov	eax, DWORD PTR _hwndCapture$11[ebp]
	push	eax
	call	DWORD PTR __imp__IsIconic@4
	test	eax, eax
	jne	SHORT $LN22@Preprocess
	mov	ecx, DWORD PTR _hwndCapture$11[ebp]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	jne	$LN23@Preprocess
$LN22@Preprocess:

; 346  :                 {
; 347  :                     ReleaseCurrentHDC(hDC);

	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z ; DesktopImageSource::ReleaseCurrentHDC

; 348  :                     //bWindowMinimized = true;
; 349  : 
; 350  :                     if(!warningID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	$LN21@Preprocess

; 351  :                     {
; 352  :                         String strWarning;

	lea	ecx, DWORD PTR _strWarning$5[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 353  : 
; 354  :                         strWarning << Str("Sources.SoftwareCaptureSource.WindowMinimized");

	push	OFFSET ??_C@_1FM@LLGIE@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strWarning$5[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 355  :                         warningID = App->AddStreamInfo(strWarning, bWindowNotFound ? StreamInfoPriority_High : StreamInfoPriority_Medium);

	movzx	edx, BYTE PTR _bWindowNotFound$12[ebp]
	test	edx, edx
	je	SHORT $LN38@Preprocess
	mov	DWORD PTR tv191[ebp], 2
	jmp	SHORT $LN39@Preprocess
$LN38@Preprocess:
	mov	DWORD PTR tv191[ebp], 1
$LN39@Preprocess:
	mov	eax, DWORD PTR tv191[ebp]
	push	eax
	lea	ecx, DWORD PTR _strWarning$5[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?AddStreamInfo@OBS@@QAEIPB_WW4StreamInfoPriority@@@Z ; OBS::AddStreamInfo
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+96], eax

; 356  :                     }

	lea	ecx, DWORD PTR _strWarning$5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN21@Preprocess:

; 357  :                     return;

	jmp	$LN34@Preprocess
	jmp	SHORT $LN31@Preprocess
$LN23@Preprocess:

; 358  :                 }
; 359  :                 else if(!bWindowNotFound)

	movzx	edx, BYTE PTR _bWindowNotFound$12[ebp]
	test	edx, edx
	jne	SHORT $LN31@Preprocess

; 360  :                 {
; 361  :                     if(warningID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	je	SHORT $LN31@Preprocess

; 362  :                     {
; 363  :                         App->RemoveStreamInfo(warningID);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+96]
	push	edx
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?RemoveStreamInfo@OBS@@QAEXI@Z		; OBS::RemoveStreamInfo

; 364  :                         warningID = 0;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+96], 0
$LN31@Preprocess:

; 365  :                     }
; 366  :                 }
; 367  :             }
; 368  : 
; 369  :             HDC hCaptureDC;
; 370  :             if(hwndCapture && captureType == 1 && !bClientCapture)

	cmp	DWORD PTR _hwndCapture$11[ebp], 0
	je	SHORT $LN17@Preprocess
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 1
	jne	SHORT $LN17@Preprocess
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	jne	SHORT $LN17@Preprocess

; 371  :                 hCaptureDC = GetWindowDC(hwndCapture);

	mov	eax, DWORD PTR _hwndCapture$11[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowDC@4
	mov	DWORD PTR _hCaptureDC$8[ebp], eax

; 372  :             else

	jmp	SHORT $LN16@Preprocess
$LN17@Preprocess:

; 373  :                 hCaptureDC = GetDC(hwndCapture);

	mov	ecx, DWORD PTR _hwndCapture$11[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDC@4
	mov	DWORD PTR _hCaptureDC$8[ebp], eax
$LN16@Preprocess:

; 374  : 
; 375  :             if(bWindowNotFound)

	movzx	edx, BYTE PTR _bWindowNotFound$12[ebp]
	test	edx, edx
	je	$LN15@Preprocess

; 376  :             {
; 377  :                 RECT rc = {0, 0, width, height};

	mov	DWORD PTR _rc$14[ebp], 0
	mov	DWORD PTR _rc$14[ebp+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _rc$14[ebp+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR _rc$14[ebp+12], eax

; 378  :                 FillRect(hDC, &rc, (HBRUSH)GetStockObject(BLACK_BRUSH));

	push	4
	call	DWORD PTR __imp__GetStockObject@4
	push	eax
	lea	ecx, DWORD PTR _rc$14[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__FillRect@12

; 379  : 
; 380  :                 if(!warningID)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+96], 0
	jne	SHORT $LN14@Preprocess

; 381  :                     warningID = App->AddStreamInfo(Str("Sources.SoftwareCaptureSource.WindowNotFound"), StreamInfoPriority_High);

	push	2
	push	OFFSET ??_C@_1FK@EOHEKCF@?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AAs?$AA?4?$AAS?$AAo?$AAf?$AAt?$AAw?$AAa?$AAr?$AAe?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAS?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?4?$AAW?$AAi@
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?AddStreamInfo@OBS@@QAEIPB_WW4StreamInfoPriority@@@Z ; OBS::AddStreamInfo
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+96], eax
$LN14@Preprocess:

; 382  :             }
; 383  :             else

	jmp	$LN13@Preprocess
$LN15@Preprocess:

; 384  :             {
; 385  :                 //CAPTUREBLT causes mouse flicker, so make capturing layered optional
; 386  :                 if(!BitBlt(hDC, 0, 0, width, height, hCaptureDC, captureRect.left, captureRect.top, bCaptureLayered ? SRCCOPY|CAPTUREBLT : SRCCOPY))

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 0
	je	SHORT $LN40@Preprocess
	mov	DWORD PTR tv235[ebp], 1087111200	; 40cc0020H
	jmp	SHORT $LN41@Preprocess
$LN40@Preprocess:
	mov	DWORD PTR tv235[ebp], 13369376		; 00cc0020H
$LN41@Preprocess:
	mov	ecx, DWORD PTR tv235[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR _hCaptureDC$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	push	0
	push	0
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__BitBlt@36
	test	eax, eax
	jne	SHORT $LN13@Preprocess

; 387  :                 {
; 388  :                     RUNONCE AppWarning(TEXT("Capture BitBlt failed (%d)..  just so you know"), GetLastError());

	movzx	eax, BYTE PTR ?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`52'::bRunOnce
	test	eax, eax
	jne	SHORT $LN13@Preprocess
	mov	BYTE PTR ?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA, 1 ; `DesktopImageSource::Preprocess'::`52'::bRunOnce
	movzx	ecx, BYTE PTR ?bRunOnce@?DE@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`52'::bRunOnce
	test	ecx, ecx
	je	SHORT $LN13@Preprocess
	call	DWORD PTR __imp__GetLastError@0
	push	eax
	push	OFFSET ??_C@_1FO@GKBKJCBC@?$AAC?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAB?$AAi?$AAt?$AAB?$AAl?$AAt?$AA?5?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AA?$CI?$AA?$CF?$AAd?$AA?$CJ?$AA?4?$AA?4?$AA?5?$AA?5?$AAj?$AAu@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN13@Preprocess:

; 389  :                 }
; 390  :             }
; 391  : 
; 392  :             ReleaseDC(hwndCapture, hCaptureDC);

	mov	edx, DWORD PTR _hCaptureDC$8[ebp]
	push	edx
	mov	eax, DWORD PTR _hwndCapture$11[ebp]
	push	eax
	call	DWORD PTR __imp__ReleaseDC@8

; 393  : 
; 394  :             //----------------------------------------------------------
; 395  :             // capture mouse
; 396  : 
; 397  :             if(bMouseCaptured && (captureType == 0 || (captureType == 1 && hwndFoundWindow == GetForegroundWindow())))

	cmp	DWORD PTR _bMouseCaptured$4[ebp], 0
	je	$LN10@Preprocess
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	je	SHORT $LN9@Preprocess
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 1
	jne	$LN10@Preprocess
	call	DWORD PTR __imp__GetForegroundWindow@0
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], eax
	jne	$LN10@Preprocess
$LN9@Preprocess:

; 398  :             {
; 399  :                 if(ci.flags & CURSOR_SHOWING)

	mov	edx, DWORD PTR _ci$2[ebp+4]
	and	edx, 1
	je	$LN10@Preprocess

; 400  :                 {
; 401  :                     HICON hIcon = CopyIcon(ci.hCursor);

	mov	eax, DWORD PTR _ci$2[ebp+8]
	push	eax
	call	DWORD PTR __imp__CopyIcon@4
	mov	DWORD PTR _hIcon$10[ebp], eax

; 402  : 
; 403  :                     if(hIcon)

	cmp	DWORD PTR _hIcon$10[ebp], 0
	je	$LN10@Preprocess

; 404  :                     {
; 405  :                         ICONINFO ii;
; 406  :                         if(GetIconInfo(hIcon, &ii))

	lea	ecx, DWORD PTR _ii$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _hIcon$10[ebp]
	push	edx
	call	DWORD PTR __imp__GetIconInfo@8
	test	eax, eax
	je	$LN6@Preprocess

; 407  :                         {
; 408  :                             POINT capturePos = {captureRect.left, captureRect.top};

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _capturePos$9[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	mov	DWORD PTR _capturePos$9[ebp+4], eax

; 409  : 
; 410  :                             if(captureType == 1)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 1
	jne	SHORT $LN5@Preprocess

; 411  :                             {
; 412  :                                 if(bClientCapture)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+36], 0
	je	SHORT $LN4@Preprocess

; 413  :                                     ClientToScreen(hwndCapture, &capturePos);

	lea	eax, DWORD PTR _capturePos$9[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndCapture$11[ebp]
	push	ecx
	call	DWORD PTR __imp__ClientToScreen@8

; 414  :                                 else

	jmp	SHORT $LN5@Preprocess
$LN4@Preprocess:

; 415  :                                 {
; 416  :                                     RECT windowRect;
; 417  :                                     GetWindowRect(hwndCapture, &windowRect);

	lea	edx, DWORD PTR _windowRect$13[ebp]
	push	edx
	mov	eax, DWORD PTR _hwndCapture$11[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowRect@8

; 418  :                                     capturePos.x += windowRect.left;

	mov	ecx, DWORD PTR _capturePos$9[ebp]
	add	ecx, DWORD PTR _windowRect$13[ebp]
	mov	DWORD PTR _capturePos$9[ebp], ecx

; 419  :                                     capturePos.y += windowRect.top;

	mov	edx, DWORD PTR _capturePos$9[ebp+4]
	add	edx, DWORD PTR _windowRect$13[ebp+4]
	mov	DWORD PTR _capturePos$9[ebp+4], edx
$LN5@Preprocess:

; 420  :                                 }
; 421  :                             }
; 422  : 
; 423  :                             int x = ci.ptScreenPos.x - int(ii.xHotspot) - capturePos.x;

	mov	eax, DWORD PTR _ci$2[ebp+12]
	sub	eax, DWORD PTR _ii$1[ebp+4]
	sub	eax, DWORD PTR _capturePos$9[ebp]
	mov	DWORD PTR _x$6[ebp], eax

; 424  :                             int y = ci.ptScreenPos.y - int(ii.yHotspot) - capturePos.y;

	mov	ecx, DWORD PTR _ci$2[ebp+16]
	sub	ecx, DWORD PTR _ii$1[ebp+8]
	sub	ecx, DWORD PTR _capturePos$9[ebp+4]
	mov	DWORD PTR _y$3[ebp], ecx

; 425  : 
; 426  :                             DrawIcon(hDC, x, y, hIcon);

	mov	edx, DWORD PTR _hIcon$10[ebp]
	push	edx
	mov	eax, DWORD PTR _y$3[ebp]
	push	eax
	mov	ecx, DWORD PTR _x$6[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDC$[ebp]
	push	edx
	call	DWORD PTR __imp__DrawIcon@16

; 427  : 
; 428  :                             DeleteObject(ii.hbmColor);

	mov	eax, DWORD PTR _ii$1[ebp+16]
	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 429  :                             DeleteObject(ii.hbmMask);

	mov	ecx, DWORD PTR _ii$1[ebp+12]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4
$LN6@Preprocess:

; 430  :                         }
; 431  : 
; 432  :                         DestroyIcon(hIcon);

	mov	edx, DWORD PTR _hIcon$10[ebp]
	push	edx
	call	DWORD PTR __imp__DestroyIcon@4
$LN10@Preprocess:

; 433  :                     }
; 434  :                 }
; 435  :             }
; 436  : 
; 437  :             ReleaseCurrentHDC(hDC);

	mov	eax, DWORD PTR _hDC$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseCurrentHDC@DesktopImageSource@@QAEXPAUHDC__@@@Z ; DesktopImageSource::ReleaseCurrentHDC

; 438  :         }
; 439  :         else

	jmp	SHORT $LN2@Preprocess
$LN32@Preprocess:

; 440  :         {
; 441  :             RUNONCE AppWarning(TEXT("Failed to get DC from capture surface"));

	movzx	ecx, BYTE PTR ?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`75'::bRunOnce
	test	ecx, ecx
	jne	SHORT $LN2@Preprocess
	mov	BYTE PTR ?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA, 1 ; `DesktopImageSource::Preprocess'::`75'::bRunOnce
	movzx	edx, BYTE PTR ?bRunOnce@?EL@??Preprocess@DesktopImageSource@@UAEXXZ@4_NA ; `DesktopImageSource::Preprocess'::`75'::bRunOnce
	test	edx, edx
	je	SHORT $LN2@Preprocess
	push	OFFSET ??_C@_1EM@NHJCPNFI@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAt?$AAo?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAD?$AAC?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AA?5?$AAs?$AAu@
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4
$LN2@Preprocess:

; 442  :         }
; 443  : 
; 444  :         EndPreprocess();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?EndPreprocess@DesktopImageSource@@QAEXXZ ; DesktopImageSource::EndPreprocess
$LN34@Preprocess:

; 445  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?Preprocess@DesktopImageSource@@UAEXXZ ENDP		; DesktopImageSource::Preprocess
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?Render@DesktopImageSource@@UAEXABUVect2@@0@Z
_TEXT	SEGMENT
_samplerinfo$1 = -256					; size = 48
$T2 = -200						; size = 8
tv712 = -192						; size = 8
tv559 = -184						; size = 8
tv569 = -176						; size = 8
tv724 = -168						; size = 8
tv532 = -160						; size = 8
_sizeMultiplier$3 = -148				; size = 8
_fOpacity$4 = -140					; size = 4
_fSimilarity$5 = -136					; size = 4
$T6 = -132						; size = 4
_newCursorSize$7 = -128					; size = 8
_lastPixelShader$8 = -120				; size = 4
tv380 = -116						; size = 4
_fBlend$9 = -112					; size = 4
tv565 = -108						; size = 4
_monitorWidth$10 = -104					; size = 4
tv555 = -100						; size = 4
_opacity255$11 = -96					; size = 4
_hGamma$12 = -92					; size = 4
tv709 = -88						; size = 4
tv528 = -84						; size = 4
_hGamma$13 = -80					; size = 4
_monitorHeight$14 = -76					; size = 4
tv721 = -72						; size = 4
_fGamma$15 = -68					; size = 4
_ulCoord$ = -64						; size = 8
_lrCoord$ = -56						; size = 8
_newCursorPos$16 = -48					; size = 8
$T17 = -40						; size = 4
_newPos$18 = -36					; size = 8
_sampler$ = -28						; size = 4
_this$ = -24						; size = 4
_captureArea$19 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_pos$ = 8						; size = 4
_size$ = 12						; size = 4
?Render@DesktopImageSource@@UAEXABUVect2@@0@Z PROC	; DesktopImageSource::Render, COMDAT
; _this$ = ecx

; 448  :     {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 256				; 00000100H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 449  :         SamplerState *sampler = NULL;

	mov	DWORD PTR _sampler$[ebp], 0

; 450  :         /*if(bWindows8MonitorCapture)
; 451  :         {
; 452  :             RenderWindows8MonitorCapture(pos, size);
; 453  :             return;
; 454  :         }*/
; 455  : 
; 456  :         Vect2 ulCoord = Vect2(0.0f, 0.0f),

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _ulCoord$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 457  :               lrCoord = Vect2(1.0f, 1.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _lrCoord$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 458  : 
; 459  :         if(captureType == 1 && !hwndFoundWindow) {

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 1
	jne	SHORT $LN13@Render
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+48], 0
	jne	SHORT $LN13@Render

; 460  :             // Don't render a giant black rectangle if the window isn't found.
; 461  :             return;

	jmp	$LN14@Render
$LN13@Render:

; 462  :         }
; 463  : 
; 464  :         if(bWindows8MonitorCapture)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+172]
	test	eax, eax
	je	$LN12@Render

; 465  :         {
; 466  :             LONG monitorWidth  = monitorData.rect.right-monitorData.rect.left;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+188]
	sub	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _monitorWidth$10[ebp], eax

; 467  :             LONG monitorHeight = monitorData.rect.bottom-monitorData.rect.top;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+192]
	sub	eax, DWORD PTR [edx+184]
	mov	DWORD PTR _monitorHeight$14[ebp], eax

; 468  :             RECT captureArea = {captureRect.left-monitorData.rect.left,
; 469  :                                 captureRect.top-monitorData.rect.top,
; 470  :                                 captureRect.right-monitorData.rect.left,
; 471  :                                 captureRect.bottom-monitorData.rect.top};

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+68]
	sub	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _captureArea$19[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+72]
	sub	eax, DWORD PTR [edx+184]
	mov	DWORD PTR _captureArea$19[ebp+4], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+76]
	sub	eax, DWORD PTR [edx+180]
	mov	DWORD PTR _captureArea$19[ebp+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+80]
	sub	eax, DWORD PTR [edx+184]
	mov	DWORD PTR _captureArea$19[ebp+12], eax

; 472  : 
; 473  :             ulCoord.x = float(double(captureArea.left)/double(monitorWidth));

	cvtsi2sd xmm0, DWORD PTR _captureArea$19[ebp]
	cvtsi2sd xmm1, DWORD PTR _monitorWidth$10[ebp]
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _ulCoord$[ebp], xmm0

; 474  :             ulCoord.y = float(double(captureArea.top)/double(monitorHeight));

	cvtsi2sd xmm0, DWORD PTR _captureArea$19[ebp+4]
	cvtsi2sd xmm1, DWORD PTR _monitorHeight$14[ebp]
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _ulCoord$[ebp+4], xmm0

; 475  : 
; 476  :             lrCoord.x = float(double(captureArea.right)/double(monitorWidth));

	cvtsi2sd xmm0, DWORD PTR _captureArea$19[ebp+8]
	cvtsi2sd xmm1, DWORD PTR _monitorWidth$10[ebp]
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _lrCoord$[ebp], xmm0

; 477  :             lrCoord.y = float(double(captureArea.bottom)/double(monitorHeight));

	cvtsi2sd xmm0, DWORD PTR _captureArea$19[ebp+12]
	cvtsi2sd xmm1, DWORD PTR _monitorHeight$14[ebp]
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR _lrCoord$[ebp+4], xmm0
$LN12@Render:

; 478  :         }
; 479  : 
; 480  :         if(lastRendered)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+12], 0
	je	$LN1@Render

; 481  :         {
; 482  :             float fGamma = float(-(gamma-100) + 100) * 0.01f;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+120]
	sub	eax, 100				; 00000064H
	neg	eax
	add	eax, 100				; 00000064H
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fGamma$15[ebp], xmm0

; 483  : 
; 484  :             Shader *lastPixelShader = GetCurrentPixelShader();

	call	?GetCurrentPixelShader@@YAPAVShader@@XZ	; GetCurrentPixelShader
	mov	DWORD PTR _lastPixelShader$8[ebp], eax

; 485  : 
; 486  :             float fOpacity = float(opacity)*0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+116]
	mov	DWORD PTR tv528[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv528[ebp]
	mov	eax, DWORD PTR tv528[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv532[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv532[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fOpacity$4[ebp], xmm0

; 487  :             DWORD opacity255 = DWORD(fOpacity*255.0f);

	movss	xmm0, DWORD PTR _fOpacity$4[ebp]
	mulss	xmm0, DWORD PTR __real@437f0000
	call	__ftoui3
	mov	DWORD PTR _opacity255$11[ebp], eax

; 488  : 
; 489  :             if(bUseColorKey)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+100]
	test	edx, edx
	je	$LN10@Render

; 490  :             {
; 491  :                 LoadPixelShader(colorKeyShader);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 492  :                 HANDLE hGamma = colorKeyShader->GetParameterByName(TEXT("gamma"));

	push	OFFSET ??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _hGamma$12[ebp], eax

; 493  :                 if(hGamma)

	cmp	DWORD PTR _hGamma$12[ebp], 0
	je	SHORT $LN9@Render

; 494  :                     colorKeyShader->SetFloat(hGamma, fGamma);

	push	ecx
	movss	xmm0, DWORD PTR _fGamma$15[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _hGamma$12[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN9@Render:

; 495  : 
; 496  :                 float fSimilarity = float(keySimilarity)*0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR tv555[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv555[ebp]
	mov	eax, DWORD PTR tv555[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv559[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv559[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fSimilarity$5[ebp], xmm0

; 497  :                 float fBlend      = float(keyBlend)*0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+112]
	mov	DWORD PTR tv565[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv565[ebp]
	mov	eax, DWORD PTR tv565[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv569[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv569[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fBlend$9[ebp], xmm0

; 498  : 
; 499  :                 colorKeyShader->SetColor(colorKeyShader->GetParameter(2), keyColor);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+104]
	push	edx
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	call	DWORD PTR __imp_?SetColor@Shader@@QAEXPAXK@Z

; 500  :                 colorKeyShader->SetFloat(colorKeyShader->GetParameter(3), fSimilarity);

	push	ecx
	movss	xmm0, DWORD PTR _fSimilarity$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 501  :                 colorKeyShader->SetFloat(colorKeyShader->GetParameter(4), fBlend);

	push	ecx
	movss	xmm0, DWORD PTR _fBlend$9[ebp]
	movss	DWORD PTR [esp], xmm0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 502  : 
; 503  :             }
; 504  :             else

	jmp	SHORT $LN7@Render
$LN10@Render:

; 505  :             {
; 506  :                 LoadPixelShader(alphaIgnoreShader);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	push	edx
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 507  :                 HANDLE hGamma = alphaIgnoreShader->GetParameterByName(TEXT("gamma"));

	push	OFFSET ??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+56]
	mov	edx, DWORD PTR [eax+16]
	call	edx
	mov	DWORD PTR _hGamma$13[ebp], eax

; 508  :                 if(hGamma)

	cmp	DWORD PTR _hGamma$13[ebp], 0
	je	SHORT $LN7@Render

; 509  :                     alphaIgnoreShader->SetFloat(hGamma, fGamma);

	push	ecx
	movss	xmm0, DWORD PTR _fGamma$15[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _hGamma$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	mov	eax, DWORD PTR [edx+28]
	call	eax
$LN7@Render:

; 510  :             }
; 511  : 
; 512  :             if(bUsePointFiltering) {

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+101]
	test	edx, edx
	je	SHORT $LN6@Render

; 513  :                 SamplerInfo samplerinfo;

	lea	ecx, DWORD PTR _samplerinfo$1[ebp]
	call	??0SamplerInfo@@QAE@XZ			; SamplerInfo::SamplerInfo

; 514  :                 samplerinfo.filter = GS_FILTER_POINT;

	mov	DWORD PTR _samplerinfo$1[ebp], 1

; 515  :                 sampler = CreateSamplerState(samplerinfo);

	lea	eax, DWORD PTR _samplerinfo$1[ebp]
	push	eax
	call	?CreateSamplerState@@YAPAVSamplerState@@AAUSamplerInfo@@@Z ; CreateSamplerState
	add	esp, 4
	mov	DWORD PTR _sampler$[ebp], eax

; 516  :                 LoadSamplerState(sampler, 0);

	push	0
	mov	ecx, DWORD PTR _sampler$[ebp]
	push	ecx
	call	?LoadSamplerState@@YAXPAVSamplerState@@I@Z ; LoadSamplerState
	add	esp, 8
$LN6@Render:

; 517  :             }
; 518  : 
; 519  :             if(bCompatibilityMode)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+128]
	test	eax, eax
	je	$LN5@Render

; 520  :                 DrawSpriteEx(lastRendered, (opacity255<<24) | 0xFFFFFF,
; 521  :                     pos.x, pos.y+size.y, pos.x+size.x, pos.y,
; 522  :                     ulCoord.x, ulCoord.y,
; 523  :                     lrCoord.x, lrCoord.y);

	push	ecx
	movss	xmm0, DWORD PTR _lrCoord$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lrCoord$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ulCoord$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ulCoord$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+4]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebx]
	mov	eax, DWORD PTR _size$[ebx]
	movss	xmm0, DWORD PTR [edx]
	addss	xmm0, DWORD PTR [eax]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	mov	edx, DWORD PTR _size$[ebx]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _opacity255$11[ebp]
	shl	ecx, 24					; 00000018H
	or	ecx, 16777215				; 00ffffffH
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	call	?DrawSpriteEx@@YAXPAVTexture@@KMMMMMMMM@Z ; DrawSpriteEx
	add	esp, 40					; 00000028H

; 524  :             else

	jmp	$LN4@Render
$LN5@Render:

; 525  :                 GS->DrawSpriteExRotate(lastRendered, (opacity255<<24) | 0xFFFFFF,
; 526  :                     pos.x, pos.y, pos.x+size.x, pos.y+size.y, 0.0f,
; 527  :                     ulCoord.x, ulCoord.y,
; 528  :                     lrCoord.x, lrCoord.y, rotateDegrees);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx+124]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lrCoord$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _lrCoord$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ulCoord$[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _ulCoord$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebx]
	mov	eax, DWORD PTR _size$[ebx]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	mov	edx, DWORD PTR _size$[ebx]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebx]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _opacity255$11[ebp]
	shl	edx, 24					; 00000018H
	or	edx, 16777215				; 00ffffffH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+156]
	call	eax
$LN4@Render:

; 529  : 
; 530  :             if(bUsePointFiltering) delete(sampler);

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+101]
	test	edx, edx
	je	SHORT $LN17@Render
	mov	eax, DWORD PTR _sampler$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	mov	ecx, DWORD PTR $T6[ebp]
	mov	DWORD PTR $T17[ebp], ecx
	cmp	DWORD PTR $T17[ebp], 0
	je	SHORT $LN16@Render
	push	1
	mov	edx, DWORD PTR $T17[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T17[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv380[ebp], eax
	jmp	SHORT $LN17@Render
$LN16@Render:
	mov	DWORD PTR tv380[ebp], 0
$LN17@Render:

; 531  : 
; 532  :             LoadPixelShader(lastPixelShader);

	mov	eax, DWORD PTR _lastPixelShader$8[ebp]
	push	eax
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 533  : 
; 534  :             //draw mouse
; 535  :             if(bWindows8MonitorCapture && cursorTexture && bMouseCaptured && bCaptureMouse)

	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+172]
	test	edx, edx
	je	$LN1@Render
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+148], 0
	je	$LN1@Render
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+200]
	test	edx, edx
	je	$LN1@Render
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 0
	je	$LN1@Render

; 536  :             {
; 537  :                 POINT newPos = {cursorPos.x-xHotspot, cursorPos.y-yHotspot};

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+204]
	sub	eax, DWORD PTR [edx+152]
	mov	DWORD PTR _newPos$18[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+208]
	sub	eax, DWORD PTR [edx+156]
	mov	DWORD PTR _newPos$18[ebp+4], eax

; 538  : 
; 539  :                 if( newPos.x >= captureRect.left && newPos.y >= captureRect.top &&
; 540  :                     newPos.x < captureRect.right && newPos.y < captureRect.bottom)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newPos$18[ebp]
	cmp	edx, DWORD PTR [ecx+68]
	jl	$LN1@Render
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newPos$18[ebp+4]
	cmp	ecx, DWORD PTR [eax+72]
	jl	$LN1@Render
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newPos$18[ebp]
	cmp	eax, DWORD PTR [edx+76]
	jge	$LN1@Render
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newPos$18[ebp+4]
	cmp	edx, DWORD PTR [ecx+80]
	jge	$LN1@Render

; 541  :                 {
; 542  :                     Vect2 newCursorPos  = Vect2(float(newPos.x-captureRect.left), float(newPos.y-captureRect.top));

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newPos$18[ebp+4]
	sub	ecx, DWORD PTR [eax+72]
	cvtsi2ss xmm0, ecx
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newPos$18[ebp]
	sub	eax, DWORD PTR [edx+68]
	cvtsi2ss xmm0, eax
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _newCursorPos$16[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 543  :                     Vect2 newCursorSize = Vect2(float(cursorTexture->Width()), float(cursorTexture->Height()));

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+148]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	DWORD PTR tv709[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv709[ebp]
	mov	ecx, DWORD PTR tv709[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv712[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv712[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+148]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx+148]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	mov	DWORD PTR tv721[ebp], eax
	cvtsi2sd xmm0, DWORD PTR tv721[ebp]
	mov	ecx, DWORD PTR tv721[ebp]
	shr	ecx, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	movsd	QWORD PTR tv724[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv724[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	lea	ecx, DWORD PTR _newCursorSize$7[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z

; 544  : 
; 545  :                     Vect2 sizeMultiplier = size/GetSize();

	lea	edx, DWORD PTR $T2[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	push	eax
	lea	ecx, DWORD PTR _sizeMultiplier$3[ebp]
	push	ecx
	mov	ecx, DWORD PTR _size$[ebx]
	call	DWORD PTR __imp_??KVect2@@QBE?AU0@ABU0@@Z

; 546  :                     newCursorPos *= sizeMultiplier;

	lea	edx, DWORD PTR _sizeMultiplier$3[ebp]
	push	edx
	lea	ecx, DWORD PTR _newCursorPos$16[ebp]
	call	DWORD PTR __imp_??XVect2@@QAEAAU0@ABU0@@Z

; 547  :                     newCursorPos += pos;

	mov	eax, DWORD PTR _pos$[ebx]
	push	eax
	lea	ecx, DWORD PTR _newCursorPos$16[ebp]
	call	DWORD PTR __imp_??YVect2@@QAEAAU0@ABU0@@Z

; 548  :                     newCursorSize *= sizeMultiplier;

	lea	ecx, DWORD PTR _sizeMultiplier$3[ebp]
	push	ecx
	lea	ecx, DWORD PTR _newCursorSize$7[ebp]
	call	DWORD PTR __imp_??XVect2@@QAEAAU0@ABU0@@Z

; 549  : 
; 550  :                     GS->SetCropping(0.0f, 0.0f, 0.0f, 0.0f);

	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+124]
	call	eax

; 551  :                     DrawSprite(cursorTexture, 0xFFFFFFFF, newCursorPos.x, newCursorPos.y, newCursorPos.x+newCursorSize.x, newCursorPos.y+newCursorSize.y);

	movss	xmm0, DWORD PTR _newCursorPos$16[ebp+4]
	addss	xmm0, DWORD PTR _newCursorSize$7[ebp+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	movss	xmm0, DWORD PTR _newCursorPos$16[ebp]
	addss	xmm0, DWORD PTR _newCursorSize$7[ebp]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _newCursorPos$16[ebp+4]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _newCursorPos$16[ebp]
	movss	DWORD PTR [esp], xmm0
	push	-1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+148]
	push	edx
	call	?DrawSprite@@YAXPAVTexture@@KMMMM@Z	; DrawSprite
	add	esp, 24					; 00000018H
$LN1@Render:
$LN14@Render:

; 552  :                 }
; 553  :             }
; 554  :         }
; 555  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	8
?Render@DesktopImageSource@@UAEXABUVect2@@0@Z ENDP	; DesktopImageSource::Render
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?GetSize@DesktopImageSource@@UBE?AUVect2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetSize@DesktopImageSource@@UBE?AUVect2@@XZ PROC	; DesktopImageSource::GetSize, COMDAT
; _this$ = ecx

; 558  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 559  :         return Vect2(float(width), float(height));

	mov	eax, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [eax+64]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	cvtsi2ss xmm0, DWORD PTR [ecx+60]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR __imp_??0Vect2@@QAE@MM@Z
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 560  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSize@DesktopImageSource@@UBE?AUVect2@@XZ ENDP	; DesktopImageSource::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?UpdateSettings@DesktopImageSource@@UAEXXZ
_TEXT	SEGMENT
_monitorHeight$1 = -192					; size = 4
_monitorWidth$2 = -188					; size = 4
_strNewWindow$ = -184					; size = 8
tv281 = -176						; size = 4
_strNewWindowClass$ = -172				; size = 8
$T3 = -164						; size = 4
$T4 = -160						; size = 4
$T5 = -156						; size = 4
tv266 = -152						; size = 4
_info$6 = -148						; size = 4
tv253 = -144						; size = 4
_bNewClientCapture$ = -140				; size = 4
tv465 = -136						; size = 4
tv143 = -132						; size = 4
tv492 = -128						; size = 4
tv171 = -124						; size = 4
_outputs$7 = -120					; size = 8
$T8 = -112						; size = 4
$T9 = -108						; size = 4
_newCaptureType$ = -104					; size = 4
$T10 = -100						; size = 4
_y$ = -96						; size = 4
_cx$ = -92						; size = 4
_x$ = -88						; size = 4
_cy$ = -84						; size = 4
_i$11 = -80						; size = 4
_newMonitor$ = -76					; size = 4
_bih$12 = -72						; size = 4
_i$13 = -68						; size = 4
_monitorInfo$14 = -64					; size = 4
_j$15 = -60						; size = 4
_bNewUsePointFiltering$ = -55				; size = 1
_bNewUseColorKey$ = -54					; size = 1
_bNewCompatibleMode$ = -53				; size = 1
_this$ = -52						; size = 4
_bi$16 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
?UpdateSettings@DesktopImageSource@@UAEXXZ PROC		; DesktopImageSource::UpdateSettings, COMDAT
; _this$ = ecx

; 563  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 564  :         App->EnterSceneMutex();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?EnterSceneMutex@OBS@@QAEXXZ		; OBS::EnterSceneMutex

; 565  : 
; 566  :         UINT newCaptureType     = data->GetInt(TEXT("captureType"));

	push	0
	push	OFFSET ??_C@_1BI@JOCEPBAM@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _newCaptureType$[ebp], eax

; 567  :         String strNewWindow     = data->GetString(TEXT("window"));

	push	0
	push	OFFSET ??_C@_1O@IANIHGAM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	lea	ecx, DWORD PTR _strNewWindow$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 568  :         String strNewWindowClass= data->GetString(TEXT("windowClass"));

	push	0
	push	OFFSET ??_C@_1BI@KADAIMEM@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AAC?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	push	eax
	lea	ecx, DWORD PTR _strNewWindowClass$[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 569  :         BOOL bNewClientCapture  = data->GetInt(TEXT("innerWindow"), 1);

	push	1
	push	OFFSET ??_C@_1BI@FAIMKJFG@?$AAi?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bNewClientCapture$[ebp], eax

; 570  : 
; 571  :         bCaptureMouse   = data->GetInt(TEXT("captureMouse"), 1);

	push	1
	push	OFFSET ??_C@_1BK@EMJJNNLD@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAM?$AAo?$AAu?$AAs?$AAe?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], eax

; 572  :         bCaptureLayered = data->GetInt(TEXT("captureLayered"), 0);

	push	0
	push	OFFSET ??_C@_1BO@IFDFMFEP@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAL?$AAa?$AAy?$AAe?$AAr?$AAe?$AAd?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax

; 573  : 
; 574  :         bool bNewUsePointFiltering = data->GetInt(TEXT("usePointFiltering"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1CE@LNKHJCKF@?$AAu?$AAs?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN31@UpdateSett
	mov	DWORD PTR tv143[ebp], 1
	jmp	SHORT $LN32@UpdateSett
$LN31@UpdateSett:
	mov	DWORD PTR tv143[ebp], 0
$LN32@UpdateSett:
	mov	al, BYTE PTR tv143[ebp]
	mov	BYTE PTR _bNewUsePointFiltering$[ebp], al

; 575  : 
; 576  :         int x  = data->GetInt(TEXT("captureX"));

	push	0
	push	OFFSET ??_C@_1BC@GHDGFBMN@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAX?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _x$[ebp], eax

; 577  :         int y  = data->GetInt(TEXT("captureY"));

	push	0
	push	OFFSET ??_C@_1BC@NPIKDGKI@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAY?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _y$[ebp], eax

; 578  :         int cx = data->GetInt(TEXT("captureCX"), 32);

	push	32					; 00000020H
	push	OFFSET ??_C@_1BE@FJAHKEC@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAX?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _cx$[ebp], eax

; 579  :         int cy = data->GetInt(TEXT("captureCY"), 32);

	push	32					; 00000020H
	push	OFFSET ??_C@_1BE@LNCMBNCH@?$AAc?$AAa?$AAp?$AAt?$AAu?$AAr?$AAe?$AAC?$AAY?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _cy$[ebp], eax

; 580  : 
; 581  :         bool bNewCompatibleMode = data->GetInt(TEXT("compatibilityMode")) != 0;

	push	0
	push	OFFSET ??_C@_1CE@KKBOBJDL@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAi?$AAl?$AAi?$AAt?$AAy?$AAM?$AAo?$AAd?$AAe?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN33@UpdateSett
	mov	DWORD PTR tv171[ebp], 1
	jmp	SHORT $LN34@UpdateSett
$LN33@UpdateSett:
	mov	DWORD PTR tv171[ebp], 0
$LN34@UpdateSett:
	mov	al, BYTE PTR tv171[ebp]
	mov	BYTE PTR _bNewCompatibleMode$[ebp], al

; 582  :         if(bNewCompatibleMode && (OSGetVersion() >= 8 && newCaptureType == 0))

	movzx	ecx, BYTE PTR _bNewCompatibleMode$[ebp]
	test	ecx, ecx
	je	SHORT $LN28@UpdateSett
	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jl	SHORT $LN28@UpdateSett
	cmp	DWORD PTR _newCaptureType$[ebp], 0
	jne	SHORT $LN28@UpdateSett

; 583  :             bNewCompatibleMode = false;

	mov	BYTE PTR _bNewCompatibleMode$[ebp], 0
$LN28@UpdateSett:

; 584  : 
; 585  :         gamma = data->GetInt(TEXT("gamma"), 100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], eax

; 586  :         if(gamma < 50)        gamma = 50;

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+120], 50			; 00000032H
	jge	SHORT $LN27@UpdateSett
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+120], 50			; 00000032H
	jmp	SHORT $LN25@UpdateSett
$LN27@UpdateSett:

; 587  :         else if(gamma > 175)  gamma = 175;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], 175		; 000000afH
	jle	SHORT $LN25@UpdateSett
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 175		; 000000afH
$LN25@UpdateSett:

; 588  : 
; 589  :         UINT newMonitor = data->GetInt(TEXT("monitor"));

	push	0
	push	OFFSET ??_C@_1BA@FBJJKPF@?$AAm?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _newMonitor$[ebp], eax

; 590  :         if(newMonitor > App->NumMonitors())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?NumMonitors@OBS@@QBEIXZ		; OBS::NumMonitors
	cmp	DWORD PTR _newMonitor$[ebp], eax
	jbe	SHORT $LN24@UpdateSett

; 591  :             newMonitor = 0;

	mov	DWORD PTR _newMonitor$[ebp], 0
$LN24@UpdateSett:

; 592  : 
; 593  :         if( captureRect.left != x || captureRect.right != (x+cx) || captureRect.top != cy || captureRect.bottom != (y+cy) ||
; 594  :             newCaptureType != captureType || !strNewWindowClass.CompareI(strWindowClass) || !strNewWindow.CompareI(strWindow) ||
; 595  :             bNewClientCapture != bClientCapture || (OSGetVersion() >= 8 && newMonitor != monitor) ||
; 596  :             bNewCompatibleMode != bCompatibilityMode)

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	cmp	edx, DWORD PTR _x$[ebp]
	jne	$LN22@UpdateSett
	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+76], eax
	jne	$LN22@UpdateSett
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	cmp	eax, DWORD PTR _cy$[ebp]
	jne	$LN22@UpdateSett
	mov	ecx, DWORD PTR _y$[ebp]
	add	ecx, DWORD PTR _cy$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+80], ecx
	jne	$LN22@UpdateSett
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCaptureType$[ebp]
	cmp	ecx, DWORD PTR [eax+16]
	jne	SHORT $LN22@UpdateSett
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _strNewWindowClass$[ebp]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN22@UpdateSett
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR _strNewWindow$[ebp]
	call	DWORD PTR __imp_?CompareI@String@@QBEHPB_W@Z
	test	eax, eax
	je	SHORT $LN22@UpdateSett
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _bNewClientCapture$[ebp]
	cmp	eax, DWORD PTR [edx+36]
	jne	SHORT $LN22@UpdateSett
	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jl	SHORT $LN21@UpdateSett
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newMonitor$[ebp]
	cmp	edx, DWORD PTR [ecx+160]
	jne	SHORT $LN22@UpdateSett
$LN21@UpdateSett:
	movzx	eax, BYTE PTR _bNewCompatibleMode$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+128]
	cmp	eax, edx
	je	$LN23@UpdateSett
$LN22@UpdateSett:

; 597  :         {
; 598  :             for(int i=0; i<NUM_CAPTURE_TEXTURES; i++)

	mov	DWORD PTR _i$13[ebp], 0
	jmp	SHORT $LN20@UpdateSett
$LN19@UpdateSett:
	mov	eax, DWORD PTR _i$13[ebp]
	add	eax, 1
	mov	DWORD PTR _i$13[ebp], eax
$LN20@UpdateSett:
	cmp	DWORD PTR _i$13[ebp], 2
	jge	SHORT $LN18@UpdateSett

; 599  :             {
; 600  :                 delete renderTextures[i];

	mov	ecx, DWORD PTR _i$13[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+ecx*4+4]
	mov	DWORD PTR $T4[ebp], eax
	mov	ecx, DWORD PTR $T4[ebp]
	mov	DWORD PTR $T10[ebp], ecx
	cmp	DWORD PTR $T10[ebp], 0
	je	SHORT $LN35@UpdateSett
	push	1
	mov	edx, DWORD PTR $T10[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR $T10[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	mov	DWORD PTR tv253[ebp], eax
	jmp	SHORT $LN36@UpdateSett
$LN35@UpdateSett:
	mov	DWORD PTR tv253[ebp], 0
$LN36@UpdateSett:

; 601  :                 renderTextures[i] = NULL;

	mov	eax, DWORD PTR _i$13[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+eax*4+4], 0

; 602  :             }

	jmp	SHORT $LN19@UpdateSett
$LN18@UpdateSett:

; 603  : 
; 604  :             if(duplicator)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+220], 0
	je	SHORT $LN17@UpdateSett

; 605  :             {
; 606  :                 delete duplicator;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+220]
	mov	DWORD PTR $T3[ebp], ecx
	mov	edx, DWORD PTR $T3[ebp]
	mov	DWORD PTR $T9[ebp], edx
	cmp	DWORD PTR $T9[ebp], 0
	je	SHORT $LN37@UpdateSett
	push	1
	mov	eax, DWORD PTR $T9[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T9[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv266[ebp], eax
	jmp	SHORT $LN38@UpdateSett
$LN37@UpdateSett:
	mov	DWORD PTR tv266[ebp], 0
$LN38@UpdateSett:

; 607  :                 duplicator = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], 0
$LN17@UpdateSett:

; 608  :             }
; 609  : 
; 610  :             if(cursorTexture)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+148], 0
	je	SHORT $LN16@UpdateSett

; 611  :             {
; 612  :                 delete cursorTexture;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+148]
	mov	DWORD PTR $T5[ebp], ecx
	mov	edx, DWORD PTR $T5[ebp]
	mov	DWORD PTR $T8[ebp], edx
	cmp	DWORD PTR $T8[ebp], 0
	je	SHORT $LN39@UpdateSett
	push	1
	mov	eax, DWORD PTR $T8[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR $T8[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv281[ebp], eax
	jmp	SHORT $LN40@UpdateSett
$LN39@UpdateSett:
	mov	DWORD PTR tv281[ebp], 0
$LN40@UpdateSett:

; 613  :                 cursorTexture = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+148], 0
$LN16@UpdateSett:

; 614  :             }
; 615  : 
; 616  :             if(bCompatibilityMode)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+128]
	test	eax, eax
	je	SHORT $LN15@UpdateSett

; 617  :             {
; 618  :                 SelectObject(hdcCompatible, hbmpOld);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+140]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+132]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8

; 619  :                 DeleteDC(hdcCompatible);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 620  :                 DeleteObject(hbmpCompatible);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+136]
	push	edx
	call	DWORD PTR __imp__DeleteObject@4

; 621  : 
; 622  :                 hdcCompatible = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+132], 0

; 623  :                 hbmpCompatible = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], 0

; 624  :                 captureBits = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+144], 0
$LN15@UpdateSett:

; 625  :             }
; 626  : 
; 627  :             hCurrentCursor = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+212], 0

; 628  : 
; 629  :             captureType        = newCaptureType;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCaptureType$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 630  :             strWindow          = strNewWindow;

	lea	eax, DWORD PTR _strNewWindow$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z

; 631  :             strWindowClass     = strNewWindowClass;

	lea	ecx, DWORD PTR _strNewWindowClass$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z

; 632  :             bClientCapture     = bNewClientCapture;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _bNewClientCapture$[ebp]
	mov	DWORD PTR [edx+36], eax

; 633  : 
; 634  :             bCompatibilityMode = bNewCompatibleMode;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	dl, BYTE PTR _bNewCompatibleMode$[ebp]
	mov	BYTE PTR [ecx+128], dl

; 635  :             bUsePointFiltering = bNewUsePointFiltering;

	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _bNewUsePointFiltering$[ebp]
	mov	BYTE PTR [eax+101], cl

; 636  : 
; 637  :             captureRect.left   = x;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	DWORD PTR [edx+68], eax

; 638  :             captureRect.top    = y;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _y$[ebp]
	mov	DWORD PTR [ecx+72], edx

; 639  :             captureRect.right  = x+cx;

	mov	eax, DWORD PTR _x$[ebp]
	add	eax, DWORD PTR _cx$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+76], eax

; 640  :             captureRect.bottom = y+cy;

	mov	edx, DWORD PTR _y$[ebp]
	add	edx, DWORD PTR _cy$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+80], edx

; 641  : 
; 642  :             monitor = newMonitor;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newMonitor$[ebp]
	mov	DWORD PTR [ecx+160], edx

; 643  :             const MonitorInfo &monitorInfo = App->GetMonitor(monitor);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+160]
	push	ecx
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z	; OBS::GetMonitor
	mov	DWORD PTR _monitorInfo$14[ebp], eax

; 644  :             mcpy(&monitorData, &monitorInfo, sizeof(monitorInfo));

	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 176				; 000000b0H
	mov	eax, DWORD PTR _monitorInfo$14[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	ecx, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], ecx
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR [edx+12], ecx
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax

; 645  : 
; 646  :             rotateDegrees = 0.0f;

	mov	ecx, DWORD PTR _this$[ebp]
	movss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR [ecx+124], xmm0

; 647  : 
; 648  :             if(captureType == 0 && OSGetVersion() >= 8)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	$LN14@UpdateSett
	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jl	$LN14@UpdateSett

; 649  :             {
; 650  :                 LONG monitorWidth  = monitorInfo.rect.right-monitorInfo.rect.left;

	mov	eax, DWORD PTR _monitorInfo$14[ebp]
	mov	ecx, DWORD PTR _monitorInfo$14[ebp]
	mov	edx, DWORD PTR [eax+12]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _monitorWidth$2[ebp], edx

; 651  :                 LONG monitorHeight = monitorInfo.rect.bottom-monitorInfo.rect.top;

	mov	eax, DWORD PTR _monitorInfo$14[ebp]
	mov	ecx, DWORD PTR _monitorInfo$14[ebp]
	mov	edx, DWORD PTR [eax+16]
	sub	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _monitorHeight$1[ebp], edx

; 652  : 
; 653  :                 DeviceOutputs outputs;

	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	??0DeviceOutputs@@QAE@XZ

; 654  :                 GetDisplayDevices(outputs);

	lea	eax, DWORD PTR _outputs$7[ebp]
	push	eax
	call	?GetDisplayDevices@@YAXAAUDeviceOutputs@@@Z ; GetDisplayDevices
	add	esp, 4

; 655  :                 
; 656  :                 bWindows8MonitorCapture = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+172], 0

; 657  : 
; 658  :                 if(outputs.devices.Num())

	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	?Num@?$List@UDeviceOutputData@@@@QBEIXZ	; List<DeviceOutputData>::Num
	test	eax, eax
	je	$LN10@UpdateSett

; 659  :                 {
; 660  :                     const MonitorInfo &info = App->GetMonitor(monitor);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+160]
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z	; OBS::GetMonitor
	mov	DWORD PTR _info$6[ebp], eax

; 661  :                     for(UINT j=0; j<outputs.devices[0].monitors.Num(); j++)

	mov	DWORD PTR _j$15[ebp], 0
	jmp	SHORT $LN12@UpdateSett
$LN11@UpdateSett:
	mov	ecx, DWORD PTR _j$15[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$15[ebp], ecx
$LN12@UpdateSett:
	push	0
	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	??A?$List@UDeviceOutputData@@@@QAEAAUDeviceOutputData@@I@Z ; List<DeviceOutputData>::operator[]
	add	eax, 8
	mov	ecx, eax
	call	?Num@?$List@UMonitorInfo@@@@QBEIXZ	; List<MonitorInfo>::Num
	cmp	DWORD PTR _j$15[ebp], eax
	jae	SHORT $LN10@UpdateSett

; 662  :                     {
; 663  :                         if(outputs.devices[0].monitors[j].hMonitor == info.hMonitor)

	mov	edx, DWORD PTR _j$15[ebp]
	push	edx
	push	0
	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	??A?$List@UDeviceOutputData@@@@QAEAAUDeviceOutputData@@I@Z ; List<DeviceOutputData>::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
	mov	ecx, DWORD PTR _info$6[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	jne	SHORT $LN9@UpdateSett

; 664  :                         {
; 665  :                             deviceOutputID = j;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _j$15[ebp]
	mov	DWORD PTR [eax+164], ecx

; 666  :                             rotateDegrees = outputs.devices[0].monitors[j].rotationDegrees;

	mov	edx, DWORD PTR _j$15[ebp]
	push	edx
	push	0
	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	??A?$List@UDeviceOutputData@@@@QAEAAUDeviceOutputData@@I@Z ; List<DeviceOutputData>::operator[]
	add	eax, 8
	mov	ecx, eax
	call	??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z ; List<MonitorInfo>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+20]
	mov	DWORD PTR [ecx+124], edx

; 667  :                             bWindows8MonitorCapture = true;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+172], 1
$LN9@UpdateSett:

; 668  :                         }
; 669  :                     }

	jmp	SHORT $LN11@UpdateSett
$LN10@UpdateSett:

; 670  :                 }
; 671  :             }

	lea	ecx, DWORD PTR _outputs$7[ebp]
	call	??1DeviceOutputs@@QAE@XZ		; DeviceOutputs::~DeviceOutputs
$LN14@UpdateSett:

; 672  : 
; 673  :             width  = cx;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _cx$[ebp]
	mov	DWORD PTR [ecx+60], edx

; 674  :             height = cy;

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cy$[ebp]
	mov	DWORD PTR [eax+64], ecx

; 675  : 
; 676  :             if(bCompatibilityMode)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+128]
	test	eax, eax
	je	$LN8@UpdateSett

; 677  :             {
; 678  :                 hdcCompatible = CreateCompatibleDC(NULL);

	push	0
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+132], eax

; 679  : 
; 680  :                 BITMAPINFO bi;
; 681  :                 zero(&bi, sizeof(bi));

	push	44					; 0000002cH
	lea	edx, DWORD PTR _bi$16[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 682  : 
; 683  :                 BITMAPINFOHEADER &bih = bi.bmiHeader;

	lea	eax, DWORD PTR _bi$16[ebp]
	mov	DWORD PTR _bih$12[ebp], eax

; 684  :                 bih.biSize = sizeof(bih);

	mov	ecx, DWORD PTR _bih$12[ebp]
	mov	DWORD PTR [ecx], 40			; 00000028H

; 685  :                 bih.biBitCount = 32;

	mov	edx, 32					; 00000020H
	mov	eax, DWORD PTR _bih$12[ebp]
	mov	WORD PTR [eax+14], dx

; 686  :                 bih.biWidth  = width;

	mov	ecx, DWORD PTR _bih$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+4], eax

; 687  :                 bih.biHeight = height;

	mov	ecx, DWORD PTR _bih$12[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+8], eax

; 688  :                 bih.biPlanes = 1;

	mov	ecx, 1
	mov	edx, DWORD PTR _bih$12[ebp]
	mov	WORD PTR [edx+12], cx

; 689  : 
; 690  :                 hbmpCompatible = CreateDIBSection(hdcCompatible, &bi, DIB_RGB_COLORS, (void**)&captureBits, NULL, 0);

	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 144				; 00000090H
	push	eax
	push	0
	lea	ecx, DWORD PTR _bi$16[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+132]
	push	eax
	call	DWORD PTR __imp__CreateDIBSection@24
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+136], eax

; 691  :                 hbmpOld = (HBITMAP)SelectObject(hdcCompatible, hbmpCompatible);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+136]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+132]
	push	edx
	call	DWORD PTR __imp__SelectObject@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+140], eax
$LN8@UpdateSett:

; 692  :             }
; 693  : 
; 694  :             if(bWindows8MonitorCapture && !bInInit)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+172]
	test	eax, eax
	je	SHORT $LN7@UpdateSett
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+216]
	test	edx, edx
	jne	SHORT $LN7@UpdateSett

; 695  :                 duplicator = GS->CreateOutputDuplicator(deviceOutputID);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+164]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+52]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+220], eax
	jmp	SHORT $LN1@UpdateSett
$LN7@UpdateSett:

; 696  :             else if(bCompatibilityMode)

	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+128]
	test	eax, eax
	je	SHORT $LN5@UpdateSett

; 697  :                 renderTextures[0] = CreateTexture(width, height, GS_BGRA, NULL, FALSE, FALSE);

	push	0
	push	0
	push	0
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	?CreateTexture@@YAPAVTexture@@IIW4GSColorFormat@@PAXHH@Z ; CreateTexture
	add	esp, 24					; 00000018H
	mov	edx, 4
	imul	ecx, edx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+ecx+4], eax

; 698  :             else

	jmp	SHORT $LN1@UpdateSett
$LN5@UpdateSett:

; 699  :             {
; 700  :                 for(UINT i=0; i<NUM_CAPTURE_TEXTURES; i++)

	mov	DWORD PTR _i$11[ebp], 0
	jmp	SHORT $LN3@UpdateSett
$LN2@UpdateSett:
	mov	eax, DWORD PTR _i$11[ebp]
	add	eax, 1
	mov	DWORD PTR _i$11[ebp], eax
$LN3@UpdateSett:
	cmp	DWORD PTR _i$11[ebp], 2
	jae	SHORT $LN1@UpdateSett

; 701  :                     renderTextures[i] = CreateGDITexture(width, height);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	call	?CreateGDITexture@@YAPAVTexture@@II@Z	; CreateGDITexture
	add	esp, 8
	mov	edx, DWORD PTR _i$11[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+edx*4+4], eax
	jmp	SHORT $LN2@UpdateSett
$LN1@UpdateSett:

; 702  :             }
; 703  : 
; 704  :             lastRendered = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
$LN23@UpdateSett:

; 705  :         }
; 706  : 
; 707  :         bool bNewUseColorKey = data->GetInt(TEXT("useColorKey"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN41@UpdateSett
	mov	DWORD PTR tv465[ebp], 1
	jmp	SHORT $LN42@UpdateSett
$LN41@UpdateSett:
	mov	DWORD PTR tv465[ebp], 0
$LN42@UpdateSett:
	mov	cl, BYTE PTR tv465[ebp]
	mov	BYTE PTR _bNewUseColorKey$[ebp], cl

; 708  :         keyColor        = data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	push	-1
	push	OFFSET ??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+104], eax

; 709  :         keySimilarity   = data->GetInt(TEXT("keySimilarity"), 10);

	push	10					; 0000000aH
	push	OFFSET ??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+108], eax

; 710  :         keyBlend        = data->GetInt(TEXT("keyBlend"), 0);

	push	0
	push	OFFSET ??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+112], eax

; 711  :         bUsePointFiltering = data->GetInt(TEXT("usePointFiltering"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1CE@LNKHJCKF@?$AAu?$AAs?$AAe?$AAP?$AAo?$AAi?$AAn?$AAt?$AAF?$AAi?$AAl?$AAt?$AAe?$AAr?$AAi?$AAn?$AAg?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN43@UpdateSett
	mov	DWORD PTR tv492[ebp], 1
	jmp	SHORT $LN44@UpdateSett
$LN43@UpdateSett:
	mov	DWORD PTR tv492[ebp], 0
$LN44@UpdateSett:
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR tv492[ebp]
	mov	BYTE PTR [eax+101], cl

; 712  : 
; 713  :         bUseColorKey = bNewUseColorKey;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bNewUseColorKey$[ebp]
	mov	BYTE PTR [edx+100], al

; 714  : 
; 715  :         opacity = data->GetInt(TEXT("opacity"), 100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+92]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+116], eax

; 716  : 
; 717  :         App->LeaveSceneMutex();

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?LeaveSceneMutex@OBS@@QAEXXZ		; OBS::LeaveSceneMutex

; 718  :     }

	lea	ecx, DWORD PTR _strNewWindowClass$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strNewWindow$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSettings@DesktopImageSource@@UAEXXZ ENDP		; DesktopImageSource::UpdateSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?SetInt@DesktopImageSource@@UAEXPB_WH@Z
_TEXT	SEGMENT
tv69 = -12						; size = 4
_this$ = -8						; size = 4
_bNewVal$1 = -1						; size = 1
_lpName$ = 8						; size = 4
_iVal$ = 12						; size = 4
?SetInt@DesktopImageSource@@UAEXPB_WH@Z PROC		; DesktopImageSource::SetInt, COMDAT
; _this$ = ecx

; 721  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 722  :         if(scmpi(lpName, TEXT("useColorKey")) == 0)

	push	OFFSET ??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@
	mov	eax, DWORD PTR _lpName$[ebp]
	push	eax
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN14@SetInt

; 723  :         {
; 724  :             bool bNewVal = iVal != 0;

	cmp	DWORD PTR _iVal$[ebp], 0
	je	SHORT $LN17@SetInt
	mov	DWORD PTR tv69[ebp], 1
	jmp	SHORT $LN18@SetInt
$LN17@SetInt:
	mov	DWORD PTR tv69[ebp], 0
$LN18@SetInt:
	mov	cl, BYTE PTR tv69[ebp]
	mov	BYTE PTR _bNewVal$1[ebp], cl

; 725  :             bUseColorKey = bNewVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bNewVal$1[ebp]
	mov	BYTE PTR [edx+100], al
	jmp	$LN15@SetInt
$LN14@SetInt:

; 726  :         }
; 727  :         else if(scmpi(lpName, TEXT("keyColor")) == 0)

	push	OFFSET ??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN12@SetInt

; 728  :         {
; 729  :             keyColor = (DWORD)iVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iVal$[ebp]
	mov	DWORD PTR [edx+104], eax
	jmp	$LN15@SetInt
$LN12@SetInt:

; 730  :         }
; 731  :         else if(scmpi(lpName, TEXT("keySimilarity")) == 0)

	push	OFFSET ??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN10@SetInt

; 732  :         {
; 733  :             keySimilarity = iVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iVal$[ebp]
	mov	DWORD PTR [edx+108], eax
	jmp	$LN15@SetInt
$LN10@SetInt:

; 734  :         }
; 735  :         else if(scmpi(lpName, TEXT("keyBlend")) == 0)

	push	OFFSET ??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN8@SetInt

; 736  :         {
; 737  :             keyBlend = iVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iVal$[ebp]
	mov	DWORD PTR [edx+112], eax
	jmp	SHORT $LN15@SetInt
$LN8@SetInt:

; 738  :         }
; 739  :         else if(scmpi(lpName, TEXT("opacity")) == 0)

	push	OFFSET ??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN6@SetInt

; 740  :         {
; 741  :             opacity = (UINT)iVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iVal$[ebp]
	mov	DWORD PTR [edx+116], eax
	jmp	SHORT $LN15@SetInt
$LN6@SetInt:

; 742  :         }
; 743  :         else if(scmpi(lpName, TEXT("gamma")) == 0)

	push	OFFSET ??_C@_1M@JKNLOKNB@?$AAg?$AAa?$AAm?$AAm?$AAa?$AA?$AA@
	mov	ecx, DWORD PTR _lpName$[ebp]
	push	ecx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN15@SetInt

; 744  :         {
; 745  :             gamma = iVal;

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _iVal$[ebp]
	mov	DWORD PTR [edx+120], eax

; 746  :             if(gamma < 50)        gamma = 50;

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+120], 50			; 00000032H
	jge	SHORT $LN3@SetInt
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+120], 50			; 00000032H
	jmp	SHORT $LN15@SetInt
$LN3@SetInt:

; 747  :             else if(gamma > 175)  gamma = 175;

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+120], 175		; 000000afH
	jle	SHORT $LN15@SetInt
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+120], 175		; 000000afH
$LN15@SetInt:

; 748  :         }
; 749  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?SetInt@DesktopImageSource@@UAEXPB_WH@Z ENDP		; DesktopImageSource::SetInt
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GDesktopImageSource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GDesktopImageSource@@UAEPAXI@Z PROC			; DesktopImageSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1DesktopImageSource@@UAE@XZ		; DesktopImageSource::~DesktopImageSource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GDesktopImageSource@@UAEPAXI@Z ENDP			; DesktopImageSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??0DeviceOutputs@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0DeviceOutputs@@QAE@XZ PROC				; DeviceOutputs::DeviceOutputs, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$List@UDeviceOutputData@@@@QAE@XZ	; List<DeviceOutputData>::List<DeviceOutputData>
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0DeviceOutputs@@QAE@XZ ENDP				; DeviceOutputs::DeviceOutputs
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?CreateDesktopSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
tv77 = -8						; size = 4
$T1 = -4						; size = 4
_data$ = 8						; size = 4
?CreateDesktopSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateDesktopSource, COMDAT

; 753  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 754  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN1@CreateDesk

; 755  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CreateDesk
$LN1@CreateDesk:

; 756  : 
; 757  :     return new DesktopImageSource(App->GetFrameTime(), data);

	push	224					; 000000e0H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@CreateDesk
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetFrameTime@OBS@@QBEIXZ		; OBS::GetFrameTime
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0DesktopImageSource@@QAE@IPAVXElement@@@Z ; DesktopImageSource::DesktopImageSource
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN5@CreateDesk
$LN4@CreateDesk:
	mov	DWORD PTR tv77[ebp], 0
$LN5@CreateDesk:
	mov	eax, DWORD PTR tv77[ebp]
$LN2@CreateDesk:

; 758  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateDesktopSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateDesktopSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z
_TEXT	SEGMENT
$T1 = -620						; size = 8
$T2 = -612						; size = 8
_strText$3 = -604					; size = 8
_styles$4 = -596					; size = 4
_dwSize$5 = -592					; size = 4
_id$6 = -588						; size = 4
_strFileName$7 = -584					; size = 8
_processID$8 = -576					; size = 4
_strClassName$9 = -572					; size = 8
_hProcess$10 = -564					; size = 4
_exStyles$11 = -560					; size = 4
_strWindowName$12 = -556				; size = 8
_hwndCurrent$ = -548					; size = 4
_clientRect$13 = -544					; size = 16
_fileName$14 = -528					; size = 522
__$ArrayPad$ = -4					; size = 4
_hwndCombobox$ = 8					; size = 4
_classList$ = 12					; size = 4
?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z PROC ; RefreshWindowList, COMDAT

; 761  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 620				; 0000026cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 762  :     SendMessage(hwndCombobox, CB_RESETCONTENT, 0, 0);

	push	0
	push	0
	push	331					; 0000014bH
	mov	eax, DWORD PTR _hwndCombobox$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 763  :     classList.Clear();

	mov	ecx, DWORD PTR _classList$[ebp]
	call	DWORD PTR __imp_?Clear@StringList@@QAEXXZ

; 764  : 
; 765  :     HWND hwndCurrent = GetWindow(GetDesktopWindow(), GW_CHILD);

	push	5
	call	DWORD PTR __imp__GetDesktopWindow@0
	push	eax
	call	DWORD PTR __imp__GetWindow@8
	mov	DWORD PTR _hwndCurrent$[ebp], eax
$LN9@RefreshWin:

; 766  :     do
; 767  :     {
; 768  :         if(IsWindowVisible(hwndCurrent) && !IsIconic(hwndCurrent))

	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	call	DWORD PTR __imp__IsWindowVisible@4
	test	eax, eax
	je	$LN8@RefreshWin
	mov	edx, DWORD PTR _hwndCurrent$[ebp]
	push	edx
	call	DWORD PTR __imp__IsIconic@4
	test	eax, eax
	jne	$LN8@RefreshWin

; 769  :         {
; 770  :             RECT clientRect;
; 771  :             GetClientRect(hwndCurrent, &clientRect);

	lea	eax, DWORD PTR _clientRect$13[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetClientRect@8

; 772  : 
; 773  :             String strWindowName;

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 774  :             strWindowName.SetLength(GetWindowTextLength(hwndCurrent));

	mov	edx, DWORD PTR _hwndCurrent$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowTextLengthW@4
	push	eax
	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 775  :             GetWindowText(hwndCurrent, strWindowName, strWindowName.Length()+1);

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_?Length@String@@QBEIXZ
	add	eax, 1
	push	eax
	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _hwndCurrent$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowTextW@12

; 776  : 
; 777  :             DWORD exStyles = (DWORD)GetWindowLongPtr(hwndCurrent, GWL_EXSTYLE);

	push	-20					; ffffffecH
	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _exStyles$11[ebp], eax

; 778  :             DWORD styles = (DWORD)GetWindowLongPtr(hwndCurrent, GWL_STYLE);

	push	-16					; fffffff0H
	mov	edx, DWORD PTR _hwndCurrent$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _styles$4[ebp], eax

; 779  : 
; 780  :             if (strWindowName.IsValid() && sstri(strWindowName, L"battlefield") != nullptr)

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_?IsValid@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN5@RefreshWin
	push	OFFSET $SG4294889995
	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?sstri@@YGPA_WPB_W0@Z
	test	eax, eax
	je	SHORT $LN5@RefreshWin

; 781  :                 exStyles &= ~WS_EX_TOOLWINDOW;

	mov	eax, DWORD PTR _exStyles$11[ebp]
	and	eax, -129				; ffffff7fH
	mov	DWORD PTR _exStyles$11[ebp], eax
$LN5@RefreshWin:

; 782  : 
; 783  :             if( (exStyles & WS_EX_TOOLWINDOW) == 0 && (styles & WS_CHILD) == 0 &&
; 784  :                 clientRect.bottom != 0 && clientRect.right != 0 /*&& hwndParent == NULL*/)

	mov	ecx, DWORD PTR _exStyles$11[ebp]
	and	ecx, 128				; 00000080H
	jne	$LN4@RefreshWin
	mov	edx, DWORD PTR _styles$4[ebp]
	and	edx, 1073741824				; 40000000H
	jne	$LN4@RefreshWin
	cmp	DWORD PTR _clientRect$13[ebp+12], 0
	je	$LN4@RefreshWin
	cmp	DWORD PTR _clientRect$13[ebp+8], 0
	je	$LN4@RefreshWin

; 785  :             {
; 786  :                 //-------
; 787  : 
; 788  :                 DWORD processID;
; 789  :                 GetWindowThreadProcessId(hwndCurrent, &processID);

	lea	eax, DWORD PTR _processID$8[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowThreadProcessId@8

; 790  :                 if(processID == GetCurrentProcessId())

	call	DWORD PTR __imp__GetCurrentProcessId@0
	cmp	DWORD PTR _processID$8[ebp], eax
	jne	SHORT $LN3@RefreshWin

; 791  :                     continue;

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN8@RefreshWin
$LN3@RefreshWin:

; 792  : 
; 793  :                 TCHAR fileName[MAX_PATH+1];
; 794  :                 scpy(fileName, TEXT("unknown"));

	push	OFFSET $SG4294889994
	lea	edx, DWORD PTR _fileName$14[ebp]
	push	edx
	call	DWORD PTR __imp_?scpy@@YGXPA_WPB_W@Z

; 795  : 
; 796  :                 HANDLE hProcess = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, processID);

	mov	eax, DWORD PTR _processID$8[ebp]
	push	eax
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__OpenProcess@12
	mov	DWORD PTR _hProcess$10[ebp], eax

; 797  :                 if(hProcess)

	cmp	DWORD PTR _hProcess$10[ebp], 0
	je	SHORT $LN2@RefreshWin

; 798  :                 {
; 799  :                     DWORD dwSize = MAX_PATH;

	mov	DWORD PTR _dwSize$5[ebp], 260		; 00000104H

; 800  :                     QueryFullProcessImageName(hProcess, 0, fileName, &dwSize);

	lea	ecx, DWORD PTR _dwSize$5[ebp]
	push	ecx
	lea	edx, DWORD PTR _fileName$14[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _hProcess$10[ebp]
	push	eax
	call	DWORD PTR __imp__QueryFullProcessImageNameW@16

; 801  :                     CloseHandle(hProcess);

	mov	ecx, DWORD PTR _hProcess$10[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN2@RefreshWin:

; 802  :                 }
; 803  : 
; 804  :                 //-------
; 805  : 
; 806  :                 String strFileName = fileName;

	lea	edx, DWORD PTR _fileName$14[ebp]
	push	edx
	lea	ecx, DWORD PTR _strFileName$7[ebp]
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z

; 807  :                 strFileName.FindReplace(TEXT("\\"), TEXT("/"));

	push	OFFSET $SG4294889993
	push	OFFSET $SG4294889992
	lea	ecx, DWORD PTR _strFileName$7[ebp]
	call	DWORD PTR __imp_?FindReplace@String@@QAEAAV1@PB_W0@Z

; 808  : 
; 809  :                 String strText;

	lea	ecx, DWORD PTR _strText$3[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 810  :                 strText << TEXT("[") << GetPathFileName(strFileName) << TEXT("]: ") << strWindowName;

	lea	eax, DWORD PTR _strWindowName$12[ebp]
	push	eax
	push	OFFSET $SG4294889990
	push	0
	lea	ecx, DWORD PTR _strFileName$7[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetPathFileName@@YA?AVString@@PB_WH@Z
	add	esp, 12					; 0000000cH
	push	eax
	push	OFFSET $SG4294889991
	lea	ecx, DWORD PTR _strText$3[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 811  : 
; 812  :                 if(strWindowName.IsEmpty()) strWindowName = GetPathFileName(strFileName);

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN1@RefreshWin
	push	0
	lea	ecx, DWORD PTR _strFileName$7[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	DWORD PTR __imp_?GetPathFileName@@YA?AVString@@PB_WH@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN1@RefreshWin:

; 813  : 
; 814  :                 int id = (int)SendMessage(hwndCombobox, CB_ADDSTRING, 0, (LPARAM)strWindowName.Array());

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndCombobox$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$6[ebp], eax

; 815  :                 SendMessage(hwndCombobox, CB_SETITEMDATA, id, (LPARAM)hwndCurrent);

	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	mov	edx, DWORD PTR _id$6[ebp]
	push	edx
	push	337					; 00000151H
	mov	eax, DWORD PTR _hwndCombobox$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 816  : 
; 817  :                 String strClassName;

	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 818  :                 strClassName.SetLength(256);

	push	256					; 00000100H
	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 819  :                 GetClassName(hwndCurrent, strClassName.Array(), 255);

	push	255					; 000000ffH
	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	mov	ecx, DWORD PTR _hwndCurrent$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetClassNameW@12

; 820  :                 strClassName.SetLength(slen(strClassName));

	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp_?slen@@YGIPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_?SetLength@String@@QAEAAV1@I@Z

; 821  : 
; 822  :                 classList << strClassName;

	lea	edx, DWORD PTR _strClassName$9[ebp]
	push	edx
	mov	ecx, DWORD PTR _classList$[ebp]
	call	DWORD PTR __imp_??6StringList@@QAEAAV0@ABVString@@@Z

; 823  :             }

	lea	ecx, DWORD PTR _strClassName$9[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strText$3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	lea	ecx, DWORD PTR _strFileName$7[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN4@RefreshWin:

; 824  :         }

	lea	ecx, DWORD PTR _strWindowName$12[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN8@RefreshWin:

; 825  :     } while (hwndCurrent = GetNextWindow(hwndCurrent, GW_HWNDNEXT));

	push	2
	mov	eax, DWORD PTR _hwndCurrent$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindow@8
	mov	DWORD PTR _hwndCurrent$[ebp], eax
	cmp	DWORD PTR _hwndCurrent$[ebp], 0
	jne	$LN9@RefreshWin

; 826  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z ENDP ; RefreshWindowList
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ??0ConfigDesktopSourceInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ConfigDesktopSourceInfo@@QAE@XZ PROC			; ConfigDesktopSourceInfo::ConfigDesktopSourceInfo, COMDAT
; _this$ = ecx

; 837  :     inline ConfigDesktopSourceInfo()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??0StringList@@QAE@XZ

; 838  :     {
; 839  :         zero(this, sizeof(*this));

	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 840  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ConfigDesktopSourceInfo@@QAE@XZ ENDP			; ConfigDesktopSourceInfo::ConfigDesktopSourceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z
_TEXT	SEGMENT
tv144 = -28						; size = 4
tv137 = -24						; size = 4
tv130 = -20						; size = 4
tv91 = -16						; size = 4
tv84 = -12						; size = 4
tv76 = -8						; size = 4
tv67 = -4						; size = 4
_hwnd$ = 8						; size = 4
_type$ = 12						; size = 4
?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z PROC		; SetDesktopCaptureType, COMDAT

; 844  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 845  :     SendMessage(GetDlgItem(hwnd, IDC_MONITORCAPTURE), BM_SETCHECK, type == 0 ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN3@SetDesktop
	mov	DWORD PTR tv67[ebp], 1
	jmp	SHORT $LN4@SetDesktop
$LN3@SetDesktop:
	mov	DWORD PTR tv67[ebp], 0
$LN4@SetDesktop:
	push	0
	mov	eax, DWORD PTR tv67[ebp]
	push	eax
	push	241					; 000000f1H
	push	1061					; 00000425H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 846  :     SendMessage(GetDlgItem(hwnd, IDC_WINDOWCAPTURE),  BM_SETCHECK, type == 1 ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN5@SetDesktop
	mov	DWORD PTR tv76[ebp], 1
	jmp	SHORT $LN6@SetDesktop
$LN5@SetDesktop:
	mov	DWORD PTR tv76[ebp], 0
$LN6@SetDesktop:
	push	0
	mov	edx, DWORD PTR tv76[ebp]
	push	edx
	push	241					; 000000f1H
	push	1065					; 00000429H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 847  : 
; 848  :     EnableWindow(GetDlgItem(hwnd, IDC_MONITOR),     type == 0);

	cmp	DWORD PTR _type$[ebp], 0
	jne	SHORT $LN7@SetDesktop
	mov	DWORD PTR tv84[ebp], 1
	jmp	SHORT $LN8@SetDesktop
$LN7@SetDesktop:
	mov	DWORD PTR tv84[ebp], 0
$LN8@SetDesktop:
	mov	ecx, DWORD PTR tv84[ebp]
	push	ecx
	push	1019					; 000003fbH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 849  : 
; 850  :     EnableWindow(GetDlgItem(hwnd, IDC_WINDOW),      type == 1);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN9@SetDesktop
	mov	DWORD PTR tv91[ebp], 1
	jmp	SHORT $LN10@SetDesktop
$LN9@SetDesktop:
	mov	DWORD PTR tv91[ebp], 0
$LN10@SetDesktop:
	mov	eax, DWORD PTR tv91[ebp]
	push	eax
	push	1066					; 0000042aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 851  :     EnableWindow(GetDlgItem(hwnd, IDC_REFRESH),     type == 1);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN11@SetDesktop
	mov	DWORD PTR tv130[ebp], 1
	jmp	SHORT $LN12@SetDesktop
$LN11@SetDesktop:
	mov	DWORD PTR tv130[ebp], 0
$LN12@SetDesktop:
	mov	edx, DWORD PTR tv130[ebp]
	push	edx
	push	1068					; 0000042cH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 852  :     EnableWindow(GetDlgItem(hwnd, IDC_OUTERWINDOW), type == 1);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN13@SetDesktop
	mov	DWORD PTR tv137[ebp], 1
	jmp	SHORT $LN14@SetDesktop
$LN13@SetDesktop:
	mov	DWORD PTR tv137[ebp], 0
$LN14@SetDesktop:
	mov	ecx, DWORD PTR tv137[ebp]
	push	ecx
	push	1067					; 0000042bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 853  :     EnableWindow(GetDlgItem(hwnd, IDC_INNERWINDOW), type == 1);

	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN15@SetDesktop
	mov	DWORD PTR tv144[ebp], 1
	jmp	SHORT $LN16@SetDesktop
$LN15@SetDesktop:
	mov	DWORD PTR tv144[ebp], 0
$LN16@SetDesktop:
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	push	1069					; 0000042dH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 854  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z ENDP		; SetDesktopCaptureType
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?SelectTargetWindow@@YAXPAUHWND__@@_N@Z
_TEXT	SEGMENT
$T1 = -96						; size = 8
$T2 = -88						; size = 8
$T3 = -80						; size = 8
$T4 = -72						; size = 8
_bRegion$ = -64						; size = 4
_bInnerWindow$ = -60					; size = 4
_strWindow$ = -56					; size = 8
tv189 = -48						; size = 4
tv168 = -44						; size = 4
_hwndLastKnownHWND$5 = -40				; size = 4
_info$ = -36						; size = 4
_hwndWindowList$ = -32					; size = 4
_windowID$ = -28					; size = 4
_hwndTarget$ = -24					; size = 4
_rc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_bRefresh$ = 12						; size = 1
?SelectTargetWindow@@YAXPAUHWND__@@_N@Z PROC		; SelectTargetWindow, COMDAT

; 857  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 858  :     HWND hwndWindowList = GetDlgItem(hwnd, IDC_WINDOW);

	push	1066					; 0000042aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndWindowList$[ebp], eax

; 859  :     UINT windowID = (UINT)SendMessage(hwndWindowList, CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	mov	ecx, DWORD PTR _hwndWindowList$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _windowID$[ebp], eax

; 860  :     if(windowID == CB_ERR)

	cmp	DWORD PTR _windowID$[ebp], -1
	jne	SHORT $LN12@SelectTarg

; 861  :         return;

	jmp	$LN13@SelectTarg
$LN12@SelectTarg:

; 862  : 
; 863  :     String strWindow = GetCBText(hwndWindowList, windowID);

	mov	edx, DWORD PTR _windowID$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwndWindowList$[ebp]
	push	eax
	lea	ecx, DWORD PTR _strWindow$[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH

; 864  : 
; 865  :     ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$[ebp], eax

; 866  : 
; 867  :     if(windowID >= info->strClasses.Num())

	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _windowID$[ebp], eax
	jb	SHORT $LN11@SelectTarg

; 868  :         return;

	lea	ecx, DWORD PTR _strWindow$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN13@SelectTarg
$LN11@SelectTarg:

; 869  : 
; 870  :     HWND hwndTarget = FindWindow(info->strClasses[windowID], strWindow);

	lea	ecx, DWORD PTR _strWindow$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _windowID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndTarget$[ebp], eax

; 871  :     if(!hwndTarget)

	cmp	DWORD PTR _hwndTarget$[ebp], 0
	jne	SHORT $LN10@SelectTarg

; 872  :     {
; 873  :         HWND hwndLastKnownHWND = (HWND)SendMessage(hwndWindowList, CB_GETITEMDATA, windowID, 0);

	push	0
	mov	ecx, DWORD PTR _windowID$[ebp]
	push	ecx
	push	336					; 00000150H
	mov	edx, DWORD PTR _hwndWindowList$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _hwndLastKnownHWND$5[ebp], eax

; 874  :         if(IsWindow(hwndLastKnownHWND))

	mov	eax, DWORD PTR _hwndLastKnownHWND$5[ebp]
	push	eax
	call	DWORD PTR __imp__IsWindow@4
	test	eax, eax
	je	SHORT $LN9@SelectTarg

; 875  :             hwndTarget = hwndLastKnownHWND;

	mov	ecx, DWORD PTR _hwndLastKnownHWND$5[ebp]
	mov	DWORD PTR _hwndTarget$[ebp], ecx

; 876  :         else

	jmp	SHORT $LN10@SelectTarg
$LN9@SelectTarg:

; 877  :             hwndTarget = FindWindow(info->strClasses[windowID], NULL);

	push	0
	mov	edx, DWORD PTR _windowID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _info$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR _hwndTarget$[ebp], eax
$LN10@SelectTarg:

; 878  :     }
; 879  : 
; 880  :     if(!hwndTarget)

	cmp	DWORD PTR _hwndTarget$[ebp], 0
	jne	SHORT $LN7@SelectTarg

; 881  :         return;

	lea	ecx, DWORD PTR _strWindow$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN13@SelectTarg
$LN7@SelectTarg:

; 882  : 
; 883  :     //------------------------------------------
; 884  : 
; 885  :     BOOL bInnerWindow = SendMessage(GetDlgItem(hwnd, IDC_INNERWINDOW), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1069					; 0000042dH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN15@SelectTarg
	mov	DWORD PTR tv168[ebp], 1
	jmp	SHORT $LN16@SelectTarg
$LN15@SelectTarg:
	mov	DWORD PTR tv168[ebp], 0
$LN16@SelectTarg:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR _bInnerWindow$[ebp], ecx

; 886  : 
; 887  :     RECT rc;
; 888  :     if(bInnerWindow)

	cmp	DWORD PTR _bInnerWindow$[ebp], 0
	je	SHORT $LN6@SelectTarg

; 889  :         GetClientRect(hwndTarget, &rc);

	lea	edx, DWORD PTR _rc$[ebp]
	push	edx
	mov	eax, DWORD PTR _hwndTarget$[ebp]
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 890  :     else

	jmp	SHORT $LN5@SelectTarg
$LN6@SelectTarg:

; 891  :     {
; 892  :         GetWindowRect(hwndTarget, &rc);

	lea	ecx, DWORD PTR _rc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwndTarget$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8

; 893  : 
; 894  :         rc.bottom -= rc.top;

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rc$[ebp+12], eax

; 895  :         rc.right -= rc.left;

	mov	ecx, DWORD PTR _rc$[ebp+8]
	sub	ecx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _rc$[ebp+8], ecx

; 896  :         rc.left = rc.top = 0;

	mov	DWORD PTR _rc$[ebp+4], 0
	mov	edx, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rc$[ebp], edx
$LN5@SelectTarg:

; 897  :     }
; 898  : 
; 899  :     //------------------------------------------
; 900  : 
; 901  :     rc.bottom -= rc.top;

	mov	eax, DWORD PTR _rc$[ebp+12]
	sub	eax, DWORD PTR _rc$[ebp+4]
	mov	DWORD PTR _rc$[ebp+12], eax

; 902  :     rc.right -= rc.left;

	mov	ecx, DWORD PTR _rc$[ebp+8]
	sub	ecx, DWORD PTR _rc$[ebp]
	mov	DWORD PTR _rc$[ebp+8], ecx

; 903  : 
; 904  :     if(rc.right < 16)

	cmp	DWORD PTR _rc$[ebp+8], 16		; 00000010H
	jge	SHORT $LN4@SelectTarg

; 905  :         rc.right = 16;

	mov	DWORD PTR _rc$[ebp+8], 16		; 00000010H
$LN4@SelectTarg:

; 906  :     if(rc.bottom < 16)

	cmp	DWORD PTR _rc$[ebp+12], 16		; 00000010H
	jge	SHORT $LN3@SelectTarg

; 907  :         rc.bottom = 16;

	mov	DWORD PTR _rc$[ebp+12], 16		; 00000010H
$LN3@SelectTarg:

; 908  : 
; 909  :     BOOL bRegion = SendMessage(GetDlgItem(hwnd, IDC_REGIONCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1062					; 00000426H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN17@SelectTarg
	mov	DWORD PTR tv189[ebp], 1
	jmp	SHORT $LN18@SelectTarg
$LN17@SelectTarg:
	mov	DWORD PTR tv189[ebp], 0
$LN18@SelectTarg:
	mov	eax, DWORD PTR tv189[ebp]
	mov	DWORD PTR _bRegion$[ebp], eax

; 910  :     if(!bRegion || bRefresh)

	cmp	DWORD PTR _bRegion$[ebp], 0
	je	SHORT $LN1@SelectTarg
	movzx	ecx, BYTE PTR _bRefresh$[ebp]
	test	ecx, ecx
	je	$LN2@SelectTarg
$LN1@SelectTarg:

; 911  :     {
; 912  :         SetWindowText(GetDlgItem(hwnd, IDC_POSX),  IntString(rc.left).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$[ebp]
	push	edx
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1063					; 00000427H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 913  :         SetWindowText(GetDlgItem(hwnd, IDC_POSY),  IntString(rc.top).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$[ebp+4]
	push	edx
	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1064					; 00000428H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 914  :         SetWindowText(GetDlgItem(hwnd, IDC_SIZEX), IntString(rc.right).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$[ebp+8]
	push	edx
	lea	eax, DWORD PTR $T4[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1033					; 00000409H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 915  :         SetWindowText(GetDlgItem(hwnd, IDC_SIZEY), IntString(rc.bottom).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$[ebp+12]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1034					; 0000040aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN2@SelectTarg:

; 916  :     }
; 917  : }

	lea	ecx, DWORD PTR _strWindow$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN13@SelectTarg:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?SelectTargetWindow@@YAXPAUHWND__@@_N@Z ENDP		; SelectTargetWindow
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ??0RegionWindowData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0RegionWindowData@@QAE@XZ PROC			; RegionWindowData::RegionWindowData, COMDAT
; _this$ = ecx

; 927  :     inline RegionWindowData()

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 928  :     {
; 929  :         bMovingWindow = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 0

; 930  :         bInnerWindowRegion = false;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+33], 0

; 931  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0RegionWindowData@@QAE@XZ ENDP			; RegionWindowData::RegionWindowData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ??__EregionWindowData@@YAXXZ
text$di	SEGMENT
??__EregionWindowData@@YAXXZ PROC			; `dynamic initializer for 'regionWindowData'', COMDAT

; 934  : RegionWindowData regionWindowData;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?regionWindowData@@3URegionWindowData@@A ; regionWindowData
	call	??0RegionWindowData@@QAE@XZ		; RegionWindowData::RegionWindowData
	pop	ebp
	ret	0
??__EregionWindowData@@YAXXZ ENDP			; `dynamic initializer for 'regionWindowData''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?RegionWindowProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_textExtent$1 = -340					; size = 8
$T2 = -332						; size = 8
$T3 = -324						; size = 8
$T4 = -316						; size = 8
$T5 = -308						; size = 8
_windowSize$6 = -300					; size = 8
_bRight$7 = -292					; size = 4
_oldPen$8 = -288					; size = 4
_hfontOld$9 = -284					; size = 4
_hFont$10 = -280					; size = 4
_bRight$11 = -276					; size = 4
tv224 = -272						; size = 4
tv415 = -268						; size = 4
tv220 = -264						; size = 4
tv165 = -260						; size = 4
tv218 = -256						; size = 4
tv169 = -252						; size = 4
_bLeft$12 = -248					; size = 4
tv228 = -244						; size = 4
tv163 = -240						; size = 4
_posOffset$13 = -236					; size = 8
_bLeft$14 = -228					; size = 4
tv173 = -224						; size = 4
_newBottomRight$15 = -220				; size = 8
tv420 = -212						; size = 4
_bBottom$16 = -208					; size = 4
_pos$17 = -204						; size = 8
_bBottom$18 = -196					; size = 4
_bTop$19 = -192						; size = 4
_bTop$20 = -188						; size = 4
_lpStr$21 = -184					; size = 4
_newPos$22 = -180					; size = 8
_pos$23 = -172						; size = 8
_bTop$24 = -162						; size = 1
_bLeft$25 = -161					; size = 1
_newPos$26 = -160					; size = 4
_hDC$27 = -156						; size = 4
_rc$28 = -152						; size = 4
_rc$29 = -148						; size = 16
_ps$30 = -132						; size = 64
_client$31 = -68					; size = 16
_client$32 = -52					; size = 16
_rc$33 = -36						; size = 16
_clientRect$34 = -20					; size = 16
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?RegionWindowProc@@YGJPAUHWND__@@IIJ@Z PROC		; RegionWindowProc, COMDAT

; 939  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 340				; 00000154H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 940  :     if(message == WM_MOUSEMOVE)

	cmp	DWORD PTR _message$[ebp], 512		; 00000200H
	jne	$LN74@RegionWind

; 941  :     {
; 942  :         RECT client;
; 943  :         GetClientRect(hwnd, &client);

	lea	eax, DWORD PTR _client$31[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetClientRect@8

; 944  : 
; 945  :         POINT pos;
; 946  :         pos.x = (long)(short)LOWORD(lParam);

	movsx	edx, WORD PTR _lParam$[ebp]
	mov	DWORD PTR _pos$17[ebp], edx

; 947  :         pos.y = (long)(short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	DWORD PTR _pos$17[ebp+4], ecx

; 948  : 
; 949  :         if(regionWindowData.bMovingWindow)

	movzx	edx, BYTE PTR ?regionWindowData@@3URegionWindowData@@A+32
	test	edx, edx
	je	$LN73@RegionWind

; 950  :         {
; 951  :             RECT rc;
; 952  :             GetWindowRect(hwnd, &rc);

	lea	eax, DWORD PTR _rc$33[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8

; 953  : 
; 954  :             POINT posOffset = {pos.x-regionWindowData.startPos.x, pos.y-regionWindowData.startPos.y};

	mov	edx, DWORD PTR _pos$17[ebp]
	sub	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+8
	mov	DWORD PTR _posOffset$13[ebp], edx
	mov	eax, DWORD PTR _pos$17[ebp+4]
	sub	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+12
	mov	DWORD PTR _posOffset$13[ebp+4], eax

; 955  :             POINT newPos = {rc.left+posOffset.x, rc.top+posOffset.y};

	mov	ecx, DWORD PTR _rc$33[ebp]
	add	ecx, DWORD PTR _posOffset$13[ebp]
	mov	DWORD PTR _newPos$22[ebp], ecx
	mov	edx, DWORD PTR _rc$33[ebp+4]
	add	edx, DWORD PTR _posOffset$13[ebp+4]
	mov	DWORD PTR _newPos$22[ebp+4], edx

; 956  :             SIZE windowSize = {rc.right-rc.left, rc.bottom-rc.top};

	mov	eax, DWORD PTR _rc$33[ebp+8]
	sub	eax, DWORD PTR _rc$33[ebp]
	mov	DWORD PTR _windowSize$6[ebp], eax
	mov	ecx, DWORD PTR _rc$33[ebp+12]
	sub	ecx, DWORD PTR _rc$33[ebp+4]
	mov	DWORD PTR _windowSize$6[ebp+4], ecx

; 957  : 
; 958  :             if(newPos.x < regionWindowData.captureRect.left)

	mov	edx, DWORD PTR _newPos$22[ebp]
	cmp	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	jge	SHORT $LN72@RegionWind

; 959  :                 newPos.x = regionWindowData.captureRect.left;

	mov	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	mov	DWORD PTR _newPos$22[ebp], eax
$LN72@RegionWind:

; 960  :             if(newPos.y < regionWindowData.captureRect.top)

	mov	ecx, DWORD PTR _newPos$22[ebp+4]
	cmp	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	jge	SHORT $LN71@RegionWind

; 961  :                 newPos.y = regionWindowData.captureRect.top;

	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	mov	DWORD PTR _newPos$22[ebp+4], edx
$LN71@RegionWind:

; 962  : 
; 963  :             POINT newBottomRight = {rc.right+posOffset.x, rc.bottom+posOffset.y};

	mov	eax, DWORD PTR _rc$33[ebp+8]
	add	eax, DWORD PTR _posOffset$13[ebp]
	mov	DWORD PTR _newBottomRight$15[ebp], eax
	mov	ecx, DWORD PTR _rc$33[ebp+12]
	add	ecx, DWORD PTR _posOffset$13[ebp+4]
	mov	DWORD PTR _newBottomRight$15[ebp+4], ecx

; 964  : 
; 965  :             if(newBottomRight.x > regionWindowData.captureRect.right)

	mov	edx, DWORD PTR _newBottomRight$15[ebp]
	cmp	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+24
	jle	SHORT $LN70@RegionWind

; 966  :                 newPos.x -= (newBottomRight.x-regionWindowData.captureRect.right);

	mov	eax, DWORD PTR _newBottomRight$15[ebp]
	sub	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+24
	mov	ecx, DWORD PTR _newPos$22[ebp]
	sub	ecx, eax
	mov	DWORD PTR _newPos$22[ebp], ecx
$LN70@RegionWind:

; 967  :             if(newBottomRight.y > regionWindowData.captureRect.bottom)

	mov	edx, DWORD PTR _newBottomRight$15[ebp+4]
	cmp	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+28
	jle	SHORT $LN69@RegionWind

; 968  :                 newPos.y -= (newBottomRight.y-regionWindowData.captureRect.bottom);

	mov	eax, DWORD PTR _newBottomRight$15[ebp+4]
	sub	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+28
	mov	ecx, DWORD PTR _newPos$22[ebp+4]
	sub	ecx, eax
	mov	DWORD PTR _newPos$22[ebp+4], ecx
$LN69@RegionWind:

; 969  : 
; 970  :             SetWindowPos(hwnd, NULL, newPos.x, newPos.y, 0, 0, SWP_NOSIZE|SWP_NOZORDER);

	push	5
	push	0
	push	0
	mov	edx, DWORD PTR _newPos$22[ebp+4]
	push	edx
	mov	eax, DWORD PTR _newPos$22[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowPos@28

; 971  :         }
; 972  :         else

	jmp	$LN68@RegionWind
$LN73@RegionWind:

; 973  :         {
; 974  :             BOOL bLeft   = (pos.x < 6);

	cmp	DWORD PTR _pos$17[ebp], 6
	jge	SHORT $LN77@RegionWind
	mov	DWORD PTR tv163[ebp], 1
	jmp	SHORT $LN78@RegionWind
$LN77@RegionWind:
	mov	DWORD PTR tv163[ebp], 0
$LN78@RegionWind:
	mov	edx, DWORD PTR tv163[ebp]
	mov	DWORD PTR _bLeft$12[ebp], edx

; 975  :             BOOL bTop    = (pos.y < 6);

	cmp	DWORD PTR _pos$17[ebp+4], 6
	jge	SHORT $LN79@RegionWind
	mov	DWORD PTR tv165[ebp], 1
	jmp	SHORT $LN80@RegionWind
$LN79@RegionWind:
	mov	DWORD PTR tv165[ebp], 0
$LN80@RegionWind:
	mov	eax, DWORD PTR tv165[ebp]
	mov	DWORD PTR _bTop$19[ebp], eax

; 976  :             BOOL bRight  = (!bLeft && (pos.x > client.right-6));

	cmp	DWORD PTR _bLeft$12[ebp], 0
	jne	SHORT $LN81@RegionWind
	mov	ecx, DWORD PTR _client$31[ebp+8]
	sub	ecx, 6
	cmp	DWORD PTR _pos$17[ebp], ecx
	jle	SHORT $LN81@RegionWind
	mov	DWORD PTR tv169[ebp], 1
	jmp	SHORT $LN82@RegionWind
$LN81@RegionWind:
	mov	DWORD PTR tv169[ebp], 0
$LN82@RegionWind:
	mov	edx, DWORD PTR tv169[ebp]
	mov	DWORD PTR _bRight$7[ebp], edx

; 977  :             BOOL bBottom = (!bTop  && (pos.y > client.bottom-6));

	cmp	DWORD PTR _bTop$19[ebp], 0
	jne	SHORT $LN83@RegionWind
	mov	eax, DWORD PTR _client$31[ebp+12]
	sub	eax, 6
	cmp	DWORD PTR _pos$17[ebp+4], eax
	jle	SHORT $LN83@RegionWind
	mov	DWORD PTR tv173[ebp], 1
	jmp	SHORT $LN84@RegionWind
$LN83@RegionWind:
	mov	DWORD PTR tv173[ebp], 0
$LN84@RegionWind:
	mov	ecx, DWORD PTR tv173[ebp]
	mov	DWORD PTR _bBottom$16[ebp], ecx

; 978  : 
; 979  :             if(bLeft)

	cmp	DWORD PTR _bLeft$12[ebp], 0
	je	SHORT $LN67@RegionWind

; 980  :             {
; 981  :                 if(bTop)

	cmp	DWORD PTR _bTop$19[ebp], 0
	je	SHORT $LN66@RegionWind

; 982  :                     SetCursor(LoadCursor(NULL, IDC_SIZENWSE));

	push	32642					; 00007f82H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4
	jmp	SHORT $LN65@RegionWind
$LN66@RegionWind:

; 983  :                 else if(bBottom)

	cmp	DWORD PTR _bBottom$16[ebp], 0
	je	SHORT $LN64@RegionWind

; 984  :                     SetCursor(LoadCursor(NULL, IDC_SIZENESW));

	push	32643					; 00007f83H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4

; 985  :                 else

	jmp	SHORT $LN65@RegionWind
$LN64@RegionWind:

; 986  :                     SetCursor(LoadCursor(NULL, IDC_SIZEWE));

	push	32644					; 00007f84H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4
$LN65@RegionWind:
	jmp	$LN68@RegionWind
$LN67@RegionWind:

; 987  :             }
; 988  :             else if(bRight)

	cmp	DWORD PTR _bRight$7[ebp], 0
	je	SHORT $LN61@RegionWind

; 989  :             {
; 990  :                 if(bTop)

	cmp	DWORD PTR _bTop$19[ebp], 0
	je	SHORT $LN60@RegionWind

; 991  :                     SetCursor(LoadCursor(NULL, IDC_SIZENESW));

	push	32643					; 00007f83H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4
	jmp	SHORT $LN59@RegionWind
$LN60@RegionWind:

; 992  :                 else if(bBottom)

	cmp	DWORD PTR _bBottom$16[ebp], 0
	je	SHORT $LN58@RegionWind

; 993  :                     SetCursor(LoadCursor(NULL, IDC_SIZENWSE));

	push	32642					; 00007f82H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4

; 994  :                 else

	jmp	SHORT $LN59@RegionWind
$LN58@RegionWind:

; 995  :                     SetCursor(LoadCursor(NULL, IDC_SIZEWE));

	push	32644					; 00007f84H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4
$LN59@RegionWind:
	jmp	SHORT $LN68@RegionWind
$LN61@RegionWind:

; 996  :             }
; 997  :             else if(bTop || bBottom)

	cmp	DWORD PTR _bTop$19[ebp], 0
	jne	SHORT $LN54@RegionWind
	cmp	DWORD PTR _bBottom$16[ebp], 0
	je	SHORT $LN68@RegionWind
$LN54@RegionWind:

; 998  :                 SetCursor(LoadCursor(NULL, IDC_SIZENS));

	push	32645					; 00007f85H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	push	eax
	call	DWORD PTR __imp__SetCursor@4
$LN68@RegionWind:

; 999  :         }
; 1000 : 
; 1001 :         return 0;

	xor	eax, eax
	jmp	$LN75@RegionWind
	jmp	$LN53@RegionWind
$LN74@RegionWind:

; 1002 :     }
; 1003 :     else if(message == WM_LBUTTONDOWN)

	cmp	DWORD PTR _message$[ebp], 513		; 00000201H
	jne	$LN52@RegionWind

; 1004 :     {
; 1005 :         RECT client;
; 1006 :         GetClientRect(hwnd, &client);

	lea	edx, DWORD PTR _client$32[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 1007 : 
; 1008 :         POINT pos;
; 1009 :         pos.x = (long)LOWORD(lParam);

	movzx	ecx, WORD PTR _lParam$[ebp]
	mov	DWORD PTR _pos$23[ebp], ecx

; 1010 :         pos.y = (long)HIWORD(lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	sar	edx, 16					; 00000010H
	movzx	eax, dx
	mov	DWORD PTR _pos$23[ebp+4], eax

; 1011 : 
; 1012 :         BOOL bLeft   = (pos.x < 6);

	cmp	DWORD PTR _pos$23[ebp], 6
	jge	SHORT $LN85@RegionWind
	mov	DWORD PTR tv218[ebp], 1
	jmp	SHORT $LN86@RegionWind
$LN85@RegionWind:
	mov	DWORD PTR tv218[ebp], 0
$LN86@RegionWind:
	mov	ecx, DWORD PTR tv218[ebp]
	mov	DWORD PTR _bLeft$14[ebp], ecx

; 1013 :         BOOL bTop    = (pos.y < 6);

	cmp	DWORD PTR _pos$23[ebp+4], 6
	jge	SHORT $LN87@RegionWind
	mov	DWORD PTR tv220[ebp], 1
	jmp	SHORT $LN88@RegionWind
$LN87@RegionWind:
	mov	DWORD PTR tv220[ebp], 0
$LN88@RegionWind:
	mov	edx, DWORD PTR tv220[ebp]
	mov	DWORD PTR _bTop$20[ebp], edx

; 1014 :         BOOL bRight  = (!bLeft && (pos.x > client.right-6));

	cmp	DWORD PTR _bLeft$14[ebp], 0
	jne	SHORT $LN89@RegionWind
	mov	eax, DWORD PTR _client$32[ebp+8]
	sub	eax, 6
	cmp	DWORD PTR _pos$23[ebp], eax
	jle	SHORT $LN89@RegionWind
	mov	DWORD PTR tv224[ebp], 1
	jmp	SHORT $LN90@RegionWind
$LN89@RegionWind:
	mov	DWORD PTR tv224[ebp], 0
$LN90@RegionWind:
	mov	ecx, DWORD PTR tv224[ebp]
	mov	DWORD PTR _bRight$11[ebp], ecx

; 1015 :         BOOL bBottom = (!bTop  && (pos.y > client.bottom-6));

	cmp	DWORD PTR _bTop$20[ebp], 0
	jne	SHORT $LN91@RegionWind
	mov	edx, DWORD PTR _client$32[ebp+12]
	sub	edx, 6
	cmp	DWORD PTR _pos$23[ebp+4], edx
	jle	SHORT $LN91@RegionWind
	mov	DWORD PTR tv228[ebp], 1
	jmp	SHORT $LN92@RegionWind
$LN91@RegionWind:
	mov	DWORD PTR tv228[ebp], 0
$LN92@RegionWind:
	mov	eax, DWORD PTR tv228[ebp]
	mov	DWORD PTR _bBottom$18[ebp], eax

; 1016 : 
; 1017 :         ClientToScreen(hwnd, &pos);

	lea	ecx, DWORD PTR _pos$23[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__ClientToScreen@8

; 1018 : 
; 1019 :         POINTS newPos;
; 1020 :         newPos.x = (SHORT)pos.x;

	mov	ax, WORD PTR _pos$23[ebp]
	mov	WORD PTR _newPos$26[ebp], ax

; 1021 :         newPos.y = (SHORT)pos.y;

	mov	cx, WORD PTR _pos$23[ebp+4]
	mov	WORD PTR _newPos$26[ebp+2], cx

; 1022 : 
; 1023 :         SendMessage(hwnd, WM_MOUSEMOVE, 0, lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	push	0
	push	512					; 00000200H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1024 : 
; 1025 :         if(bLeft)

	cmp	DWORD PTR _bLeft$14[ebp], 0
	je	SHORT $LN51@RegionWind

; 1026 :         {
; 1027 :             if(bTop)

	cmp	DWORD PTR _bTop$20[ebp], 0
	je	SHORT $LN50@RegionWind

; 1028 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTTOPLEFT, (LPARAM)&newPos);

	lea	ecx, DWORD PTR _newPos$26[ebp]
	push	ecx
	push	13					; 0000000dH
	push	161					; 000000a1H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN49@RegionWind
$LN50@RegionWind:

; 1029 :             else if(bBottom)

	cmp	DWORD PTR _bBottom$18[ebp], 0
	je	SHORT $LN48@RegionWind

; 1030 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTBOTTOMLEFT, (LPARAM)&newPos);

	lea	eax, DWORD PTR _newPos$26[ebp]
	push	eax
	push	16					; 00000010H
	push	161					; 000000a1H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1031 :             else

	jmp	SHORT $LN49@RegionWind
$LN48@RegionWind:

; 1032 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTLEFT, (LPARAM)&newPos);

	lea	edx, DWORD PTR _newPos$26[ebp]
	push	edx
	push	10					; 0000000aH
	push	161					; 000000a1H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN49@RegionWind:
	jmp	$LN46@RegionWind
$LN51@RegionWind:

; 1033 :         }
; 1034 :         else if(bRight)

	cmp	DWORD PTR _bRight$11[ebp], 0
	je	SHORT $LN45@RegionWind

; 1035 :         {
; 1036 :             if(bTop)

	cmp	DWORD PTR _bTop$20[ebp], 0
	je	SHORT $LN44@RegionWind

; 1037 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTTOPRIGHT, (LPARAM)&newPos);

	lea	ecx, DWORD PTR _newPos$26[ebp]
	push	ecx
	push	14					; 0000000eH
	push	161					; 000000a1H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN43@RegionWind
$LN44@RegionWind:

; 1038 :             else if(bBottom)

	cmp	DWORD PTR _bBottom$18[ebp], 0
	je	SHORT $LN42@RegionWind

; 1039 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTBOTTOMRIGHT, (LPARAM)&newPos);

	lea	eax, DWORD PTR _newPos$26[ebp]
	push	eax
	push	17					; 00000011H
	push	161					; 000000a1H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1040 :             else

	jmp	SHORT $LN43@RegionWind
$LN42@RegionWind:

; 1041 :                 SendMessage(hwnd, WM_NCLBUTTONDOWN, HTRIGHT, (LPARAM)&newPos);

	lea	edx, DWORD PTR _newPos$26[ebp]
	push	edx
	push	11					; 0000000bH
	push	161					; 000000a1H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN43@RegionWind:
	jmp	$LN46@RegionWind
$LN45@RegionWind:

; 1042 :         }
; 1043 :         else if(bTop)

	cmp	DWORD PTR _bTop$20[ebp], 0
	je	SHORT $LN39@RegionWind

; 1044 :             SendMessage(hwnd, WM_NCLBUTTONDOWN, HTTOP, (LPARAM)&newPos);

	lea	ecx, DWORD PTR _newPos$26[ebp]
	push	ecx
	push	12					; 0000000cH
	push	161					; 000000a1H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	jmp	SHORT $LN46@RegionWind
$LN39@RegionWind:

; 1045 :         else if(bBottom)

	cmp	DWORD PTR _bBottom$18[ebp], 0
	je	SHORT $LN37@RegionWind

; 1046 :             SendMessage(hwnd, WM_NCLBUTTONDOWN, HTBOTTOM, (LPARAM)&newPos);

	lea	eax, DWORD PTR _newPos$26[ebp]
	push	eax
	push	15					; 0000000fH
	push	161					; 000000a1H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1047 :         else

	jmp	SHORT $LN46@RegionWind
$LN37@RegionWind:

; 1048 :         {
; 1049 :             regionWindowData.bMovingWindow = true; //can't use HTCAPTION -- if holding down long enough, other windows minimize

	mov	BYTE PTR ?regionWindowData@@3URegionWindowData@@A+32, 1

; 1050 : 
; 1051 :             pos.x = (long)(short)LOWORD(lParam);

	movsx	edx, WORD PTR _lParam$[ebp]
	mov	DWORD PTR _pos$23[ebp], edx

; 1052 :             pos.y = (long)(short)HIWORD(lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	sar	eax, 16					; 00000010H
	movsx	ecx, ax
	mov	DWORD PTR _pos$23[ebp+4], ecx

; 1053 :             mcpy(&regionWindowData.startPos, &pos, sizeof(pos));

	mov	edx, DWORD PTR _pos$23[ebp]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+8, edx
	mov	eax, DWORD PTR _pos$23[ebp+4]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+12, eax

; 1054 :             SetCapture(hwnd);

	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetCapture@4
$LN46@RegionWind:

; 1055 :         }
; 1056 : 
; 1057 :         return 0;

	xor	eax, eax
	jmp	$LN75@RegionWind
	jmp	$LN53@RegionWind
$LN52@RegionWind:

; 1058 :     }
; 1059 :     else if(message == WM_LBUTTONUP)

	cmp	DWORD PTR _message$[ebp], 514		; 00000202H
	jne	SHORT $LN34@RegionWind

; 1060 :     {
; 1061 :         if(regionWindowData.bMovingWindow)

	movzx	edx, BYTE PTR ?regionWindowData@@3URegionWindowData@@A+32
	test	edx, edx
	je	SHORT $LN33@RegionWind

; 1062 :         {
; 1063 :             regionWindowData.bMovingWindow = false;

	mov	BYTE PTR ?regionWindowData@@3URegionWindowData@@A+32, 0

; 1064 :             ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0
$LN33@RegionWind:

; 1065 :         }
; 1066 :     }

	jmp	$LN53@RegionWind
$LN34@RegionWind:

; 1067 :     else if(message == WM_PAINT)

	cmp	DWORD PTR _message$[ebp], 15		; 0000000fH
	jne	$LN31@RegionWind

; 1068 :     {
; 1069 :         PAINTSTRUCT ps;
; 1070 :         HDC hDC = BeginPaint(hwnd, &ps);

	lea	eax, DWORD PTR _ps$30[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__BeginPaint@8
	mov	DWORD PTR _hDC$27[ebp], eax

; 1071 :         if(hDC)

	cmp	DWORD PTR _hDC$27[ebp], 0
	je	$LN30@RegionWind

; 1072 :         {
; 1073 :             RECT clientRect;
; 1074 :             GetClientRect(hwnd, &clientRect);

	lea	edx, DWORD PTR _clientRect$34[ebp]
	push	edx
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetClientRect@8

; 1075 : 
; 1076 :             //-----------------------------------------
; 1077 : 
; 1078 :             HPEN oldPen = (HPEN)SelectObject(hDC, GetStockObject(BLACK_PEN));

	push	7
	call	DWORD PTR __imp__GetStockObject@4
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__SelectObject@8
	mov	DWORD PTR _oldPen$8[ebp], eax

; 1079 : 
; 1080 :             MoveToEx(hDC, 0, 0, NULL);

	push	0
	push	0
	push	0
	mov	edx, DWORD PTR _hDC$27[ebp]
	push	edx
	call	DWORD PTR __imp__MoveToEx@16

; 1081 :             LineTo(hDC, clientRect.right-1, 0);

	push	0
	mov	eax, DWORD PTR _clientRect$34[ebp+8]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1082 :             LineTo(hDC, clientRect.right-1, clientRect.bottom-1);

	mov	edx, DWORD PTR _clientRect$34[ebp+12]
	sub	edx, 1
	push	edx
	mov	eax, DWORD PTR _clientRect$34[ebp+8]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1083 :             LineTo(hDC, 0, clientRect.bottom-1);

	mov	edx, DWORD PTR _clientRect$34[ebp+12]
	sub	edx, 1
	push	edx
	push	0
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__LineTo@12

; 1084 :             LineTo(hDC, 0, 0);

	push	0
	push	0
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1085 : 
; 1086 :             MoveToEx(hDC, 5, 5, NULL);

	push	0
	push	5
	push	5
	mov	edx, DWORD PTR _hDC$27[ebp]
	push	edx
	call	DWORD PTR __imp__MoveToEx@16

; 1087 :             LineTo(hDC, clientRect.right-6, 5);

	push	5
	mov	eax, DWORD PTR _clientRect$34[ebp+8]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1088 :             LineTo(hDC, clientRect.right-6, clientRect.bottom-6);

	mov	edx, DWORD PTR _clientRect$34[ebp+12]
	sub	edx, 6
	push	edx
	mov	eax, DWORD PTR _clientRect$34[ebp+8]
	sub	eax, 6
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1089 :             LineTo(hDC, 5, clientRect.bottom-6);

	mov	edx, DWORD PTR _clientRect$34[ebp+12]
	sub	edx, 6
	push	edx
	push	5
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__LineTo@12

; 1090 :             LineTo(hDC, 5, 5);

	push	5
	push	5
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__LineTo@12

; 1091 : 
; 1092 :             SelectObject(hDC, oldPen);

	mov	edx, DWORD PTR _oldPen$8[ebp]
	push	edx
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8

; 1093 : 
; 1094 :             //-----------------------------------------
; 1095 : 
; 1096 :             CTSTR lpStr = Str("Sources.SoftwareCaptureSource.RegionWindowText");

	push	OFFSET $SG4294889989
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _lpStr$21[ebp], eax

; 1097 : 
; 1098 :             HFONT hFont = (HFONT)GetStockObject(DEFAULT_GUI_FONT);

	push	17					; 00000011H
	call	DWORD PTR __imp__GetStockObject@4
	mov	DWORD PTR _hFont$10[ebp], eax

; 1099 :             HFONT hfontOld = (HFONT)SelectObject(hDC, hFont);

	mov	edx, DWORD PTR _hFont$10[ebp]
	push	edx
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__SelectObject@8
	mov	DWORD PTR _hfontOld$9[ebp], eax

; 1100 :             
; 1101 :             SIZE textExtent;
; 1102 :             GetTextExtentPoint32(hDC, lpStr, slen(lpStr), &textExtent);

	lea	ecx, DWORD PTR _textExtent$1[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpStr$21[ebp]
	push	edx
	call	DWORD PTR __imp_?slen@@YGIPB_W@Z
	push	eax
	mov	eax, DWORD PTR _lpStr$21[ebp]
	push	eax
	mov	ecx, DWORD PTR _hDC$27[ebp]
	push	ecx
	call	DWORD PTR __imp__GetTextExtentPoint32W@16

; 1103 :             
; 1104 :             SetBkMode(hDC, TRANSPARENT);

	push	1
	mov	edx, DWORD PTR _hDC$27[ebp]
	push	edx
	call	DWORD PTR __imp__SetBkMode@8

; 1105 :             SetTextAlign(hDC, TA_CENTER);

	push	6
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__SetTextAlign@8

; 1106 :             TextOut(hDC, clientRect.right/2, (clientRect.bottom - textExtent.cy)/2, lpStr, slen(lpStr));

	mov	ecx, DWORD PTR _lpStr$21[ebp]
	push	ecx
	call	DWORD PTR __imp_?slen@@YGIPB_W@Z
	push	eax
	mov	edx, DWORD PTR _lpStr$21[ebp]
	push	edx
	mov	eax, DWORD PTR _clientRect$34[ebp+12]
	sub	eax, DWORD PTR _textExtent$1[ebp+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _clientRect$34[ebp+8]
	cdq
	sub	eax, edx
	sar	eax, 1
	push	eax
	mov	eax, DWORD PTR _hDC$27[ebp]
	push	eax
	call	DWORD PTR __imp__TextOutW@20

; 1107 : 
; 1108 :             //-----------------------------------------
; 1109 : 
; 1110 :             SelectObject(hDC, hfontOld);

	mov	ecx, DWORD PTR _hfontOld$9[ebp]
	push	ecx
	mov	edx, DWORD PTR _hDC$27[ebp]
	push	edx
	call	DWORD PTR __imp__SelectObject@8

; 1111 : 
; 1112 :             EndPaint(hwnd, &ps);

	lea	eax, DWORD PTR _ps$30[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndPaint@8
$LN30@RegionWind:

; 1113 :         }
; 1114 :     }

	jmp	$LN53@RegionWind
$LN31@RegionWind:

; 1115 :     else if(message == WM_KEYDOWN)

	cmp	DWORD PTR _message$[ebp], 256		; 00000100H
	jne	SHORT $LN28@RegionWind

; 1116 :     {
; 1117 :         if(wParam == VK_ESCAPE || wParam == VK_RETURN || wParam == 'Q')

	cmp	DWORD PTR _wParam$[ebp], 27		; 0000001bH
	je	SHORT $LN26@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 13		; 0000000dH
	je	SHORT $LN26@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 81		; 00000051H
	jne	SHORT $LN27@RegionWind
$LN26@RegionWind:

; 1118 :             DestroyWindow(hwnd);

	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__DestroyWindow@4
$LN27@RegionWind:

; 1119 :     }

	jmp	$LN53@RegionWind
$LN28@RegionWind:

; 1120 :     else if(message == WM_SIZING)

	cmp	DWORD PTR _message$[ebp], 532		; 00000214H
	jne	$LN24@RegionWind

; 1121 :     {
; 1122 :         RECT &rc = *(RECT*)lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _rc$28[ebp], eax

; 1123 : 
; 1124 :         bool bTop  = wParam == WMSZ_TOPLEFT || wParam == WMSZ_TOPRIGHT || wParam == WMSZ_TOP;

	cmp	DWORD PTR _wParam$[ebp], 4
	je	SHORT $LN93@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 5
	je	SHORT $LN93@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 3
	je	SHORT $LN93@RegionWind
	mov	DWORD PTR tv415[ebp], 0
	jmp	SHORT $LN94@RegionWind
$LN93@RegionWind:
	mov	DWORD PTR tv415[ebp], 1
$LN94@RegionWind:
	mov	cl, BYTE PTR tv415[ebp]
	mov	BYTE PTR _bTop$24[ebp], cl

; 1125 :         bool bLeft = wParam == WMSZ_TOPLEFT || wParam == WMSZ_LEFT     || wParam == WMSZ_BOTTOMLEFT;

	cmp	DWORD PTR _wParam$[ebp], 4
	je	SHORT $LN95@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 1
	je	SHORT $LN95@RegionWind
	cmp	DWORD PTR _wParam$[ebp], 7
	je	SHORT $LN95@RegionWind
	mov	DWORD PTR tv420[ebp], 0
	jmp	SHORT $LN96@RegionWind
$LN95@RegionWind:
	mov	DWORD PTR tv420[ebp], 1
$LN96@RegionWind:
	mov	dl, BYTE PTR tv420[ebp]
	mov	BYTE PTR _bLeft$25[ebp], dl

; 1126 : 
; 1127 :         if(bLeft)

	movzx	eax, BYTE PTR _bLeft$25[ebp]
	test	eax, eax
	je	SHORT $LN23@RegionWind

; 1128 :         {
; 1129 :             if(rc.right-rc.left < 16)

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN22@RegionWind

; 1130 :                 rc.left = rc.right-16;

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR [ecx+8]
	sub	edx, 16					; 00000010H
	mov	eax, DWORD PTR _rc$28[ebp]
	mov	DWORD PTR [eax], edx
$LN22@RegionWind:

; 1131 :         }
; 1132 :         else

	jmp	SHORT $LN21@RegionWind
$LN23@RegionWind:

; 1133 :         {
; 1134 :             if(rc.right-rc.left < 16)

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [edx]
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN21@RegionWind

; 1135 :                 rc.right = rc.left+16;

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR _rc$28[ebp]
	mov	DWORD PTR [eax+8], edx
$LN21@RegionWind:

; 1136 :         }
; 1137 : 
; 1138 :         if(bTop)

	movzx	ecx, BYTE PTR _bTop$24[ebp]
	test	ecx, ecx
	je	SHORT $LN19@RegionWind

; 1139 :         {
; 1140 :             if(rc.bottom-rc.top < 16)

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR _rc$28[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN18@RegionWind

; 1141 :                 rc.top = rc.bottom-16;

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [edx+12]
	sub	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN18@RegionWind:

; 1142 :         }
; 1143 :         else

	jmp	SHORT $LN17@RegionWind
$LN19@RegionWind:

; 1144 :         {
; 1145 :             if(rc.bottom-rc.top < 16)

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR _rc$28[ebp]
	mov	ecx, DWORD PTR [edx+12]
	sub	ecx, DWORD PTR [eax+4]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN17@RegionWind

; 1146 :                 rc.bottom = rc.top+16;

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	DWORD PTR [ecx+12], eax
$LN17@RegionWind:

; 1147 :         }
; 1148 : 
; 1149 :         if(regionWindowData.hwndCaptureWindow)

	cmp	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, 0
	je	SHORT $LN15@RegionWind

; 1150 :         {
; 1151 :             if(rc.left < regionWindowData.captureRect.left)

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	jge	SHORT $LN14@RegionWind

; 1152 :                 rc.left = regionWindowData.captureRect.left;

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	mov	DWORD PTR [ecx], edx
$LN14@RegionWind:

; 1153 :             if(rc.top < regionWindowData.captureRect.top)

	mov	eax, DWORD PTR _rc$28[ebp]
	mov	ecx, DWORD PTR [eax+4]
	cmp	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	jge	SHORT $LN13@RegionWind

; 1154 :                 rc.top = regionWindowData.captureRect.top;

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	mov	DWORD PTR [edx+4], eax
$LN13@RegionWind:

; 1155 : 
; 1156 :             if(rc.right > regionWindowData.captureRect.right)

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR [ecx+8]
	cmp	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+24
	jle	SHORT $LN12@RegionWind

; 1157 :                 rc.right = regionWindowData.captureRect.right;

	mov	eax, DWORD PTR _rc$28[ebp]
	mov	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+24
	mov	DWORD PTR [eax+8], ecx
$LN12@RegionWind:

; 1158 :             if(rc.bottom > regionWindowData.captureRect.bottom)

	mov	edx, DWORD PTR _rc$28[ebp]
	mov	eax, DWORD PTR [edx+12]
	cmp	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+28
	jle	SHORT $LN15@RegionWind

; 1159 :                 rc.bottom = regionWindowData.captureRect.bottom;

	mov	ecx, DWORD PTR _rc$28[ebp]
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+28
	mov	DWORD PTR [ecx+12], edx
$LN15@RegionWind:

; 1160 :         }
; 1161 : 
; 1162 :         return TRUE;

	mov	eax, 1
	jmp	$LN75@RegionWind
	jmp	$LN53@RegionWind
$LN24@RegionWind:

; 1163 :     }
; 1164 :     else if(message == WM_SIZE || message == WM_MOVE)

	cmp	DWORD PTR _message$[ebp], 5
	je	SHORT $LN8@RegionWind
	cmp	DWORD PTR _message$[ebp], 3
	jne	$LN9@RegionWind
$LN8@RegionWind:

; 1165 :     {
; 1166 :         RECT rc;
; 1167 :         GetWindowRect(hwnd, &rc);

	lea	eax, DWORD PTR _rc$29[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowRect@8

; 1168 : 
; 1169 :         if(rc.right-rc.left < 16)

	mov	edx, DWORD PTR _rc$29[ebp+8]
	sub	edx, DWORD PTR _rc$29[ebp]
	cmp	edx, 16					; 00000010H
	jge	SHORT $LN7@RegionWind

; 1170 :             rc.right = rc.left+16;

	mov	eax, DWORD PTR _rc$29[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _rc$29[ebp+8], eax
$LN7@RegionWind:

; 1171 :         if(rc.bottom-rc.top < 16)

	mov	ecx, DWORD PTR _rc$29[ebp+12]
	sub	ecx, DWORD PTR _rc$29[ebp+4]
	cmp	ecx, 16					; 00000010H
	jge	SHORT $LN6@RegionWind

; 1172 :             rc.bottom = rc.top+16;

	mov	edx, DWORD PTR _rc$29[ebp+4]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _rc$29[ebp+12], edx
$LN6@RegionWind:

; 1173 : 
; 1174 :         SetWindowText(GetDlgItem(regionWindowData.hwndConfigDialog, IDC_SIZEX), IntString(rc.right-rc.left).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _rc$29[ebp+8]
	sub	eax, DWORD PTR _rc$29[ebp]
	push	eax
	lea	ecx, DWORD PTR $T4[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1033					; 00000409H
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1175 :         SetWindowText(GetDlgItem(regionWindowData.hwndConfigDialog, IDC_SIZEY), IntString(rc.bottom-rc.top).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _rc$29[ebp+12]
	sub	eax, DWORD PTR _rc$29[ebp+4]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1034					; 0000040aH
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1176 : 
; 1177 :         if(regionWindowData.hwndCaptureWindow)

	cmp	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, 0
	je	SHORT $LN5@RegionWind

; 1178 :         {
; 1179 :             rc.left -= regionWindowData.captureRect.left;

	mov	eax, DWORD PTR _rc$29[ebp]
	sub	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	mov	DWORD PTR _rc$29[ebp], eax

; 1180 :             rc.top  -= regionWindowData.captureRect.top;

	mov	ecx, DWORD PTR _rc$29[ebp+4]
	sub	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	mov	DWORD PTR _rc$29[ebp+4], ecx
$LN5@RegionWind:

; 1181 :         }
; 1182 : 
; 1183 :         SetWindowText(GetDlgItem(regionWindowData.hwndConfigDialog, IDC_POSX),  IntString(rc.left).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$29[ebp]
	push	edx
	lea	eax, DWORD PTR $T5[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1063					; 00000427H
	mov	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1184 :         SetWindowText(GetDlgItem(regionWindowData.hwndConfigDialog, IDC_POSY),  IntString(rc.top).Array());

	push	10					; 0000000aH
	mov	edx, DWORD PTR _rc$29[ebp+4]
	push	edx
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1064					; 00000428H
	mov	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1185 : 
; 1186 :         if(message == WM_SIZE)

	cmp	DWORD PTR _message$[ebp], 5
	jne	SHORT $LN4@RegionWind

; 1187 :             RedrawWindow(hwnd, NULL, NULL, RDW_INTERNALPAINT|RDW_ERASE|RDW_INVALIDATE);

	push	7
	push	0
	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__RedrawWindow@16
$LN4@RegionWind:

; 1188 :     }

	jmp	SHORT $LN53@RegionWind
$LN9@RegionWind:

; 1189 :     else if(message == WM_ACTIVATE)

	cmp	DWORD PTR _message$[ebp], 6
	jne	SHORT $LN53@RegionWind

; 1190 :     {
; 1191 :         if(wParam == WA_INACTIVE)

	cmp	DWORD PTR _wParam$[ebp], 0
	jne	SHORT $LN53@RegionWind

; 1192 :             DestroyWindow(hwnd);

	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__DestroyWindow@4
$LN53@RegionWind:

; 1193 :     }
; 1194 : 
; 1195 :     return DefWindowProc(hwnd, message, wParam, lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _wParam$[ebp]
	push	edx
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__DefWindowProcW@16
$LN75@RegionWind:

; 1196 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?RegionWindowProc@@YGJPAUHWND__@@IIJ@Z ENDP		; RegionWindowProc
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
$T1 = -768						; size = 8
$T2 = -760						; size = 8
$T3 = -752						; size = 8
$T4 = -744						; size = 8
$T5 = -736						; size = 8
$T6 = -728						; size = 8
$T7 = -720						; size = 8
$T8 = -712						; size = 8
$T9 = -704						; size = 8
$T10 = -696						; size = 8
$T11 = -688						; size = 8
$T12 = -680						; size = 8
$T13 = -672						; size = 8
$T14 = -664						; size = 8
$T15 = -656						; size = 8
$T16 = -648						; size = 8
$T17 = -640						; size = 8
$T18 = -632						; size = 8
$T19 = -624						; size = 8
$T20 = -616						; size = 8
_lpWindowClass$21 = -608				; size = 4
_strWindow$22 = -604					; size = 8
_configData$23 = -596					; size = 4
_bInnerWindow$24 = -592					; size = 4
_x$25 = -588						; size = 4
_bComposition$26 = -584					; size = 4
_configData$27 = -580					; size = 4
_info$28 = -576						; size = 4
_bCaptureMouse$29 = -572				; size = 4
_monitor$30 = -568					; size = 4
_color$31 = -564					; size = 4
_monitor$32 = -560					; size = 4
_data$33 = -556						; size = 4
_gamma$34 = -552					; size = 4
_bUsePointFiltering$35 = -548				; size = 4
_configData$36 = -544					; size = 4
_bRegion$37 = -540					; size = 4
_gammaVal$38 = -536					; size = 4
_hCursor$39 = -532					; size = 4
_blend$40 = -528					; size = 4
_configData$41 = -524					; size = 4
_keyColor$42 = -520					; size = 4
_hwndUseColorKey$43 = -516				; size = 4
_posY$44 = -512						; size = 4
_y$45 = -508						; size = 4
_posX$46 = -504						; size = 4
_id$47 = -500						; size = 4
_bUsePointFiltering$48 = -496				; size = 4
_bCompatibilityMode$49 = -492				; size = 4
_sizeY$50 = -488					; size = 4
_bComposition$51 = -484					; size = 4
_bRegion$52 = -480					; size = 4
_gamma$53 = -476					; size = 4
_configData$54 = -472					; size = 4
_opacity$55 = -468					; size = 4
_configData$56 = -464					; size = 4
_keyBlend$57 = -460					; size = 4
_opacity$58 = -456					; size = 4
_keySimilarity$59 = -452				; size = 4
_similarity$60 = -448					; size = 4
_keyColor$61 = -444					; size = 4
_bUseColorKey$62 = -440					; size = 4
_sizeX$63 = -436					; size = 4
_strWindow$64 = -432					; size = 8
_strWarnings$65 = -424					; size = 8
tv306 = -416						; size = 4
_posY$66 = -412						; size = 4
tv272 = -408						; size = 4
_info$67 = -404						; size = 4
_info$68 = -400						; size = 4
tv350 = -396						; size = 4
tv1888 = -392						; size = 4
tv1013 = -388						; size = 4
_bCaptureLayered$69 = -384				; size = 4
tv566 = -380						; size = 4
_bInnerWindow$70 = -376					; size = 4
tv402 = -372						; size = 4
tv1822 = -368						; size = 4
tv323 = -364						; size = 4
tv1812 = -360						; size = 4
_lpWindowName$71 = -356					; size = 4
tv1802 = -352						; size = 4
tv887 = -348						; size = 4
tv1792 = -344						; size = 4
tv878 = -340						; size = 4
tv1704 = -336						; size = 4
tv557 = -332						; size = 4
tv1641 = -328						; size = 4
_posX$72 = -324						; size = 4
_configData$73 = -320					; size = 4
tv393 = -316						; size = 4
tv1467 = -312						; size = 4
tv344 = -308						; size = 4
_info$74 = -304						; size = 4
tv317 = -300						; size = 4
tv186 = -296						; size = 4
tv300 = -292						; size = 4
_hwndLastKnownHWND$75 = -288				; size = 4
tv1025 = -284						; size = 4
tv1161 = -280						; size = 4
_source$76 = -276					; size = 4
_source$77 = -272					; size = 4
_sizeY$78 = -268					; size = 4
_hwndRegion$79 = -264					; size = 4
_sizeX$80 = -260					; size = 4
_cy$81 = -256						; size = 4
_val$82 = -252						; size = 4
_posY$83 = -248						; size = 4
tv1588 = -244						; size = 4
_windowID$84 = -240					; size = 4
tv1569 = -236						; size = 4
_cx$85 = -232						; size = 4
_source$86 = -228					; size = 4
_hwndWindowList$87 = -224				; size = 4
_source$88 = -220					; size = 4
_monitorID$89 = -216					; size = 4
_source$90 = -212					; size = 4
_source$91 = -208					; size = 4
_lpWindowName$92 = -204					; size = 4
_posX$93 = -200						; size = 4
_captureType$94 = -196					; size = 4
_hwndToolTip$95 = -192					; size = 4
_monitorID$96 = -188					; size = 4
_sizeX$97 = -184					; size = 4
_hwndVal$98 = -180					; size = 4
_sizeY$99 = -176					; size = 4
_captureType$100 = -172					; size = 4
_i$101 = -168						; size = 4
_captureType$102 = -164					; size = 4
_windowID$103 = -160					; size = 4
_info$104 = -156					; size = 4
_sizeY$105 = -152					; size = 4
_hwndWindowList$106 = -148				; size = 4
_sizeX$107 = -144					; size = 4
_windowID$108 = -140					; size = 4
_monitor$109 = -136					; size = 4
_data$110 = -132					; size = 4
_bRegion$111 = -128					; size = 4
_bMouseCapture$112 = -122				; size = 1
_bCaptureLayered$113 = -121				; size = 1
_source$114 = -120					; size = 4
_bCompatibilityMode$115 = -113				; size = 1
_bUseColorKey$116 = -112				; size = 4
_windowID$117 = -108					; size = 4
_bUseColorKey$118 = -104				; size = 4
_captureType$119 = -100					; size = 4
tv830 = -96						; size = 4
_hwndTemp$ = -92					; size = 4
tv68 = -88						; size = 4
tv1393 = -81						; size = 1
_info$120 = -80						; size = 4
_source$121 = -76					; size = 4
_info$122 = -72						; size = 4
_bFoundWindow$123 = -65					; size = 1
_data$124 = -64						; size = 4
_data$125 = -60						; size = 4
_bRegion$126 = -53					; size = 1
_ti$127 = -52						; size = 48
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z PROC	; ConfigDesktopSourceProc, COMDAT

; 1285 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 768				; 00000300H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 1286 :     static bool bSelectingColor = false;
; 1287 :     static bool bMouseDown = false;
; 1288 :     static ColorSelectionData colorData;

	mov	eax, DWORD PTR ?$S1@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4IA
	and	eax, 1
	jne	SHORT $LN149@ConfigDesk
	mov	ecx, DWORD PTR ?$S1@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4IA, ecx
	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	??0ColorSelectionData@@QAE@XZ		; ColorSelectionData::ColorSelectionData
	push	OFFSET ??__FcolorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ; `ConfigDesktopSourceProc'::`2'::`dynamic atexit destructor for 'colorData''
	call	_atexit
	add	esp, 4
$LN149@ConfigDesk:

; 1289 :     HWND hwndTemp;
; 1290 : 
; 1291 :     switch(message)

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	cmp	DWORD PTR tv68[ebp], 512		; 00000200H
	ja	SHORT $LN205@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 512		; 00000200H
	je	$LN112@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 273		; 00000111H
	ja	SHORT $LN206@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 273		; 00000111H
	je	$LN100@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 2
	je	$LN116@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 272		; 00000110H
	je	SHORT $LN146@ConfigDesk
	jmp	$LN147@ConfigDesk
$LN206@ConfigDesk:
	cmp	DWORD PTR tv68[ebp], 276		; 00000114H
	je	$LN103@ConfigDesk
	jmp	$LN147@ConfigDesk
$LN205@ConfigDesk:
	cmp	DWORD PTR tv68[ebp], 513		; 00000201H
	je	$LN114@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 514		; 00000202H
	je	$LN110@ConfigDesk
	cmp	DWORD PTR tv68[ebp], 533		; 00000215H
	je	$LN107@ConfigDesk
	jmp	$LN147@ConfigDesk
$LN146@ConfigDesk:

; 1292 :     {
; 1293 :         case WM_INITDIALOG:
; 1294 :             {
; 1295 :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)lParam);

	mov	eax, DWORD PTR _lParam$[ebp]
	push	eax
	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__SetWindowLongW@12

; 1296 :                 LocalizeWindow(hwnd);

	push	0
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 1297 : 
; 1298 :                 //--------------------------------------------
; 1299 : 
; 1300 :                 HWND hwndToolTip = CreateWindowEx(NULL, TOOLTIPS_CLASS, NULL, WS_POPUP|TTS_NOPREFIX|TTS_ALWAYSTIP,
; 1301 :                     CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,
; 1302 :                     hwnd, NULL, hinstMain, NULL);

	push	0
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483648				; 80000000H
	push	-2147483645				; 80000003H
	push	0
	push	OFFSET $SG4294889988
	push	0
	call	_IsolationAwareCreateWindowExW@48
	mov	DWORD PTR _hwndToolTip$95[ebp], eax

; 1303 : 
; 1304 :                 TOOLINFO ti;
; 1305 :                 zero(&ti, sizeof(ti));

	push	48					; 00000030H
	lea	edx, DWORD PTR _ti$127[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 1306 :                 ti.cbSize = sizeof(ti);

	mov	DWORD PTR _ti$127[ebp], 48		; 00000030H

; 1307 :                 ti.uFlags = TTF_SUBCLASS|TTF_IDISHWND;

	mov	DWORD PTR _ti$127[ebp+4], 17		; 00000011H

; 1308 :                 ti.hwnd = hwnd;

	mov	eax, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _ti$127[ebp+8], eax

; 1309 : 
; 1310 :                 if (LocaleIsRTL())

	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp_?LocaleIsRTL@@YA_NPAVLocaleStringLookup@@@Z
	add	esp, 4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN145@ConfigDesk

; 1311 :                     ti.uFlags |= TTF_RTLREADING;

	mov	ecx, DWORD PTR _ti$127[ebp+4]
	or	ecx, 4
	mov	DWORD PTR _ti$127[ebp+4], ecx
$LN145@ConfigDesk:

; 1312 : 
; 1313 :                 SendMessage(hwndToolTip, TTM_SETMAXTIPWIDTH, 0, 500);

	push	500					; 000001f4H
	push	0
	push	1048					; 00000418H
	mov	edx, DWORD PTR _hwndToolTip$95[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 1314 :                 SendMessage(hwndToolTip, TTM_SETDELAYTIME, TTDT_AUTOPOP, 8000);

	push	8000					; 00001f40H
	push	2
	push	1027					; 00000403H
	mov	eax, DWORD PTR _hwndToolTip$95[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1315 : 
; 1316 :                 //-----------------------------------------------------
; 1317 : 
; 1318 :                 ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)lParam;

	mov	ecx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _info$122[ebp], ecx

; 1319 :                 XElement *data = info->data;

	mov	edx, DWORD PTR _info$122[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _data$125[ebp], eax

; 1320 : 
; 1321 :                 info->prevCX = AppConfig->GetInt(TEXT("Video"), TEXT("BaseWidth"));

	push	0
	push	OFFSET $SG4294889987
	push	OFFSET $SG4294889986
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	ecx, DWORD PTR _info$122[ebp]
	mov	DWORD PTR [ecx+20], eax

; 1322 :                 info->prevCY = AppConfig->GetInt(TEXT("Video"), TEXT("BaseHeight"));

	push	0
	push	OFFSET $SG4294889985
	push	OFFSET $SG4294889984
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?GetInt@ConfigFile@@QAEHPB_W0H@Z
	mov	edx, DWORD PTR _info$122[ebp]
	mov	DWORD PTR [edx+24], eax

; 1323 : 
; 1324 :                 if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE || info->dialogID == IDD_CONFIGUREDESKTOPSOURCE) {

	mov	eax, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [eax+8], 144			; 00000090H
	je	SHORT $LN143@ConfigDesk
	mov	ecx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	jne	$LN144@ConfigDesk
$LN143@ConfigDesk:

; 1325 :                     hwndTemp = GetDlgItem(hwnd, IDC_MONITOR);

	push	1019					; 000003fbH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$[ebp], eax

; 1326 :                     for(UINT i=0; i<App->NumMonitors(); i++)

	mov	DWORD PTR _i$101[ebp], 0
	jmp	SHORT $LN142@ConfigDesk
$LN141@ConfigDesk:
	mov	eax, DWORD PTR _i$101[ebp]
	add	eax, 1
	mov	DWORD PTR _i$101[ebp], eax
$LN142@ConfigDesk:
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?NumMonitors@OBS@@QBEIXZ		; OBS::NumMonitors
	cmp	DWORD PTR _i$101[ebp], eax
	jae	SHORT $LN140@ConfigDesk

; 1327 :                         SendMessage(hwndTemp, CB_ADDSTRING, 0, (LPARAM)UIntString(i+1).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _i$101[ebp]
	add	ecx, 1
	push	ecx
	lea	edx, DWORD PTR $T1[ebp]
	push	edx
	call	DWORD PTR __imp_?UIntString@@YA?AVString@@IH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	0
	push	323					; 00000143H
	mov	eax, DWORD PTR _hwndTemp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	lea	ecx, DWORD PTR $T1[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN141@ConfigDesk
$LN140@ConfigDesk:

; 1328 :                     SendMessage(hwndTemp, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	mov	ecx, DWORD PTR _hwndTemp$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1329 : 
; 1330 :                     if (OSGetVersion() > 7) {

	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 7
	jle	SHORT $LN144@ConfigDesk

; 1331 :                         EnableWindow(GetDlgItem(hwnd, IDC_CAPTURELAYERED), FALSE);

	push	0
	push	1099					; 0000044bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1332 :                         EnableWindow(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), (info->dialogID != IDD_CONFIGUREMONITORCAPTURE));

	mov	eax, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [eax+8], 144			; 00000090H
	je	SHORT $LN152@ConfigDesk
	mov	DWORD PTR tv186[ebp], 1
	jmp	SHORT $LN153@ConfigDesk
$LN152@ConfigDesk:
	mov	DWORD PTR tv186[ebp], 0
$LN153@ConfigDesk:
	mov	ecx, DWORD PTR tv186[ebp]
	push	ecx
	push	1100					; 0000044cH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN144@ConfigDesk:

; 1333 :                     }
; 1334 :                 }
; 1335 : 
; 1336 :                 UINT captureType = data->GetInt(TEXT("captureType"), 0);

	push	0
	push	OFFSET $SG4294889983
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _captureType$94[ebp], eax

; 1337 : 
; 1338 :                 if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE)

	mov	eax, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [eax+8], 123			; 0000007bH
	jne	SHORT $LN138@ConfigDesk

; 1339 :                     SetDesktopCaptureType(hwnd, captureType);

	mov	ecx, DWORD PTR _captureType$94[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z ; SetDesktopCaptureType
	add	esp, 8
$LN138@ConfigDesk:

; 1340 : 
; 1341 :                 //-----------------------------------------------------
; 1342 : 
; 1343 :                 if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE || info->dialogID == IDD_CONFIGUREDESKTOPSOURCE) {

	mov	eax, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [eax+8], 144			; 00000090H
	je	SHORT $LN136@ConfigDesk
	mov	ecx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	jne	SHORT $LN137@ConfigDesk
$LN136@ConfigDesk:

; 1344 :                     hwndTemp = GetDlgItem(hwnd, IDC_MONITOR);

	push	1019					; 000003fbH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$[ebp], eax

; 1345 :                     UINT monitor = data->GetInt(TEXT("monitor"));

	push	0
	push	OFFSET $SG4294889982
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _monitor$30[ebp], eax

; 1346 :                     SendMessage(hwndTemp, CB_SETCURSEL, monitor, 0);

	push	0
	mov	eax, DWORD PTR _monitor$30[ebp]
	push	eax
	push	334					; 0000014eH
	mov	ecx, DWORD PTR _hwndTemp$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
$LN137@ConfigDesk:

; 1347 :                 }
; 1348 : 
; 1349 :                 //-----------------------------------------------------
; 1350 : 
; 1351 :                 if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE) {

	mov	edx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [edx+8], 144			; 00000090H
	jne	$LN135@ConfigDesk

; 1352 :                     String strWarnings;

	lea	ecx, DWORD PTR _strWarnings$65[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 1353 :                     if (OSGetVersion() < 8) {

	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jge	SHORT $LN134@ConfigDesk

; 1354 :                         strWarnings << Str("Sources.SoftwareCaptureSource.Warning");

	push	OFFSET $SG4294889981
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	lea	ecx, DWORD PTR _strWarnings$65[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z

; 1355 : 
; 1356 :                         BOOL bComposition;
; 1357 :                         DwmIsCompositionEnabled(&bComposition);

	lea	ecx, DWORD PTR _bComposition$26[ebp]
	push	ecx
	call	DWORD PTR __imp__DwmIsCompositionEnabled@4

; 1358 :                         if (bComposition)

	cmp	DWORD PTR _bComposition$26[ebp], 0
	je	SHORT $LN134@ConfigDesk

; 1359 :                             strWarnings << TEXT("\r\n") << Str("Sources.SoftwareCaptureSource.WarningAero");

	push	OFFSET $SG4294889979
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	OFFSET $SG4294889980
	lea	ecx, DWORD PTR _strWarnings$65[ebp]
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??6String@@QAEAAV0@PB_W@Z
$LN134@ConfigDesk:

; 1360 :                     }
; 1361 : 
; 1362 :                     SetWindowText(GetDlgItem(hwnd, IDC_WARNING), strWarnings);

	lea	ecx, DWORD PTR _strWarnings$65[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	1159					; 00000487H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 1363 :                 }

	lea	ecx, DWORD PTR _strWarnings$65[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN135@ConfigDesk:

; 1364 : 
; 1365 :                 //-----------------------------------------------------
; 1366 : 
; 1367 :                 bool bFoundWindow = false;

	mov	BYTE PTR _bFoundWindow$123[ebp], 0

; 1368 :                 if (info->dialogID == IDD_CONFIGUREWINDOWCAPTURE || info->dialogID == IDD_CONFIGUREDESKTOPSOURCE) {

	mov	ecx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [ecx+8], 143			; 0000008fH
	je	SHORT $LN131@ConfigDesk
	mov	edx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [edx+8], 123			; 0000007bH
	jne	$LN132@ConfigDesk
$LN131@ConfigDesk:

; 1369 :                     HWND hwndWindowList = GetDlgItem(hwnd, IDC_WINDOW);

	push	1066					; 0000042aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndWindowList$87[ebp], eax

; 1370 : 
; 1371 :                     CTSTR lpWindowName = data->GetString(TEXT("window"));

	push	0
	push	OFFSET $SG4294889978
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpWindowName$71[ebp], eax

; 1372 :                     CTSTR lpWindowClass = data->GetString(TEXT("windowClass"));

	push	0
	push	OFFSET $SG4294889977
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpWindowClass$21[ebp], eax

; 1373 :                     BOOL bInnerWindow = (BOOL)data->GetInt(TEXT("innerWindow"), 1);

	push	1
	push	OFFSET $SG4294889976
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bInnerWindow$24[ebp], eax

; 1374 : 
; 1375 :                     RefreshWindowList(hwndWindowList, info->strClasses);

	mov	ecx, DWORD PTR _info$122[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _hwndWindowList$87[ebp]
	push	edx
	call	?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z ; RefreshWindowList
	add	esp, 8

; 1376 : 
; 1377 :                     UINT windowID = 0;

	mov	DWORD PTR _windowID$103[ebp], 0

; 1378 :                     if(lpWindowName)

	cmp	DWORD PTR _lpWindowName$71[ebp], 0
	je	SHORT $LN130@ConfigDesk

; 1379 :                         windowID = (UINT)SendMessage(hwndWindowList, CB_FINDSTRINGEXACT, -1, (LPARAM)lpWindowName);

	mov	eax, DWORD PTR _lpWindowName$71[ebp]
	push	eax
	push	-1
	push	344					; 00000158H
	mov	ecx, DWORD PTR _hwndWindowList$87[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _windowID$103[ebp], eax
$LN130@ConfigDesk:

; 1380 : 
; 1381 :                     bFoundWindow = (windowID != CB_ERR);

	cmp	DWORD PTR _windowID$103[ebp], -1
	je	SHORT $LN154@ConfigDesk
	mov	DWORD PTR tv272[ebp], 1
	jmp	SHORT $LN155@ConfigDesk
$LN154@ConfigDesk:
	mov	DWORD PTR tv272[ebp], 0
$LN155@ConfigDesk:
	mov	dl, BYTE PTR tv272[ebp]
	mov	BYTE PTR _bFoundWindow$123[ebp], dl

; 1382 :                     if(!bFoundWindow)

	movzx	eax, BYTE PTR _bFoundWindow$123[ebp]
	test	eax, eax
	jne	SHORT $LN129@ConfigDesk

; 1383 :                         windowID = 0;

	mov	DWORD PTR _windowID$103[ebp], 0
$LN129@ConfigDesk:

; 1384 : 
; 1385 :                     SendMessage(hwndWindowList, CB_SETCURSEL, windowID, 0);

	push	0
	mov	ecx, DWORD PTR _windowID$103[ebp]
	push	ecx
	push	334					; 0000014eH
	mov	edx, DWORD PTR _hwndWindowList$87[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 1386 : 
; 1387 :                     if(bInnerWindow)

	cmp	DWORD PTR _bInnerWindow$24[ebp], 0
	je	SHORT $LN128@ConfigDesk

; 1388 :                         SendMessage(GetDlgItem(hwnd, IDC_INNERWINDOW), BM_SETCHECK, BST_CHECKED, 0);

	push	0
	push	1
	push	241					; 000000f1H
	push	1069					; 0000042dH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1389 :                     else

	jmp	SHORT $LN132@ConfigDesk
$LN128@ConfigDesk:

; 1390 :                         SendMessage(GetDlgItem(hwnd, IDC_OUTERWINDOW), BM_SETCHECK, BST_CHECKED, 0);

	push	0
	push	1
	push	241					; 000000f1H
	push	1067					; 0000042bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN132@ConfigDesk:

; 1391 :                 }
; 1392 : 
; 1393 :                 //-----------------------------------------------------
; 1394 : 
; 1395 :                 bool bMouseCapture = data->GetInt(TEXT("captureMouse"), 1) != 0;

	push	1
	push	OFFSET $SG4294889975
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN156@ConfigDesk
	mov	DWORD PTR tv300[ebp], 1
	jmp	SHORT $LN157@ConfigDesk
$LN156@ConfigDesk:
	mov	DWORD PTR tv300[ebp], 0
$LN157@ConfigDesk:
	mov	dl, BYTE PTR tv300[ebp]
	mov	BYTE PTR _bMouseCapture$112[ebp], dl

; 1396 :                 SendMessage(GetDlgItem(hwnd, IDC_CAPTUREMOUSE), BM_SETCHECK, (bMouseCapture) ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	eax, BYTE PTR _bMouseCapture$112[ebp]
	test	eax, eax
	je	SHORT $LN158@ConfigDesk
	mov	DWORD PTR tv306[ebp], 1
	jmp	SHORT $LN159@ConfigDesk
$LN158@ConfigDesk:
	mov	DWORD PTR tv306[ebp], 0
$LN159@ConfigDesk:
	push	0
	mov	ecx, DWORD PTR tv306[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1041					; 00000411H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1397 : 
; 1398 :                 bool bCaptureLayered = data->GetInt(TEXT("captureLayered"), 0) != 0;

	push	0
	push	OFFSET $SG4294889974
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN160@ConfigDesk
	mov	DWORD PTR tv317[ebp], 1
	jmp	SHORT $LN161@ConfigDesk
$LN160@ConfigDesk:
	mov	DWORD PTR tv317[ebp], 0
$LN161@ConfigDesk:
	mov	al, BYTE PTR tv317[ebp]
	mov	BYTE PTR _bCaptureLayered$113[ebp], al

; 1399 :                 SendMessage(GetDlgItem(hwnd, IDC_CAPTURELAYERED), BM_SETCHECK, (bCaptureLayered) ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	ecx, BYTE PTR _bCaptureLayered$113[ebp]
	test	ecx, ecx
	je	SHORT $LN162@ConfigDesk
	mov	DWORD PTR tv323[ebp], 1
	jmp	SHORT $LN163@ConfigDesk
$LN162@ConfigDesk:
	mov	DWORD PTR tv323[ebp], 0
$LN163@ConfigDesk:
	push	0
	mov	edx, DWORD PTR tv323[ebp]
	push	edx
	push	241					; 000000f1H
	push	1099					; 0000044bH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1400 : 
; 1401 :                 ti.lpszText = (LPWSTR)Str("Sources.SoftwareCaptureSource.CaptureLayeredTip");

	push	OFFSET $SG4294889973
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$127[ebp+36], eax

; 1402 :                 ti.uId = (UINT_PTR)GetDlgItem(hwnd, IDC_CAPTURELAYERED);

	push	1099					; 0000044bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _ti$127[ebp+12], eax

; 1403 :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	eax, DWORD PTR _ti$127[ebp]
	push	eax
	push	0
	push	1074					; 00000432H
	mov	ecx, DWORD PTR _hwndToolTip$95[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1404 : 
; 1405 :                 bool bCompatibilityMode = data->GetInt(TEXT("compatibilityMode"), 0) != 0;

	push	0
	push	OFFSET $SG4294889972
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN164@ConfigDesk
	mov	DWORD PTR tv344[ebp], 1
	jmp	SHORT $LN165@ConfigDesk
$LN164@ConfigDesk:
	mov	DWORD PTR tv344[ebp], 0
$LN165@ConfigDesk:
	mov	dl, BYTE PTR tv344[ebp]
	mov	BYTE PTR _bCompatibilityMode$115[ebp], dl

; 1406 :                 SendMessage(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), BM_SETCHECK, (bCompatibilityMode) ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	eax, BYTE PTR _bCompatibilityMode$115[ebp]
	test	eax, eax
	je	SHORT $LN166@ConfigDesk
	mov	DWORD PTR tv350[ebp], 1
	jmp	SHORT $LN167@ConfigDesk
$LN166@ConfigDesk:
	mov	DWORD PTR tv350[ebp], 0
$LN167@ConfigDesk:
	push	0
	mov	ecx, DWORD PTR tv350[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1100					; 0000044cH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1407 : 
; 1408 :                 //-----------------------------------------------------
; 1409 : 
; 1410 :                 bool bRegion = data->GetInt(TEXT("regionCapture")) != FALSE;

	push	0
	push	OFFSET $SG4294889971
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN168@ConfigDesk
	mov	DWORD PTR tv393[ebp], 1
	jmp	SHORT $LN169@ConfigDesk
$LN168@ConfigDesk:
	mov	DWORD PTR tv393[ebp], 0
$LN169@ConfigDesk:
	mov	al, BYTE PTR tv393[ebp]
	mov	BYTE PTR _bRegion$126[ebp], al

; 1411 :                 if(captureType == 1 && !bFoundWindow)

	cmp	DWORD PTR _captureType$94[ebp], 1
	jne	SHORT $LN126@ConfigDesk
	movzx	ecx, BYTE PTR _bFoundWindow$123[ebp]
	test	ecx, ecx
	jne	SHORT $LN126@ConfigDesk

; 1412 :                     bRegion = false;

	mov	BYTE PTR _bRegion$126[ebp], 0
$LN126@ConfigDesk:

; 1413 : 
; 1414 :                 SendMessage(GetDlgItem(hwnd, IDC_REGIONCAPTURE), BM_SETCHECK, (bRegion) ? BST_CHECKED : BST_UNCHECKED, 0);

	movzx	edx, BYTE PTR _bRegion$126[ebp]
	test	edx, edx
	je	SHORT $LN170@ConfigDesk
	mov	DWORD PTR tv402[ebp], 1
	jmp	SHORT $LN171@ConfigDesk
$LN170@ConfigDesk:
	mov	DWORD PTR tv402[ebp], 0
$LN171@ConfigDesk:
	push	0
	mov	eax, DWORD PTR tv402[ebp]
	push	eax
	push	241					; 000000f1H
	push	1062					; 00000426H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1415 :                 EnableWindow(GetDlgItem(hwnd, IDC_POSX),            bRegion);

	movzx	edx, BYTE PTR _bRegion$126[ebp]
	push	edx
	push	1063					; 00000427H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1416 :                 EnableWindow(GetDlgItem(hwnd, IDC_POSY),            bRegion);

	movzx	ecx, BYTE PTR _bRegion$126[ebp]
	push	ecx
	push	1064					; 00000428H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1417 :                 EnableWindow(GetDlgItem(hwnd, IDC_SIZEX),           bRegion);

	movzx	eax, BYTE PTR _bRegion$126[ebp]
	push	eax
	push	1033					; 00000409H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1418 :                 EnableWindow(GetDlgItem(hwnd, IDC_SIZEY),           bRegion);

	movzx	edx, BYTE PTR _bRegion$126[ebp]
	push	edx
	push	1034					; 0000040aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1419 :                 EnableWindow(GetDlgItem(hwnd, IDC_SELECTREGION),    bRegion);

	movzx	ecx, BYTE PTR _bRegion$126[ebp]
	push	ecx
	push	1071					; 0000042fH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1420 : 
; 1421 :                 int posX = 0, posY = 0, sizeX = 32, sizeY = 32;

	mov	DWORD PTR _posX$72[ebp], 0
	mov	DWORD PTR _posY$66[ebp], 0
	mov	DWORD PTR _sizeX$97[ebp], 32		; 00000020H
	mov	DWORD PTR _sizeY$99[ebp], 32		; 00000020H

; 1422 :                 if(!data->GetBaseItem(TEXT("captureX")) || !bRegion)

	push	OFFSET $SG4294889970
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetBaseItem@XElement@@QBEPAVXBaseItem@@PB_W@Z
	test	eax, eax
	je	SHORT $LN124@ConfigDesk
	movzx	eax, BYTE PTR _bRegion$126[ebp]
	test	eax, eax
	jne	SHORT $LN125@ConfigDesk
$LN124@ConfigDesk:

; 1423 :                 {
; 1424 :                     if(captureType == 0)

	cmp	DWORD PTR _captureType$94[ebp], 0
	jne	SHORT $LN123@ConfigDesk

; 1425 :                         PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_MONITOR, 0), 0);

	push	0
	push	1019					; 000003fbH
	push	273					; 00000111H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__PostMessageW@16
	jmp	SHORT $LN122@ConfigDesk
$LN123@ConfigDesk:

; 1426 :                     else if(captureType == 1)

	cmp	DWORD PTR _captureType$94[ebp], 1
	jne	SHORT $LN122@ConfigDesk

; 1427 :                         PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_WINDOW, 0), 0);

	push	0
	push	1066					; 0000042aH
	push	273					; 00000111H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__PostMessageW@16
$LN122@ConfigDesk:

; 1428 :                 }
; 1429 :                 else

	jmp	$LN120@ConfigDesk
$LN125@ConfigDesk:

; 1430 :                 {
; 1431 :                     posX  = data->GetInt(TEXT("captureX"));

	push	0
	push	OFFSET $SG4294889969
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _posX$72[ebp], eax

; 1432 :                     posY  = data->GetInt(TEXT("captureY"));

	push	0
	push	OFFSET $SG4294889968
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _posY$66[ebp], eax

; 1433 :                     sizeX = data->GetInt(TEXT("captureCX"), 32);

	push	32					; 00000020H
	push	OFFSET $SG4294889967
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _sizeX$97[ebp], eax

; 1434 :                     sizeY = data->GetInt(TEXT("captureCY"), 32);

	push	32					; 00000020H
	push	OFFSET $SG4294889966
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _sizeY$99[ebp], eax

; 1435 : 
; 1436 :                     if(sizeX < 16)

	cmp	DWORD PTR _sizeX$97[ebp], 16		; 00000010H
	jge	SHORT $LN119@ConfigDesk

; 1437 :                         sizeX = 16;

	mov	DWORD PTR _sizeX$97[ebp], 16		; 00000010H
$LN119@ConfigDesk:

; 1438 :                     if(sizeY < 16)

	cmp	DWORD PTR _sizeY$99[ebp], 16		; 00000010H
	jge	SHORT $LN118@ConfigDesk

; 1439 :                         sizeY = 16;

	mov	DWORD PTR _sizeY$99[ebp], 16		; 00000010H
$LN118@ConfigDesk:

; 1440 : 
; 1441 :                     SetWindowText(GetDlgItem(hwnd, IDC_POSX),  IntString(posX).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _posX$72[ebp]
	push	eax
	lea	ecx, DWORD PTR $T10[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1063					; 00000427H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T10[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1442 :                     SetWindowText(GetDlgItem(hwnd, IDC_POSY),  IntString(posY).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _posY$66[ebp]
	push	eax
	lea	ecx, DWORD PTR $T18[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1064					; 00000428H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T18[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1443 :                     SetWindowText(GetDlgItem(hwnd, IDC_SIZEX), IntString(sizeX).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _sizeX$97[ebp]
	push	eax
	lea	ecx, DWORD PTR $T2[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1033					; 00000409H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T2[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1444 :                     SetWindowText(GetDlgItem(hwnd, IDC_SIZEY), IntString(sizeY).Array());

	push	10					; 0000000aH
	mov	eax, DWORD PTR _sizeY$99[ebp]
	push	eax
	lea	ecx, DWORD PTR $T16[ebp]
	push	ecx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1034					; 0000040aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T16[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN120@ConfigDesk:

; 1445 :                 }
; 1446 : 
; 1447 :                 ti.lpszText = (LPWSTR)Str("Sources.SoftwareCaptureSource.SelectRegionTooltip");

	push	OFFSET $SG4294889965
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	mov	DWORD PTR _ti$127[ebp+36], eax

; 1448 :                 ti.uId = (UINT_PTR)GetDlgItem(hwnd, IDC_SELECTREGION);

	push	1071					; 0000042fH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _ti$127[ebp+12], eax

; 1449 :                 SendMessage(hwndToolTip, TTM_ADDTOOL, 0, (LPARAM)&ti);

	lea	edx, DWORD PTR _ti$127[ebp]
	push	edx
	push	0
	push	1074					; 00000432H
	mov	eax, DWORD PTR _hwndToolTip$95[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1450 : 
; 1451 :                 //------------------------------------------
; 1452 : 
; 1453 :                 BOOL  bUseColorKey  = data->GetInt(TEXT("useColorKey"), 0);

	push	0
	push	OFFSET $SG4294889964
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bUseColorKey$118[ebp], eax

; 1454 :                 DWORD keyColor      = data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	push	-1
	push	OFFSET $SG4294889963
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _keyColor$42[ebp], eax

; 1455 :                 UINT  similarity    = data->GetInt(TEXT("keySimilarity"), 10);

	push	10					; 0000000aH
	push	OFFSET $SG4294889962
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _similarity$60[ebp], eax

; 1456 :                 UINT  blend         = data->GetInt(TEXT("keyBlend"), 0);

	push	0
	push	OFFSET $SG4294889961
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _blend$40[ebp], eax

; 1457 :                 
; 1458 :                 BOOL  bUsePointFiltering = data->GetInt(TEXT("usePointFiltering"), 0);

	push	0
	push	OFFSET $SG4294889960
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _bUsePointFiltering$35[ebp], eax

; 1459 :                 SendMessage(GetDlgItem(hwnd, IDC_POINTFILTERING), BM_SETCHECK, bUsePointFiltering ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bUsePointFiltering$35[ebp], 0
	je	SHORT $LN172@ConfigDesk
	mov	DWORD PTR tv557[ebp], 1
	jmp	SHORT $LN173@ConfigDesk
$LN172@ConfigDesk:
	mov	DWORD PTR tv557[ebp], 0
$LN173@ConfigDesk:
	push	0
	mov	ecx, DWORD PTR tv557[ebp]
	push	ecx
	push	241					; 000000f1H
	push	1036					; 0000040cH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1460 : 
; 1461 :                 SendMessage(GetDlgItem(hwnd, IDC_USECOLORKEY), BM_SETCHECK, bUseColorKey ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _bUseColorKey$118[ebp], 0
	je	SHORT $LN174@ConfigDesk
	mov	DWORD PTR tv566[ebp], 1
	jmp	SHORT $LN175@ConfigDesk
$LN174@ConfigDesk:
	mov	DWORD PTR tv566[ebp], 0
$LN175@ConfigDesk:
	push	0
	mov	eax, DWORD PTR tv566[ebp]
	push	eax
	push	241					; 000000f1H
	push	1017					; 000003f9H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1462 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), keyColor);

	mov	edx, DWORD PTR _keyColor$42[ebp]
	push	edx
	push	1104					; 00000450H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1463 : 
; 1464 :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1021					; 000003fdH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1465 :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETPOS32, 0, similarity);

	mov	edx, DWORD PTR _similarity$60[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1021					; 000003fdH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1466 : 
; 1467 :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1023					; 000003ffH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1468 :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETPOS32, 0, blend);

	mov	edx, DWORD PTR _blend$40[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1469 : 
; 1470 :                 EnableWindow(GetDlgItem(hwnd, IDC_COLOR), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$118[ebp]
	push	ecx
	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1471 :                 EnableWindow(GetDlgItem(hwnd, IDC_SELECT), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$118[ebp]
	push	eax
	push	1125					; 00000465H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1472 :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$118[ebp]
	push	edx
	push	1020					; 000003fcH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1473 :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$118[ebp]
	push	ecx
	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1474 :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$118[ebp]
	push	eax
	push	1022					; 000003feH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1475 :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$118[ebp]
	push	edx
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1476 : 
; 1477 :                 //------------------------------------------
; 1478 : 
; 1479 :                 UINT opacity = data->GetInt(TEXT("opacity"), 100);

	push	100					; 00000064H
	push	OFFSET $SG4294889959
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _opacity$58[ebp], eax

; 1480 : 
; 1481 :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY2), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1482 :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY2), UDM_SETPOS32, 0, opacity);

	mov	edx, DWORD PTR _opacity$58[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1483 : 
; 1484 :                 //------------------------------------------
; 1485 : 
; 1486 :                 int gammaVal = data->GetInt(TEXT("gamma"), 100);

	push	100					; 00000064H
	push	OFFSET $SG4294889958
	mov	ecx, DWORD PTR _data$125[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _gammaVal$38[ebp], eax

; 1487 : 
; 1488 :                 hwndTemp = GetDlgItem(hwnd, IDC_GAMMA);

	push	1035					; 0000040bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndTemp$[ebp], eax

; 1489 :                 SendMessage(hwndTemp, TBM_CLEARTICS, FALSE, 0);

	push	0
	push	0
	push	1033					; 00000409H
	mov	edx, DWORD PTR _hwndTemp$[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 1490 :                 SendMessage(hwndTemp, TBM_SETRANGE, FALSE, MAKELPARAM(50, 175));

	push	11468850				; 00af0032H
	push	0
	push	1030					; 00000406H
	mov	eax, DWORD PTR _hwndTemp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1491 :                 SendMessage(hwndTemp, TBM_SETTIC, 0, 100);

	push	100					; 00000064H
	push	0
	push	1028					; 00000404H
	mov	ecx, DWORD PTR _hwndTemp$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1492 :                 SendMessage(hwndTemp, TBM_SETPOS, TRUE, gammaVal);

	mov	edx, DWORD PTR _gammaVal$38[ebp]
	push	edx
	push	1
	push	1029					; 00000405H
	mov	eax, DWORD PTR _hwndTemp$[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 1493 : 
; 1494 :                 SetSliderText(hwnd, IDC_GAMMA, IDC_GAMMAVAL);

	push	1151					; 0000047fH
	push	1035					; 0000040bH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?SetSliderText@@YAHPAUHWND__@@HH@Z	; SetSliderText
	add	esp, 12					; 0000000cH

; 1495 : 
; 1496 :                 //--------------------------------------------
; 1497 : 
; 1498 :                 if (info->dialogID == IDD_CONFIGUREWINDOWCAPTURE)

	mov	edx, DWORD PTR _info$122[ebp]
	cmp	DWORD PTR [edx+8], 143			; 0000008fH
	jne	SHORT $LN117@ConfigDesk

; 1499 :                     PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_WINDOW, 0), 0);

	push	0
	push	1066					; 0000042aH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__PostMessageW@16
$LN117@ConfigDesk:

; 1500 : 
; 1501 :                 return TRUE;

	mov	eax, 1
	jmp	$LN150@ConfigDesk
$LN116@ConfigDesk:

; 1502 :             }
; 1503 : 
; 1504 :         case WM_DESTROY:
; 1505 :             if(colorData.bValid)

	movzx	ecx, BYTE PTR ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12
	test	ecx, ecx
	je	SHORT $LN115@ConfigDesk

; 1506 :             {
; 1507 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1508 :                 colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
$LN115@ConfigDesk:

; 1509 :             }
; 1510 :             break;

	jmp	$LN147@ConfigDesk
$LN114@ConfigDesk:

; 1511 : 
; 1512 :         case WM_LBUTTONDOWN:
; 1513 :             if(bSelectingColor)

	movzx	eax, BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	SHORT $LN113@ConfigDesk

; 1514 :             {
; 1515 :                 bMouseDown = true;

	mov	BYTE PTR ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1

; 1516 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1104					; 00000450H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1517 :                 ConfigDesktopSourceProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));

	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1104					; 00000450H
	push	273					; 00000111H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z ; ConfigDesktopSourceProc
$LN113@ConfigDesk:

; 1518 :             }
; 1519 :             break;

	jmp	$LN147@ConfigDesk
$LN112@ConfigDesk:

; 1520 : 
; 1521 :         case WM_MOUSEMOVE:
; 1522 :             if(bSelectingColor && bMouseDown)

	movzx	ecx, BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	je	SHORT $LN111@ConfigDesk
	movzx	edx, BYTE PTR ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	edx, edx
	je	SHORT $LN111@ConfigDesk

; 1523 :             {
; 1524 :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1104					; 00000450H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1525 :                 ConfigDesktopSourceProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));

	push	1104					; 00000450H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1104					; 00000450H
	push	273					; 00000111H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z ; ConfigDesktopSourceProc
$LN111@ConfigDesk:

; 1526 :             }
; 1527 :             break;

	jmp	$LN147@ConfigDesk
$LN110@ConfigDesk:

; 1528 : 
; 1529 :         case WM_LBUTTONUP:
; 1530 :             if(bSelectingColor)

	movzx	eax, BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	SHORT $LN109@ConfigDesk

; 1531 :             {
; 1532 :                 colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear

; 1533 :                 ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0

; 1534 :                 bMouseDown = false;

	mov	BYTE PTR ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 1535 :                 bSelectingColor = false;

	mov	BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 1536 : 
; 1537 :                 ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$56[ebp], eax

; 1538 :                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR _configData$56[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$76[ebp], eax

; 1539 :                 if(source)

	cmp	DWORD PTR _source$76[ebp], 0
	je	SHORT $LN109@ConfigDesk

; 1540 :                     source->SetInt(TEXT("useColorKey"), true);

	push	1
	push	OFFSET $SG4294889957
	mov	edx, DWORD PTR _source$76[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$76[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN109@ConfigDesk:

; 1541 :             }
; 1542 :             break;

	jmp	$LN147@ConfigDesk
$LN107@ConfigDesk:

; 1543 : 
; 1544 :         case WM_CAPTURECHANGED:
; 1545 :             if(bSelectingColor)

	movzx	eax, BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	$LN106@ConfigDesk

; 1546 :             {
; 1547 :                 if(colorData.bValid)

	movzx	ecx, BYTE PTR ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A+12
	test	ecx, ecx
	je	SHORT $LN105@ConfigDesk

; 1548 :                 {
; 1549 :                     CCSetColor(GetDlgItem(hwnd, IDC_COLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 1550 :                     ConfigDesktopSourceProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_COLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_COLOR));

	push	1104					; 00000450H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1104					; 00000450H
	push	273					; 00000111H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z ; ConfigDesktopSourceProc

; 1551 :                     colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
$LN105@ConfigDesk:

; 1552 :                 }
; 1553 : 
; 1554 :                 ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0

; 1555 :                 bMouseDown = false;

	mov	BYTE PTR ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 1556 :                 bSelectingColor = false;

	mov	BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 1557 : 
; 1558 :                 ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$36[ebp], eax

; 1559 :                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	eax, DWORD PTR _configData$36[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$91[ebp], eax

; 1560 :                 if(source)

	cmp	DWORD PTR _source$91[ebp], 0
	je	SHORT $LN106@ConfigDesk

; 1561 :                     source->SetInt(TEXT("useColorKey"), true);

	push	1
	push	OFFSET $SG4294889956
	mov	eax, DWORD PTR _source$91[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$91[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN106@ConfigDesk:

; 1562 :             }
; 1563 :             break;

	jmp	$LN147@ConfigDesk
$LN103@ConfigDesk:

; 1564 : 
; 1565 :         case WM_HSCROLL:
; 1566 :             {
; 1567 :                 if(GetDlgCtrlID((HWND)lParam) == IDC_GAMMA)

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgCtrlID@4
	cmp	eax, 1035				; 0000040bH
	jne	SHORT $LN102@ConfigDesk

; 1568 :                 {
; 1569 :                     int gamma = SetSliderText(hwnd, IDC_GAMMA, IDC_GAMMAVAL);

	push	1151					; 0000047fH
	push	1035					; 0000040bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	?SetSliderText@@YAHPAUHWND__@@HH@Z	; SetSliderText
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _gamma$34[ebp], eax

; 1570 : 
; 1571 :                     ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$54[ebp], eax

; 1572 :                     ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$54[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$77[ebp], eax

; 1573 :                     if(source)

	cmp	DWORD PTR _source$77[ebp], 0
	je	SHORT $LN102@ConfigDesk

; 1574 :                         source->SetInt(TEXT("gamma"), gamma);

	mov	ecx, DWORD PTR _gamma$34[ebp]
	push	ecx
	push	OFFSET $SG4294889955
	mov	edx, DWORD PTR _source$77[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$77[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN102@ConfigDesk:

; 1575 :                 }
; 1576 :             }
; 1577 :             break;

	jmp	$LN147@ConfigDesk
$LN100@ConfigDesk:

; 1578 : 
; 1579 :         case WM_COMMAND:
; 1580 :             switch(LOWORD(wParam))

	movzx	eax, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv830[ebp], eax
	cmp	DWORD PTR tv830[ebp], 1017		; 000003f9H
	jg	SHORT $LN204@ConfigDesk
	cmp	DWORD PTR tv830[ebp], 1017		; 000003f9H
	je	$LN48@ConfigDesk
	cmp	DWORD PTR tv830[ebp], 1
	je	$LN25@ConfigDesk
	cmp	DWORD PTR tv830[ebp], 2
	je	$LN3@ConfigDesk
	jmp	$LN147@ConfigDesk
$LN204@ConfigDesk:
	mov	ecx, DWORD PTR tv830[ebp]
	sub	ecx, 1019				; 000003fbH
	mov	DWORD PTR tv830[ebp], ecx
	cmp	DWORD PTR tv830[ebp], 129		; 00000081H
	ja	$LN147@ConfigDesk
	mov	edx, DWORD PTR tv830[ebp]
	movzx	eax, BYTE PTR $LN207@ConfigDesk[edx]
	jmp	DWORD PTR $LN208@ConfigDesk[eax*4]
$LN97@ConfigDesk:

; 1581 :             {
; 1582 :                 case IDC_MONITORCAPTURE:
; 1583 :                     SetDesktopCaptureType(hwnd, 0);

	push	0
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z ; SetDesktopCaptureType
	add	esp, 8

; 1584 :                     PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_MONITOR, 0), 0);

	push	0
	push	1019					; 000003fbH
	push	273					; 00000111H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__PostMessageW@16

; 1585 : 
; 1586 :                     if(OSGetVersion() >= 8)

	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jl	SHORT $LN96@ConfigDesk

; 1587 :                     {
; 1588 :                         EnableWindow(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), FALSE);

	push	0
	push	1100					; 0000044cH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1589 :                         SendMessage(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), BM_SETCHECK, BST_UNCHECKED, 0);

	push	0
	push	0
	push	241					; 000000f1H
	push	1100					; 0000044cH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
$LN96@ConfigDesk:

; 1590 :                     }
; 1591 :                     break;

	jmp	$LN147@ConfigDesk
$LN95@ConfigDesk:

; 1592 : 
; 1593 :                 case IDC_WINDOWCAPTURE:
; 1594 :                     SetDesktopCaptureType(hwnd, 1);

	push	1
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	?SetDesktopCaptureType@@YAXPAUHWND__@@I@Z ; SetDesktopCaptureType
	add	esp, 8

; 1595 :                     PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_WINDOW, 0), 0);

	push	0
	push	1066					; 0000042aH
	push	273					; 00000111H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__PostMessageW@16

; 1596 : 
; 1597 :                     if(OSGetVersion() >= 8)

	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jl	SHORT $LN94@ConfigDesk

; 1598 :                         EnableWindow(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), TRUE);

	push	1
	push	1100					; 0000044cH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8
$LN94@ConfigDesk:

; 1599 :                     break;

	jmp	$LN147@ConfigDesk
$LN93@ConfigDesk:

; 1600 : 
; 1601 :                 case IDC_REGIONCAPTURE:
; 1602 :                     {
; 1603 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$67[ebp], eax

; 1604 : 
; 1605 :                         UINT captureType = 0;

	mov	DWORD PTR _captureType$102[ebp], 0

; 1606 :                         
; 1607 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE)

	mov	eax, DWORD PTR _info$67[ebp]
	cmp	DWORD PTR [eax+8], 123			; 0000007bH
	jne	SHORT $LN92@ConfigDesk

; 1608 :                             captureType = (SendMessage(GetDlgItem(hwnd, IDC_WINDOWCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED) ? 1 : 0;

	push	0
	push	0
	push	240					; 000000f0H
	push	1065					; 00000429H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN176@ConfigDesk
	mov	DWORD PTR tv878[ebp], 1
	jmp	SHORT $LN177@ConfigDesk
$LN176@ConfigDesk:
	mov	DWORD PTR tv878[ebp], 0
$LN177@ConfigDesk:
	mov	edx, DWORD PTR tv878[ebp]
	mov	DWORD PTR _captureType$102[ebp], edx
	jmp	SHORT $LN91@ConfigDesk
$LN92@ConfigDesk:

; 1609 :                         else if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE)

	mov	eax, DWORD PTR _info$67[ebp]
	cmp	DWORD PTR [eax+8], 144			; 00000090H
	jne	SHORT $LN90@ConfigDesk

; 1610 :                             captureType = 0;

	mov	DWORD PTR _captureType$102[ebp], 0

; 1611 :                         else

	jmp	SHORT $LN91@ConfigDesk
$LN90@ConfigDesk:

; 1612 :                             captureType = 1;

	mov	DWORD PTR _captureType$102[ebp], 1
$LN91@ConfigDesk:

; 1613 : 
; 1614 :                         BOOL bRegion = SendMessage((HWND)lParam, BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN178@ConfigDesk
	mov	DWORD PTR tv887[ebp], 1
	jmp	SHORT $LN179@ConfigDesk
$LN178@ConfigDesk:
	mov	DWORD PTR tv887[ebp], 0
$LN179@ConfigDesk:
	mov	edx, DWORD PTR tv887[ebp]
	mov	DWORD PTR _bRegion$111[ebp], edx

; 1615 : 
; 1616 :                         EnableWindow(GetDlgItem(hwnd, IDC_POSX),            bRegion);

	mov	eax, DWORD PTR _bRegion$111[ebp]
	push	eax
	push	1063					; 00000427H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1617 :                         EnableWindow(GetDlgItem(hwnd, IDC_POSY),            bRegion);

	mov	edx, DWORD PTR _bRegion$111[ebp]
	push	edx
	push	1064					; 00000428H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1618 :                         EnableWindow(GetDlgItem(hwnd, IDC_SIZEX),           bRegion);

	mov	ecx, DWORD PTR _bRegion$111[ebp]
	push	ecx
	push	1033					; 00000409H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1619 :                         EnableWindow(GetDlgItem(hwnd, IDC_SIZEY),           bRegion);

	mov	eax, DWORD PTR _bRegion$111[ebp]
	push	eax
	push	1034					; 0000040aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1620 :                         EnableWindow(GetDlgItem(hwnd, IDC_SELECTREGION),    bRegion);

	mov	edx, DWORD PTR _bRegion$111[ebp]
	push	edx
	push	1071					; 0000042fH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1621 : 
; 1622 :                         if(!bRegion)

	cmp	DWORD PTR _bRegion$111[ebp], 0
	jne	SHORT $LN88@ConfigDesk

; 1623 :                         {
; 1624 :                             if(captureType == 0)

	cmp	DWORD PTR _captureType$102[ebp], 0
	jne	SHORT $LN87@ConfigDesk

; 1625 :                                 PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_MONITOR, 0), 0);

	push	0
	push	1019					; 000003fbH
	push	273					; 00000111H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__PostMessageW@16

; 1626 :                             else

	jmp	SHORT $LN88@ConfigDesk
$LN87@ConfigDesk:

; 1627 :                                 PostMessage(hwnd, WM_COMMAND, MAKEWPARAM(IDC_WINDOW, 0), 0);

	push	0
	push	1066					; 0000042aH
	push	273					; 00000111H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__PostMessageW@16
$LN88@ConfigDesk:

; 1628 :                         }
; 1629 :                         break;

	jmp	$LN147@ConfigDesk
$LN85@ConfigDesk:

; 1630 :                     }
; 1631 : 
; 1632 :                 case IDC_SELECTREGION:
; 1633 :                     {
; 1634 :                         UINT posX, posY, sizeX, sizeY;
; 1635 :                         posX  = GetEditText(GetDlgItem(hwnd, IDC_POSX)).ToInt();

	push	10					; 0000000aH
	push	1063					; 00000427H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR $T8[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _posX$93[ebp], eax
	lea	ecx, DWORD PTR $T8[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1636 :                         posY  = GetEditText(GetDlgItem(hwnd, IDC_POSY)).ToInt();

	push	10					; 0000000aH
	push	1064					; 00000428H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR $T14[ebp]
	push	eax
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _posY$83[ebp], eax
	lea	ecx, DWORD PTR $T14[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1637 :                         sizeX = GetEditText(GetDlgItem(hwnd, IDC_SIZEX)).ToInt();

	push	10					; 0000000aH
	push	1033					; 00000409H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR $T4[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeX$63[ebp], eax
	lea	ecx, DWORD PTR $T4[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1638 :                         sizeY = GetEditText(GetDlgItem(hwnd, IDC_SIZEY)).ToInt();

	push	10					; 0000000aH
	push	1034					; 0000040aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR $T12[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeY$50[ebp], eax
	lea	ecx, DWORD PTR $T12[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1639 : 
; 1640 :                         //--------------------------------------------
; 1641 : 
; 1642 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$104[ebp], eax

; 1643 : 
; 1644 :                         UINT captureType = 0;

	mov	DWORD PTR _captureType$100[ebp], 0

; 1645 :                         
; 1646 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE)

	mov	eax, DWORD PTR _info$104[ebp]
	cmp	DWORD PTR [eax+8], 123			; 0000007bH
	jne	SHORT $LN84@ConfigDesk

; 1647 :                             captureType = (SendMessage(GetDlgItem(hwnd, IDC_WINDOWCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED) ? 1 : 0;

	push	0
	push	0
	push	240					; 000000f0H
	push	1065					; 00000429H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN180@ConfigDesk
	mov	DWORD PTR tv1013[ebp], 1
	jmp	SHORT $LN181@ConfigDesk
$LN180@ConfigDesk:
	mov	DWORD PTR tv1013[ebp], 0
$LN181@ConfigDesk:
	mov	edx, DWORD PTR tv1013[ebp]
	mov	DWORD PTR _captureType$100[ebp], edx
	jmp	SHORT $LN83@ConfigDesk
$LN84@ConfigDesk:

; 1648 :                         else if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE)

	mov	eax, DWORD PTR _info$104[ebp]
	cmp	DWORD PTR [eax+8], 144			; 00000090H
	jne	SHORT $LN82@ConfigDesk

; 1649 :                             captureType = 0;

	mov	DWORD PTR _captureType$100[ebp], 0

; 1650 :                         else

	jmp	SHORT $LN83@ConfigDesk
$LN82@ConfigDesk:

; 1651 :                             captureType = 1;

	mov	DWORD PTR _captureType$100[ebp], 1
$LN83@ConfigDesk:

; 1652 : 
; 1653 :                         BOOL bRegion = (SendMessage(GetDlgItem(hwnd, IDC_REGIONCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED);

	push	0
	push	0
	push	240					; 000000f0H
	push	1062					; 00000426H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN182@ConfigDesk
	mov	DWORD PTR tv1025[ebp], 1
	jmp	SHORT $LN183@ConfigDesk
$LN182@ConfigDesk:
	mov	DWORD PTR tv1025[ebp], 0
$LN183@ConfigDesk:
	mov	edx, DWORD PTR tv1025[ebp]
	mov	DWORD PTR _bRegion$52[ebp], edx

; 1654 : 
; 1655 :                         if(bRegion && captureType == 1)

	cmp	DWORD PTR _bRegion$52[ebp], 0
	je	$LN80@ConfigDesk
	cmp	DWORD PTR _captureType$100[ebp], 1
	jne	$LN80@ConfigDesk

; 1656 :                         {
; 1657 :                             UINT windowID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_WINDOW), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1066					; 0000042aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _windowID$117[ebp], eax

; 1658 :                             if(windowID == CB_ERR) windowID = 0;

	cmp	DWORD PTR _windowID$117[ebp], -1
	jne	SHORT $LN79@ConfigDesk
	mov	DWORD PTR _windowID$117[ebp], 0
$LN79@ConfigDesk:

; 1659 : 
; 1660 :                             if(windowID >= info->strClasses.Num())

	mov	ecx, DWORD PTR _info$104[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _windowID$117[ebp], eax
	jb	SHORT $LN78@ConfigDesk

; 1661 :                             {
; 1662 :                                 OBSMessageBox(hwnd, Str("Sources.SoftwareCaptureSource.WindowNotFound"), NULL, 0);

	push	0
	push	0
	push	OFFSET $SG4294889954
	mov	ecx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1663 :                                 break;

	jmp	$LN147@ConfigDesk
$LN78@ConfigDesk:

; 1664 :                             }
; 1665 : 
; 1666 :                             String strWindow = GetCBText(GetDlgItem(hwnd, IDC_WINDOW), windowID);

	mov	eax, DWORD PTR _windowID$117[ebp]
	push	eax
	push	1066					; 0000042aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR _strWindow$64[ebp]
	push	edx
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH

; 1667 : 
; 1668 :                             zero(&regionWindowData, sizeof(regionWindowData));

	push	36					; 00000024H
	push	OFFSET ?regionWindowData@@3URegionWindowData@@A ; regionWindowData
	call	?zero@@YGXPAXI@Z			; zero

; 1669 : 
; 1670 :                             regionWindowData.hwndCaptureWindow = FindWindow(info->strClasses[windowID], strWindow);

	lea	ecx, DWORD PTR _strWindow$64[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	mov	eax, DWORD PTR _windowID$117[ebp]
	push	eax
	mov	ecx, DWORD PTR _info$104[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, eax

; 1671 :                             if(!regionWindowData.hwndCaptureWindow)

	cmp	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, 0
	jne	SHORT $LN77@ConfigDesk

; 1672 :                             {
; 1673 :                                 HWND hwndLastKnownHWND = (HWND)SendMessage(GetDlgItem(hwnd, IDC_WINDOW), CB_GETITEMDATA, windowID, 0);

	push	0
	mov	ecx, DWORD PTR _windowID$117[ebp]
	push	ecx
	push	336					; 00000150H
	push	1066					; 0000042aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _hwndLastKnownHWND$75[ebp], eax

; 1674 :                                 if(IsWindow(hwndLastKnownHWND))

	mov	eax, DWORD PTR _hwndLastKnownHWND$75[ebp]
	push	eax
	call	DWORD PTR __imp__IsWindow@4
	test	eax, eax
	je	SHORT $LN76@ConfigDesk

; 1675 :                                     regionWindowData.hwndCaptureWindow = hwndLastKnownHWND;

	mov	ecx, DWORD PTR _hwndLastKnownHWND$75[ebp]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, ecx

; 1676 :                                 else

	jmp	SHORT $LN77@ConfigDesk
$LN76@ConfigDesk:

; 1677 :                                     regionWindowData.hwndCaptureWindow = FindWindow(info->strClasses[windowID], NULL);

	push	0
	mov	edx, DWORD PTR _windowID$117[ebp]
	push	edx
	mov	ecx, DWORD PTR _info$104[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR __imp__FindWindowW@8
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, eax
$LN77@ConfigDesk:

; 1678 :                             }
; 1679 : 
; 1680 :                             if(!regionWindowData.hwndCaptureWindow)

	cmp	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, 0
	jne	SHORT $LN74@ConfigDesk

; 1681 :                             {
; 1682 :                                 OBSMessageBox(hwnd, Str("Sources.SoftwareCaptureSource.WindowNotFound"), NULL, 0);

	push	0
	push	0
	push	OFFSET $SG4294889953
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1683 :                                 break;

	lea	ecx, DWORD PTR _strWindow$64[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN147@ConfigDesk
	jmp	SHORT $LN73@ConfigDesk
$LN74@ConfigDesk:

; 1684 :                             }
; 1685 :                             else if(IsIconic(regionWindowData.hwndCaptureWindow))

	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4
	push	edx
	call	DWORD PTR __imp__IsIconic@4
	test	eax, eax
	je	SHORT $LN73@ConfigDesk

; 1686 :                             {
; 1687 :                                 OBSMessageBox(hwnd, Str("Sources.SoftwareCaptureSource.WindowMinimized"), NULL, 0);

	push	0
	push	0
	push	OFFSET $SG4294889952
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 1688 :                                 break;

	lea	ecx, DWORD PTR _strWindow$64[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN147@ConfigDesk
$LN73@ConfigDesk:

; 1689 :                             }
; 1690 : 
; 1691 :                             regionWindowData.bInnerWindowRegion = SendMessage(GetDlgItem(hwnd, IDC_INNERWINDOW), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1069					; 0000042dH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN184@ConfigDesk
	mov	DWORD PTR tv1161[ebp], 1
	jmp	SHORT $LN185@ConfigDesk
$LN184@ConfigDesk:
	mov	DWORD PTR tv1161[ebp], 0
$LN185@ConfigDesk:
	mov	al, BYTE PTR tv1161[ebp]
	mov	BYTE PTR ?regionWindowData@@3URegionWindowData@@A+33, al

; 1692 : 
; 1693 :                             if(regionWindowData.bInnerWindowRegion)

	movzx	ecx, BYTE PTR ?regionWindowData@@3URegionWindowData@@A+33
	test	ecx, ecx
	je	SHORT $LN71@ConfigDesk

; 1694 :                             {
; 1695 :                                 GetClientRect(regionWindowData.hwndCaptureWindow, &regionWindowData.captureRect);

	push	OFFSET ?regionWindowData@@3URegionWindowData@@A+16
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4
	push	edx
	call	DWORD PTR __imp__GetClientRect@8

; 1696 :                                 ClientToScreen(regionWindowData.hwndCaptureWindow, (POINT*)&regionWindowData.captureRect);

	push	OFFSET ?regionWindowData@@3URegionWindowData@@A+16
	mov	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4
	push	eax
	call	DWORD PTR __imp__ClientToScreen@8

; 1697 :                                 ClientToScreen(regionWindowData.hwndCaptureWindow, (POINT*)&regionWindowData.captureRect.right);

	push	OFFSET ?regionWindowData@@3URegionWindowData@@A+24
	mov	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4
	push	ecx
	call	DWORD PTR __imp__ClientToScreen@8

; 1698 :                             }
; 1699 :                             else

	jmp	SHORT $LN70@ConfigDesk
$LN71@ConfigDesk:

; 1700 :                                 GetWindowRect(regionWindowData.hwndCaptureWindow, &regionWindowData.captureRect);

	push	OFFSET ?regionWindowData@@3URegionWindowData@@A+16
	mov	edx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4
	push	edx
	call	DWORD PTR __imp__GetWindowRect@8
$LN70@ConfigDesk:

; 1701 : 
; 1702 :                             posX += regionWindowData.captureRect.left;

	mov	eax, DWORD PTR _posX$93[ebp]
	add	eax, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16
	mov	DWORD PTR _posX$93[ebp], eax

; 1703 :                             posY += regionWindowData.captureRect.top;

	mov	ecx, DWORD PTR _posY$83[ebp]
	add	ecx, DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20
	mov	DWORD PTR _posY$83[ebp], ecx

; 1704 :                         }

	lea	ecx, DWORD PTR _strWindow$64[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1705 :                         else

	jmp	$LN69@ConfigDesk
$LN80@ConfigDesk:

; 1706 :                         {
; 1707 :                             UINT monitorID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_MONITOR), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1019					; 000003fbH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _monitorID$89[ebp], eax

; 1708 :                             if(monitorID == CB_ERR) monitorID = 0;

	cmp	DWORD PTR _monitorID$89[ebp], -1
	jne	SHORT $LN68@ConfigDesk
	mov	DWORD PTR _monitorID$89[ebp], 0
$LN68@ConfigDesk:

; 1709 : 
; 1710 :                             const MonitorInfo &monitor = App->GetMonitor(monitorID);

	mov	eax, DWORD PTR _monitorID$89[ebp]
	push	eax
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z	; OBS::GetMonitor
	mov	DWORD PTR _monitor$32[ebp], eax

; 1711 :                             regionWindowData.hwndCaptureWindow = NULL;

	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+4, 0

; 1712 :                             mcpy(&regionWindowData.captureRect, &monitor.rect, sizeof(RECT));

	mov	ecx, DWORD PTR _monitor$32[ebp]
	add	ecx, 4
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+16, edx
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+20, eax
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+24, edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A+28, eax
$LN69@ConfigDesk:

; 1713 :                         }
; 1714 : 
; 1715 :                         //--------------------------------------------
; 1716 : 
; 1717 :                         regionWindowData.hwndConfigDialog = hwnd;

	mov	ecx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR ?regionWindowData@@3URegionWindowData@@A, ecx

; 1718 :                         HWND hwndRegion = CreateWindowEx(WS_EX_TOPMOST, CAPTUREREGIONCLASS, NULL, WS_POPUP|WS_VISIBLE, posX, posY, sizeX, sizeY, hwnd, NULL, hinstMain, NULL);

	push	0
	mov	edx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	edx
	push	0
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _sizeY$50[ebp]
	push	ecx
	mov	edx, DWORD PTR _sizeX$63[ebp]
	push	edx
	mov	eax, DWORD PTR _posY$83[ebp]
	push	eax
	mov	ecx, DWORD PTR _posX$93[ebp]
	push	ecx
	push	-1879048192				; 90000000H
	push	0
	push	OFFSET $SG4294889951
	push	8
	call	_IsolationAwareCreateWindowExW@48
	mov	DWORD PTR _hwndRegion$79[ebp], eax

; 1719 : 
; 1720 :                         //everyone better thank homeworld for this
; 1721 :                         SetWindowLongW(hwndRegion, GWL_EXSTYLE, GetWindowLong(hwndRegion, GWL_EXSTYLE) | WS_EX_LAYERED);

	push	-20					; ffffffecH
	mov	edx, DWORD PTR _hwndRegion$79[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	or	eax, 524288				; 00080000H
	push	eax
	push	-20					; ffffffecH
	mov	eax, DWORD PTR _hwndRegion$79[ebp]
	push	eax
	call	DWORD PTR __imp__SetWindowLongW@12

; 1722 :                         SetLayeredWindowAttributes(hwndRegion, 0x000000, 0xC0, LWA_ALPHA);

	push	2
	push	192					; 000000c0H
	push	0
	mov	ecx, DWORD PTR _hwndRegion$79[ebp]
	push	ecx
	call	DWORD PTR __imp__SetLayeredWindowAttributes@16

; 1723 :                         break;

	jmp	$LN147@ConfigDesk
$LN67@ConfigDesk:

; 1724 :                     }
; 1725 : 
; 1726 :                 case IDC_SETSTREAMSIZE:
; 1727 :                     if (MessageBoxW(hwnd, Str("Sources.SoftwareCaptureSource.ResizeWarning"), Str("Sources.SoftwareCaptureSource.ResizeWarningTitle"), MB_YESNO | MB_ICONWARNING) == IDYES)

	push	52					; 00000034H
	push	OFFSET $SG4294889950
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	push	OFFSET $SG4294889949
	mov	eax, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__MessageBoxW@16
	cmp	eax, 6
	jne	$LN66@ConfigDesk

; 1728 :                     {
; 1729 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$28[ebp], eax

; 1730 : 
; 1731 :                         UINT sizeX = (UINT)GetEditText(GetDlgItem(hwnd, IDC_SIZEX)).ToInt();

	push	10					; 0000000aH
	push	1033					; 00000409H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR $T6[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeX$107[ebp], eax
	lea	ecx, DWORD PTR $T6[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1732 :                         UINT sizeY = (UINT)GetEditText(GetDlgItem(hwnd, IDC_SIZEY)).ToInt();

	push	10					; 0000000aH
	push	1034					; 0000040aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR $T20[ebp]
	push	eax
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeY$105[ebp], eax
	lea	ecx, DWORD PTR $T20[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1733 : 
; 1734 :                         if(sizeX < 128)

	cmp	DWORD PTR _sizeX$107[ebp], 128		; 00000080H
	jae	SHORT $LN65@ConfigDesk

; 1735 :                             sizeX = 128;

	mov	DWORD PTR _sizeX$107[ebp], 128		; 00000080H
	jmp	SHORT $LN64@ConfigDesk
$LN65@ConfigDesk:

; 1736 :                         else if(sizeX > 4096)

	cmp	DWORD PTR _sizeX$107[ebp], 4096		; 00001000H
	jbe	SHORT $LN64@ConfigDesk

; 1737 :                             sizeX = 4096;

	mov	DWORD PTR _sizeX$107[ebp], 4096		; 00001000H
$LN64@ConfigDesk:

; 1738 : 
; 1739 :                         if(sizeY < 128)

	cmp	DWORD PTR _sizeY$105[ebp], 128		; 00000080H
	jae	SHORT $LN62@ConfigDesk

; 1740 :                             sizeY = 128;

	mov	DWORD PTR _sizeY$105[ebp], 128		; 00000080H
	jmp	SHORT $LN61@ConfigDesk
$LN62@ConfigDesk:

; 1741 :                         else if(sizeY > 4096)

	cmp	DWORD PTR _sizeY$105[ebp], 4096		; 00001000H
	jbe	SHORT $LN61@ConfigDesk

; 1742 :                             sizeY = 4096;

	mov	DWORD PTR _sizeY$105[ebp], 4096		; 00001000H
$LN61@ConfigDesk:

; 1743 : 
; 1744 :                         AppConfig->SetInt(TEXT("Video"), TEXT("BaseWidth"), sizeX);

	mov	ecx, DWORD PTR _sizeX$107[ebp]
	push	ecx
	push	OFFSET $SG4294889948
	push	OFFSET $SG4294889947
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 1745 :                         AppConfig->SetInt(TEXT("Video"), TEXT("BaseHeight"), sizeY);

	mov	edx, DWORD PTR _sizeY$105[ebp]
	push	edx
	push	OFFSET $SG4294889946
	push	OFFSET $SG4294889945
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 1746 : 
; 1747 :                         if(!App->IsRunning())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?IsRunning@OBS@@QBE_NXZ			; OBS::IsRunning
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN59@ConfigDesk

; 1748 :                             App->ResizeWindow(false);

	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?ResizeWindow@OBS@@QAEX_N@Z		; OBS::ResizeWindow
$LN59@ConfigDesk:

; 1749 : 
; 1750 :                         info->sizeSet = true;

	mov	ecx, DWORD PTR _info$28[ebp]
	mov	BYTE PTR [ecx+28], 1
$LN66@ConfigDesk:

; 1751 :                     }
; 1752 :                     break;

	jmp	$LN147@ConfigDesk
$LN58@ConfigDesk:

; 1753 : 
; 1754 :                 case IDC_MONITOR:
; 1755 :                     {
; 1756 :                         if (!lParam || HIWORD(wParam) == CBN_SELCHANGE) {

	cmp	DWORD PTR _lParam$[ebp], 0
	je	SHORT $LN56@ConfigDesk
	mov	edx, DWORD PTR _wParam$[ebp]
	shr	edx, 16					; 00000010H
	movzx	eax, dx
	cmp	eax, 1
	jne	$LN57@ConfigDesk
$LN56@ConfigDesk:

; 1757 :                             UINT id = (UINT) SendMessage(GetDlgItem(hwnd, IDC_MONITOR), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1019					; 000003fbH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _id$47[ebp], eax

; 1758 :                             const MonitorInfo &monitor = App->GetMonitor(id);

	mov	edx, DWORD PTR _id$47[ebp]
	push	edx
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?GetMonitor@OBS@@QBEABUMonitorInfo@@I@Z	; OBS::GetMonitor
	mov	DWORD PTR _monitor$109[ebp], eax

; 1759 : 
; 1760 :                             UINT x, y, cx, cy;
; 1761 :                             x = monitor.rect.left;

	mov	eax, DWORD PTR _monitor$109[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _x$25[ebp], ecx

; 1762 :                             y = monitor.rect.top;

	mov	edx, DWORD PTR _monitor$109[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _y$45[ebp], eax

; 1763 :                             cx = monitor.rect.right - monitor.rect.left;

	mov	ecx, DWORD PTR _monitor$109[ebp]
	mov	edx, DWORD PTR _monitor$109[ebp]
	mov	eax, DWORD PTR [ecx+12]
	sub	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _cx$85[ebp], eax

; 1764 :                             cy = monitor.rect.bottom - monitor.rect.top;

	mov	ecx, DWORD PTR _monitor$109[ebp]
	mov	edx, DWORD PTR _monitor$109[ebp]
	mov	eax, DWORD PTR [ecx+16]
	sub	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _cy$81[ebp], eax

; 1765 : 
; 1766 :                             if (cx < 16)

	cmp	DWORD PTR _cx$85[ebp], 16		; 00000010H
	jae	SHORT $LN55@ConfigDesk

; 1767 :                                 cx = 16;

	mov	DWORD PTR _cx$85[ebp], 16		; 00000010H
$LN55@ConfigDesk:

; 1768 :                             if (cy < 16)

	cmp	DWORD PTR _cy$81[ebp], 16		; 00000010H
	jae	SHORT $LN54@ConfigDesk

; 1769 :                                 cy = 16;

	mov	DWORD PTR _cy$81[ebp], 16		; 00000010H
$LN54@ConfigDesk:

; 1770 : 
; 1771 :                             SetWindowText(GetDlgItem(hwnd, IDC_POSX), IntString(x).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _x$25[ebp]
	push	ecx
	lea	edx, DWORD PTR $T19[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1063					; 00000427H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T19[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1772 :                             SetWindowText(GetDlgItem(hwnd, IDC_POSY), IntString(y).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _y$45[ebp]
	push	ecx
	lea	edx, DWORD PTR $T17[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1064					; 00000428H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T17[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1773 :                             SetWindowText(GetDlgItem(hwnd, IDC_SIZEX), IntString(cx).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _cx$85[ebp]
	push	ecx
	lea	edx, DWORD PTR $T15[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1033					; 00000409H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T15[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1774 :                             SetWindowText(GetDlgItem(hwnd, IDC_SIZEY), IntString(cy).Array());

	push	10					; 0000000aH
	mov	ecx, DWORD PTR _cy$81[ebp]
	push	ecx
	lea	edx, DWORD PTR $T13[ebp]
	push	edx
	call	DWORD PTR __imp_?IntString@@YA?AVString@@HH@Z
	add	esp, 12					; 0000000cH
	mov	ecx, eax
	call	DWORD PTR __imp_?Array@String@@QBEPA_WXZ
	push	eax
	push	1034					; 0000040aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
	lea	ecx, DWORD PTR $T13[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN57@ConfigDesk:

; 1775 :                         }
; 1776 :                         break;

	jmp	$LN147@ConfigDesk
$LN53@ConfigDesk:

; 1777 :                     }
; 1778 : 
; 1779 :                 case IDC_WINDOW:
; 1780 :                 case IDC_OUTERWINDOW:
; 1781 :                 case IDC_INNERWINDOW:
; 1782 :                     SelectTargetWindow(hwnd, HIWORD(wParam)==CBN_SELCHANGE);

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 1
	jne	SHORT $LN186@ConfigDesk
	mov	BYTE PTR tv1393[ebp], 1
	jmp	SHORT $LN187@ConfigDesk
$LN186@ConfigDesk:
	mov	BYTE PTR tv1393[ebp], 0
$LN187@ConfigDesk:
	movzx	eax, BYTE PTR tv1393[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?SelectTargetWindow@@YAXPAUHWND__@@_N@Z	; SelectTargetWindow
	add	esp, 8

; 1783 :                     break;

	jmp	$LN147@ConfigDesk
$LN52@ConfigDesk:

; 1784 : 
; 1785 :                 case IDC_REFRESH:
; 1786 :                     {
; 1787 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$74[ebp], eax

; 1788 :                         XElement *data = info->data;

	mov	eax, DWORD PTR _info$74[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _data$33[ebp], ecx

; 1789 : 
; 1790 :                         CTSTR lpWindowName = data->GetString(TEXT("window"));

	push	0
	push	OFFSET $SG4294889944
	mov	ecx, DWORD PTR _data$33[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpWindowName$92[ebp], eax

; 1791 : 
; 1792 :                         HWND hwndWindowList = GetDlgItem(hwnd, IDC_WINDOW);

	push	1066					; 0000042aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndWindowList$106[ebp], eax

; 1793 :                         RefreshWindowList(hwndWindowList, info->strClasses);

	mov	eax, DWORD PTR _info$74[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _hwndWindowList$106[ebp]
	push	ecx
	call	?RefreshWindowList@@YAXPAUHWND__@@AAVStringList@@@Z ; RefreshWindowList
	add	esp, 8

; 1794 : 
; 1795 :                         UINT windowID = 0;

	mov	DWORD PTR _windowID$84[ebp], 0

; 1796 :                         if(lpWindowName)

	cmp	DWORD PTR _lpWindowName$92[ebp], 0
	je	SHORT $LN51@ConfigDesk

; 1797 :                             windowID = (UINT)SendMessage(hwndWindowList, CB_FINDSTRINGEXACT, -1, (LPARAM)lpWindowName);

	mov	edx, DWORD PTR _lpWindowName$92[ebp]
	push	edx
	push	-1
	push	344					; 00000158H
	mov	eax, DWORD PTR _hwndWindowList$106[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _windowID$84[ebp], eax
$LN51@ConfigDesk:

; 1798 : 
; 1799 :                         if(windowID != CB_ERR)

	cmp	DWORD PTR _windowID$84[ebp], -1
	je	SHORT $LN50@ConfigDesk

; 1800 :                             SendMessage(hwndWindowList, CB_SETCURSEL, windowID, 0);

	push	0
	mov	ecx, DWORD PTR _windowID$84[ebp]
	push	ecx
	push	334					; 0000014eH
	mov	edx, DWORD PTR _hwndWindowList$106[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16

; 1801 :                         else

	jmp	SHORT $LN49@ConfigDesk
$LN50@ConfigDesk:

; 1802 :                         {
; 1803 :                             SendMessage(hwndWindowList, CB_INSERTSTRING, 0, (LPARAM)lpWindowName);

	mov	eax, DWORD PTR _lpWindowName$92[ebp]
	push	eax
	push	0
	push	330					; 0000014aH
	mov	ecx, DWORD PTR _hwndWindowList$106[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16

; 1804 :                             SendMessage(hwndWindowList, CB_SETCURSEL, 0, 0);

	push	0
	push	0
	push	334					; 0000014eH
	mov	edx, DWORD PTR _hwndWindowList$106[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
$LN49@ConfigDesk:

; 1805 :                         }
; 1806 :                         break;

	jmp	$LN147@ConfigDesk
$LN48@ConfigDesk:

; 1807 :                     }
; 1808 : 
; 1809 :                 case IDC_USECOLORKEY:
; 1810 :                     {
; 1811 :                         HWND hwndUseColorKey = (HWND)lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _hwndUseColorKey$43[ebp], eax

; 1812 :                         BOOL bUseColorKey = SendMessage(hwndUseColorKey, BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	mov	ecx, DWORD PTR _hwndUseColorKey$43[ebp]
	push	ecx
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN188@ConfigDesk
	mov	DWORD PTR tv1467[ebp], 1
	jmp	SHORT $LN189@ConfigDesk
$LN188@ConfigDesk:
	mov	DWORD PTR tv1467[ebp], 0
$LN189@ConfigDesk:
	mov	edx, DWORD PTR tv1467[ebp]
	mov	DWORD PTR _bUseColorKey$116[ebp], edx

; 1813 : 
; 1814 :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$27[ebp], eax

; 1815 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$27[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$90[ebp], eax

; 1816 :                         if(source)

	cmp	DWORD PTR _source$90[ebp], 0
	je	SHORT $LN47@ConfigDesk

; 1817 :                             source->SetInt(TEXT("useColorKey"), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$116[ebp]
	push	ecx
	push	OFFSET $SG4294889943
	mov	edx, DWORD PTR _source$90[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$90[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN47@ConfigDesk:

; 1818 : 
; 1819 :                         EnableWindow(GetDlgItem(hwnd, IDC_COLOR), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$116[ebp]
	push	eax
	push	1104					; 00000450H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1820 :                         EnableWindow(GetDlgItem(hwnd, IDC_SELECT), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$116[ebp]
	push	edx
	push	1125					; 00000465H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1821 :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$116[ebp]
	push	ecx
	push	1020					; 000003fcH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1822 :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$116[ebp]
	push	eax
	push	1021					; 000003fdH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1823 :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$116[ebp]
	push	edx
	push	1022					; 000003feH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1824 :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$116[ebp]
	push	ecx
	push	1023					; 000003ffH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 1825 :                         break;

	jmp	$LN147@ConfigDesk
$LN46@ConfigDesk:

; 1826 :                     }
; 1827 : 
; 1828 :                 case IDC_COLOR:
; 1829 :                     {
; 1830 :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$41[ebp], eax

; 1831 :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$41[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$88[ebp], eax

; 1832 : 
; 1833 :                         if(source)

	cmp	DWORD PTR _source$88[ebp], 0
	je	SHORT $LN45@ConfigDesk

; 1834 :                         {
; 1835 :                             DWORD color = CCGetColor((HWND)lParam);

	mov	ecx, DWORD PTR _lParam$[ebp]
	push	ecx
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _color$31[ebp], eax

; 1836 :                             source->SetInt(TEXT("keyColor"), color);

	mov	edx, DWORD PTR _color$31[ebp]
	push	edx
	push	OFFSET $SG4294889942
	mov	eax, DWORD PTR _source$88[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$88[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN45@ConfigDesk:

; 1837 :                         }
; 1838 :                         break;

	jmp	$LN147@ConfigDesk
$LN44@ConfigDesk:

; 1839 :                     }
; 1840 : 
; 1841 :                 case IDC_SELECT:
; 1842 :                     {
; 1843 :                         if(!bSelectingColor)

	movzx	ecx, BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	jne	$LN43@ConfigDesk

; 1844 :                         {
; 1845 :                             if(colorData.Init())

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Init@ColorSelectionData@@QAE_NXZ	; ColorSelectionData::Init
	movzx	edx, al
	test	edx, edx
	je	$LN42@ConfigDesk

; 1846 :                             {
; 1847 :                                 bMouseDown = false;

	mov	BYTE PTR ?bMouseDown@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 1848 :                                 bSelectingColor = true;

	mov	BYTE PTR ?bSelectingColor@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1

; 1849 :                                 SetCapture(hwnd);

	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4

; 1850 :                                 HCURSOR hCursor = (HCURSOR)LoadImage(hinstMain, MAKEINTRESOURCE(IDC_COLORPICKER), IMAGE_CURSOR, 32, 32, 0);

	push	0
	push	32					; 00000020H
	push	32					; 00000020H
	push	2
	push	1015					; 000003f7H
	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	ecx
	call	DWORD PTR __imp__LoadImageW@24
	mov	DWORD PTR _hCursor$39[ebp], eax

; 1851 :                                 SetCursor(hCursor);

	mov	edx, DWORD PTR _hCursor$39[ebp]
	push	edx
	call	DWORD PTR __imp__SetCursor@4

; 1852 : 
; 1853 :                                 ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$23[ebp], eax

; 1854 :                                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$23[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$86[ebp], eax

; 1855 :                                 if(source)

	cmp	DWORD PTR _source$86[ebp], 0
	je	SHORT $LN41@ConfigDesk

; 1856 :                                     source->SetInt(TEXT("useColorKey"), false);

	push	0
	push	OFFSET $SG4294889941
	mov	ecx, DWORD PTR _source$86[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$86[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN41@ConfigDesk:

; 1857 :                             }
; 1858 :                             else

	jmp	SHORT $LN43@ConfigDesk
$LN42@ConfigDesk:

; 1859 :                                 colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
$LN43@ConfigDesk:

; 1860 :                         }
; 1861 :                         break;

	jmp	$LN147@ConfigDesk
$LN39@ConfigDesk:

; 1862 :                     }
; 1863 : 
; 1864 :                 case IDC_OPACITY_EDIT:
; 1865 :                 case IDC_BASETHRESHOLD_EDIT:
; 1866 :                 case IDC_BLEND_EDIT:
; 1867 :                     if(HIWORD(wParam) == EN_CHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 768				; 00000300H
	jne	$LN38@ConfigDesk

; 1868 :                     {
; 1869 :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$73[ebp], eax

; 1870 :                         if(configData)

	cmp	DWORD PTR _configData$73[ebp], 0
	je	$LN38@ConfigDesk

; 1871 :                         {
; 1872 :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$73[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$114[ebp], eax

; 1873 : 
; 1874 :                             if(source)

	cmp	DWORD PTR _source$114[ebp], 0
	je	$LN38@ConfigDesk

; 1875 :                             {
; 1876 :                                 HWND hwndVal = NULL;

	mov	DWORD PTR _hwndVal$98[ebp], 0

; 1877 :                                 switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv1569[ebp], ecx
	cmp	DWORD PTR tv1569[ebp], 1020		; 000003fcH
	je	SHORT $LN33@ConfigDesk
	cmp	DWORD PTR tv1569[ebp], 1022		; 000003feH
	je	SHORT $LN32@ConfigDesk
	cmp	DWORD PTR tv1569[ebp], 1078		; 00000436H
	je	SHORT $LN31@ConfigDesk
	jmp	SHORT $LN34@ConfigDesk
$LN33@ConfigDesk:

; 1878 :                                 {
; 1879 :                                     case IDC_BASETHRESHOLD_EDIT:    hwndVal = GetDlgItem(hwnd, IDC_BASETHRESHOLD); break;

	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$98[ebp], eax
	jmp	SHORT $LN34@ConfigDesk
$LN32@ConfigDesk:

; 1880 :                                     case IDC_BLEND_EDIT:            hwndVal = GetDlgItem(hwnd, IDC_BLEND); break;

	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$98[ebp], eax
	jmp	SHORT $LN34@ConfigDesk
$LN31@ConfigDesk:

; 1881 :                                     case IDC_OPACITY_EDIT:          hwndVal = GetDlgItem(hwnd, IDC_OPACITY2); break;

	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$98[ebp], eax
$LN34@ConfigDesk:

; 1882 :                                 }
; 1883 : 
; 1884 :                                 int val = (int)SendMessage(hwndVal, UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	mov	edx, DWORD PTR _hwndVal$98[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _val$82[ebp], eax

; 1885 :                                 switch(LOWORD(wParam))

	movzx	eax, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv1588[ebp], eax
	cmp	DWORD PTR tv1588[ebp], 1020		; 000003fcH
	je	SHORT $LN28@ConfigDesk
	cmp	DWORD PTR tv1588[ebp], 1022		; 000003feH
	je	SHORT $LN27@ConfigDesk
	cmp	DWORD PTR tv1588[ebp], 1078		; 00000436H
	je	SHORT $LN26@ConfigDesk
	jmp	SHORT $LN38@ConfigDesk
$LN28@ConfigDesk:

; 1886 :                                 {
; 1887 :                                     case IDC_BASETHRESHOLD_EDIT:    source->SetInt(TEXT("keySimilarity"), val); break;

	mov	ecx, DWORD PTR _val$82[ebp]
	push	ecx
	push	OFFSET $SG4294889940
	mov	edx, DWORD PTR _source$114[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$114[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN38@ConfigDesk
$LN27@ConfigDesk:

; 1888 :                                     case IDC_BLEND_EDIT:            source->SetInt(TEXT("keyBlend"), val); break;

	mov	eax, DWORD PTR _val$82[ebp]
	push	eax
	push	OFFSET $SG4294889939
	mov	ecx, DWORD PTR _source$114[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$114[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	SHORT $LN38@ConfigDesk
$LN26@ConfigDesk:

; 1889 :                                     case IDC_OPACITY_EDIT:          source->SetInt(TEXT("opacity"), val); break;

	mov	ecx, DWORD PTR _val$82[ebp]
	push	ecx
	push	OFFSET $SG4294889938
	mov	edx, DWORD PTR _source$114[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$114[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN38@ConfigDesk:

; 1890 :                                 }
; 1891 :                             }
; 1892 :                         }
; 1893 :                     }
; 1894 :                     break;

	jmp	$LN147@ConfigDesk
$LN25@ConfigDesk:

; 1895 : 
; 1896 :                 case IDOK:
; 1897 :                     {
; 1898 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$120[ebp], eax

; 1899 : 
; 1900 :                         UINT captureType = 0;

	mov	DWORD PTR _captureType$119[ebp], 0

; 1901 : 
; 1902 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE) {

	mov	ecx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	jne	SHORT $LN24@ConfigDesk

; 1903 :                             if(SendMessage(GetDlgItem(hwnd, IDC_MONITORCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED)

	push	0
	push	0
	push	240					; 000000f0H
	push	1061					; 00000425H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN23@ConfigDesk

; 1904 :                                 captureType = 0;

	mov	DWORD PTR _captureType$119[ebp], 0
	jmp	SHORT $LN22@ConfigDesk
$LN23@ConfigDesk:

; 1905 :                             else if(SendMessage(GetDlgItem(hwnd, IDC_WINDOWCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED)

	push	0
	push	0
	push	240					; 000000f0H
	push	1065					; 00000429H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN22@ConfigDesk

; 1906 :                                 captureType = 1;

	mov	DWORD PTR _captureType$119[ebp], 1
$LN22@ConfigDesk:

; 1907 :                         } else if (info->dialogID == IDD_CONFIGUREMONITORCAPTURE) {

	jmp	SHORT $LN20@ConfigDesk
$LN24@ConfigDesk:
	mov	ecx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [ecx+8], 144			; 00000090H
	jne	SHORT $LN19@ConfigDesk

; 1908 :                             captureType = 0;

	mov	DWORD PTR _captureType$119[ebp], 0

; 1909 :                         } else { //IDD_CONFIGUREWINDOWCAPTURE

	jmp	SHORT $LN20@ConfigDesk
$LN19@ConfigDesk:

; 1910 :                             captureType = 1;

	mov	DWORD PTR _captureType$119[ebp], 1
$LN20@ConfigDesk:

; 1911 :                         }
; 1912 : 
; 1913 :                         BOOL bRegion = (SendMessage(GetDlgItem(hwnd, IDC_REGIONCAPTURE), BM_GETCHECK, 0, 0) == BST_CHECKED);

	push	0
	push	0
	push	240					; 000000f0H
	push	1062					; 00000426H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN190@ConfigDesk
	mov	DWORD PTR tv1641[ebp], 1
	jmp	SHORT $LN191@ConfigDesk
$LN190@ConfigDesk:
	mov	DWORD PTR tv1641[ebp], 0
$LN191@ConfigDesk:
	mov	eax, DWORD PTR tv1641[ebp]
	mov	DWORD PTR _bRegion$37[ebp], eax

; 1914 : 
; 1915 :                         UINT monitorID = 0;

	mov	DWORD PTR _monitorID$96[ebp], 0

; 1916 : 
; 1917 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE || info->dialogID == IDD_CONFIGUREMONITORCAPTURE)

	mov	ecx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	je	SHORT $LN16@ConfigDesk
	mov	edx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [edx+8], 144			; 00000090H
	jne	SHORT $LN17@ConfigDesk
$LN16@ConfigDesk:

; 1918 :                             monitorID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_MONITOR), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1019					; 000003fbH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _monitorID$96[ebp], eax
$LN17@ConfigDesk:

; 1919 :                         if(monitorID == CB_ERR) monitorID = 0;

	cmp	DWORD PTR _monitorID$96[ebp], -1
	jne	SHORT $LN15@ConfigDesk
	mov	DWORD PTR _monitorID$96[ebp], 0
$LN15@ConfigDesk:

; 1920 : 
; 1921 :                         UINT windowID = 0;

	mov	DWORD PTR _windowID$108[ebp], 0

; 1922 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE || info->dialogID == IDD_CONFIGUREWINDOWCAPTURE)

	mov	ecx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	je	SHORT $LN13@ConfigDesk
	mov	edx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [edx+8], 143			; 0000008fH
	jne	SHORT $LN14@ConfigDesk
$LN13@ConfigDesk:

; 1923 :                             windowID = (UINT)SendMessage(GetDlgItem(hwnd, IDC_WINDOW), CB_GETCURSEL, 0, 0);

	push	0
	push	0
	push	327					; 00000147H
	push	1066					; 0000042aH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _windowID$108[ebp], eax
$LN14@ConfigDesk:

; 1924 :                         if(windowID == CB_ERR) windowID = 0;

	cmp	DWORD PTR _windowID$108[ebp], -1
	jne	SHORT $LN12@ConfigDesk
	mov	DWORD PTR _windowID$108[ebp], 0
$LN12@ConfigDesk:

; 1925 : 
; 1926 :                         if(captureType == 1 && windowID >= info->strClasses.Num())

	cmp	DWORD PTR _captureType$119[ebp], 1
	jne	SHORT $LN11@ConfigDesk
	mov	ecx, DWORD PTR _info$120[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_?Num@?$List@VString@@@@QBEIXZ
	cmp	DWORD PTR _windowID$108[ebp], eax
	jb	SHORT $LN11@ConfigDesk

; 1927 :                             break;

	jmp	$LN147@ConfigDesk
$LN11@ConfigDesk:

; 1928 : 
; 1929 :                         BOOL bInnerWindow = FALSE;

	mov	DWORD PTR _bInnerWindow$70[ebp], 0

; 1930 :                         String strWindow;

	lea	ecx, DWORD PTR _strWindow$22[ebp]
	call	DWORD PTR __imp_??0String@@QAE@XZ

; 1931 : 
; 1932 :                         if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE || info->dialogID == IDD_CONFIGUREWINDOWCAPTURE) {

	mov	ecx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [ecx+8], 123			; 0000007bH
	je	SHORT $LN9@ConfigDesk
	mov	edx, DWORD PTR _info$120[ebp]
	cmp	DWORD PTR [edx+8], 143			; 0000008fH
	jne	$LN10@ConfigDesk
$LN9@ConfigDesk:

; 1933 :                             strWindow = GetCBText(GetDlgItem(hwnd, IDC_WINDOW), windowID);

	mov	eax, DWORD PTR _windowID$108[ebp]
	push	eax
	push	1066					; 0000042aH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR $T11[ebp]
	push	edx
	call	DWORD PTR __imp_?GetCBText@@YA?AVString@@PAUHWND__@@I@Z
	add	esp, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _strWindow$22[ebp]
	call	DWORD PTR __imp_??4String@@QAEAAV0@ABV0@@Z
	lea	ecx, DWORD PTR $T11[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1934 :                             bInnerWindow = SendMessage(GetDlgItem(hwnd, IDC_INNERWINDOW), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1069					; 0000042dH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN192@ConfigDesk
	mov	DWORD PTR tv1704[ebp], 1
	jmp	SHORT $LN193@ConfigDesk
$LN192@ConfigDesk:
	mov	DWORD PTR tv1704[ebp], 0
$LN193@ConfigDesk:
	mov	ecx, DWORD PTR tv1704[ebp]
	mov	DWORD PTR _bInnerWindow$70[ebp], ecx
$LN10@ConfigDesk:

; 1935 :                         }
; 1936 : 
; 1937 :                         UINT posX, posY, sizeX, sizeY;
; 1938 :                         posX  = GetEditText(GetDlgItem(hwnd, IDC_POSX)).ToInt();

	push	10					; 0000000aH
	push	1063					; 00000427H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _posX$46[ebp], eax
	lea	ecx, DWORD PTR $T9[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1939 :                         posY  = GetEditText(GetDlgItem(hwnd, IDC_POSY)).ToInt();

	push	10					; 0000000aH
	push	1064					; 00000428H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	edx, DWORD PTR $T7[ebp]
	push	edx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _posY$44[ebp], eax
	lea	ecx, DWORD PTR $T7[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1940 :                         sizeX = GetEditText(GetDlgItem(hwnd, IDC_SIZEX)).ToInt();

	push	10					; 0000000aH
	push	1033					; 00000409H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR $T5[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeX$80[ebp], eax
	lea	ecx, DWORD PTR $T5[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1941 :                         sizeY = GetEditText(GetDlgItem(hwnd, IDC_SIZEY)).ToInt();

	push	10					; 0000000aH
	push	1034					; 0000040aH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	eax, DWORD PTR $T3[ebp]
	push	eax
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8
	mov	ecx, eax
	call	DWORD PTR __imp_?ToInt@String@@QBEHH@Z
	mov	DWORD PTR _sizeY$78[ebp], eax
	lea	ecx, DWORD PTR $T3[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ

; 1942 : 
; 1943 :                         if(sizeX < 16)

	cmp	DWORD PTR _sizeX$80[ebp], 16		; 00000010H
	jae	SHORT $LN8@ConfigDesk

; 1944 :                             sizeX = 16;

	mov	DWORD PTR _sizeX$80[ebp], 16		; 00000010H
$LN8@ConfigDesk:

; 1945 :                         if(sizeY < 16)

	cmp	DWORD PTR _sizeY$78[ebp], 16		; 00000010H
	jae	SHORT $LN7@ConfigDesk

; 1946 :                             sizeY = 16;

	mov	DWORD PTR _sizeY$78[ebp], 16		; 00000010H
$LN7@ConfigDesk:

; 1947 : 
; 1948 :                         BOOL bCaptureLayered = FALSE;

	mov	DWORD PTR _bCaptureLayered$69[ebp], 0

; 1949 :                         BOOL bCaptureMouse = SendMessage(GetDlgItem(hwnd, IDC_CAPTUREMOUSE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN194@ConfigDesk
	mov	DWORD PTR tv1792[ebp], 1
	jmp	SHORT $LN195@ConfigDesk
$LN194@ConfigDesk:
	mov	DWORD PTR tv1792[ebp], 0
$LN195@ConfigDesk:
	mov	edx, DWORD PTR tv1792[ebp]
	mov	DWORD PTR _bCaptureMouse$29[ebp], edx

; 1950 :                         //if (info->dialogID == IDD_CONFIGUREDESKTOPSOURCE || info->dialogID == IDD_CONFIGUREMONITORCAPTURE)
; 1951 :                             bCaptureLayered = SendMessage(GetDlgItem(hwnd, IDC_CAPTURELAYERED), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1099					; 0000044bH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN196@ConfigDesk
	mov	DWORD PTR tv1802[ebp], 1
	jmp	SHORT $LN197@ConfigDesk
$LN196@ConfigDesk:
	mov	DWORD PTR tv1802[ebp], 0
$LN197@ConfigDesk:
	mov	ecx, DWORD PTR tv1802[ebp]
	mov	DWORD PTR _bCaptureLayered$69[ebp], ecx

; 1952 :                         BOOL bCompatibilityMode = SendMessage(GetDlgItem(hwnd, IDC_COMPATIBILITYMODE), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1100					; 0000044cH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN198@ConfigDesk
	mov	DWORD PTR tv1812[ebp], 1
	jmp	SHORT $LN199@ConfigDesk
$LN198@ConfigDesk:
	mov	DWORD PTR tv1812[ebp], 0
$LN199@ConfigDesk:
	mov	eax, DWORD PTR tv1812[ebp]
	mov	DWORD PTR _bCompatibilityMode$49[ebp], eax

; 1953 :                         BOOL bUsePointFiltering = SendMessage(GetDlgItem(hwnd, IDC_POINTFILTERING), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1036					; 0000040cH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN200@ConfigDesk
	mov	DWORD PTR tv1822[ebp], 1
	jmp	SHORT $LN201@ConfigDesk
$LN200@ConfigDesk:
	mov	DWORD PTR tv1822[ebp], 0
$LN201@ConfigDesk:
	mov	edx, DWORD PTR tv1822[ebp]
	mov	DWORD PTR _bUsePointFiltering$48[ebp], edx

; 1954 : 
; 1955 :                         //---------------------------------
; 1956 : 
; 1957 :                         XElement *data = info->data;

	mov	eax, DWORD PTR _info$120[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _data$124[ebp], ecx

; 1958 : 
; 1959 :                         data->SetInt(TEXT("captureType"),   captureType);

	mov	edx, DWORD PTR _captureType$119[ebp]
	push	edx
	push	OFFSET $SG4294889937
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1960 : 
; 1961 :                         data->SetInt(TEXT("monitor"),       monitorID);

	mov	eax, DWORD PTR _monitorID$96[ebp]
	push	eax
	push	OFFSET $SG4294889936
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1962 : 
; 1963 :                         if(captureType == 1)

	cmp	DWORD PTR _captureType$119[ebp], 1
	jne	SHORT $LN6@ConfigDesk

; 1964 :                         {
; 1965 :                             data->SetString(TEXT("window"),     strWindow);

	lea	ecx, DWORD PTR _strWindow$22[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294889935
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 1966 :                             data->SetString(TEXT("windowClass"),info->strClasses[windowID]);

	mov	ecx, DWORD PTR _windowID$108[ebp]
	push	ecx
	mov	ecx, DWORD PTR _info$120[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??A?$List@VString@@@@QAEAAVString@@I@Z
	mov	ecx, eax
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294889934
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z
$LN6@ConfigDesk:

; 1967 :                         }
; 1968 : 
; 1969 :                         data->SetInt(TEXT("innerWindow"),   bInnerWindow);

	mov	edx, DWORD PTR _bInnerWindow$70[ebp]
	push	edx
	push	OFFSET $SG4294889933
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1970 : 
; 1971 :                         data->SetInt(TEXT("regionCapture"), bRegion);

	mov	eax, DWORD PTR _bRegion$37[ebp]
	push	eax
	push	OFFSET $SG4294889932
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1972 : 
; 1973 :                         data->SetInt(TEXT("captureMouse"),  bCaptureMouse);

	mov	ecx, DWORD PTR _bCaptureMouse$29[ebp]
	push	ecx
	push	OFFSET $SG4294889931
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1974 : 
; 1975 :                         data->SetInt(TEXT("captureLayered"), bCaptureLayered);

	mov	edx, DWORD PTR _bCaptureLayered$69[ebp]
	push	edx
	push	OFFSET $SG4294889930
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1976 : 
; 1977 :                         data->SetInt(TEXT("compatibilityMode"), bCompatibilityMode);

	mov	eax, DWORD PTR _bCompatibilityMode$49[ebp]
	push	eax
	push	OFFSET $SG4294889929
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1978 : 
; 1979 :                         data->SetInt(TEXT("usePointFiltering"), bUsePointFiltering);

	mov	ecx, DWORD PTR _bUsePointFiltering$48[ebp]
	push	ecx
	push	OFFSET $SG4294889928
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1980 : 
; 1981 :                         data->SetInt(TEXT("captureX"),      posX);

	mov	edx, DWORD PTR _posX$46[ebp]
	push	edx
	push	OFFSET $SG4294889927
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1982 :                         data->SetInt(TEXT("captureY"),      posY);

	mov	eax, DWORD PTR _posY$44[ebp]
	push	eax
	push	OFFSET $SG4294889926
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1983 :                         data->SetInt(TEXT("captureCX"),     sizeX);

	mov	ecx, DWORD PTR _sizeX$80[ebp]
	push	ecx
	push	OFFSET $SG4294889925
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1984 :                         data->SetInt(TEXT("captureCY"),     sizeY);

	mov	edx, DWORD PTR _sizeY$78[ebp]
	push	edx
	push	OFFSET $SG4294889924
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1985 : 
; 1986 :                         //---------------------------------
; 1987 : 
; 1988 :                         BOOL  bUseColorKey  = SendMessage(GetDlgItem(hwnd, IDC_USECOLORKEY), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1017					; 000003f9H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN202@ConfigDesk
	mov	DWORD PTR tv1888[ebp], 1
	jmp	SHORT $LN203@ConfigDesk
$LN202@ConfigDesk:
	mov	DWORD PTR tv1888[ebp], 0
$LN203@ConfigDesk:
	mov	ecx, DWORD PTR tv1888[ebp]
	mov	DWORD PTR _bUseColorKey$62[ebp], ecx

; 1989 :                         DWORD keyColor      = CCGetColor(GetDlgItem(hwnd, IDC_COLOR));

	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _keyColor$61[ebp], eax

; 1990 :                         UINT  keySimilarity = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1021					; 000003fdH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _keySimilarity$59[ebp], eax

; 1991 :                         UINT  keyBlend      = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1023					; 000003ffH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _keyBlend$57[ebp], eax

; 1992 : 
; 1993 :                         data->SetInt(TEXT("useColorKey"), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$62[ebp]
	push	edx
	push	OFFSET $SG4294889923
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1994 :                         data->SetInt(TEXT("keyColor"), keyColor);

	mov	eax, DWORD PTR _keyColor$61[ebp]
	push	eax
	push	OFFSET $SG4294889922
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1995 :                         data->SetInt(TEXT("keySimilarity"), keySimilarity);

	mov	ecx, DWORD PTR _keySimilarity$59[ebp]
	push	ecx
	push	OFFSET $SG4294889921
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1996 :                         data->SetInt(TEXT("keyBlend"), keyBlend);

	mov	edx, DWORD PTR _keyBlend$57[ebp]
	push	edx
	push	OFFSET $SG4294889920
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 1997 : 
; 1998 :                         //---------------------------------
; 1999 : 
; 2000 :                         UINT opacity = (UINT)SendMessage(GetDlgItem(hwnd, IDC_OPACITY2), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1042					; 00000412H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _opacity$55[ebp], eax

; 2001 :                         data->SetInt(TEXT("opacity"), opacity);

	mov	ecx, DWORD PTR _opacity$55[ebp]
	push	ecx
	push	OFFSET $SG4294889919
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 2002 : 
; 2003 :                         //---------------------------------
; 2004 : 
; 2005 :                         int gamma = (int)SendMessage(GetDlgItem(hwnd, IDC_GAMMA), TBM_GETPOS, 0, 0);

	push	0
	push	0
	push	1024					; 00000400H
	push	1035					; 0000040bH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _gamma$53[ebp], eax

; 2006 :                         data->SetInt(TEXT("gamma"), gamma);

	mov	eax, DWORD PTR _gamma$53[ebp]
	push	eax
	push	OFFSET $SG4294889918
	mov	ecx, DWORD PTR _data$124[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 2007 : 
; 2008 :                         if (captureType == 0 && OSGetVersion() < 8)

	cmp	DWORD PTR _captureType$119[ebp], 0
	jne	SHORT $LN5@ConfigDesk
	call	DWORD PTR __imp_?OSGetVersion@@YGHXZ
	cmp	eax, 8
	jge	SHORT $LN5@ConfigDesk

; 2009 :                         {
; 2010 :                             BOOL bComposition;
; 2011 :                             DwmIsCompositionEnabled(&bComposition);

	lea	ecx, DWORD PTR _bComposition$51[ebp]
	push	ecx
	call	DWORD PTR __imp__DwmIsCompositionEnabled@4

; 2012 :                             
; 2013 :                             if (bComposition)

	cmp	DWORD PTR _bComposition$51[ebp], 0
	je	SHORT $LN5@ConfigDesk

; 2014 :                                 OBSMessageBox (hwnd, Str("Sources.SoftwareCaptureSource.WarningAero"), TEXT("Warning"), MB_ICONEXCLAMATION);

	push	48					; 00000030H
	push	OFFSET $SG4294889917
	push	OFFSET $SG4294889916
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H
$LN5@ConfigDesk:

; 2015 :                         }
; 2016 :                     }

	lea	ecx, DWORD PTR _strWindow$22[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN3@ConfigDesk:

; 2017 : 
; 2018 :                 case IDCANCEL:
; 2019 :                     if(LOWORD(wParam) == IDCANCEL)

	movzx	ecx, WORD PTR _wParam$[ebp]
	cmp	ecx, 2
	jne	$LN2@ConfigDesk

; 2020 :                     {
; 2021 :                         ConfigDesktopSourceInfo *info = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _info$68[ebp], eax

; 2022 :                         ImageSource *source = API->GetSceneImageSource(info->lpName);

	mov	eax, DWORD PTR _info$68[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$121[ebp], eax

; 2023 :                         if(source)

	cmp	DWORD PTR _source$121[ebp], 0
	je	$LN2@ConfigDesk

; 2024 :                         {
; 2025 :                             XElement *data = info->data;

	mov	eax, DWORD PTR _info$68[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _data$110[ebp], ecx

; 2026 :                             source->SetInt(TEXT("useColorKey"),   data->GetInt(TEXT("useColorKey"), 0));

	push	0
	push	OFFSET $SG4294889915
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889914
	mov	edx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx

; 2027 :                             source->SetInt(TEXT("keyColor"),      data->GetInt(TEXT("keyColor"), 0xFFFFFFFF));

	push	-1
	push	OFFSET $SG4294889913
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889912
	mov	eax, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax

; 2028 :                             source->SetInt(TEXT("keySimilarity"), data->GetInt(TEXT("keySimilarity"), 10));

	push	10					; 0000000aH
	push	OFFSET $SG4294889911
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889910
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax

; 2029 :                             source->SetInt(TEXT("keyBlend"),      data->GetInt(TEXT("keyBlend"), 0));

	push	0
	push	OFFSET $SG4294889909
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889908
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax

; 2030 :                             source->SetInt(TEXT("opacity"),       data->GetInt(TEXT("opacity"), 100));

	push	100					; 00000064H
	push	OFFSET $SG4294889907
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889906
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax

; 2031 :                             source->SetInt(TEXT("gamma"),         data->GetInt(TEXT("gamma"), 100));

	push	100					; 00000064H
	push	OFFSET $SG4294889905
	mov	ecx, DWORD PTR _data$110[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889904
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$121[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN2@ConfigDesk:

; 2032 :                         }
; 2033 :                     }
; 2034 : 
; 2035 :                     EndDialog(hwnd, LOWORD(wParam));

	movzx	ecx, WORD PTR _wParam$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__EndDialog@8
$LN147@ConfigDesk:

; 2036 :                     break;
; 2037 :             }
; 2038 :     }
; 2039 : 
; 2040 :     return FALSE;

	xor	eax, eax
$LN150@ConfigDesk:

; 2041 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN208@ConfigDesk:
	DD	$LN58@ConfigDesk
	DD	$LN39@ConfigDesk
	DD	$LN97@ConfigDesk
	DD	$LN93@ConfigDesk
	DD	$LN95@ConfigDesk
	DD	$LN53@ConfigDesk
	DD	$LN52@ConfigDesk
	DD	$LN85@ConfigDesk
	DD	$LN46@ConfigDesk
	DD	$LN44@ConfigDesk
	DD	$LN67@ConfigDesk
	DD	$LN147@ConfigDesk
$LN207@ConfigDesk:
	DB	0
	DB	1
	DB	11					; 0000000bH
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	2
	DB	3
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	4
	DB	5
	DB	5
	DB	6
	DB	5
	DB	11					; 0000000bH
	DB	7
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	1
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	8
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	9
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	11					; 0000000bH
	DB	10					; 0000000aH
?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z ENDP	; ConfigDesktopSourceProc
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FcolorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ
text$yd	SEGMENT
??__FcolorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ PROC ; `ConfigDesktopSourceProc'::`2'::`dynamic atexit destructor for 'colorData'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?colorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	??1ColorSelectionData@@QAE@XZ		; ColorSelectionData::~ColorSelectionData
	pop	ebp
	ret	0
??__FcolorData@?1??ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ENDP ; `ConfigDesktopSourceProc'::`2'::`dynamic atexit destructor for 'colorData''
text$yd	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z
_TEXT	SEGMENT
_wc$1 = -80						; size = 40
_info$ = -40						; size = 32
_data$ = -8						; size = 4
$T2 = -2						; size = 1
$T3 = -1						; size = 1
_element$ = 8						; size = 4
_bInitialize$ = 12					; size = 1
_dialogID$ = 16						; size = 4
?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z PROC	; ConfigureDesktopSource2, COMDAT

; 2046 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H

; 2047 :     if(!bMadeCaptureRegionClass)

	movzx	eax, BYTE PTR ?bMadeCaptureRegionClass@@3_NA ; bMadeCaptureRegionClass
	test	eax, eax
	jne	SHORT $LN7@ConfigureD

; 2048 :     {
; 2049 :         WNDCLASS wc;
; 2050 :         zero(&wc, sizeof(wc));

	push	40					; 00000028H
	lea	ecx, DWORD PTR _wc$1[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 2051 :         wc.hInstance = hinstMain;

	mov	edx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	mov	DWORD PTR _wc$1[ebp+16], edx

; 2052 :         wc.hCursor = LoadCursor(NULL, IDC_ARROW);

	push	32512					; 00007f00H
	push	0
	call	DWORD PTR __imp__LoadCursorW@8
	mov	DWORD PTR _wc$1[ebp+24], eax

; 2053 :         wc.lpszClassName = CAPTUREREGIONCLASS;

	mov	DWORD PTR _wc$1[ebp+36], OFFSET $SG4294889903

; 2054 :         wc.lpfnWndProc = (WNDPROC)RegionWindowProc;

	mov	DWORD PTR _wc$1[ebp+4], OFFSET ?RegionWindowProc@@YGJPAUHWND__@@IIJ@Z ; RegionWindowProc

; 2055 :         wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);

	push	0
	call	DWORD PTR __imp__GetStockObject@4
	mov	DWORD PTR _wc$1[ebp+28], eax

; 2056 :         RegisterClass(&wc);

	lea	eax, DWORD PTR _wc$1[ebp]
	push	eax
	call	_IsolationAwareRegisterClassW@4

; 2057 : 
; 2058 :         bMadeCaptureRegionClass = true;

	mov	BYTE PTR ?bMadeCaptureRegionClass@@3_NA, 1 ; bMadeCaptureRegionClass
$LN7@ConfigureD:

; 2059 :     }
; 2060 : 
; 2061 :     if(!element)

	cmp	DWORD PTR _element$[ebp], 0
	jne	SHORT $LN6@ConfigureD

; 2062 :     {
; 2063 :         AppWarning(TEXT("ConfigureDesktopSource: NULL element"));

	push	OFFSET $SG4294889902
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 2064 :         return false;

	xor	al, al
	jmp	$LN8@ConfigureD
$LN6@ConfigureD:

; 2065 :     }
; 2066 : 
; 2067 :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG4294889901
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax

; 2068 :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN5@ConfigureD

; 2069 :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG4294889900
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax
$LN5@ConfigureD:

; 2070 : 
; 2071 :     ConfigDesktopSourceInfo info;

	lea	ecx, DWORD PTR _info$[ebp]
	call	??0ConfigDesktopSourceInfo@@QAE@XZ	; ConfigDesktopSourceInfo::ConfigDesktopSourceInfo

; 2072 :     info.data = data;

	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR _info$[ebp+4], ecx

; 2073 :     info.lpName = element->GetName();

	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetName@XBaseItem@@QBEPB_WXZ
	mov	DWORD PTR _info$[ebp], eax

; 2074 :     info.dialogID = dialogID;

	mov	edx, DWORD PTR _dialogID$[ebp]
	mov	DWORD PTR _info$[ebp+8], edx

; 2075 : 
; 2076 :     if(OBSDialogBox(hinstMain, MAKEINTRESOURCE(dialogID), hwndMain, ConfigDesktopSourceProc, (LPARAM)&info) == IDOK)

	lea	eax, DWORD PTR _info$[ebp]
	push	eax
	push	OFFSET ?ConfigDesktopSourceProc@@YGHPAUHWND__@@IIJ@Z ; ConfigDesktopSourceProc
	mov	ecx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	ecx
	movzx	edx, WORD PTR _dialogID$[ebp]
	push	edx
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSDialogBox@@YAHPAUHINSTANCE__@@PB_WPAUHWND__@@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN4@ConfigureD

; 2077 :     {
; 2078 :         element->SetInt(TEXT("cx"), data->GetInt(TEXT("captureCX")));

	push	0
	push	OFFSET $SG4294889899
	mov	ecx, DWORD PTR _data$[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889898
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 2079 :         element->SetInt(TEXT("cy"), data->GetInt(TEXT("captureCY")));

	push	0
	push	OFFSET $SG4294889897
	mov	ecx, DWORD PTR _data$[ebp]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	push	eax
	push	OFFSET $SG4294889896
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 2080 :         return true;

	mov	BYTE PTR $T3[ebp], 1
	lea	ecx, DWORD PTR _info$[ebp]
	call	??1ConfigDesktopSourceInfo@@QAE@XZ
	mov	al, BYTE PTR $T3[ebp]
	jmp	SHORT $LN8@ConfigureD

; 2081 :     } else {

	jmp	SHORT $LN3@ConfigureD
$LN4@ConfigureD:

; 2082 :         if (info.sizeSet) {

	movzx	ecx, BYTE PTR _info$[ebp+28]
	test	ecx, ecx
	je	SHORT $LN3@ConfigureD

; 2083 :             AppConfig->SetInt(TEXT("Video"), TEXT("BaseWidth"), info.prevCX);

	mov	edx, DWORD PTR _info$[ebp+20]
	push	edx
	push	OFFSET $SG4294889895
	push	OFFSET $SG4294889894
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 2084 :             AppConfig->SetInt(TEXT("Video"), TEXT("BaseHeight"), info.prevCY);

	mov	eax, DWORD PTR _info$[ebp+24]
	push	eax
	push	OFFSET $SG4294889893
	push	OFFSET $SG4294889892
	mov	ecx, DWORD PTR ?AppConfig@@3PAVConfigFile@@A ; AppConfig
	call	DWORD PTR __imp_?SetInt@ConfigFile@@QAEXPB_W0H@Z

; 2085 : 
; 2086 :             if(!App->IsRunning())

	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?IsRunning@OBS@@QBE_NXZ			; OBS::IsRunning
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@ConfigureD

; 2087 :                 App->ResizeWindow(false);

	push	0
	mov	ecx, DWORD PTR ?App@@3PAVOBS@@A		; App
	call	?ResizeWindow@OBS@@QAEX_N@Z		; OBS::ResizeWindow
$LN3@ConfigureD:

; 2088 :         }
; 2089 :     }
; 2090 : 
; 2091 :     return false;

	mov	BYTE PTR $T2[ebp], 0
	lea	ecx, DWORD PTR _info$[ebp]
	call	??1ConfigDesktopSourceInfo@@QAE@XZ
	mov	al, BYTE PTR $T2[ebp]
$LN8@ConfigureD:

; 2092 : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z ENDP	; ConfigureDesktopSource2
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??1ConfigDesktopSourceInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ConfigDesktopSourceInfo@@QAE@XZ PROC			; ConfigDesktopSourceInfo::~ConfigDesktopSourceInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	DWORD PTR __imp_??1StringList@@QAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1ConfigDesktopSourceInfo@@QAE@XZ ENDP			; ConfigDesktopSourceInfo::~ConfigDesktopSourceInfo
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ConfigureDesktopSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_bInitialize$ = 12					; size = 1
?ConfigureDesktopSource@@YG_NPAVXElement@@_N@Z PROC	; ConfigureDesktopSource, COMDAT

; 2095 : {

	push	ebp
	mov	ebp, esp

; 2096 :     return ConfigureDesktopSource2(element, bInitialize, IDD_CONFIGUREDESKTOPSOURCE);

	push	123					; 0000007bH
	movzx	eax, BYTE PTR _bInitialize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	call	?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z ; ConfigureDesktopSource2

; 2097 : }

	pop	ebp
	ret	8
?ConfigureDesktopSource@@YG_NPAVXElement@@_N@Z ENDP	; ConfigureDesktopSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ConfigureWindowCaptureSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_bInitialize$ = 12					; size = 1
?ConfigureWindowCaptureSource@@YG_NPAVXElement@@_N@Z PROC ; ConfigureWindowCaptureSource, COMDAT

; 2100 : {

	push	ebp
	mov	ebp, esp

; 2101 :     return ConfigureDesktopSource2(element, bInitialize, IDD_CONFIGUREWINDOWCAPTURE);

	push	143					; 0000008fH
	movzx	eax, BYTE PTR _bInitialize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	call	?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z ; ConfigureDesktopSource2

; 2102 : }

	pop	ebp
	ret	8
?ConfigureWindowCaptureSource@@YG_NPAVXElement@@_N@Z ENDP ; ConfigureWindowCaptureSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\desktopimagesource.cpp
;	COMDAT ?ConfigureMonitorCaptureSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_element$ = 8						; size = 4
_bInitialize$ = 12					; size = 1
?ConfigureMonitorCaptureSource@@YG_NPAVXElement@@_N@Z PROC ; ConfigureMonitorCaptureSource, COMDAT

; 2105 : {

	push	ebp
	mov	ebp, esp

; 2106 :     return ConfigureDesktopSource2(element, bInitialize, IDD_CONFIGUREMONITORCAPTURE);

	push	144					; 00000090H
	movzx	eax, BYTE PTR _bInitialize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _element$[ebp]
	push	ecx
	call	?ConfigureDesktopSource2@@YG_NPAVXElement@@_NH@Z ; ConfigureDesktopSource2

; 2107 : }

	pop	ebp
	ret	8
?ConfigureMonitorCaptureSource@@YG_NPAVXElement@@_N@Z ENDP ; ConfigureMonitorCaptureSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ?Num@?$List@UMonitorInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Num@?$List@UMonitorInfo@@@@QBEIXZ PROC			; List<MonitorInfo>::Num, COMDAT
; _this$ = ecx

; 42   :     inline unsigned int Num() const     {return num;}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Num@?$List@UMonitorInfo@@@@QBEIXZ ENDP			; List<MonitorInfo>::Num
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z PROC	; List<MonitorInfo>::operator[], COMDAT
; _this$ = ecx

; 379  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 380  :         assert(index < num);
; 381  :         if(index >= num) {DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0];}

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMonitorInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 24					; 00000018H
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 382  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 24
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 383  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UMonitorInfo@@@@QAEAAUMonitorInfo@@I@Z ENDP	; List<MonitorInfo>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z PROC	; List<MonitorInfo>::operator[], COMDAT
; _this$ = ecx

; 386  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 387  :         assert(index < num);
; 388  :         if (index >= num) { DumpError(TEXT("Out of range!  List<%S>::operator[](%d)"), typeid(T).name(), index); return array[0]; }

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _index$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@operator
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	push	OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
	mov	ecx, OFFSET ??_R0?AUMonitorInfo@@@8
	call	?name@type_info@@QBEPBDPAU__type_info_node@@@Z ; type_info::name
	push	eax
	push	OFFSET ??_C@_1FA@KCLJOBNL@?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CB?$AA?5?$AA?5?$AAL?$AAi?$AAs?$AAt?$AA?$DM?$AA?$CF?$AAS?$AA?$DO?$AA?3?$AA?3?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo@
	call	DWORD PTR __imp_?DumpError@@YAXPB_WZZ
	mov	eax, 24					; 00000018H
	imul	eax, eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	jmp	SHORT $LN3@operator
$LN1@operator:

; 389  :         return array[index];

	imul	eax, DWORD PTR _index$[ebp], 24
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx]
$LN3@operator:

; 390  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
??A?$List@UMonitorInfo@@@@QBEAAUMonitorInfo@@I@Z ENDP	; List<MonitorInfo>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??0?$List@UDeviceOutputData@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$List@UDeviceOutputData@@@@QAE@XZ PROC		; List<DeviceOutputData>::List<DeviceOutputData>, COMDAT
; _this$ = ecx

; 35   :     inline List() : array(NULL), num(0) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$List@UDeviceOutputData@@@@QAE@XZ ENDP		; List<DeviceOutputData>::List<DeviceOutputData>
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\template.h
;	COMDAT ??1?$List@UDeviceOutputData@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$List@UDeviceOutputData@@@@QAE@XZ PROC		; List<DeviceOutputData>::~List<DeviceOutputData>, COMDAT
; _this$ = ecx

; 37   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 38   :         Clear();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$List@UDeviceOutputData@@@@QAEXXZ ; List<DeviceOutputData>::Clear

; 39   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$List@UDeviceOutputData@@@@QAE@XZ ENDP		; List<DeviceOutputData>::~List<DeviceOutputData>
_TEXT	ENDS
END
