; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\OBSEvents.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	?ReportLogUpdate@OBS@@UAEXPB_WI@Z		; OBS::ReportLogUpdate
PUBLIC	?ReportDesktopVolumeChange@OBS@@UAEXM_N0@Z	; OBS::ReportDesktopVolumeChange
PUBLIC	?ReportMicVolumeChange@OBS@@UAEXM_N0@Z		; OBS::ReportMicVolumeChange
PUBLIC	?ReportSourcesAddedOrRemoved@OBS@@UAEXXZ	; OBS::ReportSourcesAddedOrRemoved
PUBLIC	?ReportSourceChanged@OBS@@UAEXPB_WPAVXElement@@@Z ; OBS::ReportSourceChanged
PUBLIC	?ReportSourceOrderChanged@OBS@@UAEXXZ		; OBS::ReportSourceOrderChanged
PUBLIC	?ReportSceneCollectionsChanged@OBS@@UAEXXZ	; OBS::ReportSceneCollectionsChanged
PUBLIC	?ReportScenesChanged@OBS@@UAEXXZ		; OBS::ReportScenesChanged
PUBLIC	?ReportSwitchSceneCollections@OBS@@UAEXPB_W@Z	; OBS::ReportSwitchSceneCollections
PUBLIC	?ReportSwitchScenes@OBS@@UAEXPB_W@Z		; OBS::ReportSwitchScenes
PUBLIC	?ReportStreamStatus@OBS@@UAEX_N0INIIII@Z	; OBS::ReportStreamStatus
PUBLIC	?ReportOBSStatus@OBS@@UAEX_N0000@Z		; OBS::ReportOBSStatus
PUBLIC	?ReportReplayBufferSavedTrigger@OBS@@UAEXVString@@I@Z ; OBS::ReportReplayBufferSavedTrigger
PUBLIC	?ReportStopRecordingReplayBufferTrigger@OBS@@UAEXXZ ; OBS::ReportStopRecordingReplayBufferTrigger
PUBLIC	?ReportStartRecordingReplayBufferTrigger@OBS@@UAEXXZ ; OBS::ReportStartRecordingReplayBufferTrigger
PUBLIC	?ReportStopRecordingTrigger@OBS@@UAEXXZ		; OBS::ReportStopRecordingTrigger
PUBLIC	?ReportStartRecordingTrigger@OBS@@UAEXXZ	; OBS::ReportStartRecordingTrigger
PUBLIC	?ReportStopStreamingTrigger@OBS@@UAEXXZ		; OBS::ReportStopStreamingTrigger
PUBLIC	?ReportStartStreamingTrigger@OBS@@UAEXXZ	; OBS::ReportStartStreamingTrigger
PUBLIC	?ReportStopStreamTrigger@OBS@@UAEXXZ		; OBS::ReportStopStreamTrigger
PUBLIC	?ReportStartStreamTrigger@OBS@@UAEXXZ		; OBS::ReportStartStreamTrigger
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStartStreamTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStartStreamTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStartStreamTrigger, COMDAT
; _this$ = ecx

; 23   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 24   :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStar

; 25   :         return;

	jmp	SHORT $LN6@ReportStar
$LN5@ReportStar:

; 26   : 
; 27   :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStar
$LN3@ReportStar:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStar:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStar

; 28   :     {
; 29   :         OBS_CALLBACK callback = plugins[i].startStreamCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+12]
	mov	DWORD PTR _callback$1[ebp], ecx

; 30   : 
; 31   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStar

; 32   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStar:

; 33   :     }

	jmp	SHORT $LN3@ReportStar
$LN6@ReportStar:

; 34   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStartStreamTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStartStreamTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStopStreamTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStopStreamTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStopStreamTrigger, COMDAT
; _this$ = ecx

; 36   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 37   :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStop

; 38   :         return;

	jmp	SHORT $LN6@ReportStop
$LN5@ReportStop:

; 39   : 
; 40   :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStop
$LN3@ReportStop:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStop:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStop

; 41   :     {
; 42   :         OBS_CALLBACK callback = plugins[i].stopStreamCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _callback$1[ebp], ecx

; 43   : 
; 44   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStop

; 45   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStop:

; 46   :     }

	jmp	SHORT $LN3@ReportStop
$LN6@ReportStop:

; 47   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStopStreamTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStopStreamTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStartStreamingTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStartStreamingTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStartStreamingTrigger, COMDAT
; _this$ = ecx

; 50   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 51   :     if (bShuttingDown || bTestStream)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	jne	SHORT $LN5@ReportStar
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+620]
	test	eax, eax
	je	SHORT $LN6@ReportStar
$LN5@ReportStar:

; 52   :         return;

	jmp	SHORT $LN7@ReportStar
$LN6@ReportStar:

; 53   : 
; 54   :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStar
$LN3@ReportStar:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@ReportStar:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN7@ReportStar

; 55   :     {
; 56   :         OBS_CALLBACK callback = plugins[i].startStreamingCallback;

	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR _callback$1[ebp], eax

; 57   : 
; 58   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStar

; 59   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStar:

; 60   :     }

	jmp	SHORT $LN3@ReportStar
$LN7@ReportStar:

; 61   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStartStreamingTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStartStreamingTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStopStreamingTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStopStreamingTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStopStreamingTrigger, COMDAT
; _this$ = ecx

; 63   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 64   :     if (bShuttingDown || bTestStream)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	jne	SHORT $LN5@ReportStop
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+620]
	test	eax, eax
	je	SHORT $LN6@ReportStop
$LN5@ReportStop:

; 65   :         return;

	jmp	SHORT $LN7@ReportStop
$LN6@ReportStop:

; 66   : 
; 67   :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStop
$LN3@ReportStop:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@ReportStop:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN7@ReportStop

; 68   :     {
; 69   :         OBS_CALLBACK callback = plugins[i].stopStreamingCallback;

	mov	edx, DWORD PTR _i$2[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR _callback$1[ebp], eax

; 70   : 
; 71   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStop

; 72   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStop:

; 73   :     }

	jmp	SHORT $LN3@ReportStop
$LN7@ReportStop:

; 74   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStopStreamingTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStopStreamingTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStartRecordingTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStartRecordingTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStartRecordingTrigger, COMDAT
; _this$ = ecx

; 77   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 78   :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStar

; 79   :         return;

	jmp	SHORT $LN6@ReportStar
$LN5@ReportStar:

; 80   : 
; 81   :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStar
$LN3@ReportStar:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStar:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStar

; 82   :     {
; 83   :         OBS_CALLBACK callback = plugins[i].startRecordingCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _callback$1[ebp], ecx

; 84   : 
; 85   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStar

; 86   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStar:

; 87   :     }

	jmp	SHORT $LN3@ReportStar
$LN6@ReportStar:

; 88   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStartRecordingTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStartRecordingTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStopRecordingTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStopRecordingTrigger@OBS@@UAEXXZ PROC		; OBS::ReportStopRecordingTrigger, COMDAT
; _this$ = ecx

; 90   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 91   :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStop

; 92   :         return;

	jmp	SHORT $LN6@ReportStop
$LN5@ReportStop:

; 93   : 
; 94   :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStop
$LN3@ReportStop:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStop:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStop

; 95   :     {
; 96   :         OBS_CALLBACK callback = plugins[i].stopRecordingCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _callback$1[ebp], ecx

; 97   : 
; 98   :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStop

; 99   :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStop:

; 100  :     }

	jmp	SHORT $LN3@ReportStop
$LN6@ReportStop:

; 101  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStopRecordingTrigger@OBS@@UAEXXZ ENDP		; OBS::ReportStopRecordingTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStartRecordingReplayBufferTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStartRecordingReplayBufferTrigger@OBS@@UAEXXZ PROC ; OBS::ReportStartRecordingReplayBufferTrigger, COMDAT
; _this$ = ecx

; 104  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 105  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStar

; 106  :         return;

	jmp	SHORT $LN6@ReportStar
$LN5@ReportStar:

; 107  : 
; 108  :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStar
$LN3@ReportStar:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStar:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStar

; 109  :     {
; 110  :         OBS_CALLBACK callback = plugins[i].startRecordingReplayBufferCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+36]
	mov	DWORD PTR _callback$1[ebp], ecx

; 111  : 
; 112  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStar

; 113  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStar:

; 114  :     }

	jmp	SHORT $LN3@ReportStar
$LN6@ReportStar:

; 115  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStartRecordingReplayBufferTrigger@OBS@@UAEXXZ ENDP ; OBS::ReportStartRecordingReplayBufferTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStopRecordingReplayBufferTrigger@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportStopRecordingReplayBufferTrigger@OBS@@UAEXXZ PROC ; OBS::ReportStopRecordingReplayBufferTrigger, COMDAT
; _this$ = ecx

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 118  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStop

; 119  :         return;

	jmp	SHORT $LN6@ReportStop
$LN5@ReportStop:

; 120  : 
; 121  :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStop
$LN3@ReportStop:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStop:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportStop

; 122  :     {
; 123  :         OBS_CALLBACK callback = plugins[i].stopRecordingReplayBufferCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR _callback$1[ebp], ecx

; 124  : 
; 125  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStop

; 126  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportStop:

; 127  :     }

	jmp	SHORT $LN3@ReportStop
$LN6@ReportStop:

; 128  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportStopRecordingReplayBufferTrigger@OBS@@UAEXXZ ENDP ; OBS::ReportStopRecordingReplayBufferTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportReplayBufferSavedTrigger@OBS@@UAEXVString@@I@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_filename$ = 8						; size = 8
_recordingLengthMS$ = 16				; size = 4
?ReportReplayBufferSavedTrigger@OBS@@UAEXVString@@I@Z PROC ; OBS::ReportReplayBufferSavedTrigger, COMDAT
; _this$ = ecx

; 130  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 131  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportRepl

; 132  :         return;

	lea	ecx, DWORD PTR _filename$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	SHORT $LN6@ReportRepl
$LN5@ReportRepl:

; 133  : 
; 134  :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportRepl
$LN3@ReportRepl:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportRepl:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN2@ReportRepl

; 135  :     {
; 136  :         OBS_REPLAY_BUFFER_SAVED_CALLBACK callback = plugins[i].replayBufferSavedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+44]
	mov	DWORD PTR _callback$1[ebp], ecx

; 137  : 
; 138  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportRepl

; 139  :             (*callback)(filename, recordingLengthMS);

	mov	edx, DWORD PTR _recordingLengthMS$[ebp]
	push	edx
	lea	ecx, DWORD PTR _filename$[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	call	DWORD PTR _callback$1[ebp]
	add	esp, 8
$LN1@ReportRepl:

; 140  :     }

	jmp	SHORT $LN3@ReportRepl
$LN2@ReportRepl:

; 141  : }

	lea	ecx, DWORD PTR _filename$[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN6@ReportRepl:
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReportReplayBufferSavedTrigger@OBS@@UAEXVString@@I@Z ENDP ; OBS::ReportReplayBufferSavedTrigger
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportOBSStatus@OBS@@UAEX_N0000@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_running$ = 8						; size = 1
_streaming$ = 12					; size = 1
_recording$ = 16					; size = 1
_previewing$ = 20					; size = 1
_reconnecting$ = 24					; size = 1
?ReportOBSStatus@OBS@@UAEX_N0000@Z PROC			; OBS::ReportOBSStatus, COMDAT
; _this$ = ecx

; 144  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 145  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportOBSS

; 146  :         return;

	jmp	SHORT $LN6@ReportOBSS
$LN5@ReportOBSS:

; 147  : 
; 148  :     for (UINT i = 0; i < plugins.Num(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ReportOBSS
$LN3@ReportOBSS:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@ReportOBSS:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN6@ReportOBSS

; 149  :         if (plugins[i].statusCallback)

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	cmp	DWORD PTR [eax+48], 0
	je	SHORT $LN1@ReportOBSS

; 150  :             plugins[i].statusCallback(running, streaming, recording, previewing, reconnecting);

	movzx	ecx, BYTE PTR _reconnecting$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _previewing$[ebp]
	push	edx
	movzx	eax, BYTE PTR _recording$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _streaming$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _running$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+48]
	call	ecx
	add	esp, 20					; 00000014H
$LN1@ReportOBSS:

; 151  : }

	jmp	SHORT $LN3@ReportOBSS
$LN6@ReportOBSS:
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ReportOBSStatus@OBS@@UAEX_N0000@Z ENDP			; OBS::ReportOBSStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportStreamStatus@OBS@@UAEX_N0INIIII@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_streaming$ = 8						; size = 1
_previewOnly$ = 12					; size = 1
_bytesPerSec$ = 16					; size = 4
_strain$ = 20						; size = 8
_totalStreamtime$ = 28					; size = 4
_numTotalFrames$ = 32					; size = 4
_numDroppedFrames$ = 36					; size = 4
_fps$ = 40						; size = 4
?ReportStreamStatus@OBS@@UAEX_N0INIIII@Z PROC		; OBS::ReportStreamStatus, COMDAT
; _this$ = ecx

; 157  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 158  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportStre

; 159  :             return;

	jmp	SHORT $LN6@ReportStre
$LN5@ReportStre:

; 160  : 
; 161  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportStre
$LN3@ReportStre:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportStre:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN2@ReportStre

; 162  :     {
; 163  :         OBS_STREAM_STATUS_CALLBACK callback = plugins[i].streamStatusCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+52]
	mov	DWORD PTR _callback$1[ebp], ecx

; 164  : 
; 165  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportStre

; 166  :             (*callback)(streaming, previewOnly, bytesPerSec, 
; 167  :                         strain, totalStreamtime, numTotalFrames,
; 168  :                         numDroppedFrames, fps);

	mov	edx, DWORD PTR _fps$[ebp]
	push	edx
	mov	eax, DWORD PTR _numDroppedFrames$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numTotalFrames$[ebp]
	push	ecx
	mov	edx, DWORD PTR _totalStreamtime$[ebp]
	push	edx
	sub	esp, 8
	movsd	xmm0, QWORD PTR _strain$[ebp]
	movsd	QWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _bytesPerSec$[ebp]
	push	eax
	movzx	ecx, BYTE PTR _previewOnly$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _streaming$[ebp]
	push	edx
	call	DWORD PTR _callback$1[ebp]
	add	esp, 36					; 00000024H
$LN1@ReportStre:

; 169  :     }

	jmp	SHORT $LN3@ReportStre
$LN2@ReportStre:
$LN6@ReportStre:

; 170  : }

	mov	esp, ebp
	pop	ebp
	ret	36					; 00000024H
?ReportStreamStatus@OBS@@UAEX_N0INIIII@Z ENDP		; OBS::ReportStreamStatus
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSwitchScenes@OBS@@UAEXPB_W@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_scene$ = 8						; size = 4
?ReportSwitchScenes@OBS@@UAEXPB_W@Z PROC		; OBS::ReportSwitchScenes, COMDAT
; _this$ = ecx

; 173  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 174  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportSwit

; 175  :             return;

	jmp	SHORT $LN6@ReportSwit
$LN5@ReportSwit:

; 176  : 
; 177  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportSwit
$LN3@ReportSwit:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportSwit:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportSwit

; 178  :     {
; 179  :         OBS_SCENE_SWITCH_CALLBACK callback = plugins[i].sceneSwitchCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _callback$1[ebp], ecx

; 180  : 
; 181  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportSwit

; 182  :             (*callback)(scene);

	mov	edx, DWORD PTR _scene$[ebp]
	push	edx
	call	DWORD PTR _callback$1[ebp]
	add	esp, 4
$LN1@ReportSwit:

; 183  :     }

	jmp	SHORT $LN3@ReportSwit
$LN6@ReportSwit:

; 184  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReportSwitchScenes@OBS@@UAEXPB_W@Z ENDP		; OBS::ReportSwitchScenes
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSwitchSceneCollections@OBS@@UAEXPB_W@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_collection$ = 8					; size = 4
?ReportSwitchSceneCollections@OBS@@UAEXPB_W@Z PROC	; OBS::ReportSwitchSceneCollections, COMDAT
; _this$ = ecx

; 187  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 188  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportSwit

; 189  :         return;

	jmp	SHORT $LN6@ReportSwit
$LN5@ReportSwit:

; 190  : 
; 191  :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportSwit
$LN3@ReportSwit:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportSwit:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportSwit

; 192  :     {
; 193  :         OBS_SCENE_SWITCH_CALLBACK callback = plugins[i].sceneCollectionSwitchCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _callback$1[ebp], ecx

; 194  : 
; 195  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportSwit

; 196  :             (*callback)(collection);

	mov	edx, DWORD PTR _collection$[ebp]
	push	edx
	call	DWORD PTR _callback$1[ebp]
	add	esp, 4
$LN1@ReportSwit:

; 197  :     }

	jmp	SHORT $LN3@ReportSwit
$LN6@ReportSwit:

; 198  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?ReportSwitchSceneCollections@OBS@@UAEXPB_W@Z ENDP	; OBS::ReportSwitchSceneCollections
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportScenesChanged@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportScenesChanged@OBS@@UAEXXZ PROC			; OBS::ReportScenesChanged, COMDAT
; _this$ = ecx

; 201  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 202  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportScen

; 203  :             return;

	jmp	SHORT $LN6@ReportScen
$LN5@ReportScen:

; 204  : 
; 205  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportScen
$LN3@ReportScen:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportScen:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportScen

; 206  :     {
; 207  :         OBS_CALLBACK callback = plugins[i].scenesChangedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _callback$1[ebp], ecx

; 208  : 
; 209  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportScen

; 210  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportScen:

; 211  :     }

	jmp	SHORT $LN3@ReportScen
$LN6@ReportScen:

; 212  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportScenesChanged@OBS@@UAEXXZ ENDP			; OBS::ReportScenesChanged
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSceneCollectionsChanged@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportSceneCollectionsChanged@OBS@@UAEXXZ PROC		; OBS::ReportSceneCollectionsChanged, COMDAT
; _this$ = ecx

; 215  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 216  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportScen

; 217  :         return;

	jmp	SHORT $LN6@ReportScen
$LN5@ReportScen:

; 218  : 
; 219  :     for (UINT i = 0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportScen
$LN3@ReportScen:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportScen:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportScen

; 220  :     {
; 221  :         OBS_CALLBACK callback = plugins[i].sceneCollectionsChangedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+68]
	mov	DWORD PTR _callback$1[ebp], ecx

; 222  : 
; 223  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportScen

; 224  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportScen:

; 225  :     }

	jmp	SHORT $LN3@ReportScen
$LN6@ReportScen:

; 226  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportSceneCollectionsChanged@OBS@@UAEXXZ ENDP		; OBS::ReportSceneCollectionsChanged
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSourceOrderChanged@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportSourceOrderChanged@OBS@@UAEXXZ PROC		; OBS::ReportSourceOrderChanged, COMDAT
; _this$ = ecx

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 230  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportSour

; 231  :             return;

	jmp	SHORT $LN6@ReportSour
$LN5@ReportSour:

; 232  : 
; 233  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportSour
$LN3@ReportSour:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportSour:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportSour

; 234  :     {
; 235  :         OBS_CALLBACK callback = plugins[i].sourceOrderChangedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+72]
	mov	DWORD PTR _callback$1[ebp], ecx

; 236  : 
; 237  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportSour

; 238  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportSour:

; 239  :     }

	jmp	SHORT $LN3@ReportSour
$LN6@ReportSour:

; 240  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportSourceOrderChanged@OBS@@UAEXXZ ENDP		; OBS::ReportSourceOrderChanged
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSourceChanged@OBS@@UAEXPB_WPAVXElement@@@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_sourceName$ = 8					; size = 4
_source$ = 12						; size = 4
?ReportSourceChanged@OBS@@UAEXPB_WPAVXElement@@@Z PROC	; OBS::ReportSourceChanged, COMDAT
; _this$ = ecx

; 243  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 244  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportSour

; 245  :             return;

	jmp	SHORT $LN6@ReportSour
$LN5@ReportSour:

; 246  : 
; 247  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportSour
$LN3@ReportSour:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportSour:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportSour

; 248  :     {
; 249  :         OBS_SOURCE_CHANGED_CALLBACK callback = plugins[i].sourceChangedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+76]
	mov	DWORD PTR _callback$1[ebp], ecx

; 250  : 
; 251  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportSour

; 252  :             (*callback)(sourceName, source);

	mov	edx, DWORD PTR _source$[ebp]
	push	edx
	mov	eax, DWORD PTR _sourceName$[ebp]
	push	eax
	call	DWORD PTR _callback$1[ebp]
	add	esp, 8
$LN1@ReportSour:

; 253  :     }

	jmp	SHORT $LN3@ReportSour
$LN6@ReportSour:

; 254  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReportSourceChanged@OBS@@UAEXPB_WPAVXElement@@@Z ENDP	; OBS::ReportSourceChanged
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportSourcesAddedOrRemoved@OBS@@UAEXXZ
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
?ReportSourcesAddedOrRemoved@OBS@@UAEXXZ PROC		; OBS::ReportSourcesAddedOrRemoved, COMDAT
; _this$ = ecx

; 257  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 258  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportSour

; 259  :             return;

	jmp	SHORT $LN6@ReportSour
$LN5@ReportSour:

; 260  : 
; 261  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportSour
$LN3@ReportSour:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportSour:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN6@ReportSour

; 262  :     {
; 263  :         OBS_CALLBACK callback = plugins[i].sourcesAddedOrRemovedCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+80]
	mov	DWORD PTR _callback$1[ebp], ecx

; 264  : 
; 265  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportSour

; 266  :             (*callback)();

	call	DWORD PTR _callback$1[ebp]
$LN1@ReportSour:

; 267  :     }

	jmp	SHORT $LN3@ReportSour
$LN6@ReportSour:

; 268  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ReportSourcesAddedOrRemoved@OBS@@UAEXXZ ENDP		; OBS::ReportSourcesAddedOrRemoved
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportMicVolumeChange@OBS@@UAEXM_N0@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_level$ = 8						; size = 4
_muted$ = 12						; size = 1
_finalValue$ = 16					; size = 1
?ReportMicVolumeChange@OBS@@UAEXM_N0@Z PROC		; OBS::ReportMicVolumeChange, COMDAT
; _this$ = ecx

; 271  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 272  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportMicV

; 273  :             return;

	jmp	SHORT $LN6@ReportMicV
$LN5@ReportMicV:

; 274  : 
; 275  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportMicV
$LN3@ReportMicV:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportMicV:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN2@ReportMicV

; 276  :     {
; 277  :         OBS_VOLUME_CHANGED_CALLBACK callback = plugins[i].micVolumeChangeCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+84]
	mov	DWORD PTR _callback$1[ebp], ecx

; 278  : 
; 279  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportMicV

; 280  :             (*callback)(level, muted, finalValue);

	movzx	edx, BYTE PTR _finalValue$[ebp]
	push	edx
	movzx	eax, BYTE PTR _muted$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _level$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _callback$1[ebp]
	add	esp, 12					; 0000000cH
$LN1@ReportMicV:

; 281  :     }

	jmp	SHORT $LN3@ReportMicV
$LN2@ReportMicV:
$LN6@ReportMicV:

; 282  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReportMicVolumeChange@OBS@@UAEXM_N0@Z ENDP		; OBS::ReportMicVolumeChange
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportDesktopVolumeChange@OBS@@UAEXM_N0@Z
_TEXT	SEGMENT
_callback$1 = -12					; size = 4
_this$ = -8						; size = 4
_i$2 = -4						; size = 4
_level$ = 8						; size = 4
_muted$ = 12						; size = 1
_finalValue$ = 16					; size = 1
?ReportDesktopVolumeChange@OBS@@UAEXM_N0@Z PROC		; OBS::ReportDesktopVolumeChange, COMDAT
; _this$ = ecx

; 285  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 286  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportDesk

; 287  :             return;

	jmp	SHORT $LN6@ReportDesk
$LN5@ReportDesk:

; 288  : 
; 289  :     for (UINT i=0; i<plugins.Num(); i++)

	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@ReportDesk
$LN3@ReportDesk:
	mov	edx, DWORD PTR _i$2[ebp]
	add	edx, 1
	mov	DWORD PTR _i$2[ebp], edx
$LN4@ReportDesk:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$2[ebp], eax
	jae	SHORT $LN2@ReportDesk

; 290  :     {
; 291  :         OBS_VOLUME_CHANGED_CALLBACK callback = plugins[i].desktopVolumeChangeCallback;

	mov	eax, DWORD PTR _i$2[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _callback$1[ebp], ecx

; 292  : 
; 293  :         if (callback)

	cmp	DWORD PTR _callback$1[ebp], 0
	je	SHORT $LN1@ReportDesk

; 294  :             (*callback)(level, muted, finalValue);

	movzx	edx, BYTE PTR _finalValue$[ebp]
	push	edx
	movzx	eax, BYTE PTR _muted$[ebp]
	push	eax
	push	ecx
	movss	xmm0, DWORD PTR _level$[ebp]
	movss	DWORD PTR [esp], xmm0
	call	DWORD PTR _callback$1[ebp]
	add	esp, 12					; 0000000cH
$LN1@ReportDesk:

; 295  :     }

	jmp	SHORT $LN3@ReportDesk
$LN2@ReportDesk:
$LN6@ReportDesk:

; 296  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReportDesktopVolumeChange@OBS@@UAEXM_N0@Z ENDP		; OBS::ReportDesktopVolumeChange
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\obsevents.cpp
;	COMDAT ?ReportLogUpdate@OBS@@UAEXPB_WI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$1 = -4						; size = 4
_logDelta$ = 8						; size = 4
_length$ = 12						; size = 4
?ReportLogUpdate@OBS@@UAEXPB_WI@Z PROC			; OBS::ReportLogUpdate, COMDAT
; _this$ = ecx

; 299  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR _this$[ebp], ecx

; 300  :     if (bShuttingDown)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+1412]
	test	ecx, ecx
	je	SHORT $LN5@ReportLogU

; 301  :         return;

	jmp	SHORT $LN6@ReportLogU
$LN5@ReportLogU:

; 302  : 
; 303  :     for (UINT i = 0; i < plugins.Num(); i++)

	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@ReportLogU
$LN3@ReportLogU:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN4@ReportLogU:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	?Num@?$List@UPluginInfo@@@@QBEIXZ	; List<PluginInfo>::Num
	cmp	DWORD PTR _i$1[ebp], eax
	jae	SHORT $LN6@ReportLogU

; 304  :     {
; 305  :         if (plugins[i].logUpdateCallback)

	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	cmp	DWORD PTR [eax+92], 0
	je	SHORT $LN1@ReportLogU

; 306  :             plugins[i].logUpdateCallback(logDelta, length);

	mov	ecx, DWORD PTR _length$[ebp]
	push	ecx
	mov	edx, DWORD PTR _logDelta$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$1[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 1404				; 0000057cH
	call	??A?$List@UPluginInfo@@@@QAEAAUPluginInfo@@I@Z ; List<PluginInfo>::operator[]
	mov	ecx, DWORD PTR [eax+92]
	call	ecx
	add	esp, 8
$LN1@ReportLogU:

; 307  :     }

	jmp	SHORT $LN3@ReportLogU
$LN6@ReportLogU:

; 308  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?ReportLogUpdate@OBS@@UAEXPB_WI@Z ENDP			; OBS::ReportLogUpdate
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
END
