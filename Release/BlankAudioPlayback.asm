; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\BlankAudioPlayback.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_1FM@MNAHDCKA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAu?$AAm?$AAe?$AAr@ ; `string'
PUBLIC	??_C@_1BA@GHOECOCL@?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@JEKEKLHO@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@CJOGDDOI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAA?$AAu?$AAd?$AAi?$AAo?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@BICMGOC@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAm?$AAi?$AAx?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAa?$AAu@ ; `string'
PUBLIC	??_C@_1GC@JPHGCICI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1EE@OJDHJFMD@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1EA@BLCAHPAA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@KDLKNPMN@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@BJAODCIM@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	__GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
PUBLIC	__GUID_bcde0395_e52f_467c_8e3d_c4579291692e
PUBLIC	__GUID_a95664d2_9614_4f35_a746_de8db63617e6
PUBLIC	__GUID_f294acfc_3146_4483_a7bf_addca7c260e2
EXTRN	__imp_?scmpi@@YGHPB_W0@Z:PROC
EXTRN	__imp_?CrashError@@YAXPB_WZZ:PROC
EXTRN	__imp__CoCreateInstance@20:PROC
_curBlankPlaybackThingy DD 01H DUP (?)
_BSS	ENDS
;	COMDAT __GUID_f294acfc_3146_4483_a7bf_addca7c260e2
CONST	SEGMENT
__GUID_f294acfc_3146_4483_a7bf_addca7c260e2 DD 0f294acfcH
	DW	03146H
	DW	04483H
	DB	0a7H
	DB	0bfH
	DB	0adH
	DB	0dcH
	DB	0a7H
	DB	0c2H
	DB	060H
	DB	0e2H
CONST	ENDS
;	COMDAT __GUID_a95664d2_9614_4f35_a746_de8db63617e6
CONST	SEGMENT
__GUID_a95664d2_9614_4f35_a746_de8db63617e6 DD 0a95664d2H
	DW	09614H
	DW	04f35H
	DB	0a7H
	DB	046H
	DB	0deH
	DB	08dH
	DB	0b6H
	DB	036H
	DB	017H
	DB	0e6H
CONST	ENDS
;	COMDAT __GUID_bcde0395_e52f_467c_8e3d_c4579291692e
CONST	SEGMENT
__GUID_bcde0395_e52f_467c_8e3d_c4579291692e DD 0bcde0395H
	DW	0e52fH
	DW	0467cH
	DB	08eH
	DB	03dH
	DB	0c4H
	DB	057H
	DB	092H
	DB	091H
	DB	069H
	DB	02eH
CONST	ENDS
;	COMDAT __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
CONST	SEGMENT
__GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2 DD 01cb9ad4cH
	DW	0dbfaH
	DW	04c32H
	DB	0b1H
	DB	078H
	DB	0c2H
	DB	0f5H
	DB	068H
	DB	0a7H
	DB	03H
	DB	0b2H
CONST	ENDS
;	COMDAT ??_C@_1DK@BJAODCIM@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@BJAODCIM@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 'r'
	DB	00H, 't', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H
	DB	'o', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@KDLKNPMN@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@KDLKNPMN@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@BLCAHPAA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@BLCAHPAA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@OJDHJFMD@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@
CONST	SEGMENT
??_C@_1EE@OJDHJFMD@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' ', 00H
	DB	'r', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@JPHGCICI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@
CONST	SEGMENT
??_C@_1GC@JPHGCICI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'i', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, '0', 00H, '8', 00H
	DB	'l', 00H, 'X', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@BICMGOC@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAm?$AAi?$AAx?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAa?$AAu@
CONST	SEGMENT
??_C@_1FG@BICMGOC@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAm?$AAi?$AAx?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAa?$AAu@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' '
	DB	00H, 'm', 00H, 'i', 00H, 'x', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'r'
	DB	00H, 'o', 00H, 'm', 00H, ' ', 00H, 'a', 00H, 'u', 00H, 'd', 00H
	DB	'i', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CJOGDDOI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAA?$AAu?$AAd?$AAi?$AAo?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@CJOGDDOI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAA?$AAu?$AAd?$AAi?$AAo?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'I', 00H, 'A', 00H, 'u', 00H
	DB	'd', 00H, 'i', 00H, 'o', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@JEKEKLHO@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@JEKEKLHO@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'I', 00H, 'M', 00H, 'M', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@GHOECOCL@?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@GHOECOCL@?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@ DB 'D', 00H
	DB	'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@MNAHDCKA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAu?$AAm?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FM@MNAHDCKA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAu?$AAm?$AAe?$AAr@ DB 'C'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'I', 00H, 'M', 00H, 'M', 00H
	DB	'D', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'c', 00H, 'e', 00H, 'E'
	DB	00H, 'n', 00H, 'u', 00H, 'm', 00H, 'e', 00H, 'r', 00H, 'a', 00H
	DB	't', 00H, 'o', 00H, 'r', 00H, ':', 00H, ' ', 00H, '0', 00H, 'x'
	DB	00H, '%', 00H, '0', 00H, '8', 00H, 'l', 00H, 'x', 00H, 00H, 00H ; `string'
PUBLIC	??_GBlankAudioPlayback@@QAEPAXI@Z		; BlankAudioPlayback::`scalar deleting destructor'
PUBLIC	?StopBlankSoundPlayback@@YAXXZ			; StopBlankSoundPlayback
PUBLIC	?StartBlankSoundPlayback@@YAXPB_W@Z		; StartBlankSoundPlayback
PUBLIC	??1BlankAudioPlayback@@QAE@XZ			; BlankAudioPlayback::~BlankAudioPlayback
PUBLIC	??0BlankAudioPlayback@@QAE@PB_W@Z		; BlankAudioPlayback::BlankAudioPlayback
PUBLIC	?ConvertMSTo100NanoSec@@YAII@Z			; ConvertMSTo100NanoSec
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\main.h
;	COMDAT ?ConvertMSTo100NanoSec@@YAII@Z
_TEXT	SEGMENT
_ms$ = 8						; size = 4
?ConvertMSTo100NanoSec@@YAII@Z PROC			; ConvertMSTo100NanoSec, COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp

; 112  :     return ms*1000*10; //1000 microseconds, then 10 "100nanosecond" segments

	imul	eax, DWORD PTR _ms$[ebp], 1000
	imul	eax, eax, 10

; 113  : }

	pop	ebp
	ret	0
?ConvertMSTo100NanoSec@@YAII@Z ENDP			; ConvertMSTo100NanoSec
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\blankaudioplayback.cpp
;	COMDAT ??0BlankAudioPlayback@@QAE@PB_W@Z
_TEXT	SEGMENT
_lpData$ = -92						; size = 4
_inputBlockSize$ = -88					; size = 4
_pwfx$ = -84						; size = 4
_bufferFrameCount$ = -80				; size = 4
_err$ = -76						; size = 4
_this$ = -72						; size = 4
_IID_IMMDeviceEnumerator$ = -68				; size = 16
_CLSID_MMDeviceEnumerator$ = -52			; size = 16
_IID_IAudioClient$ = -36				; size = 16
_IID_IAudioRenderClient$ = -20				; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDevice$ = 8						; size = 4
??0BlankAudioPlayback@@QAE@PB_W@Z PROC			; BlankAudioPlayback::BlankAudioPlayback, COMDAT
; _this$ = ecx

; 38   :     BlankAudioPlayback(CTSTR lpDevice)

	push	ebp
	mov	ebp, esp
	sub	esp, 92					; 0000005cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 39   :     {
; 40   :         const CLSID CLSID_MMDeviceEnumerator = __uuidof(MMDeviceEnumerator);

	mov	eax, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp], eax
	mov	ecx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+4
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+4], ecx
	mov	edx, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+8
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+8], edx
	mov	eax, DWORD PTR __GUID_bcde0395_e52f_467c_8e3d_c4579291692e+12
	mov	DWORD PTR _CLSID_MMDeviceEnumerator$[ebp+12], eax

; 41   :         const IID IID_IMMDeviceEnumerator    = __uuidof(IMMDeviceEnumerator);

	mov	ecx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp], ecx
	mov	edx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+4
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+4], edx
	mov	eax, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+8
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+8], eax
	mov	ecx, DWORD PTR __GUID_a95664d2_9614_4f35_a746_de8db63617e6+12
	mov	DWORD PTR _IID_IMMDeviceEnumerator$[ebp+12], ecx

; 42   :         const IID IID_IAudioClient           = __uuidof(IAudioClient);

	mov	edx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2
	mov	DWORD PTR _IID_IAudioClient$[ebp], edx
	mov	eax, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+4
	mov	DWORD PTR _IID_IAudioClient$[ebp+4], eax
	mov	ecx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+8
	mov	DWORD PTR _IID_IAudioClient$[ebp+8], ecx
	mov	edx, DWORD PTR __GUID_1cb9ad4c_dbfa_4c32_b178_c2f568a703b2+12
	mov	DWORD PTR _IID_IAudioClient$[ebp+12], edx

; 43   :         const IID IID_IAudioRenderClient     = __uuidof(IAudioRenderClient);

	mov	eax, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2
	mov	DWORD PTR _IID_IAudioRenderClient$[ebp], eax
	mov	ecx, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+4
	mov	DWORD PTR _IID_IAudioRenderClient$[ebp+4], ecx
	mov	edx, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+8
	mov	DWORD PTR _IID_IAudioRenderClient$[ebp+8], edx
	mov	eax, DWORD PTR __GUID_f294acfc_3146_4483_a7bf_addca7c260e2+12
	mov	DWORD PTR _IID_IAudioRenderClient$[ebp+12], eax

; 44   : 
; 45   :         HRESULT err;
; 46   :         err = CoCreateInstance(CLSID_MMDeviceEnumerator, NULL, CLSCTX_ALL, IID_IMMDeviceEnumerator, (void**)&mmEnumerator);

	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	edx, DWORD PTR _IID_IMMDeviceEnumerator$[ebp]
	push	edx
	push	23					; 00000017H
	push	0
	lea	eax, DWORD PTR _CLSID_MMDeviceEnumerator$[ebp]
	push	eax
	call	DWORD PTR __imp__CoCreateInstance@20
	mov	DWORD PTR _err$[ebp], eax

; 47   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN11@BlankAudio

; 48   :             CrashError(TEXT("Could not create IMMDeviceEnumerator: 0x%08lx"), err);

	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	push	OFFSET ??_C@_1FM@MNAHDCKA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AAE?$AAn?$AAu?$AAm?$AAe?$AAr@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN11@BlankAudio:

; 49   : 
; 50   :         if (scmpi(lpDevice, TEXT("Default")) == 0)

	push	OFFSET ??_C@_1BA@GHOECOCL@?$AAD?$AAe?$AAf?$AAa?$AAu?$AAl?$AAt?$AA?$AA@
	mov	edx, DWORD PTR _lpDevice$[ebp]
	push	edx
	call	DWORD PTR __imp_?scmpi@@YGHPB_W0@Z
	test	eax, eax
	jne	SHORT $LN10@BlankAudio

; 51   :             err = mmEnumerator->GetDefaultAudioEndpoint(eRender, eConsole, &mmDevice);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 4
	push	eax
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+16]
	call	eax
	mov	DWORD PTR _err$[ebp], eax

; 52   :         else

	jmp	SHORT $LN9@BlankAudio
$LN10@BlankAudio:

; 53   :             err = mmEnumerator->GetDevice(lpDevice, &mmDevice);

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _lpDevice$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	mov	DWORD PTR _err$[ebp], eax
$LN9@BlankAudio:

; 54   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN8@BlankAudio

; 55   :             CrashError(TEXT("Could not create IMMDevice"));

	push	OFFSET ??_C@_1DG@JEKEKLHO@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAM?$AAM?$AAD?$AAe?$AAv?$AAi?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN8@BlankAudio:

; 56   : 
; 57   :         err = mmDevice->Activate(IID_IAudioClient, CLSCTX_ALL, NULL, (void**)&mmClient);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	push	eax
	push	0
	push	23					; 00000017H
	lea	ecx, DWORD PTR _IID_IAudioClient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 58   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN7@BlankAudio

; 59   :             CrashError(TEXT("Could not create IAudioClient"));

	push	OFFSET ??_C@_1DM@CJOGDDOI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAc?$AAr?$AAe?$AAa?$AAt?$AAe?$AA?5?$AAI?$AAA?$AAu?$AAd?$AAi?$AAo?$AAC?$AAl?$AAi?$AAe?$AAn?$AAt?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN7@BlankAudio:

; 60   : 
; 61   :         WAVEFORMATEX *pwfx;
; 62   :         err = mmClient->GetMixFormat(&pwfx);

	lea	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+32]
	call	edx
	mov	DWORD PTR _err$[ebp], eax

; 63   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN6@BlankAudio

; 64   :             CrashError(TEXT("Could not get mix format from audio client"));

	push	OFFSET ??_C@_1FG@BICMGOC@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAm?$AAi?$AAx?$AA?5?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?5?$AAf?$AAr?$AAo?$AAm?$AA?5?$AAa?$AAu@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN6@BlankAudio:

; 65   : 
; 66   :         UINT inputBlockSize = pwfx->nBlockAlign;

	mov	eax, DWORD PTR _pwfx$[ebp]
	movzx	ecx, WORD PTR [eax+12]
	mov	DWORD PTR _inputBlockSize$[ebp], ecx

; 67   : 
; 68   :         err = mmClient->Initialize(AUDCLNT_SHAREMODE_SHARED, 0, ConvertMSTo100NanoSec(1000), 0, pwfx, NULL);

	push	0
	mov	edx, DWORD PTR _pwfx$[ebp]
	push	edx
	push	0
	push	0
	push	1000					; 000003e8H
	call	?ConvertMSTo100NanoSec@@YAII@Z		; ConvertMSTo100NanoSec
	add	esp, 4
	xor	ecx, ecx
	push	ecx
	push	eax
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 69   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN5@BlankAudio

; 70   :             CrashError(TEXT("Could not initialize audio client, error = %08lX"), err);

	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	OFFSET ??_C@_1GC@JPHGCICI@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN5@BlankAudio:

; 71   : 
; 72   :         err = mmClient->GetService(IID_IAudioRenderClient, (void**)&mmRender);

	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	lea	ecx, DWORD PTR _IID_IAudioRenderClient$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+56]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 73   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN4@BlankAudio

; 74   :             CrashError(TEXT("Could not get audio render client"));

	push	OFFSET ??_C@_1EE@OJDHJFMD@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAr?$AAe?$AAn?$AAd?$AAe?$AAr?$AA?5?$AAc?$AAl?$AAi?$AAe?$AAn@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN4@BlankAudio:

; 75   : 
; 76   :         //----------------------------------------------------------------
; 77   : 
; 78   :         UINT bufferFrameCount;
; 79   :         err = mmClient->GetBufferSize(&bufferFrameCount);

	lea	edx, DWORD PTR _bufferFrameCount$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	mov	DWORD PTR _err$[ebp], eax

; 80   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN3@BlankAudio

; 81   :             CrashError(TEXT("Could not get audio buffer size"));

	push	OFFSET ??_C@_1EA@BLCAHPAA@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN3@BlankAudio:

; 82   : 
; 83   :         BYTE *lpData;
; 84   :         err = mmRender->GetBuffer(bufferFrameCount, &lpData);

	lea	eax, DWORD PTR _lpData$[ebp]
	push	eax
	mov	ecx, DWORD PTR _bufferFrameCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	mov	DWORD PTR _err$[ebp], eax

; 85   :         if(FAILED(err))

	cmp	DWORD PTR _err$[ebp], 0
	jge	SHORT $LN2@BlankAudio

; 86   :             CrashError(TEXT("Could not get audio buffer"));

	push	OFFSET ??_C@_1DG@KDLKNPMN@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAg?$AAe?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN2@BlankAudio:

; 87   : 
; 88   :         zero(lpData, bufferFrameCount*inputBlockSize);

	mov	edx, DWORD PTR _bufferFrameCount$[ebp]
	imul	edx, DWORD PTR _inputBlockSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpData$[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 89   : 
; 90   :         mmRender->ReleaseBuffer(bufferFrameCount, 0);//AUDCLNT_BUFFERFLAGS_SILENT); //probably better if it doesn't know

	push	0
	mov	ecx, DWORD PTR _bufferFrameCount$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx

; 91   : 
; 92   :         if(FAILED(mmClient->Start()))

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+40]
	call	ecx
	test	eax, eax
	jge	SHORT $LN12@BlankAudio

; 93   :             CrashError(TEXT("Could not start audio source"));

	push	OFFSET ??_C@_1DK@BJAODCIM@?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?5?$AAa?$AAu?$AAd?$AAi?$AAo?$AA?5?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?CrashError@@YAXPB_WZZ
$LN12@BlankAudio:

; 94   :     }

	mov	eax, DWORD PTR _this$[ebp]
$LN13@BlankAudio:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	4
??0BlankAudioPlayback@@QAE@PB_W@Z ENDP			; BlankAudioPlayback::BlankAudioPlayback
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\blankaudioplayback.cpp
;	COMDAT ??1BlankAudioPlayback@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1BlankAudioPlayback@@QAE@XZ PROC			; BlankAudioPlayback::~BlankAudioPlayback, COMDAT
; _this$ = ecx

; 97   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 98   :         mmClient->Stop();

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+44]
	call	edx

; 99   : 
; 100  :         SafeRelease(mmRender);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@BlankAudio
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
$LN4@BlankAudio:

; 101  :         SafeRelease(mmClient);

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN3@BlankAudio
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx]
	push	eax
	mov	edx, DWORD PTR [ecx+8]
	call	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
$LN3@BlankAudio:

; 102  :         SafeRelease(mmDevice);

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@BlankAudio
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
$LN2@BlankAudio:

; 103  :         SafeRelease(mmEnumerator);

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN5@BlankAudio
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN5@BlankAudio:

; 104  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
??1BlankAudioPlayback@@QAE@XZ ENDP			; BlankAudioPlayback::~BlankAudioPlayback
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\blankaudioplayback.cpp
;	COMDAT ?StartBlankSoundPlayback@@YAXPB_W@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
$T1 = -4						; size = 4
_lpDevice$ = 8						; size = 4
?StartBlankSoundPlayback@@YAXPB_W@Z PROC		; StartBlankSoundPlayback, COMDAT

; 111  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 112  :     if(!curBlankPlaybackThingy)

	cmp	DWORD PTR _curBlankPlaybackThingy, 0
	jne	SHORT $LN2@StartBlank

; 113  :         curBlankPlaybackThingy = new BlankAudioPlayback(lpDevice);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@StartBlank
	mov	eax, DWORD PTR _lpDevice$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0BlankAudioPlayback@@QAE@PB_W@Z	; BlankAudioPlayback::BlankAudioPlayback
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@StartBlank
$LN4@StartBlank:
	mov	DWORD PTR tv71[ebp], 0
$LN5@StartBlank:
	mov	ecx, DWORD PTR tv71[ebp]
	mov	DWORD PTR _curBlankPlaybackThingy, ecx
$LN2@StartBlank:

; 114  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StartBlankSoundPlayback@@YAXPB_W@Z ENDP		; StartBlankSoundPlayback
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\blankaudioplayback.cpp
;	COMDAT ?StopBlankSoundPlayback@@YAXXZ
_TEXT	SEGMENT
tv69 = -12						; size = 4
$T1 = -8						; size = 4
$T2 = -4						; size = 4
?StopBlankSoundPlayback@@YAXXZ PROC			; StopBlankSoundPlayback, COMDAT

; 117  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 118  :     if(curBlankPlaybackThingy)

	cmp	DWORD PTR _curBlankPlaybackThingy, 0
	je	SHORT $LN2@StopBlankS

; 119  :     {
; 120  :         delete curBlankPlaybackThingy;

	mov	eax, DWORD PTR _curBlankPlaybackThingy
	mov	DWORD PTR $T1[ebp], eax
	mov	ecx, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], ecx
	cmp	DWORD PTR $T2[ebp], 0
	je	SHORT $LN4@StopBlankS
	push	1
	mov	ecx, DWORD PTR $T2[ebp]
	call	??_GBlankAudioPlayback@@QAEPAXI@Z
	mov	DWORD PTR tv69[ebp], eax
	jmp	SHORT $LN5@StopBlankS
$LN4@StopBlankS:
	mov	DWORD PTR tv69[ebp], 0
$LN5@StopBlankS:

; 121  :         curBlankPlaybackThingy = NULL;

	mov	DWORD PTR _curBlankPlaybackThingy, 0
$LN2@StopBlankS:

; 122  :     }
; 123  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?StopBlankSoundPlayback@@YAXXZ ENDP			; StopBlankSoundPlayback
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBlankAudioPlayback@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBlankAudioPlayback@@QAEPAXI@Z PROC			; BlankAudioPlayback::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BlankAudioPlayback@@QAE@XZ		; BlankAudioPlayback::~BlankAudioPlayback
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBlankAudioPlayback@@QAEPAXI@Z ENDP			; BlankAudioPlayback::`scalar deleting destructor'
_TEXT	ENDS
END
