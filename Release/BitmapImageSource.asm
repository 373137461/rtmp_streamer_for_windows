; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.21005.1 

	TITLE	F:\songmm_moon_stone_obs\OBS\Source\BitmapImageSource.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@		; `string'
PUBLIC	??_C@_0P@CECBPMJL@ActivateActCtx?$AA@		; `string'
PUBLIC	??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@	; `string'
PUBLIC	??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ ; `string'
PUBLIC	??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@		; `string'
PUBLIC	??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@	; `string'
PUBLIC	??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@		; `string'
PUBLIC	??_C@_0BB@EFHCCPMP@GetOpenFileNameW?$AA@	; `string'
PUBLIC	??_C@_1BK@JHKPKIHE@?$AAC?$AAo?$AAm?$AAd?$AAl?$AAg?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@BLDGONPB@Comdlg32?4dll?$AA@		; `string'
PUBLIC	??_C@_1DK@KFIIOLPP@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA_?$AAR?$AAG?$AAB?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@KEBKHFHN@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAl?$AAp?$AAh?$AAa?$AAI?$AAg?$AAn?$AAo?$AAr?$AAe?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@PMLIOPBC@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@	; `string'
PUBLIC	??_C@_1BA@FBJJKPF@?$AAm?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@ ; `string'
PUBLIC	?c@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::c
PUBLIC	?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
PUBLIC	?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
PUBLIC	??_R2ImageSource@@8				; ImageSource::`RTTI Base Class Array'
PUBLIC	?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
PUBLIC	??_R3BitmapImageSource@@8			; BitmapImageSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_7BitmapImageSource@@6B@			; BitmapImageSource::`vftable'
PUBLIC	??_R3ImageSource@@8				; ImageSource::`RTTI Class Hierarchy Descriptor'
PUBLIC	?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
PUBLIC	?m@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::m
PUBLIC	??_R2BitmapImageSource@@8			; BitmapImageSource::`RTTI Base Class Array'
PUBLIC	??_R4BitmapImageSource@@6B@			; BitmapImageSource::`RTTI Complete Object Locator'
PUBLIC	??_R1A@?0A@EA@BitmapImageSource@@8		; BitmapImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
PUBLIC	??_R0?AVBitmapImageSource@@@8			; BitmapImageSource `RTTI Type Descriptor'
PUBLIC	?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
PUBLIC	??_R1A@?0A@EA@ImageSource@@8			; ImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVImageSource@@@8				; ImageSource `RTTI Type Descriptor'
PUBLIC	?s_module@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4PAUHINSTANCE__@@A ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::s_module
PUBLIC	?s_pfn@?1??IsolationAwareGetOpenFileNameW@@9@4@4P6GHPAUtagOFNW@@@ZA ; `IsolationAwareGetOpenFileNameW'::`2'::s_pfn
PUBLIC	?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
EXTRN	__imp_?IsEmpty@String@@QBEHXZ:PROC
EXTRN	__imp_?SetColor@Shader@@QAEXPAXK@Z:PROC
EXTRN	__imp_??1ImageSource@@UAE@XZ:PROC
EXTRN	?Preprocess@ImageSource@@UAEXXZ:PROC		; ImageSource::Preprocess
EXTRN	__imp_?Preprocess@ImageSource@@UAEXXZ:PROC
EXTRN	?BeginScene@ImageSource@@UAEXXZ:PROC		; ImageSource::BeginScene
EXTRN	__imp_?BeginScene@ImageSource@@UAEXXZ:PROC
EXTRN	?EndScene@ImageSource@@UAEXXZ:PROC		; ImageSource::EndScene
EXTRN	__imp_?EndScene@ImageSource@@UAEXXZ:PROC
EXTRN	?GlobalSourceLeaveScene@ImageSource@@UAEXXZ:PROC ; ImageSource::GlobalSourceLeaveScene
EXTRN	__imp_?GlobalSourceLeaveScene@ImageSource@@UAEXXZ:PROC
EXTRN	?GlobalSourceEnterScene@ImageSource@@UAEXXZ:PROC ; ImageSource::GlobalSourceEnterScene
EXTRN	__imp_?GlobalSourceEnterScene@ImageSource@@UAEXXZ:PROC
EXTRN	?SetFloat@ImageSource@@UAEXPB_WM@Z:PROC		; ImageSource::SetFloat
EXTRN	__imp_?SetFloat@ImageSource@@UAEXPB_WM@Z:PROC
EXTRN	?SetInt@ImageSource@@UAEXPB_WH@Z:PROC		; ImageSource::SetInt
EXTRN	__imp_?SetInt@ImageSource@@UAEXPB_WH@Z:PROC
EXTRN	?SetString@ImageSource@@UAEXPB_W0@Z:PROC	; ImageSource::SetString
EXTRN	__imp_?SetString@ImageSource@@UAEXPB_W0@Z:PROC
EXTRN	?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z:PROC ; ImageSource::SetVector
EXTRN	__imp_?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z:PROC
EXTRN	?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z:PROC ; ImageSource::SetVector2
EXTRN	__imp_?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z:PROC
EXTRN	?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z:PROC ; ImageSource::SetVector4
EXTRN	__imp_?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z:PROC
EXTRN	?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z:PROC ; ImageSource::SetMatrix
EXTRN	__imp_?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z:PROC
EXTRN	?GetFloat@ImageSource@@UBE_NPB_WAAM@Z:PROC	; ImageSource::GetFloat
EXTRN	__imp_?GetFloat@ImageSource@@UBE_NPB_WAAM@Z:PROC
EXTRN	?GetInt@ImageSource@@UBE_NPB_WAAH@Z:PROC	; ImageSource::GetInt
EXTRN	__imp_?GetInt@ImageSource@@UBE_NPB_WAAH@Z:PROC
EXTRN	?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z:PROC ; ImageSource::GetString
EXTRN	__imp_?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z:PROC
EXTRN	?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z:PROC ; ImageSource::GetVector
EXTRN	__imp_?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z:PROC
EXTRN	?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z:PROC ; ImageSource::GetVector2
EXTRN	__imp_?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z:PROC
EXTRN	?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z:PROC ; ImageSource::GetVector4
EXTRN	__imp_?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z:PROC
EXTRN	?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z:PROC ; ImageSource::GetMatrix
EXTRN	__imp_?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z:PROC
EXTRN	__imp_?GetSource@SceneItem@@QBEPAVImageSource@@XZ:PROC
EXTRN	__imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z:PROC
EXTRN	__imp_??0ImageSource@@QAE@XZ:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__BitBlt@36:PROC
EXTRN	__imp__OutputDebugStringA@4:PROC
EXTRN	__imp_?CreatePixelShaderFromFile@GraphicsSystem@@QAEPAVShader@@PB_W@Z:PROC
EXTRN	__imp_?DrawSprite@GraphicsSystem@@QAEXPAVTexture@@KMMMM@Z:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__LoadImageW@24:PROC
EXTRN	__imp__SetCapture@4:PROC
EXTRN	__imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z:PROC
EXTRN	__imp__SetCurrentDirectoryW@4:PROC
EXTRN	__imp__DeleteDC@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
EXTRN	__imp__GetDIBits@28:PROC
EXTRN	__imp_?OBSDialogBox@@YAHPAUHINSTANCE__@@PB_WPAUHWND__@@P6GH2IIJ@ZJ@Z:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__SetLastError@4:PROC
EXTRN	__imp__GetCurrentDirectoryW@8:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__CreateCompatibleDC@4:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp_?SetString@XElement@@QAEXPB_W0@Z:PROC
EXTRN	__imp_?SetInt@XElement@@QAEXPB_WH@Z:PROC
EXTRN	__imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z:PROC
EXTRN	__imp_?CCGetColor@@YAKPAUHWND__@@@Z:PROC
EXTRN	__imp__GetWindowLongW@8:PROC
EXTRN	__imp__CreateCompatibleBitmap@12:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__SetWindowLongW@12:PROC
EXTRN	__imp__EndDialog@8:PROC
EXTRN	__imp__GetCursorPos@4:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__ReleaseCapture@0:PROC
EXTRN	__imp__EnableWindow@8:PROC
EXTRN	__imp__SetWindowTextW@8:PROC
EXTRN	__imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z:PROC
EXTRN	__imp_?CCSetColor@@YAXPAUHWND__@@K@Z:PROC
EXTRN	__imp__D3DX10GetImageInfoFromFileW@16:PROC
;	COMDAT ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureBitmapProc'::`2'::bSelectingColor
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA DD 01H DUP (?) ; `IsolationAwareActivateActCtx'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
_BSS	SEGMENT
?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA DB 01H DUP (?) ; `ConfigureBitmapProc'::`2'::bMouseDown
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA DD 01H DUP (?) ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA DD 01H DUP (?) ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_module@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::s_module
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA DD 01H DUP (?) ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?m@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A
_BSS	SEGMENT
?m@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A DD 01H DUP (?) ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::m
_BSS	ENDS
;	COMDAT ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A
_BSS	SEGMENT
?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A DD 01H DUP (?) ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
_BSS	ENDS
;	COMDAT ?s_module@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4PAUHINSTANCE__@@A
_BSS	SEGMENT
?s_module@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4PAUHINSTANCE__@@A DD 01H DUP (?) ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::s_module
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareGetOpenFileNameW@@9@4@4P6GHPAUtagOFNW@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareGetOpenFileNameW@@9@4@4P6GHPAUtagOFNW@@@ZA DD 01H DUP (?) ; `IsolationAwareGetOpenFileNameW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA
_BSS	SEGMENT
?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA DD 01H DUP (?) ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
_BSS	ENDS
;	COMDAT ??_R0?AVImageSource@@@8
data$r	SEGMENT
??_R0?AVImageSource@@@8 DD FLAT:??_7type_info@@6B@	; ImageSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVImageSource@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ImageSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ImageSource@@8 DD FLAT:??_R0?AVImageSource@@@8 ; ImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ImageSource@@8
rdata$r	ENDS
;	COMDAT ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB
CONST	SEGMENT
?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB DB 'Iso'
	DB	'lationAware function called after IsolationAwareCleanup', 0aH
	DB	00H						; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
CONST	ENDS
;	COMDAT ??_R0?AVBitmapImageSource@@@8
data$r	SEGMENT
??_R0?AVBitmapImageSource@@@8 DD FLAT:??_7type_info@@6B@ ; BitmapImageSource `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVBitmapImageSource@@', 00H
data$r	ENDS
;	COMDAT ??_R1A@?0A@EA@BitmapImageSource@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@BitmapImageSource@@8 DD FLAT:??_R0?AVBitmapImageSource@@@8 ; BitmapImageSource::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3BitmapImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R4BitmapImageSource@@6B@
rdata$r	SEGMENT
??_R4BitmapImageSource@@6B@ DD 00H			; BitmapImageSource::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVBitmapImageSource@@@8
	DD	FLAT:??_R3BitmapImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R2BitmapImageSource@@8
rdata$r	SEGMENT
??_R2BitmapImageSource@@8 DD FLAT:??_R1A@?0A@EA@BitmapImageSource@@8 ; BitmapImageSource::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R3ImageSource@@8
rdata$r	SEGMENT
??_R3ImageSource@@8 DD 00H				; ImageSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2ImageSource@@8
rdata$r	ENDS
;	COMDAT ??_7BitmapImageSource@@6B@
CONST	SEGMENT
??_7BitmapImageSource@@6B@ DD FLAT:??_R4BitmapImageSource@@6B@ ; BitmapImageSource::`vftable'
	DD	FLAT:??_EBitmapImageSource@@UAEPAXI@Z
	DD	FLAT:?Preprocess@ImageSource@@UAEXXZ
	DD	FLAT:?Tick@BitmapImageSource@@UAEXM@Z
	DD	FLAT:?Render@BitmapImageSource@@UAEXABUVect2@@0@Z
	DD	FLAT:?GetSize@BitmapImageSource@@UBE?AUVect2@@XZ
	DD	FLAT:?UpdateSettings@BitmapImageSource@@UAEXXZ
	DD	FLAT:?BeginScene@ImageSource@@UAEXXZ
	DD	FLAT:?EndScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceLeaveScene@ImageSource@@UAEXXZ
	DD	FLAT:?GlobalSourceEnterScene@ImageSource@@UAEXXZ
	DD	FLAT:?SetFloat@ImageSource@@UAEXPB_WM@Z
	DD	FLAT:?SetInt@ImageSource@@UAEXPB_WH@Z
	DD	FLAT:?SetString@ImageSource@@UAEXPB_W0@Z
	DD	FLAT:?SetVector@ImageSource@@UAEXPB_WABUVect@@@Z
	DD	FLAT:?SetVector2@ImageSource@@UAEXPB_WABUVect2@@@Z
	DD	FLAT:?SetVector4@ImageSource@@UAEXPB_WABUVect4@@@Z
	DD	FLAT:?SetMatrix@ImageSource@@UAEXPB_WABUMatrix@@@Z
	DD	FLAT:?GetFloat@ImageSource@@UBE_NPB_WAAM@Z
	DD	FLAT:?GetInt@ImageSource@@UBE_NPB_WAAH@Z
	DD	FLAT:?GetString@ImageSource@@UBE_NPB_WAAVString@@@Z
	DD	FLAT:?GetVector@ImageSource@@UBE_NPB_WAAUVect@@@Z
	DD	FLAT:?GetVector2@ImageSource@@UBE_NPB_WAAUVect2@@@Z
	DD	FLAT:?GetVector4@ImageSource@@UBE_NPB_WAAUVect4@@@Z
	DD	FLAT:?GetMatrix@ImageSource@@UBE_NPB_WAAUMatrix@@@Z
CONST	ENDS
;	COMDAT ??_R3BitmapImageSource@@8
rdata$r	SEGMENT
??_R3BitmapImageSource@@8 DD 00H			; BitmapImageSource::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2BitmapImageSource@@8
rdata$r	ENDS
;	COMDAT ??_R2ImageSource@@8
rdata$r	SEGMENT
??_R2ImageSource@@8 DD FLAT:??_R1A@?0A@EA@ImageSource@@8 ; ImageSource::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
CONST	SEGMENT
?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B DD FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
	DD	FLAT:??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	DD	FLAT:_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
	DD	FLAT:??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	ENDS
;	COMDAT ?c@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B
CONST	SEGMENT
?c@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B DD FLAT:_IsolationAwarePrivatezlybNQyVOeNelJ@4 ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::c
	DD	FLAT:??_C@_1BK@JHKPKIHE@?$AAC?$AAo?$AAm?$AAd?$AAl?$AAg?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	DD	FLAT:_IsolationAwarePrivatezlybNQyVOeNeln@4
	DD	FLAT:??_C@_0N@BLDGONPB@Comdlg32?4dll?$AA@
CONST	ENDS
;	COMDAT ??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H, 'i', 00H
	DB	'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'k'
	DB	00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H
	DB	'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@ DB 'c', 00H, 'o', 00H
	DB	'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@ DB 'o', 00H
	DB	'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H, 'y', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FBJJKPF@?$AAm?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@FBJJKPF@?$AAm?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?$AA@ DB 'm', 00H
	DB	'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@ DB 'p', 00H, 'a', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@PMLIOPBC@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@PMLIOPBC@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AA@ DB 'U'
	DB	00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H, ' ', 00H, 'i'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@KEBKHFHN@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAl?$AAp?$AAh?$AAa?$AAI?$AAg?$AAn?$AAo?$AAr?$AAe?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@KEBKHFHN@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAl?$AAp?$AAh?$AAa?$AAI?$AAg?$AAn?$AAo?$AAr?$AAe?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ DB 's'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'\', 00H, 'A', 00H, 'l', 00H, 'p', 00H, 'h', 00H, 'a', 00H, 'I'
	DB	00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e', 00H, '.', 00H
	DB	'p', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@KFIIOLPP@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA_?$AAR?$AAG?$AAB?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KFIIOLPP@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA_?$AAR?$AAG?$AAB?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@ DB 's'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'\', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 'K'
	DB	00H, 'e', 00H, 'y', 00H, '_', 00H, 'R', 00H, 'G', 00H, 'B', 00H
	DB	'.', 00H, 'p', 00H, 'S', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BLDGONPB@Comdlg32?4dll?$AA@
CONST	SEGMENT
??_C@_0N@BLDGONPB@Comdlg32?4dll?$AA@ DB 'Comdlg32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@JHKPKIHE@?$AAC?$AAo?$AAm?$AAd?$AAl?$AAg?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@JHKPKIHE@?$AAC?$AAo?$AAm?$AAd?$AAl?$AAg?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'd', 00H, 'l', 00H, 'g', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EFHCCPMP@GetOpenFileNameW?$AA@
CONST	SEGMENT
??_C@_0BB@EFHCCPMP@GetOpenFileNameW?$AA@ DB 'GetOpenFileNameW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@
CONST	SEGMENT
??_C@_0N@HAOHNMDE@Kernel32?4dll?$AA@ DB 'Kernel32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EJBALEBG@?$AAK?$AAe?$AAr?$AAn?$AAe?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'K'
	DB	00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@ DB 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'c', 00H, 't', 00H, 'l', 00H, '3', 00H
	DB	'2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
CONST	SEGMENT
??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@ DB 'GetModuleHandleExW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
CONST	SEGMENT
??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@ DB 'QueryActCtxW', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
CONST	SEGMENT
??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@ DB 'FindActCtxSectionStr'
	DB	'ingW', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
CONST	SEGMENT
??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@ DB 'DeactivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
CONST	SEGMENT
??_C@_0P@CECBPMJL@ActivateActCtx?$AA@ DB 'ActivateActCtx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
CONST	SEGMENT
??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@ DB 'CreateActCtxW', 00H ; `string'
$SG4294949934 DB 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294949933 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294949932 DB 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294949931 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294949930 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294949929 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294949928 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294949927 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294949926 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294949925 DB 'A', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'F', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 's', 00H, ' ', 00H, '('
	DB	00H, '*', 00H, '.', 00H, 'b', 00H, 'm', 00H, 'p', 00H, ';', 00H
	DB	'*', 00H, '.', 00H, 'd', 00H, 'd', 00H, 's', 00H, ';', 00H, '*'
	DB	00H, '.', 00H, 'j', 00H, 'p', 00H, 'g', 00H, ';', 00H, '*', 00H
	DB	'.', 00H, 'p', 00H, 'n', 00H, 'g', 00H, ';', 00H, '*', 00H, '.'
	DB	00H, 'g', 00H, 'i', 00H, 'f', 00H, ')', 00H, 00H, 00H, '*', 00H
	DB	'.', 00H, 'b', 00H, 'm', 00H, 'p', 00H, ';', 00H, '*', 00H, '.'
	DB	00H, 'd', 00H, 'd', 00H, 's', 00H, ';', 00H, '*', 00H, '.', 00H
	DB	'j', 00H, 'p', 00H, 'g', 00H, ';', 00H, '*', 00H, '.', 00H, 'p'
	DB	00H, 'n', 00H, 'g', 00H, ';', 00H, '*', 00H, '.', 00H, 'g', 00H
	DB	'i', 00H, 'f', 00H, 00H, 00H, 00H, 00H
	ORG $+2
$SG4294949924 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294949923 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294949922 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294949921 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294949920 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294949919 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294949918 DB 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	's', 00H, '.', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm', 00H, 'a'
	DB	00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H
	DB	'e', 00H, '.', 00H, 'E', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
	ORG $+2
$SG4294949917 DB 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294949916 DB 'o', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'i', 00H, 't', 00H
	DB	'y', 00H, 00H, 00H
$SG4294949915 DB 'c', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H, 00H, 00H
$SG4294949914 DB 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 00H, 00H
$SG4294949913 DB 'k', 00H, 'e', 00H, 'y', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG4294949912 DB 'k', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'y'
	DB	00H, 00H, 00H
$SG4294949911 DB 'k', 00H, 'e', 00H, 'y', 00H, 'B', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG4294949910 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294949909 DB 'm', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'o', 00H
	DB	'r', 00H, 00H, 00H
$SG4294949908 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, ' ', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
$SG4294949907 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294949906 DB 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H
	ORG $+2
$SG4294949905 DB 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG4294949904 DB 'c', 00H, 'x', 00H, 00H, 00H
	ORG $+2
$SG4294949903 DB 'c', 00H, 'y', 00H, 00H, 00H
$SG4294949902 DB 'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'B', 00H, 'i', 00H, 't', 00H, 'm'
	DB	00H, 'a', 00H, 'p', 00H, 'S', 00H, 'o', 00H, 'u', 00H, 'r', 00H
	DB	'c', 00H, 'e', 00H, ':', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'l', 00H, 'd', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'm'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'f', 00H, 'o', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 'm', 00H, 'a', 00H, 'p', 00H
	DB	' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H, 00H
PUBLIC	?ConfigureBitmapSource@@YG_NPAVXElement@@_N@Z	; ConfigureBitmapSource
PUBLIC	?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z	; ConfigureBitmapProc
PUBLIC	?CreateBitmapSource@@YGPAVImageSource@@PAVXElement@@@Z ; CreateBitmapSource
PUBLIC	??_GBitmapImageSource@@UAEPAXI@Z		; BitmapImageSource::`scalar deleting destructor'
PUBLIC	?GetSize@BitmapImageSource@@UBE?AUVect2@@XZ	; BitmapImageSource::GetSize
PUBLIC	?UpdateSettings@BitmapImageSource@@UAEXXZ	; BitmapImageSource::UpdateSettings
PUBLIC	?Render@BitmapImageSource@@UAEXABUVect2@@0@Z	; BitmapImageSource::Render
PUBLIC	?Tick@BitmapImageSource@@UAEXM@Z		; BitmapImageSource::Tick
PUBLIC	??1BitmapImageSource@@UAE@XZ			; BitmapImageSource::~BitmapImageSource
PUBLIC	??0BitmapImageSource@@QAE@PAVXElement@@@Z	; BitmapImageSource::BitmapImageSource
PUBLIC	?GetColor@ColorSelectionData@@QAEKXZ		; ColorSelectionData::GetColor
PUBLIC	?Clear@ColorSelectionData@@QAEXXZ		; ColorSelectionData::Clear
PUBLIC	?Init@ColorSelectionData@@QAE_NXZ		; ColorSelectionData::Init
PUBLIC	??1ColorSelectionData@@QAE@XZ			; ColorSelectionData::~ColorSelectionData
PUBLIC	??0ColorSelectionData@@QAE@XZ			; ColorSelectionData::ColorSelectionData
PUBLIC	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
PUBLIC	?DrawSprite@@YAXPAVTexture@@KMMMM@Z		; DrawSprite
PUBLIC	?GetCurrentPixelShader@@YAPAVShader@@XZ		; GetCurrentPixelShader
PUBLIC	?LoadPixelShader@@YAXPAVShader@@@Z		; LoadPixelShader
PUBLIC	?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z	; CreatePixelShaderFromFile
PUBLIC	?nop@@YAXXZ					; nop
PUBLIC	_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4
PUBLIC	_IsolationAwareGetOpenFileNameW@4
PUBLIC	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
PUBLIC	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
PUBLIC	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
PUBLIC	_IsolationAwarePrivatezltRgCebPnQQeRff@12
PUBLIC	_IsolationAwareQueryActCtxW@28
PUBLIC	_IsolationAwareFindActCtxSectionStringW@20
PUBLIC	_IsolationAwareDeactivateActCtx@8
PUBLIC	_IsolationAwareActivateActCtx@8
PUBLIC	_IsolationAwareCreateActCtxW@4
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
PUBLIC	_IsolationAwarePrivatezlybNQyVOeNelJ@4
PUBLIC	_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
PUBLIC	_IsolationAwarePrivatezlybNQyVOeNeln@4
EXTRN	??_EBitmapImageSource@@UAEPAXI@Z:PROC		; BitmapImageSource::`vector deleting destructor'
	ALIGN	4

__Tuple_alloc DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?$S1@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4IA
_BSS	SEGMENT
?$S1@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; S1<`template-parameter-2',nfigureBitmapProc,GHPAUHWND__,unsigned int,unsigned int,long>
	ALIGN	4

_ignore	DB	01H DUP (?)
	ALIGN	4

_allocator_arg DB 01H DUP (?)
_BSS	ENDS
;	COMDAT ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
_BSS	SEGMENT
?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A DB 010H DUP (?) ; `ConfigureBitmapProc'::`2'::colorData
	ALIGN	4

_piecewise_construct DB 01H DUP (?)
_BSS	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 DD 0ffffffe4H
	DD	00H
	DD	0fffffd48H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN30@WinbaseIso
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_IsolationAwareGetOpenFileNameW@4 DD 0fffffffeH
	DD	00H
	DD	0ffffffb4H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN21@IsolationA
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__sehtable$_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4 DD 0fffffffeH
	DD	00H
	DD	0ffffffc4H
	DD	00H
	DD	0fffffffeH
	DD	00H
	DD	FLAT:$LN16@CommdlgIso
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
_ignore$initializer$ DD FLAT:??__Eignore@std@@YAXXZ
__Tuple_alloc$initializer$ DD FLAT:??__E_Tuple_alloc@std@@YAXXZ
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatezlybNQyVOeNeln@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezlybNQyVOeNeln@4 PROC		; COMDAT

; 47   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezlybNQyVOeNeln(_In_ PCSTR s) { return LoadLibraryA(s); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryA@4
	pop	ebp
	ret	4
_IsolationAwarePrivatezlybNQyVOeNeln@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 PROC		; COMDAT

; 48   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRn(_In_ PCSTR s) { return GetModuleHandleA(s); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__GetModuleHandleA@4
	pop	ebp
	ret	4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRn@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatezlybNQyVOeNelJ@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezlybNQyVOeNelJ@4 PROC		; COMDAT

; 50   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezlybNQyVOeNelJ(_In_ PCWSTR s) { return LoadLibraryW(s); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__LoadLibraryW@4
	pop	ebp
	ret	4
_IsolationAwarePrivatezlybNQyVOeNelJ@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4
_TEXT	SEGMENT
_s$ = 8							; size = 4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 PROC		; COMDAT

; 51   : ISOLATION_AWARE_INLINE HMODULE IsolationAwarePrivatenCv IsolationAwarePrivatezltRgzbQhYRuNaQYRJ(_In_ PCWSTR s) { return GetModuleHandleW(s); }

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__GetModuleHandleW@4
	pop	ebp
	ret	4
_IsolationAwarePrivatezltRgzbQhYRuNaQYRJ@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwareCreateActCtxW@4
_TEXT	SEGMENT
_result$ = -8						; size = 4
___IsolationAware_pfn$ = -4				; size = 4
_pActCtx$ = 8						; size = 4
_IsolationAwareCreateActCtxW@4 PROC			; COMDAT

; 155  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 156  : #ifdef _WIN64
; 157  :     return CreateActCtxW(pActCtx);
; 158  : #else
; 159  :     HANDLE result = INVALID_HANDLE_VALUE;

	mov	DWORD PTR _result$[ebp], -1

; 160  :     typedef HANDLE (WINAPI* PFN)(_In_ PCACTCTXW pActCtx);
; 161  :     static PFN s_pfn;
; 162  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 163  :     if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 164  :     {
; 165  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("CreateActCtxW");

	push	OFFSET ??_C@_0O@JKAFBCMB@CreateActCtxW?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 166  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN1@IsolationA

; 167  :             return result;

	mov	eax, DWORD PTR _result$[ebp]
	jmp	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 168  :         s_pfn = __IsolationAware_pfn;

	mov	ecx, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareCreateActCtxW@@9@4@4P6GPAXPBUtagACTCTXW@@@ZA, ecx ; `IsolationAwareCreateActCtxW'::`2'::s_pfn
$LN2@IsolationA:

; 169  :     }
; 170  :     result = __IsolationAware_pfn(pActCtx);

	mov	edx, DWORD PTR _pActCtx$[ebp]
	push	edx
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _result$[ebp], eax

; 171  :     return result;

	mov	eax, DWORD PTR _result$[ebp]
$LN3@IsolationA:

; 172  : #endif
; 173  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_IsolationAwareCreateActCtxW@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwareActivateActCtx@8
_TEXT	SEGMENT
_fResult$ = -8						; size = 4
___IsolationAware_pfn$ = -4				; size = 4
_hActCtx$ = 8						; size = 4
_lpCookie$ = 12						; size = 4
_IsolationAwareActivateActCtx@8 PROC			; COMDAT

; 197  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 198  : #ifdef _WIN64
; 199  :     return ActivateActCtx(hActCtx,lpCookie);
; 200  : #else
; 201  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 202  :     typedef BOOL (WINAPI* PFN)(_Inout_opt_ HANDLE hActCtx,_Out_ ULONG_PTR*lpCookie);
; 203  :     static PFN s_pfn;
; 204  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA ; `IsolationAwareActivateActCtx'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 205  :     if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 206  :     {
; 207  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("ActivateActCtx");

	push	OFFSET ??_C@_0P@CECBPMJL@ActivateActCtx?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 208  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN1@IsolationA

; 209  :             return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
	jmp	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 210  :         s_pfn = __IsolationAware_pfn;

	mov	ecx, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareActivateActCtx@@9@8@4P6GHPAXPAK@ZA, ecx ; `IsolationAwareActivateActCtx'::`2'::s_pfn
$LN2@IsolationA:

; 211  :     }
; 212  :     fResult = __IsolationAware_pfn(hActCtx,lpCookie);

	mov	edx, DWORD PTR _lpCookie$[ebp]
	push	edx
	mov	eax, DWORD PTR _hActCtx$[ebp]
	push	eax
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _fResult$[ebp], eax

; 213  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
$LN3@IsolationA:

; 214  : #endif
; 215  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_IsolationAwareActivateActCtx@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwareDeactivateActCtx@8
_TEXT	SEGMENT
_fResult$ = -8						; size = 4
___IsolationAware_pfn$ = -4				; size = 4
_dwFlags$ = 8						; size = 4
_ulCookie$ = 12						; size = 4
_IsolationAwareDeactivateActCtx@8 PROC			; COMDAT

; 218  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 219  : #ifdef _WIN64
; 220  :     return DeactivateActCtx(dwFlags,ulCookie);
; 221  : #else
; 222  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 223  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ ULONG_PTR ulCookie);
; 224  :     static PFN s_pfn;
; 225  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 226  :     if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 227  :     {
; 228  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("DeactivateActCtx");

	push	OFFSET ??_C@_0BB@NPIOCCPF@DeactivateActCtx?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 229  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN1@IsolationA

; 230  :             return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
	jmp	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 231  :         s_pfn = __IsolationAware_pfn;

	mov	ecx, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareDeactivateActCtx@@9@8@4P6GHKK@ZA, ecx ; `IsolationAwareDeactivateActCtx'::`2'::s_pfn
$LN2@IsolationA:

; 232  :     }
; 233  :     fResult = __IsolationAware_pfn(dwFlags,ulCookie);

	mov	edx, DWORD PTR _ulCookie$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _fResult$[ebp], eax

; 234  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
$LN3@IsolationA:

; 235  : #endif
; 236  : }

	mov	esp, ebp
	pop	ebp
	ret	8
_IsolationAwareDeactivateActCtx@8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwareFindActCtxSectionStringW@20
_TEXT	SEGMENT
_fResult$ = -8						; size = 4
___IsolationAware_pfn$ = -4				; size = 4
_dwFlags$ = 8						; size = 4
_lpExtensionGuid$ = 12					; size = 4
_ulSectionId$ = 16					; size = 4
_lpStringToFind$ = 20					; size = 4
_ReturnedData$ = 24					; size = 4
_IsolationAwareFindActCtxSectionStringW@20 PROC		; COMDAT

; 239  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 240  : #ifdef _WIN64
; 241  :     return FindActCtxSectionStringW(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);
; 242  : #else
; 243  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 244  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_Reserved_ const GUID*lpExtensionGuid,_In_ ULONG ulSectionId,_In_ LPCWSTR lpStringToFind,_Out_ PACTCTX_SECTION_KEYED_DATA ReturnedData);
; 245  :     static PFN s_pfn;
; 246  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 247  :     if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 248  :     {
; 249  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("FindActCtxSectionStringW");

	push	OFFSET ??_C@_0BJ@MGNMALIC@FindActCtxSectionStringW?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 250  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN1@IsolationA

; 251  :             return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
	jmp	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 252  :         s_pfn = __IsolationAware_pfn;

	mov	ecx, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareFindActCtxSectionStringW@@9@20@4P6GHKPBU_GUID@@KPB_WPAUtagACTCTX_SECTION_KEYED_DATA@@@ZA, ecx ; `IsolationAwareFindActCtxSectionStringW'::`2'::s_pfn
$LN2@IsolationA:

; 253  :     }
; 254  :     fResult = __IsolationAware_pfn(dwFlags,lpExtensionGuid,ulSectionId,lpStringToFind,ReturnedData);

	mov	edx, DWORD PTR _ReturnedData$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpStringToFind$[ebp]
	push	eax
	mov	ecx, DWORD PTR _ulSectionId$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpExtensionGuid$[ebp]
	push	edx
	mov	eax, DWORD PTR _dwFlags$[ebp]
	push	eax
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _fResult$[ebp], eax

; 255  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
$LN3@IsolationA:

; 256  : #endif
; 257  : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_IsolationAwareFindActCtxSectionStringW@20 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwareQueryActCtxW@28
_TEXT	SEGMENT
_fResult$ = -8						; size = 4
___IsolationAware_pfn$ = -4				; size = 4
_dwFlags$ = 8						; size = 4
_hActCtx$ = 12						; size = 4
_pvSubInstance$ = 16					; size = 4
_ulInfoClass$ = 20					; size = 4
_pvBuffer$ = 24						; size = 4
_cbBuffer$ = 28						; size = 4
_pcbWrittenOrRequired$ = 32				; size = 4
_IsolationAwareQueryActCtxW@28 PROC			; COMDAT

; 260  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 261  : #ifdef _WIN64
; 262  :     return QueryActCtxW(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);
; 263  : #else
; 264  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 265  :     typedef BOOL (WINAPI* PFN)(_In_ DWORD dwFlags,_In_ HANDLE hActCtx,_In_opt_ PVOID pvSubInstance,_In_ ULONG ulInfoClass,_Out_writes_bytes_to_opt_(cbBuffer,*pcbWrittenOrRequired) PVOID pvBuffer,_In_ SIZE_T cbBuffer,_Out_opt_ SIZE_T*pcbWrittenOrRequired);
; 266  :     static PFN s_pfn;
; 267  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 268  :     if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 269  :     {
; 270  :         __IsolationAware_pfn = (PFN) WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("QueryActCtxW");

	push	OFFSET ??_C@_0N@IMINIHMJ@QueryActCtxW?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 271  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN1@IsolationA

; 272  :             return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
	jmp	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 273  :         s_pfn = __IsolationAware_pfn;

	mov	ecx, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareQueryActCtxW@@9@28@4P6GHKPAX0K0KPAK@ZA, ecx ; `IsolationAwareQueryActCtxW'::`2'::s_pfn
$LN2@IsolationA:

; 274  :     }
; 275  :     fResult = __IsolationAware_pfn(dwFlags,hActCtx,pvSubInstance,ulInfoClass,pvBuffer,cbBuffer,pcbWrittenOrRequired);

	mov	edx, DWORD PTR _pcbWrittenOrRequired$[ebp]
	push	edx
	mov	eax, DWORD PTR _cbBuffer$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pvBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _ulInfoClass$[ebp]
	push	edx
	mov	eax, DWORD PTR _pvSubInstance$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hActCtx$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwFlags$[ebp]
	push	edx
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _fResult$[ebp], eax

; 276  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
$LN3@IsolationA:

; 277  : #endif
; 278  : }

	mov	esp, ebp
	pop	ebp
	ret	28					; 0000001cH
_IsolationAwareQueryActCtxW@28 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatezltRgCebPnQQeRff@12
_TEXT	SEGMENT
_Proc$ = -8						; size = 4
_hModule$ = -4						; size = 4
_c$ = 8							; size = 4
_m$ = 12						; size = 4
_ProcName$ = 16						; size = 4
_IsolationAwarePrivatezltRgCebPnQQeRff@12 PROC		; COMDAT

; 304  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 305  :     FARPROC Proc = NULL;

	mov	DWORD PTR _Proc$[ebp], 0

; 306  :     HMODULE hModule;
; 307  :     hModule = m->WinbaseIsolationAwarePrivateybNQRQzbQhYR;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _hModule$[ebp], ecx

; 308  :     if (hModule == NULL)

	cmp	DWORD PTR _hModule$[ebp], 0
	jne	SHORT $LN3@IsolationA

; 309  :     {
; 310  :         hModule = (*c->WinbaseIsolationAwarePrivateybNQJ)(c->WinbaseIsolationAwarePrivateANZRJ);

	mov	edx, DWORD PTR _c$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _c$[ebp]
	mov	edx, DWORD PTR [ecx]
	call	edx
	mov	DWORD PTR _hModule$[ebp], eax

; 311  :         if (hModule == NULL)

	cmp	DWORD PTR _hModule$[ebp], 0
	jne	SHORT $LN2@IsolationA

; 312  :             goto Exit;

	jmp	SHORT $Exit$6
	jmp	SHORT $Exit$6
$LN2@IsolationA:

; 313  :         m->WinbaseIsolationAwarePrivateybNQRQzbQhYR = hModule;

	mov	eax, DWORD PTR _m$[ebp]
	mov	ecx, DWORD PTR _hModule$[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@IsolationA:

; 314  :     }
; 315  :     Proc = GetProcAddress(hModule, ProcName);

	mov	edx, DWORD PTR _ProcName$[ebp]
	push	edx
	mov	eax, DWORD PTR _hModule$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8
	mov	DWORD PTR _Proc$[ebp], eax
$Exit$6:

; 316  : Exit:
; 317  :     return Proc;

	mov	eax, DWORD PTR _Proc$[ebp]

; 318  : }

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_IsolationAwarePrivatezltRgCebPnQQeRff@12 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
_TEXT	SEGMENT
_actCtxSectionKeyedData$2 = -680			; size = 64
_actCtx$3 = -616					; size = 32
_ulpCookie$ = -584					; size = 4
_pfnGetModuleHandleExW$4 = -580				; size = 4
_dw$5 = -576						; size = 4
_hmodSelf$6 = -572					; size = 4
_actCtxBasicInfo$ = -568				; size = 8
_fResult$ = -560					; size = 4
_dwLastError$7 = -556					; size = 4
_rgchFullModulePath$8 = -552				; size = 522
__$ArrayPad$ = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 PROC		; COMDAT

; 329  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -664				; fffffd68H
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	push	esi
	push	edi
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 330  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 331  :     ACTIVATION_CONTEXT_BASIC_INFORMATION actCtxBasicInfo;
; 332  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], 0

; 333  : 
; 334  : #ifdef _M_IX86
; 335  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	je	SHORT $LN21@WinbaseIso

; 336  :     {
; 337  :         fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1

; 338  :         goto Exit;

	jmp	$Exit$31
$LN21@WinbaseIso:

; 339  :     }
; 340  : #endif
; 341  : 
; 342  :     if (WinbaseIsolationAwarePrivateT_UnPgpgk != INVALID_HANDLE_VALUE)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, -1
	je	SHORT $LN19@WinbaseIso

; 343  :     {
; 344  :         fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1

; 345  :         goto Exit;

	jmp	$Exit$31
$LN19@WinbaseIso:

; 346  :     }
; 347  : 
; 348  :     if (!IsolationAwareQueryActCtxW(
; 349  :         QUERY_ACTCTX_FLAG_ACTCTX_IS_ADDRESS
; 350  :         | QUERY_ACTCTX_FLAG_NO_ADDREF,
; 351  :         &WinbaseIsolationAwarePrivateT_UnPgpgk,
; 352  :         NULL,
; 353  :         ActivationContextBasicInformation,
; 354  :         &actCtxBasicInfo,
; 355  :         sizeof(actCtxBasicInfo),
; 356  :         NULL))

	push	0
	push	8
	lea	eax, DWORD PTR _actCtxBasicInfo$[ebp]
	push	eax
	push	1
	push	0
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	-2147483632				; 80000010H
	call	_IsolationAwareQueryActCtxW@28
	test	eax, eax
	jne	SHORT $LN17@WinbaseIso

; 357  :         goto Exit;

	jmp	$Exit$31
$LN17@WinbaseIso:

; 358  : 
; 359  :     /*
; 360  :     If QueryActCtxW returns NULL, try CreateActCtx(3).
; 361  :     */
; 362  :     if (actCtxBasicInfo.hActCtx == NULL)

	cmp	DWORD PTR _actCtxBasicInfo$[ebp], 0
	jne	$LN15@WinbaseIso

; 363  :     {
; 364  :         ACTCTXW actCtx;
; 365  :         WCHAR rgchFullModulePath[MAX_PATH + 1];
; 366  :         DWORD dw;
; 367  :         HMODULE hmodSelf;
; 368  : #ifdef _M_IX86
; 369  :         PGET_MODULE_HANDLE_EXW pfnGetModuleHandleExW = (PGET_MODULE_HANDLE_EXW)WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY("GetModuleHandleExW");

	push	OFFSET ??_C@_0BD@GIGEJCNH@GetModuleHandleExW?$AA@
	call	_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
	mov	DWORD PTR _pfnGetModuleHandleExW$4[ebp], eax

; 370  :         if (pfnGetModuleHandleExW == NULL)

	cmp	DWORD PTR _pfnGetModuleHandleExW$4[ebp], 0
	jne	SHORT $LN14@WinbaseIso

; 371  :             goto Exit;

	jmp	$Exit$31
$LN14@WinbaseIso:

; 372  : #endif
; 373  :         if (!
; 374  : #ifdef _M_IX86
; 375  :             (*pfnGetModuleHandleExW)
; 376  : #else
; 377  :             GetModuleHandleExW
; 378  : #endif
; 379  :             (     GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT
; 380  :                 | GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 381  :                 (LPCWSTR)&WinbaseIsolationAwarePrivateT_UnPgpgk,
; 382  :                 &hmodSelf))

	lea	ecx, DWORD PTR _hmodSelf$6[ebp]
	push	ecx
	push	OFFSET _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	6
	call	DWORD PTR _pfnGetModuleHandleExW$4[ebp]
	test	eax, eax
	jne	SHORT $LN12@WinbaseIso

; 383  :             goto Exit;

	jmp	$Exit$31
$LN12@WinbaseIso:

; 384  : 
; 385  :         dw = GetModuleFileNameW(hmodSelf, rgchFullModulePath, WINBASE_NUMBER_OF(rgchFullModulePath));

	push	261					; 00000105H
	lea	edx, DWORD PTR _rgchFullModulePath$8[ebp]
	push	edx
	mov	eax, DWORD PTR _hmodSelf$6[ebp]
	push	eax
	call	DWORD PTR __imp__GetModuleFileNameW@12
	mov	DWORD PTR _dw$5[ebp], eax

; 386  :         if (dw == 0)

	cmp	DWORD PTR _dw$5[ebp], 0
	jne	SHORT $LN10@WinbaseIso

; 387  :             goto Exit;

	jmp	$Exit$31
$LN10@WinbaseIso:

; 388  :         if (dw >= WINBASE_NUMBER_OF(rgchFullModulePath))

	cmp	DWORD PTR _dw$5[ebp], 261		; 00000105H
	jb	SHORT $LN8@WinbaseIso

; 389  :         {
; 390  :             SetLastError(ERROR_BUFFER_OVERFLOW);

	push	111					; 0000006fH
	call	DWORD PTR __imp__SetLastError@4

; 391  :             goto Exit;

	jmp	$Exit$31
$LN8@WinbaseIso:

; 392  :         }
; 393  : 
; 394  :         actCtx.cbSize = sizeof(actCtx);

	mov	DWORD PTR _actCtx$3[ebp], 32		; 00000020H

; 395  :         actCtx.dwFlags = ACTCTX_FLAG_RESOURCE_NAME_VALID | ACTCTX_FLAG_HMODULE_VALID;

	mov	DWORD PTR _actCtx$3[ebp+4], 136		; 00000088H

; 396  :         actCtx.lpSource = rgchFullModulePath;

	lea	ecx, DWORD PTR _rgchFullModulePath$8[ebp]
	mov	DWORD PTR _actCtx$3[ebp+8], ecx

; 397  :         actCtx.lpResourceName = (LPCWSTR)(ULONG_PTR)3;

	mov	DWORD PTR _actCtx$3[ebp+20], 3

; 398  :         actCtx.hModule = hmodSelf;

	mov	edx, DWORD PTR _hmodSelf$6[ebp]
	mov	DWORD PTR _actCtx$3[ebp+28], edx

; 399  :         actCtxBasicInfo.hActCtx = IsolationAwareCreateActCtxW(&actCtx);

	lea	eax, DWORD PTR _actCtx$3[ebp]
	push	eax
	call	_IsolationAwareCreateActCtxW@4
	mov	DWORD PTR _actCtxBasicInfo$[ebp], eax

; 400  :         if (actCtxBasicInfo.hActCtx == INVALID_HANDLE_VALUE)

	cmp	DWORD PTR _actCtxBasicInfo$[ebp], -1
	jne	SHORT $LN6@WinbaseIso

; 401  :         {
; 402  :             const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _dwLastError$7[ebp], eax

; 403  :             if ((dwLastError != ERROR_RESOURCE_DATA_NOT_FOUND) &&
; 404  :                 (dwLastError != ERROR_RESOURCE_TYPE_NOT_FOUND) &&
; 405  :                 (dwLastError != ERROR_RESOURCE_LANG_NOT_FOUND) &&
; 406  :                 (dwLastError != ERROR_RESOURCE_NAME_NOT_FOUND) &&
; 407  :                 (dwLastError != ERROR_FILE_NOT_FOUND) &&
; 408  :                 (dwLastError != ERROR_PATH_NOT_FOUND))

	cmp	DWORD PTR _dwLastError$7[ebp], 1812	; 00000714H
	je	SHORT $LN5@WinbaseIso
	cmp	DWORD PTR _dwLastError$7[ebp], 1813	; 00000715H
	je	SHORT $LN5@WinbaseIso
	cmp	DWORD PTR _dwLastError$7[ebp], 1815	; 00000717H
	je	SHORT $LN5@WinbaseIso
	cmp	DWORD PTR _dwLastError$7[ebp], 1814	; 00000716H
	je	SHORT $LN5@WinbaseIso
	cmp	DWORD PTR _dwLastError$7[ebp], 2
	je	SHORT $LN5@WinbaseIso
	cmp	DWORD PTR _dwLastError$7[ebp], 3
	je	SHORT $LN5@WinbaseIso

; 409  :                 goto Exit;

	jmp	$Exit$31
$LN5@WinbaseIso:

; 410  : 
; 411  :             actCtxBasicInfo.hActCtx = NULL;

	mov	DWORD PTR _actCtxBasicInfo$[ebp], 0
$LN6@WinbaseIso:

; 412  :         }
; 413  : 
; 414  :         WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk = TRUE;

	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_SpeRNgRQnPgpgk, 1
$LN15@WinbaseIso:

; 415  :     }
; 416  : 
; 417  :     WinbaseIsolationAwarePrivateT_UnPgpgk = actCtxBasicInfo.hActCtx;

	mov	ecx, DWORD PTR _actCtxBasicInfo$[ebp]
	mov	DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk, ecx

; 418  : 
; 419  : #define ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION              (2)
; 420  : 
; 421  :     if (IsolationAwareActivateActCtx(actCtxBasicInfo.hActCtx, &ulpCookie))

	lea	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	mov	eax, DWORD PTR _actCtxBasicInfo$[ebp]
	push	eax
	call	_IsolationAwareActivateActCtx@8
	test	eax, eax
	je	SHORT $LN28@WinbaseIso

; 422  :     {
; 423  :         __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 424  :         {
; 425  :             ACTCTX_SECTION_KEYED_DATA actCtxSectionKeyedData;
; 426  : 
; 427  :             actCtxSectionKeyedData.cbSize = sizeof(actCtxSectionKeyedData);

	mov	DWORD PTR _actCtxSectionKeyedData$2[ebp], 64 ; 00000040H

; 428  :             if (IsolationAwareFindActCtxSectionStringW(0, NULL, ACTIVATION_CONTEXT_SECTION_DLL_REDIRECTION, L"Comctl32.dll", &actCtxSectionKeyedData))

	lea	ecx, DWORD PTR _actCtxSectionKeyedData$2[ebp]
	push	ecx
	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	push	2
	push	0
	push	0
	call	_IsolationAwareFindActCtxSectionStringW@20
	test	eax, eax
	je	SHORT $LN2@WinbaseIso

; 429  :             {
; 430  :                 /* get button, edit, etc. registered */
; 431  :                 LoadLibraryW(L"Comctl32.dll");

	push	OFFSET ??_C@_1BK@BFMCNHEO@?$AAC?$AAo?$AAm?$AAc?$AAt?$AAl?$AA3?$AA2?$AA?4?$AAd?$AAl?$AAl?$AA?$AA@
	call	DWORD PTR __imp__LoadLibraryW@4
$LN2@WinbaseIso:

; 432  :             }
; 433  :         }
; 434  :         __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN27@WinbaseIso
	jmp	SHORT $LN28@WinbaseIso
$LN25@WinbaseIso:
$LN30@WinbaseIso:
$LN27@WinbaseIso:

; 435  :         {
; 436  :             IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	edx, DWORD PTR _ulpCookie$[ebp]
	push	edx
	push	0
	call	_IsolationAwareDeactivateActCtx@8
$LN26@WinbaseIso:
$LN29@WinbaseIso:
	ret	0
$LN28@WinbaseIso:

; 437  :         }
; 438  :     }
; 439  : 
; 440  :     fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1
$Exit$31:

; 441  : Exit:
; 442  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]

; 443  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _IsolationAwarePrivatenPgViNgRzlnPgpgk@4
_TEXT	SEGMENT
_dwLastError$1 = -8					; size = 4
_fResult$ = -4						; size = 4
_pulpCookie$ = 8					; size = 4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 PROC		; COMDAT

; 505  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 506  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 507  : 
; 508  :     if (WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, 0
	je	SHORT $LN11@IsolationA

; 509  :     {
; 510  :         const static char debugString[] = "IsolationAware function called after IsolationAwareCleanup\n";
; 511  :         OutputDebugStringA(debugString);

	push	OFFSET ?debugString@?4??IsolationAwarePrivatenPgViNgRzlnPgpgk@@9@4@4QBDB ; `IsolationAwarePrivatenPgViNgRzlnPgpgk'::`5'::debugString
	call	DWORD PTR __imp__OutputDebugStringA@4
$LN11@IsolationA:

; 512  :     }
; 513  : 
; 514  : #ifdef _M_IX86
; 515  :     if (IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	je	SHORT $LN10@IsolationA

; 516  :     {
; 517  :         fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1

; 518  :         goto Exit;

	jmp	SHORT $Exit$14
	jmp	SHORT $Exit$14
$LN10@IsolationA:

; 519  :     }
; 520  : #endif
; 521  : 
; 522  :     /* Do not call Init if Cleanup has been called. */
; 523  :     if (!WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ)

	cmp	DWORD PTR _WinbaseIsolationAwarePrivateT_SpYRNahcpNYYRQ, 0
	jne	SHORT $LN8@IsolationA

; 524  :     {
; 525  :         if (!WinbaseIsolationAwarePrivatetRgzlnPgpgk())

	call	_WinbaseIsolationAwarePrivatetRgzlnPgpgk@0
	test	eax, eax
	jne	SHORT $LN8@IsolationA

; 526  :             goto Exit;

	jmp	SHORT $Exit$14
	jmp	SHORT $Exit$14
$LN8@IsolationA:

; 527  :     }
; 528  :     /* If Cleanup has been called and id3 was in use, this will activate NULL. */
; 529  :     if (!IsolationAwareActivateActCtx(WinbaseIsolationAwarePrivateT_UnPgpgk, pulpCookie))

	mov	eax, DWORD PTR _pulpCookie$[ebp]
	push	eax
	mov	ecx, DWORD PTR _WinbaseIsolationAwarePrivateT_UnPgpgk
	push	ecx
	call	_IsolationAwareActivateActCtx@8
	test	eax, eax
	jne	SHORT $LN5@IsolationA

; 530  :         goto Exit;

	jmp	SHORT $Exit$14
	jmp	SHORT $Exit$14
$LN5@IsolationA:

; 531  : 
; 532  :     fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1
$Exit$14:

; 533  : Exit:
; 534  : #ifdef _M_IX86
; 535  :     if (!fResult)

	cmp	DWORD PTR _fResult$[ebp], 0
	jne	SHORT $LN3@IsolationA

; 536  :     {
; 537  :         const DWORD dwLastError = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _dwLastError$1[ebp], eax

; 538  :         if (dwLastError == ERROR_PROC_NOT_FOUND
; 539  :             || dwLastError == ERROR_MOD_NOT_FOUND
; 540  :             || dwLastError == ERROR_CALL_NOT_IMPLEMENTED)

	cmp	DWORD PTR _dwLastError$1[ebp], 127	; 0000007fH
	je	SHORT $LN1@IsolationA
	cmp	DWORD PTR _dwLastError$1[ebp], 126	; 0000007eH
	je	SHORT $LN1@IsolationA
	cmp	DWORD PTR _dwLastError$1[ebp], 120	; 00000078H
	jne	SHORT $LN3@IsolationA
$LN1@IsolationA:

; 541  :         {
; 542  :             IsolationAwarePrivateT_SqbjaYRiRY = TRUE;

	mov	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 1

; 543  :             fResult = TRUE;

	mov	DWORD PTR _fResult$[ebp], 1
$LN3@IsolationA:

; 544  :         }
; 545  :     }
; 546  : #endif
; 547  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]

; 548  : }

	mov	esp, ebp
	pop	ebp
	ret	4
_IsolationAwarePrivatenPgViNgRzlnPgpgk@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.inl
;	COMDAT _WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4
_TEXT	SEGMENT
_pszProcName$ = 8					; size = 4
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 PROC ; COMDAT

; 554  : {

	push	ebp
	mov	ebp, esp

; 555  :     static HMODULE s_module;
; 556  :     /* Use GetModuleHandle instead of LoadLibrary on kernel32.dll because */
; 557  :     /* we already necessarily have a reference on kernel32.dll. */
; 558  :     const static IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB
; 559  :         c = { IsolationAwarePrivatezltRgzbQhYRuNaQYRJ, L"Kernel32.dll"
; 560  : #ifdef _M_IX86
; 561  :              , IsolationAwarePrivatezltRgzbQhYRuNaQYRn, "Kernel32.dll"
; 562  : #endif
; 563  :     };
; 564  :     static IsolationAwarePrivatezHGnoyr_zBqHyr_vAsB m;
; 565  : 
; 566  :     return IsolationAwarePrivatezltRgCebPnQQeRff(&c, &m, pszProcName);

	mov	eax, DWORD PTR _pszProcName$[ebp]
	push	eax
	push	OFFSET ?m@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::m
	push	OFFSET ?c@?1??WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY'::`2'::c
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12

; 567  : }

	pop	ebp
	ret	4
_WinbaseIsolationAwarePrivatetRgCebPnQQeRff_xReaRYQP_QYY@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\commdlg.inl
;	COMDAT _IsolationAwareGetOpenFileNameW@4
_TEXT	SEGMENT
_dwLastError$2 = -60					; size = 4
_fActivateActCtxSuccess$ = -56				; size = 4
_fPreserveLastError$3 = -52				; size = 4
_ulpCookie$ = -48					; size = 4
tv81 = -44						; size = 4
tv78 = -40						; size = 4
tv68 = -36						; size = 4
_fResult$ = -32						; size = 4
___IsolationAware_pfn$ = -28				; size = 4
__$SEHRec$ = -24					; size = 24
_unnamed1$ = 8						; size = 4
_IsolationAwareGetOpenFileNameW@4 PROC			; COMDAT

; 144  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_IsolationAwareGetOpenFileNameW@4
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -44				; ffffffd4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 145  :     BOOL fResult = FALSE;

	mov	DWORD PTR _fResult$[ebp], 0

; 146  :     typedef BOOL (WINAPI* PFN)(LPOPENFILENAMEW unnamed1);
; 147  :     static PFN s_pfn;
; 148  :     PFN __IsolationAware_pfn = s_pfn;

	mov	eax, DWORD PTR ?s_pfn@?1??IsolationAwareGetOpenFileNameW@@9@4@4P6GHPAUtagOFNW@@@ZA ; `IsolationAwareGetOpenFileNameW'::`2'::s_pfn
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 149  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], 0

; 150  :     const BOOL fActivateActCtxSuccess =
; 151  : #ifdef _M_IX86
; 152  :         IsolationAwarePrivateT_SqbjaYRiRY ||
; 153  : #endif
; 154  :         IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN9@IsolationA
	lea	ecx, DWORD PTR _ulpCookie$[ebp]
	push	ecx
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	test	eax, eax
	jne	SHORT $LN9@IsolationA
	mov	DWORD PTR tv68[ebp], 0
	jmp	SHORT $LN10@IsolationA
$LN9@IsolationA:
	mov	DWORD PTR tv68[ebp], 1
$LN10@IsolationA:
	mov	edx, DWORD PTR tv68[ebp]
	mov	DWORD PTR _fActivateActCtxSuccess$[ebp], edx

; 155  :     if (!fActivateActCtxSuccess)

	cmp	DWORD PTR _fActivateActCtxSuccess$[ebp], 0
	jne	SHORT $LN6@IsolationA

; 156  :         return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
	jmp	$LN15@IsolationA
$LN6@IsolationA:

; 157  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 158  :     {
; 159  :         if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN4@IsolationA

; 160  :         {
; 161  :             __IsolationAware_pfn = (PFN) CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY("GetOpenFileNameW");

	push	OFFSET ??_C@_0BB@EFHCCPMP@GetOpenFileNameW?$AA@
	call	_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4
	mov	DWORD PTR ___IsolationAware_pfn$[ebp], eax

; 162  :             if (__IsolationAware_pfn == NULL)

	cmp	DWORD PTR ___IsolationAware_pfn$[ebp], 0
	jne	SHORT $LN3@IsolationA

; 163  :                 __leave;

	jmp	SHORT $LN5@IsolationA
$LN3@IsolationA:

; 164  :             s_pfn = __IsolationAware_pfn;

	mov	eax, DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR ?s_pfn@?1??IsolationAwareGetOpenFileNameW@@9@4@4P6GHPAUtagOFNW@@@ZA, eax ; `IsolationAwareGetOpenFileNameW'::`2'::s_pfn
$LN4@IsolationA:

; 165  :         }
; 166  :         fResult = __IsolationAware_pfn(unnamed1);

	mov	ecx, DWORD PTR _unnamed1$[ebp]
	push	ecx
	call	DWORD PTR ___IsolationAware_pfn$[ebp]
	mov	DWORD PTR _fResult$[ebp], eax
$LN5@IsolationA:

; 167  :     }
; 168  :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN18@IsolationA
	jmp	SHORT $LN19@IsolationA
$LN16@IsolationA:
$LN21@IsolationA:
$LN18@IsolationA:

; 169  :     {
; 170  : #ifdef _M_IX86
; 171  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN17@IsolationA

; 172  : #endif
; 173  :         {
; 174  :             const BOOL fPreserveLastError = (fResult == FALSE);

	cmp	DWORD PTR _fResult$[ebp], 0
	jne	SHORT $LN11@IsolationA
	mov	DWORD PTR tv78[ebp], 1
	jmp	SHORT $LN12@IsolationA
$LN11@IsolationA:
	mov	DWORD PTR tv78[ebp], 0
$LN12@IsolationA:
	mov	edx, DWORD PTR tv78[ebp]
	mov	DWORD PTR _fPreserveLastError$3[ebp], edx

; 175  :             const DWORD dwLastError = fPreserveLastError ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN13@IsolationA
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN14@IsolationA
$LN13@IsolationA:
	mov	DWORD PTR tv81[ebp], 0
$LN14@IsolationA:
	mov	eax, DWORD PTR tv81[ebp]
	mov	DWORD PTR _dwLastError$2[ebp], eax

; 176  :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	ecx, DWORD PTR _ulpCookie$[ebp]
	push	ecx
	push	0
	call	_IsolationAwareDeactivateActCtx@8

; 177  :             if (fPreserveLastError)

	cmp	DWORD PTR _fPreserveLastError$3[ebp], 0
	je	SHORT $LN17@IsolationA

; 178  :                 SetLastError(dwLastError);

	mov	edx, DWORD PTR _dwLastError$2[ebp]
	push	edx
	call	DWORD PTR __imp__SetLastError@4
$LN17@IsolationA:
$LN20@IsolationA:
	ret	0
$LN19@IsolationA:

; 179  :         }
; 180  :     }
; 181  :     return fResult;

	mov	eax, DWORD PTR _fResult$[ebp]
$LN15@IsolationA:

; 182  : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_IsolationAwareGetOpenFileNameW@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\program files (x86)\windows kits\8.1\include\um\commdlg.inl
;	COMDAT _CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4
_TEXT	SEGMENT
_dwLastError$2 = -44					; size = 4
_ulpCookie$ = -40					; size = 4
tv76 = -36						; size = 4
_fActivateActCtxSuccess$ = -32				; size = 4
_proc$ = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_pszProcName$ = 8					; size = 4
_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4 PROC ; COMDAT

; 969  : {

	push	ebp
	mov	ebp, esp
	push	-2					; fffffffeH
	push	OFFSET __sehtable$_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4
	push	OFFSET __except_handler4
	mov	eax, DWORD PTR fs:0
	push	eax
	add	esp, -28				; ffffffe4H
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR ___security_cookie
	xor	DWORD PTR __$SEHRec$[ebp+16], eax
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, eax

; 970  :     FARPROC proc = NULL;

	mov	DWORD PTR _proc$[ebp], 0

; 971  :     static HMODULE s_module;
; 972  :     BOOL fActivateActCtxSuccess = FALSE;

	mov	DWORD PTR _fActivateActCtxSuccess$[ebp], 0

; 973  :     ULONG_PTR ulpCookie = 0;

	mov	DWORD PTR _ulpCookie$[ebp], 0

; 974  : #ifndef _M_CEE_PURE
; 975  :     const static IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB
; 976  :         c = { IsolationAwarePrivatezlybNQyVOeNelJ, L"Comdlg32.dll"
; 977  : #ifdef _M_IX86
; 978  :              , IsolationAwarePrivatezlybNQyVOeNeln, "Comdlg32.dll"
; 979  : #endif
; 980  :     };
; 981  : #else
; 982  :     static IsolationAwarePrivatepBAFGnAG_zBqHyr_vAsB c;
; 983  :     c.WinbaseIsolationAwarePrivateybNQJ = IsolationAwarePrivatezlybNQyVOeNelJ;
; 984  :     c.WinbaseIsolationAwarePrivateANZRJ = L"Comdlg32.dll";
; 985  : #ifdef _M_IX86
; 986  :     c.WinbaseIsolationAwarePrivateybNQn = IsolationAwarePrivatezlybNQyVOeNeln;
; 987  :     c.WinbaseIsolationAwarePrivateANZRn = "Comdlg32.dll";
; 988  : #endif
; 989  : #endif
; 990  :     static IsolationAwarePrivatezHGnoyr_zBqHyr_vAsB m;
; 991  : 
; 992  :     __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 993  :     {
; 994  : #ifdef _M_IX86
; 995  :         if (!IsolationAwarePrivateT_SqbjaYRiRY)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN4@CommdlgIso

; 996  : #endif
; 997  :         {
; 998  :             fActivateActCtxSuccess = IsolationAwarePrivatenPgViNgRzlnPgpgk(&ulpCookie);

	lea	eax, DWORD PTR _ulpCookie$[ebp]
	push	eax
	call	_IsolationAwarePrivatenPgViNgRzlnPgpgk@4
	mov	DWORD PTR _fActivateActCtxSuccess$[ebp], eax

; 999  :             if (!fActivateActCtxSuccess)

	cmp	DWORD PTR _fActivateActCtxSuccess$[ebp], 0
	jne	SHORT $LN4@CommdlgIso

; 1000 :                 __leave;

	jmp	SHORT $LN5@CommdlgIso
$LN4@CommdlgIso:

; 1001 :         }
; 1002 :         proc = IsolationAwarePrivatezltRgCebPnQQeRff(&c, &m, pszProcName);

	mov	ecx, DWORD PTR _pszProcName$[ebp]
	push	ecx
	push	OFFSET ?m@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_zHGnoyr_zBqHyr_vAsB@@A ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::m
	push	OFFSET ?c@?1??CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@@9@4@4UIsolationAwarePrivate_pBAFGnAG_zBqHyr_vAsB@@B ; `CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY'::`2'::c
	call	_IsolationAwarePrivatezltRgCebPnQQeRff@12
	mov	DWORD PTR _proc$[ebp], eax
$LN5@CommdlgIso:

; 1003 :     }
; 1004 :     __finally

	mov	DWORD PTR __$SEHRec$[ebp+20], -2	; fffffffeH
	call	$LN13@CommdlgIso
	jmp	SHORT $LN14@CommdlgIso
$LN11@CommdlgIso:
$LN16@CommdlgIso:
$LN13@CommdlgIso:

; 1005 :     {
; 1006 :         if (
; 1007 : #ifdef _M_IX86
; 1008 :             !IsolationAwarePrivateT_SqbjaYRiRY &&
; 1009 : #endif
; 1010 :             fActivateActCtxSuccess)

	cmp	DWORD PTR _IsolationAwarePrivateT_SqbjaYRiRY, 0
	jne	SHORT $LN12@CommdlgIso
	cmp	DWORD PTR _fActivateActCtxSuccess$[ebp], 0
	je	SHORT $LN12@CommdlgIso

; 1011 :         {
; 1012 :             const DWORD dwLastError = (proc == NULL) ? GetLastError() : NO_ERROR;

	cmp	DWORD PTR _proc$[ebp], 0
	jne	SHORT $LN8@CommdlgIso
	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN9@CommdlgIso
$LN8@CommdlgIso:
	mov	DWORD PTR tv76[ebp], 0
$LN9@CommdlgIso:
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR _dwLastError$2[ebp], edx

; 1013 :             (void)IsolationAwareDeactivateActCtx(0, ulpCookie);

	mov	eax, DWORD PTR _ulpCookie$[ebp]
	push	eax
	push	0
	call	_IsolationAwareDeactivateActCtx@8

; 1014 :             if (proc == NULL)

	cmp	DWORD PTR _proc$[ebp], 0
	jne	SHORT $LN12@CommdlgIso

; 1015 :                 SetLastError(dwLastError);

	mov	ecx, DWORD PTR _dwLastError$2[ebp]
	push	ecx
	call	DWORD PTR __imp__SetLastError@4
$LN12@CommdlgIso:
$LN15@CommdlgIso:
	ret	0
$LN14@CommdlgIso:

; 1016 :         }
; 1017 :     }
; 1018 :     return proc;

	mov	eax, DWORD PTR _proc$[ebp]

; 1019 : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
_CommdlgIsolationAwarePrivatetRgCebPnQQeRff_pbZQYTQP_QYY@4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\utility\inline.h
;	COMDAT ?nop@@YAXXZ
_TEXT	SEGMENT
?nop@@YAXXZ PROC					; nop, COMDAT

; 309  : {

	push	ebp
	mov	ebp, esp

; 310  : }

	pop	ebp
	ret	0
?nop@@YAXXZ ENDP					; nop
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 70   : 	piecewise_construct_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3451 : const allocator_arg_t allocator_arg = allocator_arg_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__Eignore@std@@YAXXZ
text$di	SEGMENT
??__Eignore@std@@YAXXZ PROC				; std::`dynamic initializer for 'ignore'', COMDAT

; 59   : const _Ignore ignore;

	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _ignore
	call	??0_Ignore@std@@QAE@XZ			; std::_Ignore::_Ignore
	pop	ebp
	ret	0
??__Eignore@std@@YAXXZ ENDP				; std::`dynamic initializer for 'ignore''
text$di	ENDS
; Function compile flags: /Odtp
; File d:\vs2013\vc\include\tuple
;	COMDAT ??__E_Tuple_alloc@std@@YAXXZ
text$di	SEGMENT
$T1 = -1						; size = 1
??__E_Tuple_alloc@std@@YAXXZ PROC			; std::`dynamic initializer for '_Tuple_alloc'', COMDAT

; 66   : const _Tuple_alloc_t _Tuple_alloc = _Tuple_alloc_t();

	push	ebp
	mov	ebp, esp
	push	ecx
	xor	eax, eax
	mov	BYTE PTR $T1[ebp], al
	mov	esp, ebp
	pop	ebp
	ret	0
??__E_Tuple_alloc@std@@YAXXZ ENDP			; std::`dynamic initializer for '_Tuple_alloc''
text$di	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z
_TEXT	SEGMENT
_lpFileName$ = 8					; size = 4
?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z PROC	; CreatePixelShaderFromFile, COMDAT

; 664  : inline Shader* CreatePixelShaderFromFile(CTSTR lpFileName)          {return GS->CreatePixelShaderFromFile(lpFileName);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _lpFileName$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?CreatePixelShaderFromFile@GraphicsSystem@@QAEPAVShader@@PB_W@Z
	pop	ebp
	ret	0
?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z ENDP	; CreatePixelShaderFromFile
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?LoadPixelShader@@YAXPAVShader@@@Z
_TEXT	SEGMENT
_pShader$ = 8						; size = 4
?LoadPixelShader@@YAXPAVShader@@@Z PROC			; LoadPixelShader, COMDAT

; 674  : inline void  LoadPixelShader(Shader *pShader)                   {GS->LoadPixelShader(pShader);}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _pShader$[ebp]
	push	eax
	mov	ecx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax]
	mov	eax, DWORD PTR [edx+84]
	call	eax
	pop	ebp
	ret	0
?LoadPixelShader@@YAXPAVShader@@@Z ENDP			; LoadPixelShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?GetCurrentPixelShader@@YAPAVShader@@XZ
_TEXT	SEGMENT
?GetCurrentPixelShader@@YAPAVShader@@XZ PROC		; GetCurrentPixelShader, COMDAT

; 677  : inline Shader* GetCurrentPixelShader()                          {return GS->GetCurrentPixelShader();}

	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx]
	mov	edx, DWORD PTR [eax+88]
	call	edx
	pop	ebp
	ret	0
?GetCurrentPixelShader@@YAPAVShader@@XZ ENDP		; GetCurrentPixelShader
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\graphicssystem.h
;	COMDAT ?DrawSprite@@YAXPAVTexture@@KMMMM@Z
_TEXT	SEGMENT
_texture$ = 8						; size = 4
_color$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_x2$ = 24						; size = 4
_y2$ = 28						; size = 4
?DrawSprite@@YAXPAVTexture@@KMMMM@Z PROC		; DrawSprite, COMDAT

; 715  :     {GS->DrawSprite(texture, color, x, y, x2, y2);}

	push	ebp
	mov	ebp, esp
	push	ecx
	movss	xmm0, DWORD PTR _y2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x2$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _y$[ebp]
	movss	DWORD PTR [esp], xmm0
	push	ecx
	movss	xmm0, DWORD PTR _x$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _color$[ebp]
	push	eax
	mov	ecx, DWORD PTR _texture$[ebp]
	push	ecx
	mov	edx, DWORD PTR __imp_?GS@@3PAVGraphicsSystem@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?DrawSprite@GraphicsSystem@@QAEXPAVTexture@@KMMMM@Z
	pop	ebp
	ret	0
?DrawSprite@@YAXPAVTexture@@KMMMM@Z ENDP		; DrawSprite
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\obsapi\apiinterface.h
;	COMDAT ?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z
_TEXT	SEGMENT
_scene$ = -12						; size = 4
_this$ = -8						; size = 4
_item$1 = -4						; size = 4
_lpImageSource$ = 8					; size = 4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z PROC ; APIInterface::GetSceneImageSource, COMDAT
; _this$ = ecx

; 99   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 100  :         Scene *scene = GetScene();

	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	call	eax
	mov	DWORD PTR _scene$[ebp], eax

; 101  :         if(scene)

	cmp	DWORD PTR _scene$[ebp], 0
	je	SHORT $LN3@GetSceneIm

; 102  :         {
; 103  :             SceneItem *item = scene->GetSceneItem(lpImageSource);

	mov	ecx, DWORD PTR _lpImageSource$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _scene$[ebp]
	call	DWORD PTR __imp_?GetSceneItem@Scene@@QBEPAVSceneItem@@PB_W@Z
	mov	DWORD PTR _item$1[ebp], eax

; 104  :             if(item)

	cmp	DWORD PTR _item$1[ebp], 0
	je	SHORT $LN3@GetSceneIm

; 105  :             {
; 106  :                 if(item->GetSource())

	mov	ecx, DWORD PTR _item$1[ebp]
	call	DWORD PTR __imp_?GetSource@SceneItem@@QBEPAVImageSource@@XZ
	test	eax, eax
	je	SHORT $LN3@GetSceneIm

; 107  :                     return item->GetSource();

	mov	ecx, DWORD PTR _item$1[ebp]
	call	DWORD PTR __imp_?GetSource@SceneItem@@QBEPAVImageSource@@XZ
	jmp	SHORT $LN4@GetSceneIm
$LN3@GetSceneIm:

; 108  :             }
; 109  :         }
; 110  : 
; 111  :         return NULL;

	xor	eax, eax
$LN4@GetSceneIm:

; 112  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ENDP ; APIInterface::GetSceneImageSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ??0ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::ColorSelectionData, COMDAT
; _this$ = ecx

; 31   :     inline ColorSelectionData() : hdcDesktop(NULL), hdcDestination(NULL), hBitmap(NULL), bValid(false) {}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::ColorSelectionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ??1ColorSelectionData@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1ColorSelectionData@@QAE@XZ PROC			; ColorSelectionData::~ColorSelectionData, COMDAT
; _this$ = ecx

; 32   :     inline ~ColorSelectionData() {Clear();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
	mov	esp, ebp
	pop	ebp
	ret	0
??1ColorSelectionData@@QAE@XZ ENDP			; ColorSelectionData::~ColorSelectionData
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?Init@ColorSelectionData@@QAE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@ColorSelectionData@@QAE_NXZ PROC			; ColorSelectionData::Init, COMDAT
; _this$ = ecx

; 35   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 36   :         hdcDesktop = GetDC(NULL);

	push	0
	call	DWORD PTR __imp__GetDC@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax

; 37   :         if(!hdcDesktop)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN3@Init

; 38   :             return false;

	xor	al, al
	jmp	SHORT $LN4@Init
$LN3@Init:

; 39   : 
; 40   :         hdcDestination = CreateCompatibleDC(hdcDesktop);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	DWORD PTR __imp__CreateCompatibleDC@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax

; 41   :         if(!hdcDestination)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN2@Init

; 42   :             return false;

	xor	al, al
	jmp	SHORT $LN4@Init
$LN2@Init:

; 43   : 
; 44   :         hBitmap = CreateCompatibleBitmap(hdcDesktop, 1, 1);

	push	1
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	DWORD PTR __imp__CreateCompatibleBitmap@12
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax

; 45   :         if(!hBitmap)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN1@Init

; 46   :             return false;

	xor	al, al
	jmp	SHORT $LN4@Init
$LN1@Init:

; 47   : 
; 48   :         SelectObject(hdcDestination, hBitmap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__SelectObject@8

; 49   :         bValid = true;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+12], 1

; 50   : 
; 51   :         return true;

	mov	al, 1
$LN4@Init:

; 52   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Init@ColorSelectionData@@QAE_NXZ ENDP			; ColorSelectionData::Init
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?Clear@ColorSelectionData@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@ColorSelectionData@@QAEXXZ PROC			; ColorSelectionData::Clear, COMDAT
; _this$ = ecx

; 55   :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 56   :         if(hdcDesktop)

	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN3@Clear

; 57   :         {
; 58   :             ReleaseDC(NULL, hdcDesktop);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	push	0
	call	DWORD PTR __imp__ReleaseDC@8

; 59   :             hdcDesktop = NULL;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
$LN3@Clear:

; 60   :         }
; 61   : 
; 62   :         if(hdcDestination)

	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN2@Clear

; 63   :         {
; 64   :             DeleteDC(hdcDestination);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__DeleteDC@4

; 65   :             hdcDestination = NULL;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
$LN2@Clear:

; 66   :         }
; 67   : 
; 68   :         if(hBitmap)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN1@Clear

; 69   :         {
; 70   :             DeleteObject(hBitmap);

	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	DWORD PTR __imp__DeleteObject@4

; 71   :             hBitmap = NULL;

	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
$LN1@Clear:

; 72   :         }
; 73   : 
; 74   :         bValid = false;

	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+12], 0

; 75   :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@ColorSelectionData@@QAEXXZ ENDP			; ColorSelectionData::Clear
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?GetColor@ColorSelectionData@@QAEKXZ
_TEXT	SEGMENT
_err$1 = -68						; size = 4
_p$ = -64						; size = 8
_buffer$2 = -56						; size = 4
_this$ = -52						; size = 4
_data$3 = -48						; size = 44
__$ArrayPad$ = -4					; size = 4
?GetColor@ColorSelectionData@@QAEKXZ PROC		; ColorSelectionData::GetColor, COMDAT
; _this$ = ecx

; 78   :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 68					; 00000044H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx

; 79   :         POINT p;
; 80   :         if(GetCursorPos(&p))

	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	call	DWORD PTR __imp__GetCursorPos@4
	test	eax, eax
	je	$LN4@GetColor

; 81   :         {
; 82   :             BITMAPINFO data;
; 83   :             zero(&data, sizeof(data));

	push	44					; 0000002cH
	lea	ecx, DWORD PTR _data$3[ebp]
	push	ecx
	call	?zero@@YGXPAXI@Z			; zero

; 84   : 
; 85   :             data.bmiHeader.biSize = sizeof(data.bmiHeader);

	mov	DWORD PTR _data$3[ebp], 40		; 00000028H

; 86   :             data.bmiHeader.biWidth = 1;

	mov	DWORD PTR _data$3[ebp+4], 1

; 87   :             data.bmiHeader.biHeight = 1;

	mov	DWORD PTR _data$3[ebp+8], 1

; 88   :             data.bmiHeader.biPlanes = 1;

	mov	edx, 1
	mov	WORD PTR _data$3[ebp+12], dx

; 89   :             data.bmiHeader.biBitCount = 24;

	mov	eax, 24					; 00000018H
	mov	WORD PTR _data$3[ebp+14], ax

; 90   :             data.bmiHeader.biCompression = BI_RGB;

	mov	DWORD PTR _data$3[ebp+16], 0

; 91   :             data.bmiHeader.biSizeImage = 4;

	mov	DWORD PTR _data$3[ebp+20], 4

; 92   : 
; 93   :             if(BitBlt(hdcDestination, 0, 0, 1, 1, hdcDesktop, p.x, p.y, SRCCOPY|CAPTUREBLT))

	push	1087111200				; 40cc0020H
	mov	ecx, DWORD PTR _p$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	push	1
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__BitBlt@36
	test	eax, eax
	je	SHORT $LN3@GetColor

; 94   :             {
; 95   :                 DWORD buffer;
; 96   :                 if(GetDIBits(hdcDestination, hBitmap, 0, 1, &buffer, &data, DIB_RGB_COLORS))

	push	0
	lea	ecx, DWORD PTR _data$3[ebp]
	push	ecx
	lea	edx, DWORD PTR _buffer$2[ebp]
	push	edx
	push	1
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	call	DWORD PTR __imp__GetDIBits@28
	test	eax, eax
	je	SHORT $LN2@GetColor

; 97   :                     return 0xFF000000|buffer;

	mov	eax, DWORD PTR _buffer$2[ebp]
	or	eax, -16777216				; ff000000H
	jmp	SHORT $LN5@GetColor
$LN2@GetColor:

; 98   :             }
; 99   :             else

	jmp	SHORT $LN4@GetColor
$LN3@GetColor:

; 100  :             {
; 101  :                 int err = GetLastError();

	call	DWORD PTR __imp__GetLastError@0
	mov	DWORD PTR _err$1[ebp], eax

; 102  :                 nop();

	call	?nop@@YAXXZ				; nop
$LN4@GetColor:

; 103  :             }
; 104  :         }
; 105  : 
; 106  :         return 0xFF000000;

	mov	eax, -16777216				; ff000000H
$LN5@GetColor:

; 107  :     }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?GetColor@ColorSelectionData@@QAEKXZ ENDP		; ColorSelectionData::GetColor
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ??0BitmapImageSource@@QAE@PAVXElement@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
??0BitmapImageSource@@QAE@PAVXElement@@@Z PROC		; BitmapImageSource::BitmapImageSource, COMDAT
; _this$ = ecx

; 135  :     BitmapImageSource(XElement *data)

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??0ImageSource@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BitmapImageSource@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0BitmapImage@@QAE@XZ			; BitmapImage::BitmapImage

; 136  :     {
; 137  :         this->data = data;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [ecx+41224], edx

; 138  :        
; 139  :         UpdateSettings();

	mov	ecx, DWORD PTR _this$[ebp]
	call	?UpdateSettings@BitmapImageSource@@UAEXXZ ; BitmapImageSource::UpdateSettings

; 140  : 
; 141  :         colorKeyShader      = CreatePixelShaderFromFile(TEXT("shaders\\ColorKey_RGB.pShader"));

	push	OFFSET ??_C@_1DK@KFIIOLPP@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA_?$AAR?$AAG?$AAB?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
	call	?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z ; CreatePixelShaderFromFile
	add	esp, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41252], eax

; 142  :         alphaIgnoreShader   = CreatePixelShaderFromFile(TEXT("shaders\\AlphaIgnore.pShader"));

	push	OFFSET ??_C@_1DI@KEBKHFHN@?$AAs?$AAh?$AAa?$AAd?$AAe?$AAr?$AAs?$AA?2?$AAA?$AAl?$AAp?$AAh?$AAa?$AAI?$AAg?$AAn?$AAo?$AAr?$AAe?$AA?4?$AAp?$AAS?$AAh?$AAa?$AAd?$AAe?$AAr?$AA?$AA@
	call	?CreatePixelShaderFromFile@@YAPAVShader@@PB_W@Z ; CreatePixelShaderFromFile
	add	esp, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+41256], eax

; 143  :         
; 144  :         Log(TEXT("Using bitmap image"));

	push	OFFSET ??_C@_1CG@PMLIOPBC@?$AAU?$AAs?$AAi?$AAn?$AAg?$AA?5?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA?5?$AAi?$AAm?$AAa?$AAg?$AAe?$AA?$AA@
	call	DWORD PTR __imp_?Log@@YAXPB_WZZ
	add	esp, 4

; 145  :     }

	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0BitmapImageSource@@QAE@PAVXElement@@@Z ENDP		; BitmapImageSource::BitmapImageSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ??1BitmapImageSource@@UAE@XZ
_TEXT	SEGMENT
tv91 = -28						; size = 4
$T1 = -24						; size = 4
tv83 = -20						; size = 4
$T2 = -16						; size = 4
$T3 = -12						; size = 4
$T4 = -8						; size = 4
_this$ = -4						; size = 4
??1BitmapImageSource@@UAE@XZ PROC			; BitmapImageSource::~BitmapImageSource, COMDAT
; _this$ = ecx

; 148  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7BitmapImageSource@@6B@

; 149  :         delete colorKeyShader;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41252]
	mov	DWORD PTR $T2[ebp], edx
	mov	eax, DWORD PTR $T2[ebp]
	mov	DWORD PTR $T4[ebp], eax
	cmp	DWORD PTR $T4[ebp], 0
	je	SHORT $LN3@BitmapImag
	push	1
	mov	ecx, DWORD PTR $T4[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T4[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv83[ebp], eax
	jmp	SHORT $LN4@BitmapImag
$LN3@BitmapImag:
	mov	DWORD PTR tv83[ebp], 0
$LN4@BitmapImag:

; 150  :         delete alphaIgnoreShader;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41256]
	mov	DWORD PTR $T1[ebp], edx
	mov	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T3[ebp], eax
	cmp	DWORD PTR $T3[ebp], 0
	je	SHORT $LN5@BitmapImag
	push	1
	mov	ecx, DWORD PTR $T3[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR $T3[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	mov	DWORD PTR tv91[ebp], eax
	jmp	SHORT $LN1@BitmapImag
$LN5@BitmapImag:
	mov	DWORD PTR tv91[ebp], 0
$LN1@BitmapImag:

; 151  :     }

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1BitmapImage@@QAE@XZ			; BitmapImage::~BitmapImage
	mov	ecx, DWORD PTR _this$[ebp]
	call	DWORD PTR __imp_??1ImageSource@@UAE@XZ
	mov	esp, ebp
	pop	ebp
	ret	0
??1BitmapImageSource@@UAE@XZ ENDP			; BitmapImageSource::~BitmapImageSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?Tick@BitmapImageSource@@UAEXM@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_fSeconds$ = 8						; size = 4
?Tick@BitmapImageSource@@UAEXM@Z PROC			; BitmapImageSource::Tick, COMDAT
; _this$ = ecx

; 154  :     {

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx

; 155  :         bitmapImage.Tick(fSeconds);

	push	ecx
	movss	xmm0, DWORD PTR _fSeconds$[ebp]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Tick@BitmapImage@@QAEXM@Z		; BitmapImage::Tick

; 156  :     }

	mov	esp, ebp
	pop	ebp
	ret	4
?Tick@BitmapImageSource@@UAEXM@Z ENDP			; BitmapImageSource::Tick
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?Render@BitmapImageSource@@UAEXABUVect2@@0@Z
_TEXT	SEGMENT
tv241 = -60						; size = 8
tv231 = -52						; size = 8
_outputColor$1 = -44					; size = 4
_alpha$2 = -40						; size = 4
_lastPixelShader$3 = -36				; size = 4
_outputColor$4 = -32					; size = 4
_fBlend$5 = -28						; size = 4
_fSimilarity$6 = -24					; size = 4
_alpha$7 = -20						; size = 4
tv237 = -16						; size = 4
tv227 = -12						; size = 4
_texture$ = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_size$ = 12						; size = 4
?Render@BitmapImageSource@@UAEXABUVect2@@0@Z PROC	; BitmapImageSource::Render, COMDAT
; _this$ = ecx

; 159  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	mov	DWORD PTR _this$[ebp], ecx

; 160  :         Texture *texture = bitmapImage.GetTexture();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetTexture@BitmapImage@@QBEPAVTexture@@XZ ; BitmapImage::GetTexture
	mov	DWORD PTR _texture$[ebp], eax

; 161  : 
; 162  :         if(texture)

	cmp	DWORD PTR _texture$[ebp], 0
	je	$LN1@Render

; 163  :         {
; 164  :             if(bUseColorKey)

	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+41228]
	test	ecx, ecx
	je	$LN2@Render

; 165  :             {
; 166  :                 Shader *lastPixelShader = GetCurrentPixelShader();

	call	?GetCurrentPixelShader@@YAPAVShader@@XZ	; GetCurrentPixelShader
	mov	DWORD PTR _lastPixelShader$3[ebp], eax

; 167  :                 DWORD alpha = ((opacity*255/100)&0xFF);

	mov	edx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [edx+41244], 255
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _alpha$7[ebp], eax

; 168  :                 DWORD outputColor = (alpha << 24) | color&0xFFFFFF;

	mov	edx, DWORD PTR _alpha$7[ebp]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41248]
	and	ecx, 16777215				; 00ffffffH
	or	edx, ecx
	mov	DWORD PTR _outputColor$4[ebp], edx

; 169  :                 LoadPixelShader(colorKeyShader);

	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+41252]
	push	eax
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 170  : 
; 171  :                 float fSimilarity = float(keySimilarity)*0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41236]
	mov	DWORD PTR tv227[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR tv227[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv231[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv231[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fSimilarity$6[ebp], xmm0

; 172  :                 float fBlend      = float(keyBlend)*0.01f;

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41240]
	mov	DWORD PTR tv237[ebp], edx
	cvtsi2sd xmm0, DWORD PTR tv237[ebp]
	mov	eax, DWORD PTR tv237[ebp]
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	movsd	QWORD PTR tv241[ebp], xmm0
	cvtsd2ss xmm0, QWORD PTR tv241[ebp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR _fBlend$5[ebp], xmm0

; 173  : 
; 174  :                 colorKeyShader->SetColor(colorKeyShader->GetParameter(2), keyColor);

	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41232]
	push	edx
	push	2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41252]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [edx+41252]
	mov	edx, DWORD PTR [eax+12]
	call	edx
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41252]
	call	DWORD PTR __imp_?SetColor@Shader@@QAEXPAXK@Z

; 175  :                 colorKeyShader->SetFloat(colorKeyShader->GetParameter(3), fSimilarity);

	push	ecx
	movss	xmm0, DWORD PTR _fSimilarity$6[ebp]
	movss	DWORD PTR [esp], xmm0
	push	3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41252]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+41252]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41252]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+41252]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 176  :                 colorKeyShader->SetFloat(colorKeyShader->GetParameter(4), fBlend);

	push	ecx
	movss	xmm0, DWORD PTR _fBlend$5[ebp]
	movss	DWORD PTR [esp], xmm0
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41252]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+41252]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+41252]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+41252]
	mov	eax, DWORD PTR [edx+28]
	call	eax

; 177  : 
; 178  :                 DrawSprite(texture, outputColor, pos.x, pos.y, pos.x+size.x, pos.y+size.y);

	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	movss	xmm0, DWORD PTR [ecx+4]
	addss	xmm0, DWORD PTR [edx+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	movss	xmm0, DWORD PTR [eax]
	addss	xmm0, DWORD PTR [ecx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [edx+4]
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _outputColor$4[ebp]
	push	ecx
	mov	edx, DWORD PTR _texture$[ebp]
	push	edx
	call	?DrawSprite@@YAXPAVTexture@@KMMMM@Z	; DrawSprite
	add	esp, 24					; 00000018H

; 179  :                 LoadPixelShader(lastPixelShader);

	mov	eax, DWORD PTR _lastPixelShader$3[ebp]
	push	eax
	call	?LoadPixelShader@@YAXPAVShader@@@Z	; LoadPixelShader
	add	esp, 4

; 180  :             }
; 181  :             else

	jmp	$LN1@Render
$LN2@Render:

; 182  :             {
; 183  :                 DWORD alpha = ((opacity*255/100)&0xFF);

	mov	ecx, DWORD PTR _this$[ebp]
	imul	eax, DWORD PTR [ecx+41244], 255
	xor	edx, edx
	mov	ecx, 100				; 00000064H
	div	ecx
	and	eax, 255				; 000000ffH
	mov	DWORD PTR _alpha$2[ebp], eax

; 184  :                 DWORD outputColor = (alpha << 24) | color&0xFFFFFF;

	mov	edx, DWORD PTR _alpha$2[ebp]
	shl	edx, 24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41248]
	and	ecx, 16777215				; 00ffffffH
	or	edx, ecx
	mov	DWORD PTR _outputColor$1[ebp], edx

; 185  :                 DrawSprite(texture, outputColor, pos.x, pos.y, pos.x+size.x, pos.y+size.y);

	mov	edx, DWORD PTR _pos$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	movss	xmm0, DWORD PTR [edx+4]
	addss	xmm0, DWORD PTR [eax+4]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	movss	xmm0, DWORD PTR [ecx]
	addss	xmm0, DWORD PTR [edx]
	push	ecx
	movss	DWORD PTR [esp], xmm0
	mov	eax, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [eax+4]
	movss	DWORD PTR [esp], xmm0
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	movss	xmm0, DWORD PTR [ecx]
	movss	DWORD PTR [esp], xmm0
	mov	edx, DWORD PTR _outputColor$1[ebp]
	push	edx
	mov	eax, DWORD PTR _texture$[ebp]
	push	eax
	call	?DrawSprite@@YAXPAVTexture@@KMMMM@Z	; DrawSprite
	add	esp, 24					; 00000018H
$LN1@Render:

; 186  :             }
; 187  :         }
; 188  :     }

	mov	esp, ebp
	pop	ebp
	ret	8
?Render@BitmapImageSource@@UAEXABUVect2@@0@Z ENDP	; BitmapImageSource::Render
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?UpdateSettings@BitmapImageSource@@UAEXXZ
_TEXT	SEGMENT
tv148 = -12						; size = 4
_this$ = -8						; size = 4
_bNewUseColorKey$ = -2					; size = 1
tv91 = -1						; size = 1
?UpdateSettings@BitmapImageSource@@UAEXXZ PROC		; BitmapImageSource::UpdateSettings, COMDAT
; _this$ = ecx

; 191  :     {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR _this$[ebp], ecx

; 192  :         bitmapImage.SetPath(data->GetString(TEXT("path")));

	push	0
	push	OFFSET ??_C@_19JIFMCCAP@?$AAp?$AAa?$AAt?$AAh?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41224]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	sub	esp, 8
	mov	ecx, esp
	push	eax
	call	DWORD PTR __imp_??0String@@QAE@PB_W@Z
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?SetPath@BitmapImage@@QAEXVString@@@Z	; BitmapImage::SetPath

; 193  :         bitmapImage.EnableFileMonitor(data->GetInt(TEXT("monitor"), 0) == 1);

	push	0
	push	OFFSET ??_C@_1BA@FBJJKPF@?$AAm?$AAo?$AAn?$AAi?$AAt?$AAo?$AAr?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	cmp	eax, 1
	jne	SHORT $LN4@UpdateSett
	mov	BYTE PTR tv91[ebp], 1
	jmp	SHORT $LN5@UpdateSett
$LN4@UpdateSett:
	mov	BYTE PTR tv91[ebp], 0
$LN5@UpdateSett:
	movzx	edx, BYTE PTR tv91[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?EnableFileMonitor@BitmapImage@@QAEX_N@Z ; BitmapImage::EnableFileMonitor

; 194  :         bitmapImage.Init();

	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?Init@BitmapImage@@QAEXXZ		; BitmapImage::Init

; 195  : 
; 196  :         //------------------------------------
; 197  : 
; 198  :         opacity = data->GetInt(TEXT("opacity"), 100);

	push	100					; 00000064H
	push	OFFSET ??_C@_1BA@IOIHGJBH@?$AAo?$AAp?$AAa?$AAc?$AAi?$AAt?$AAy?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41244], eax

; 199  :         color = data->GetInt(TEXT("color"), 0xFFFFFFFF);

	push	-1
	push	OFFSET ??_C@_1M@EENKLIPJ@?$AAc?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41248], eax

; 200  :         if(opacity > 100)

	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+41244], 100		; 00000064H
	jbe	SHORT $LN1@UpdateSett

; 201  :             opacity = 100;

	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+41244], 100		; 00000064H
$LN1@UpdateSett:

; 202  : 
; 203  :         bool bNewUseColorKey = data->GetInt(TEXT("useColorKey"), 0) != 0;

	push	0
	push	OFFSET ??_C@_1BI@BGKHJDHB@?$AAu?$AAs?$AAe?$AAC?$AAo?$AAl?$AAo?$AAr?$AAK?$AAe?$AAy?$AA?$AA@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	test	eax, eax
	je	SHORT $LN6@UpdateSett
	mov	DWORD PTR tv148[ebp], 1
	jmp	SHORT $LN7@UpdateSett
$LN6@UpdateSett:
	mov	DWORD PTR tv148[ebp], 0
$LN7@UpdateSett:
	mov	dl, BYTE PTR tv148[ebp]
	mov	BYTE PTR _bNewUseColorKey$[ebp], dl

; 204  :         keyColor        = data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	push	-1
	push	OFFSET ??_C@_1BC@FNBIMNIJ@?$AAk?$AAe?$AAy?$AAC?$AAo?$AAl?$AAo?$AAr?$AA?$AA@
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41232], eax

; 205  :         keySimilarity   = data->GetInt(TEXT("keySimilarity"), 10);

	push	10					; 0000000aH
	push	OFFSET ??_C@_1BM@IKJBGLND@?$AAk?$AAe?$AAy?$AAS?$AAi?$AAm?$AAi?$AAl?$AAa?$AAr?$AAi?$AAt?$AAy?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41236], eax

; 206  :         keyBlend        = data->GetInt(TEXT("keyBlend"), 0);

	push	0
	push	OFFSET ??_C@_1BC@IMOLPKCI@?$AAk?$AAe?$AAy?$AAB?$AAl?$AAe?$AAn?$AAd?$AA?$AA@
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+41224]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+41240], eax

; 207  : 
; 208  :         bUseColorKey = bNewUseColorKey;

	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _bNewUseColorKey$[ebp]
	mov	BYTE PTR [edx+41228], al

; 209  :     }

	mov	esp, ebp
	pop	ebp
	ret	0
?UpdateSettings@BitmapImageSource@@UAEXXZ ENDP		; BitmapImageSource::UpdateSettings
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?GetSize@BitmapImageSource@@UBE?AUVect2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?GetSize@BitmapImageSource@@UBE?AUVect2@@XZ PROC	; BitmapImageSource::GetSize, COMDAT
; _this$ = ecx

; 211  :     Vect2 GetSize() const {return bitmapImage.GetSize();}

	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	?GetSize@BitmapImage@@QBE?AUVect2@@XZ	; BitmapImage::GetSize
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?GetSize@BitmapImageSource@@UBE?AUVect2@@XZ ENDP	; BitmapImageSource::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??_GBitmapImageSource@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GBitmapImageSource@@UAEPAXI@Z PROC			; BitmapImageSource::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1BitmapImageSource@@UAE@XZ		; BitmapImageSource::~BitmapImageSource
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??_GBitmapImageSource@@UAEPAXI@Z ENDP			; BitmapImageSource::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?CreateBitmapSource@@YGPAVImageSource@@PAVXElement@@@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
$T1 = -4						; size = 4
_data$ = 8						; size = 4
?CreateBitmapSource@@YGPAVImageSource@@PAVXElement@@@Z PROC ; CreateBitmapSource, COMDAT

; 216  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 217  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN1@CreateBitm

; 218  :         return NULL;

	xor	eax, eax
	jmp	SHORT $LN2@CreateBitm
$LN1@CreateBitm:

; 219  : 
; 220  :     return new BitmapImageSource(data);

	push	41260					; 0000a12cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T1[ebp], eax
	cmp	DWORD PTR $T1[ebp], 0
	je	SHORT $LN4@CreateBitm
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T1[ebp]
	call	??0BitmapImageSource@@QAE@PAVXElement@@@Z ; BitmapImageSource::BitmapImageSource
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN5@CreateBitm
$LN4@CreateBitm:
	mov	DWORD PTR tv74[ebp], 0
$LN5@CreateBitm:
	mov	eax, DWORD PTR tv74[ebp]
$LN2@CreateBitm:

; 221  : }

	mov	esp, ebp
	pop	ebp
	ret	4
?CreateBitmapSource@@YGPAVImageSource@@PAVXElement@@@Z ENDP ; CreateBitmapSource
_TEXT	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_ofn$1 = -1324						; size = 88
_colorkey$2 = -1236					; size = 4
_similarity$3 = -1232					; size = 4
_color$4 = -1228					; size = 4
_bOpenFile$5 = -1224					; size = 4
_configData$6 = -1220					; size = 4
_color$7 = -1216					; size = 4
_configData$8 = -1212					; size = 4
_monitor$9 = -1208					; size = 4
_monitor$10 = -1204					; size = 4
_keyBlend$11 = -1200					; size = 4
_hCursor$12 = -1196					; size = 4
_keySimilarity$13 = -1192				; size = 4
_configData$14 = -1188					; size = 4
_keyColor$15 = -1184					; size = 4
_hwndUseColorKey$16 = -1180				; size = 4
_bUseColorKey$17 = -1176				; size = 4
_configData$18 = -1172					; size = 4
_color$19 = -1168					; size = 4
_blend$20 = -1164					; size = 4
_bFailed$21 = -1160					; size = 4
_lpBitmap$22 = -1156					; size = 4
_strBitmap$23 = -1152					; size = 8
_configData$24 = -1144					; size = 4
tv204 = -1140						; size = 4
tv538 = -1136						; size = 4
tv218 = -1132						; size = 4
tv559 = -1128						; size = 4
tv359 = -1124						; size = 4
_source$25 = -1120					; size = 4
_source$26 = -1116					; size = 4
_source$27 = -1112					; size = 4
tv461 = -1108						; size = 4
_val$28 = -1104						; size = 4
tv480 = -1100						; size = 4
_source$29 = -1096					; size = 4
_hwndVal$30 = -1092					; size = 4
tv68 = -1088						; size = 4
_opacity$31 = -1084					; size = 4
_opacity$32 = -1080					; size = 4
_colorkeyChk$33 = -1076					; size = 4
_bUseColorKey$34 = -1072				; size = 4
_source$35 = -1068					; size = 4
_configInfo$36 = -1064					; size = 4
_configInfo$37 = -1060					; size = 4
tv305 = -1056						; size = 4
_curDirectory$38 = -1052				; size = 522
_lpFile$39 = -528					; size = 522
__$ArrayPad$ = -4					; size = 4
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z PROC		; ConfigureBitmapProc, COMDAT

; 229  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 1324				; 0000052cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 230  :     static bool bSelectingColor = false;
; 231  :     static bool bMouseDown = false;
; 232  :     static ColorSelectionData colorData;

	mov	eax, DWORD PTR ?$S1@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4IA
	and	eax, 1
	jne	SHORT $LN50@ConfigureB
	mov	ecx, DWORD PTR ?$S1@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4IA
	or	ecx, 1
	mov	DWORD PTR ?$S1@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4IA, ecx
	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	??0ColorSelectionData@@QAE@XZ		; ColorSelectionData::ColorSelectionData
	push	OFFSET ??__FcolorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ; `ConfigureBitmapProc'::`2'::`dynamic atexit destructor for 'colorData''
	call	_atexit
	add	esp, 4
$LN50@ConfigureB:

; 233  : 
; 234  :     switch(message)

	mov	edx, DWORD PTR _message$[ebp]
	mov	DWORD PTR tv68[ebp], edx
	mov	eax, DWORD PTR tv68[ebp]
	sub	eax, 272				; 00000110H
	mov	DWORD PTR tv68[ebp], eax
	cmp	DWORD PTR tv68[ebp], 242		; 000000f2H
	ja	$LN48@ConfigureB
	mov	ecx, DWORD PTR tv68[ebp]
	movzx	edx, BYTE PTR $LN65@ConfigureB[ecx]
	jmp	DWORD PTR $LN67@ConfigureB[edx*4]
$LN47@ConfigureB:

; 235  :     {
; 236  :         case WM_INITDIALOG:
; 237  :             {
; 238  :                 ConfigBitmapInfo *configInfo = (ConfigBitmapInfo*)lParam;

	mov	eax, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _configInfo$36[ebp], eax

; 239  :                 SetWindowLongPtr(hwnd, DWLP_USER, (LONG_PTR)configInfo);

	mov	ecx, DWORD PTR _configInfo$36[ebp]
	push	ecx
	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__SetWindowLongW@12

; 240  :                 LocalizeWindow(hwnd);

	push	0
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp_?LocalizeWindow@@YAXPAUHWND__@@PAVLocaleStringLookup@@@Z
	add	esp, 8

; 241  : 
; 242  :                 //--------------------------
; 243  : 
; 244  :                 CTSTR lpBitmap = configInfo->data->GetString(TEXT("path"));

	push	0
	push	OFFSET $SG4294949934
	mov	ecx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpBitmap$22[ebp], eax

; 245  :                 SetWindowText(GetDlgItem(hwnd, IDC_BITMAP), lpBitmap);

	mov	edx, DWORD PTR _lpBitmap$22[ebp]
	push	edx
	push	1049					; 00000419H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8

; 246  : 
; 247  :                 //--------------------------
; 248  : 
; 249  :                 int opacity = configInfo->data->GetInt(TEXT("opacity"), 100);

	push	100					; 00000064H
	push	OFFSET $SG4294949933
	mov	ecx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _opacity$31[ebp], eax

; 250  :                 if(opacity > 100)

	cmp	DWORD PTR _opacity$31[ebp], 100		; 00000064H
	jle	SHORT $LN46@ConfigureB

; 251  :                     opacity = 100;

	mov	DWORD PTR _opacity$31[ebp], 100		; 00000064H
	jmp	SHORT $LN45@ConfigureB
$LN46@ConfigureB:

; 252  :                 else if(opacity < 0)

	cmp	DWORD PTR _opacity$31[ebp], 0
	jge	SHORT $LN45@ConfigureB

; 253  :                     opacity = 0;

	mov	DWORD PTR _opacity$31[ebp], 0
$LN45@ConfigureB:

; 254  : 
; 255  :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1041					; 00000411H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 256  :                 SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_SETPOS32, 0, opacity);

	mov	eax, DWORD PTR _opacity$31[ebp]
	push	eax
	push	0
	push	1137					; 00000471H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 257  : 
; 258  :                 //--------------------------
; 259  : 
; 260  :                 DWORD color = configInfo->data->GetInt(TEXT("color"), 0xFFFFFFFF);

	push	-1
	push	OFFSET $SG4294949932
	mov	edx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _color$7[ebp], eax

; 261  :                 DWORD colorkey = configInfo->data->GetInt(TEXT("keyColor"), 0xFFFFFFFF);

	push	-1
	push	OFFSET $SG4294949931
	mov	eax, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _colorkey$2[ebp], eax

; 262  :                 UINT  similarity    = configInfo->data->GetInt(TEXT("keySimilarity"), 10);

	push	10					; 0000000aH
	push	OFFSET $SG4294949930
	mov	ecx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _similarity$3[ebp], eax

; 263  :                 UINT  blend         = configInfo->data->GetInt(TEXT("keyBlend"), 0);

	push	0
	push	OFFSET $SG4294949929
	mov	edx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _blend$20[ebp], eax

; 264  : 
; 265  :                 CCSetColor(GetDlgItem(hwnd, IDC_COLOR), color);

	mov	eax, DWORD PTR _color$7[ebp]
	push	eax
	push	1104					; 00000450H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 266  :                 CCSetColor(GetDlgItem(hwnd, IDC_KEYCOLOR), colorkey);

	mov	edx, DWORD PTR _colorkey$2[ebp]
	push	edx
	push	1105					; 00000451H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 267  : 
; 268  :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1021					; 000003fdH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 269  :                 SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_SETPOS32, 0, similarity);

	mov	edx, DWORD PTR _similarity$3[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1021					; 000003fdH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 270  : 
; 271  :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETRANGE32, 0, 100);

	push	100					; 00000064H
	push	0
	push	1135					; 0000046fH
	push	1023					; 000003ffH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 272  :                 SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_SETPOS32, 0, blend);

	mov	edx, DWORD PTR _blend$20[ebp]
	push	edx
	push	0
	push	1137					; 00000471H
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 273  : 
; 274  :                 //--------------------------
; 275  : 
; 276  :                 int monitor = configInfo->data->GetInt(TEXT("monitor"), 0);

	push	0
	push	OFFSET $SG4294949928
	mov	ecx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _monitor$10[ebp], eax

; 277  :                 SendMessage(GetDlgItem(hwnd, IDC_MONITOR), BM_SETCHECK, monitor ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _monitor$10[ebp], 0
	je	SHORT $LN53@ConfigureB
	mov	DWORD PTR tv204[ebp], 1
	jmp	SHORT $LN54@ConfigureB
$LN53@ConfigureB:
	mov	DWORD PTR tv204[ebp], 0
$LN54@ConfigureB:
	push	0
	mov	edx, DWORD PTR tv204[ebp]
	push	edx
	push	241					; 000000f1H
	push	1019					; 000003fbH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 278  :                 int colorkeyChk = configInfo->data->GetInt(TEXT("useColorKey"), 0);

	push	0
	push	OFFSET $SG4294949927
	mov	ecx, DWORD PTR _configInfo$36[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?GetInt@XElement@@QBEHPB_WH@Z
	mov	DWORD PTR _colorkeyChk$33[ebp], eax

; 279  :                 SendMessage(GetDlgItem(hwnd, IDC_USECOLORKEY), BM_SETCHECK, colorkeyChk ? BST_CHECKED : BST_UNCHECKED, 0);

	cmp	DWORD PTR _colorkeyChk$33[ebp], 0
	je	SHORT $LN55@ConfigureB
	mov	DWORD PTR tv218[ebp], 1
	jmp	SHORT $LN56@ConfigureB
$LN55@ConfigureB:
	mov	DWORD PTR tv218[ebp], 0
$LN56@ConfigureB:
	push	0
	mov	edx, DWORD PTR tv218[ebp]
	push	edx
	push	241					; 000000f1H
	push	1017					; 000003f9H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16

; 280  : 
; 281  :                 EnableWindow(GetDlgItem(hwnd, IDC_KEYCOLOR), colorkeyChk);

	mov	ecx, DWORD PTR _colorkeyChk$33[ebp]
	push	ecx
	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 282  :                 EnableWindow(GetDlgItem(hwnd, IDC_SELECT), colorkeyChk);

	mov	eax, DWORD PTR _colorkeyChk$33[ebp]
	push	eax
	push	1125					; 00000465H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 283  :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), colorkeyChk);

	mov	edx, DWORD PTR _colorkeyChk$33[ebp]
	push	edx
	push	1020					; 000003fcH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 284  :                 EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), colorkeyChk);

	mov	ecx, DWORD PTR _colorkeyChk$33[ebp]
	push	ecx
	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 285  :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), colorkeyChk);

	mov	eax, DWORD PTR _colorkeyChk$33[ebp]
	push	eax
	push	1022					; 000003feH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 286  :                 EnableWindow(GetDlgItem(hwnd, IDC_BLEND), colorkeyChk);

	mov	edx, DWORD PTR _colorkeyChk$33[ebp]
	push	edx
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 287  : 
; 288  :                 return TRUE;

	mov	eax, 1
	jmp	$LN51@ConfigureB
$LN43@ConfigureB:

; 289  :             }
; 290  : 
; 291  :         case WM_LBUTTONDOWN:
; 292  :             if(bSelectingColor)

	movzx	ecx, BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	je	SHORT $LN42@ConfigureB

; 293  :             {
; 294  :                 bMouseDown = true;

	mov	BYTE PTR ?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1

; 295  :                 CCSetColor(GetDlgItem(hwnd, IDC_KEYCOLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 296  :                 ConfigureBitmapProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_KEYCOLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_KEYCOLOR));

	push	1105					; 00000451H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1105					; 00000451H
	push	273					; 00000111H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureBitmapProc
$LN42@ConfigureB:

; 297  :             }
; 298  :             break;

	jmp	$LN48@ConfigureB
$LN41@ConfigureB:

; 299  : 
; 300  :         case WM_MOUSEMOVE:
; 301  :             if(bSelectingColor && bMouseDown)

	movzx	edx, BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	edx, edx
	je	SHORT $LN40@ConfigureB
	movzx	eax, BYTE PTR ?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	eax, eax
	je	SHORT $LN40@ConfigureB

; 302  :             {
; 303  :                 CCSetColor(GetDlgItem(hwnd, IDC_KEYCOLOR), colorData.GetColor());

	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?GetColor@ColorSelectionData@@QAEKXZ	; ColorSelectionData::GetColor
	push	eax
	push	1105					; 00000451H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCSetColor@@YAXPAUHWND__@@K@Z
	add	esp, 8

; 304  :                 ConfigureBitmapProc(hwnd, WM_COMMAND, MAKEWPARAM(IDC_KEYCOLOR, CCN_CHANGED), (LPARAM)GetDlgItem(hwnd, IDC_KEYCOLOR));

	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	push	1105					; 00000451H
	push	273					; 00000111H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureBitmapProc
$LN40@ConfigureB:

; 305  :             }
; 306  :             break;

	jmp	$LN48@ConfigureB
$LN39@ConfigureB:

; 307  : 
; 308  :         case WM_LBUTTONUP:
; 309  :             if(bSelectingColor)

	movzx	ecx, BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	je	SHORT $LN38@ConfigureB

; 310  :             {
; 311  :                 colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear

; 312  :                 ReleaseCapture();

	call	DWORD PTR __imp__ReleaseCapture@0

; 313  :                 bMouseDown = false;

	mov	BYTE PTR ?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 314  :                 bSelectingColor = false;

	mov	BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 315  : 
; 316  :                 ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$18[ebp], eax

; 317  :                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	eax, DWORD PTR _configData$18[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$26[ebp], eax

; 318  :                 if(source)

	cmp	DWORD PTR _source$26[ebp], 0
	je	SHORT $LN38@ConfigureB

; 319  :                     source->SetInt(TEXT("useColorKey"), true);

	push	1
	push	OFFSET $SG4294949926
	mov	eax, DWORD PTR _source$26[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _source$26[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN38@ConfigureB:

; 320  :             }
; 321  :             break;

	jmp	$LN48@ConfigureB
$LN36@ConfigureB:

; 322  : 
; 323  :         case WM_COMMAND:
; 324  :             switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv305[ebp], ecx
	cmp	DWORD PTR tv305[ebp], 1022		; 000003feH
	jg	SHORT $LN63@ConfigureB
	cmp	DWORD PTR tv305[ebp], 1022		; 000003feH
	je	$LN22@ConfigureB
	cmp	DWORD PTR tv305[ebp], 1017		; 000003f9H
	jg	SHORT $LN64@ConfigureB
	cmp	DWORD PTR tv305[ebp], 1017		; 000003f9H
	je	$LN31@ConfigureB
	cmp	DWORD PTR tv305[ebp], 1
	je	$LN8@ConfigureB
	cmp	DWORD PTR tv305[ebp], 2
	je	$LN1@ConfigureB
	jmp	$LN48@ConfigureB
$LN64@ConfigureB:
	cmp	DWORD PTR tv305[ebp], 1020		; 000003fcH
	je	$LN22@ConfigureB
	jmp	$LN48@ConfigureB
$LN63@ConfigureB:
	mov	edx, DWORD PTR tv305[ebp]
	sub	edx, 1050				; 0000041aH
	mov	DWORD PTR tv305[ebp], edx
	cmp	DWORD PTR tv305[ebp], 75		; 0000004bH
	ja	$LN48@ConfigureB
	mov	eax, DWORD PTR tv305[ebp]
	movzx	ecx, BYTE PTR $LN66@ConfigureB[eax]
	jmp	DWORD PTR $LN68@ConfigureB[ecx*4]
$LN33@ConfigureB:

; 325  :             {
; 326  :                 case IDC_BROWSE:
; 327  :                     {
; 328  :                         TCHAR lpFile[MAX_PATH+1];
; 329  :                         zero(lpFile, sizeof(lpFile));

	push	522					; 0000020aH
	lea	edx, DWORD PTR _lpFile$39[ebp]
	push	edx
	call	?zero@@YGXPAXI@Z			; zero

; 330  : 
; 331  :                         OPENFILENAME ofn;
; 332  :                         zero(&ofn, sizeof(ofn));

	push	88					; 00000058H
	lea	eax, DWORD PTR _ofn$1[ebp]
	push	eax
	call	?zero@@YGXPAXI@Z			; zero

; 333  :                         ofn.lStructSize = sizeof(ofn);

	mov	DWORD PTR _ofn$1[ebp], 88		; 00000058H

; 334  :                         ofn.lpstrFile = lpFile;

	lea	ecx, DWORD PTR _lpFile$39[ebp]
	mov	DWORD PTR _ofn$1[ebp+28], ecx

; 335  :                         ofn.hwndOwner = hwnd;

	mov	edx, DWORD PTR _hwnd$[ebp]
	mov	DWORD PTR _ofn$1[ebp+4], edx

; 336  :                         ofn.nMaxFile = MAX_PATH;

	mov	DWORD PTR _ofn$1[ebp+32], 260		; 00000104H

; 337  :                         ofn.lpstrFilter = TEXT("All Formats (*.bmp;*.dds;*.jpg;*.png;*.gif)\0*.bmp;*.dds;*.jpg;*.png;*.gif\0");

	mov	DWORD PTR _ofn$1[ebp+12], OFFSET $SG4294949925

; 338  :                         ofn.nFilterIndex = 1;

	mov	DWORD PTR _ofn$1[ebp+24], 1

; 339  :                         ofn.Flags = OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

	mov	DWORD PTR _ofn$1[ebp+52], 6144		; 00001800H

; 340  : 
; 341  :                         TCHAR curDirectory[MAX_PATH+1];
; 342  :                         GetCurrentDirectory(MAX_PATH, curDirectory);

	lea	eax, DWORD PTR _curDirectory$38[ebp]
	push	eax
	push	260					; 00000104H
	call	DWORD PTR __imp__GetCurrentDirectoryW@8

; 343  : 
; 344  :                         BOOL bOpenFile = GetOpenFileName(&ofn);

	lea	ecx, DWORD PTR _ofn$1[ebp]
	push	ecx
	call	_IsolationAwareGetOpenFileNameW@4
	mov	DWORD PTR _bOpenFile$5[ebp], eax

; 345  :                         SetCurrentDirectory(curDirectory);

	lea	edx, DWORD PTR _curDirectory$38[ebp]
	push	edx
	call	DWORD PTR __imp__SetCurrentDirectoryW@4

; 346  : 
; 347  :                         if(bOpenFile)

	cmp	DWORD PTR _bOpenFile$5[ebp], 0
	je	SHORT $LN32@ConfigureB

; 348  :                             SetWindowText(GetDlgItem(hwnd, IDC_BITMAP), lpFile);

	lea	eax, DWORD PTR _lpFile$39[ebp]
	push	eax
	push	1049					; 00000419H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SetWindowTextW@8
$LN32@ConfigureB:

; 349  : 
; 350  :                         break;

	jmp	$LN48@ConfigureB
$LN31@ConfigureB:

; 351  :                     }
; 352  : 
; 353  :                 case IDC_USECOLORKEY:
; 354  :                     {
; 355  :                         HWND hwndUseColorKey = (HWND)lParam;

	mov	edx, DWORD PTR _lParam$[ebp]
	mov	DWORD PTR _hwndUseColorKey$16[ebp], edx

; 356  :                         BOOL bUseColorKey = SendMessage(hwndUseColorKey, BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	mov	eax, DWORD PTR _hwndUseColorKey$16[ebp]
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN57@ConfigureB
	mov	DWORD PTR tv359[ebp], 1
	jmp	SHORT $LN58@ConfigureB
$LN57@ConfigureB:
	mov	DWORD PTR tv359[ebp], 0
$LN58@ConfigureB:
	mov	ecx, DWORD PTR tv359[ebp]
	mov	DWORD PTR _bUseColorKey$34[ebp], ecx

; 357  : 
; 358  :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$8[ebp], eax

; 359  :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	eax, DWORD PTR _configData$8[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [edx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$25[ebp], eax

; 360  :                         if(source)

	cmp	DWORD PTR _source$25[ebp], 0
	je	SHORT $LN30@ConfigureB

; 361  :                             source->SetInt(TEXT("useColorKey"), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$34[ebp]
	push	eax
	push	OFFSET $SG4294949924
	mov	ecx, DWORD PTR _source$25[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$25[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN30@ConfigureB:

; 362  : 
; 363  :                         EnableWindow(GetDlgItem(hwnd, IDC_KEYCOLOR), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$34[ebp]
	push	ecx
	push	1105					; 00000451H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 364  :                         EnableWindow(GetDlgItem(hwnd, IDC_SELECT), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$34[ebp]
	push	eax
	push	1125					; 00000465H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 365  :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD_EDIT), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$34[ebp]
	push	edx
	push	1020					; 000003fcH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 366  :                         EnableWindow(GetDlgItem(hwnd, IDC_BASETHRESHOLD), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$34[ebp]
	push	ecx
	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 367  :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND_EDIT), bUseColorKey);

	mov	eax, DWORD PTR _bUseColorKey$34[ebp]
	push	eax
	push	1022					; 000003feH
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 368  :                         EnableWindow(GetDlgItem(hwnd, IDC_BLEND), bUseColorKey);

	mov	edx, DWORD PTR _bUseColorKey$34[ebp]
	push	edx
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__EnableWindow@8

; 369  :                         break;

	jmp	$LN48@ConfigureB
$LN29@ConfigureB:

; 370  :                     }
; 371  : 
; 372  :                 case IDC_KEYCOLOR:
; 373  :                     {
; 374  :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$14[ebp], eax

; 375  :                         ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	edx, DWORD PTR _configData$14[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [ecx]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$29[ebp], eax

; 376  : 
; 377  :                         if(source)

	cmp	DWORD PTR _source$29[ebp], 0
	je	SHORT $LN28@ConfigureB

; 378  :                         {
; 379  :                             DWORD color = CCGetColor((HWND)lParam);

	mov	edx, DWORD PTR _lParam$[ebp]
	push	edx
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _color$4[ebp], eax

; 380  :                             source->SetInt(TEXT("keyColor"), color);

	mov	eax, DWORD PTR _color$4[ebp]
	push	eax
	push	OFFSET $SG4294949923
	mov	ecx, DWORD PTR _source$29[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$29[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN28@ConfigureB:

; 381  :                         }
; 382  :                         break;

	jmp	$LN48@ConfigureB
$LN27@ConfigureB:

; 383  :                     }
; 384  : 
; 385  :                 case IDC_SELECT:
; 386  :                     {
; 387  :                         if(!bSelectingColor)

	movzx	ecx, BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA
	test	ecx, ecx
	jne	$LN26@ConfigureB

; 388  :                         {
; 389  :                             if(colorData.Init())

	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Init@ColorSelectionData@@QAE_NXZ	; ColorSelectionData::Init
	movzx	edx, al
	test	edx, edx
	je	$LN25@ConfigureB

; 390  :                             {
; 391  :                                 bMouseDown = false;

	mov	BYTE PTR ?bMouseDown@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 0

; 392  :                                 bSelectingColor = true;

	mov	BYTE PTR ?bSelectingColor@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4_NA, 1

; 393  :                                 SetCapture(hwnd);

	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__SetCapture@4

; 394  :                                 HCURSOR hCursor = (HCURSOR)LoadImage(hinstMain, MAKEINTRESOURCE(IDC_COLORPICKER), IMAGE_CURSOR, 32, 32, 0);

	push	0
	push	32					; 00000020H
	push	32					; 00000020H
	push	2
	push	1015					; 000003f7H
	mov	ecx, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	ecx
	call	DWORD PTR __imp__LoadImageW@24
	mov	DWORD PTR _hCursor$12[ebp], eax

; 395  :                                 SetCursor(hCursor);

	mov	edx, DWORD PTR _hCursor$12[ebp]
	push	edx
	call	DWORD PTR __imp__SetCursor@4

; 396  : 
; 397  :                                 ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$6[ebp], eax

; 398  :                                 ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$6[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$27[ebp], eax

; 399  :                                 if(source)

	cmp	DWORD PTR _source$27[ebp], 0
	je	SHORT $LN24@ConfigureB

; 400  :                                     source->SetInt(TEXT("useColorKey"), false);

	push	0
	push	OFFSET $SG4294949922
	mov	ecx, DWORD PTR _source$27[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$27[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
$LN24@ConfigureB:

; 401  :                             }
; 402  :                             else

	jmp	SHORT $LN26@ConfigureB
$LN25@ConfigureB:

; 403  :                                 colorData.Clear();

	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	?Clear@ColorSelectionData@@QAEXXZ	; ColorSelectionData::Clear
$LN26@ConfigureB:

; 404  :                         }
; 405  :                         break;

	jmp	$LN48@ConfigureB

; 406  :                     }
; 407  :                     break;

	jmp	$LN48@ConfigureB
$LN22@ConfigureB:

; 408  : 
; 409  :                 case IDC_OPACITY_EDIT:
; 410  :                 case IDC_BASETHRESHOLD_EDIT:
; 411  :                 case IDC_BLEND_EDIT:
; 412  :                     if(HIWORD(wParam) == EN_CHANGE)

	mov	ecx, DWORD PTR _wParam$[ebp]
	shr	ecx, 16					; 00000010H
	movzx	edx, cx
	cmp	edx, 768				; 00000300H
	jne	$LN21@ConfigureB

; 413  :                     {
; 414  :                         ConfigDesktopSourceInfo *configData = (ConfigDesktopSourceInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configData$24[ebp], eax

; 415  :                         if(configData)

	cmp	DWORD PTR _configData$24[ebp], 0
	je	$LN21@ConfigureB

; 416  :                         {
; 417  :                             ImageSource *source = API->GetSceneImageSource(configData->lpName);

	mov	ecx, DWORD PTR _configData$24[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR __imp_?API@@3PAVAPIInterface@@A
	mov	ecx, DWORD PTR [eax]
	call	?GetSceneImageSource@APIInterface@@QAEPAVImageSource@@PB_W@Z ; APIInterface::GetSceneImageSource
	mov	DWORD PTR _source$35[ebp], eax

; 418  : 
; 419  :                             if(source)

	cmp	DWORD PTR _source$35[ebp], 0
	je	$LN21@ConfigureB

; 420  :                             {
; 421  :                                 HWND hwndVal = NULL;

	mov	DWORD PTR _hwndVal$30[ebp], 0

; 422  :                                 switch(LOWORD(wParam))

	movzx	ecx, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv461[ebp], ecx
	cmp	DWORD PTR tv461[ebp], 1020		; 000003fcH
	je	SHORT $LN16@ConfigureB
	cmp	DWORD PTR tv461[ebp], 1022		; 000003feH
	je	SHORT $LN15@ConfigureB
	cmp	DWORD PTR tv461[ebp], 1078		; 00000436H
	je	SHORT $LN14@ConfigureB
	jmp	SHORT $LN17@ConfigureB
$LN16@ConfigureB:

; 423  :                                 {
; 424  :                                     case IDC_BASETHRESHOLD_EDIT:    hwndVal = GetDlgItem(hwnd, IDC_BASETHRESHOLD); break;

	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$30[ebp], eax
	jmp	SHORT $LN17@ConfigureB
$LN15@ConfigureB:

; 425  :                                     case IDC_BLEND_EDIT:            hwndVal = GetDlgItem(hwnd, IDC_BLEND); break;

	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$30[ebp], eax
	jmp	SHORT $LN17@ConfigureB
$LN14@ConfigureB:

; 426  :                                     case IDC_OPACITY_EDIT:          hwndVal = GetDlgItem(hwnd, IDC_OPACITY2); break;

	push	1042					; 00000412H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	mov	DWORD PTR _hwndVal$30[ebp], eax
$LN17@ConfigureB:

; 427  :                                 }
; 428  : 
; 429  :                                 int val = (int)SendMessage(hwndVal, UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	mov	edx, DWORD PTR _hwndVal$30[ebp]
	push	edx
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _val$28[ebp], eax

; 430  :                                 switch(LOWORD(wParam))

	movzx	eax, WORD PTR _wParam$[ebp]
	mov	DWORD PTR tv480[ebp], eax
	cmp	DWORD PTR tv480[ebp], 1020		; 000003fcH
	je	SHORT $LN11@ConfigureB
	cmp	DWORD PTR tv480[ebp], 1022		; 000003feH
	je	SHORT $LN10@ConfigureB
	cmp	DWORD PTR tv480[ebp], 1078		; 00000436H
	je	SHORT $LN9@ConfigureB
	jmp	SHORT $LN21@ConfigureB
$LN11@ConfigureB:

; 431  :                                 {
; 432  :                                     case IDC_BASETHRESHOLD_EDIT:    source->SetInt(TEXT("keySimilarity"), val); break;

	mov	ecx, DWORD PTR _val$28[ebp]
	push	ecx
	push	OFFSET $SG4294949921
	mov	edx, DWORD PTR _source$35[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$35[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
	jmp	SHORT $LN21@ConfigureB
$LN10@ConfigureB:

; 433  :                                     case IDC_BLEND_EDIT:            source->SetInt(TEXT("keyBlend"), val); break;

	mov	eax, DWORD PTR _val$28[ebp]
	push	eax
	push	OFFSET $SG4294949920
	mov	ecx, DWORD PTR _source$35[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	ecx, DWORD PTR _source$35[ebp]
	mov	eax, DWORD PTR [edx+44]
	call	eax
	jmp	SHORT $LN21@ConfigureB
$LN9@ConfigureB:

; 434  :                                     case IDC_OPACITY_EDIT:          source->SetInt(TEXT("opacity"), val); break;

	mov	ecx, DWORD PTR _val$28[ebp]
	push	ecx
	push	OFFSET $SG4294949919
	mov	edx, DWORD PTR _source$35[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _source$35[ebp]
	mov	edx, DWORD PTR [eax+44]
	call	edx
$LN21@ConfigureB:

; 435  :                                 }
; 436  :                             }
; 437  :                         }
; 438  :                     }
; 439  :                     break;

	jmp	$LN48@ConfigureB
$LN8@ConfigureB:

; 440  : 
; 441  :                 case IDOK:
; 442  :                     {
; 443  :                         String strBitmap = GetEditText(GetDlgItem(hwnd, IDC_BITMAP));

	push	1049					; 00000419H
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	lea	ecx, DWORD PTR _strBitmap$23[ebp]
	push	ecx
	call	DWORD PTR __imp_?GetEditText@@YA?AVString@@PAUHWND__@@@Z
	add	esp, 8

; 444  :                         if(strBitmap.IsEmpty())

	lea	ecx, DWORD PTR _strBitmap$23[ebp]
	call	DWORD PTR __imp_?IsEmpty@String@@QBEHXZ
	test	eax, eax
	je	SHORT $LN7@ConfigureB

; 445  :                         {
; 446  :                             OBSMessageBox(hwnd, Str("Sources.BitmapSource.Empty"), NULL, 0);

	push	0
	push	0
	push	OFFSET $SG4294949918
	mov	edx, DWORD PTR __imp_?locale@@3PAVLocaleStringLookup@@A
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?LookupString@LocaleStringLookup@@QAEPB_WPB_W@Z
	push	eax
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp_?OBSMessageBox@@YAHPAUHWND__@@PB_W1I@Z
	add	esp, 16					; 00000010H

; 447  :                             break;

	lea	ecx, DWORD PTR _strBitmap$23[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
	jmp	$LN48@ConfigureB
$LN7@ConfigureB:

; 448  :                         }
; 449  : 
; 450  :                         ConfigBitmapInfo *configInfo = (ConfigBitmapInfo*)GetWindowLongPtr(hwnd, DWLP_USER);

	push	8
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetWindowLongW@8
	mov	DWORD PTR _configInfo$37[ebp], eax

; 451  :                         configInfo->data->SetString(TEXT("path"), strBitmap);

	lea	ecx, DWORD PTR _strBitmap$23[ebp]
	call	DWORD PTR __imp_??BString@@QBEPA_WXZ
	push	eax
	push	OFFSET $SG4294949917
	mov	edx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?SetString@XElement@@QAEXPB_W0@Z

; 452  : 
; 453  :                         BOOL bFailed;
; 454  :                         int opacity = (int)SendMessage(GetDlgItem(hwnd, IDC_OPACITY), UDM_GETPOS32, 0, (LPARAM)&bFailed);

	lea	eax, DWORD PTR _bFailed$21[ebp]
	push	eax
	push	0
	push	1138					; 00000472H
	push	1041					; 00000411H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _opacity$32[ebp], eax

; 455  :                         if(opacity > 100)

	cmp	DWORD PTR _opacity$32[ebp], 100		; 00000064H
	jle	SHORT $LN6@ConfigureB

; 456  :                             opacity = 100;

	mov	DWORD PTR _opacity$32[ebp], 100		; 00000064H
	jmp	SHORT $LN5@ConfigureB
$LN6@ConfigureB:

; 457  :                         else if(opacity < 0)

	cmp	DWORD PTR _opacity$32[ebp], 0
	jge	SHORT $LN5@ConfigureB

; 458  :                             opacity = 0;

	mov	DWORD PTR _opacity$32[ebp], 0
$LN5@ConfigureB:

; 459  :                         configInfo->data->SetInt(TEXT("opacity"), bFailed ? 100 : opacity);

	cmp	DWORD PTR _bFailed$21[ebp], 0
	je	SHORT $LN59@ConfigureB
	mov	DWORD PTR tv538[ebp], 100		; 00000064H
	jmp	SHORT $LN60@ConfigureB
$LN59@ConfigureB:
	mov	edx, DWORD PTR _opacity$32[ebp]
	mov	DWORD PTR tv538[ebp], edx
$LN60@ConfigureB:
	mov	eax, DWORD PTR tv538[ebp]
	push	eax
	push	OFFSET $SG4294949916
	mov	ecx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 460  : 
; 461  :                         DWORD color = CCGetColor(GetDlgItem(hwnd, IDC_COLOR));

	push	1104					; 00000450H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _color$19[ebp], eax

; 462  :                         configInfo->data->SetInt(TEXT("color"), color);

	mov	eax, DWORD PTR _color$19[ebp]
	push	eax
	push	OFFSET $SG4294949915
	mov	ecx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 463  : 
; 464  :                         BOOL  bUseColorKey  = SendMessage(GetDlgItem(hwnd, IDC_USECOLORKEY), BM_GETCHECK, 0, 0) == BST_CHECKED;

	push	0
	push	0
	push	240					; 000000f0H
	push	1017					; 000003f9H
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	cmp	eax, 1
	jne	SHORT $LN61@ConfigureB
	mov	DWORD PTR tv559[ebp], 1
	jmp	SHORT $LN62@ConfigureB
$LN61@ConfigureB:
	mov	DWORD PTR tv559[ebp], 0
$LN62@ConfigureB:
	mov	eax, DWORD PTR tv559[ebp]
	mov	DWORD PTR _bUseColorKey$17[ebp], eax

; 465  :                         DWORD keyColor      = CCGetColor(GetDlgItem(hwnd, IDC_KEYCOLOR));

	push	1105					; 00000451H
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp_?CCGetColor@@YAKPAUHWND__@@@Z
	add	esp, 4
	mov	DWORD PTR _keyColor$15[ebp], eax

; 466  :                         UINT  keySimilarity = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BASETHRESHOLD), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1021					; 000003fdH
	mov	edx, DWORD PTR _hwnd$[ebp]
	push	edx
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _keySimilarity$13[ebp], eax

; 467  :                         UINT  keyBlend      = (UINT)SendMessage(GetDlgItem(hwnd, IDC_BLEND), UDM_GETPOS32, 0, 0);

	push	0
	push	0
	push	1138					; 00000472H
	push	1023					; 000003ffH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _keyBlend$11[ebp], eax

; 468  : 
; 469  :                         configInfo->data->SetInt(TEXT("useColorKey"), bUseColorKey);

	mov	ecx, DWORD PTR _bUseColorKey$17[ebp]
	push	ecx
	push	OFFSET $SG4294949914
	mov	edx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 470  :                         configInfo->data->SetInt(TEXT("keyColor"), keyColor);

	mov	eax, DWORD PTR _keyColor$15[ebp]
	push	eax
	push	OFFSET $SG4294949913
	mov	ecx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 471  :                         configInfo->data->SetInt(TEXT("keySimilarity"), keySimilarity);

	mov	edx, DWORD PTR _keySimilarity$13[ebp]
	push	edx
	push	OFFSET $SG4294949912
	mov	eax, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 472  :                         configInfo->data->SetInt(TEXT("keyBlend"), keyBlend);

	mov	ecx, DWORD PTR _keyBlend$11[ebp]
	push	ecx
	push	OFFSET $SG4294949911
	mov	edx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 473  :                         int monitor = (int)SendMessage(GetDlgItem(hwnd, IDC_MONITOR), BM_GETCHECK, 0, 0);

	push	0
	push	0
	push	240					; 000000f0H
	push	1019					; 000003fbH
	mov	eax, DWORD PTR _hwnd$[ebp]
	push	eax
	call	DWORD PTR __imp__GetDlgItem@8
	push	eax
	call	DWORD PTR __imp__SendMessageW@16
	mov	DWORD PTR _monitor$9[ebp], eax

; 474  : 
; 475  :                         if (monitor == BST_CHECKED)

	cmp	DWORD PTR _monitor$9[ebp], 1
	jne	SHORT $LN3@ConfigureB

; 476  :                             configInfo->data->SetInt(TEXT("monitor"), 1);

	push	1
	push	OFFSET $SG4294949910
	mov	ecx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 477  :                         else

	jmp	SHORT $LN2@ConfigureB
$LN3@ConfigureB:

; 478  :                             configInfo->data->SetInt(TEXT("monitor"), 0);

	push	0
	push	OFFSET $SG4294949909
	mov	edx, DWORD PTR _configInfo$37[ebp]
	mov	ecx, DWORD PTR [edx]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z
$LN2@ConfigureB:

; 479  :                     }

	lea	ecx, DWORD PTR _strBitmap$23[ebp]
	call	DWORD PTR __imp_??1String@@QAE@XZ
$LN1@ConfigureB:

; 480  : 
; 481  :                 case IDCANCEL:
; 482  :                     EndDialog(hwnd, LOWORD(wParam));

	movzx	eax, WORD PTR _wParam$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hwnd$[ebp]
	push	ecx
	call	DWORD PTR __imp__EndDialog@8
$LN48@ConfigureB:

; 483  :                     break;
; 484  :             }
; 485  :             break;
; 486  :     }
; 487  : 
; 488  :     return 0;

	xor	eax, eax
$LN51@ConfigureB:

; 489  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN67@ConfigureB:
	DD	$LN47@ConfigureB
	DD	$LN36@ConfigureB
	DD	$LN41@ConfigureB
	DD	$LN43@ConfigureB
	DD	$LN39@ConfigureB
	DD	$LN48@ConfigureB
$LN65@ConfigureB:
	DB	0
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	3
	DB	4
	npad	1
$LN68@ConfigureB:
	DD	$LN33@ConfigureB
	DD	$LN22@ConfigureB
	DD	$LN29@ConfigureB
	DD	$LN27@ConfigureB
	DD	$LN48@ConfigureB
$LN66@ConfigureB:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z ENDP		; ConfigureBitmapProc
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__FcolorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ
text$yd	SEGMENT
??__FcolorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ PROC ; `ConfigureBitmapProc'::`2'::`dynamic atexit destructor for 'colorData'', COMDAT
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET ?colorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@4UColorSelectionData@@A
	call	??1ColorSelectionData@@QAE@XZ		; ColorSelectionData::~ColorSelectionData
	pop	ebp
	ret	0
??__FcolorData@?1??ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z@YAXXZ ENDP ; `ConfigureBitmapProc'::`2'::`dynamic atexit destructor for 'colorData''
text$yd	ENDS
; Function compile flags: /Odtp
; File f:\songmm_moon_stone_obs\obs\source\bitmapimagesource.cpp
;	COMDAT ?ConfigureBitmapSource@@YG_NPAVXElement@@_N@Z
_TEXT	SEGMENT
_configInfo$ = -52					; size = 4
_lpBitmap$1 = -48					; size = 4
_data$ = -44						; size = 4
_ii$2 = -40						; size = 36
__$ArrayPad$ = -4					; size = 4
_element$ = 8						; size = 4
_bCreating$ = 12					; size = 1
?ConfigureBitmapSource@@YG_NPAVXElement@@_N@Z PROC	; ConfigureBitmapSource, COMDAT

; 492  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 493  :     if(!element)

	cmp	DWORD PTR _element$[ebp], 0
	jne	SHORT $LN5@ConfigureB

; 494  :     {
; 495  :         AppWarning(TEXT("ConfigureBitmapSource: NULL element"));

	push	OFFSET $SG4294949908
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 4

; 496  :         return false;

	xor	al, al
	jmp	$LN6@ConfigureB
$LN5@ConfigureB:

; 497  :     }
; 498  : 
; 499  :     XElement *data = element->GetElement(TEXT("data"));

	push	OFFSET $SG4294949907
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?GetElement@XElement@@QBEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax

; 500  :     if(!data)

	cmp	DWORD PTR _data$[ebp], 0
	jne	SHORT $LN4@ConfigureB

; 501  :         data = element->CreateElement(TEXT("data"));

	push	OFFSET $SG4294949906
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?CreateElement@XElement@@QAEPAV1@PB_W@Z
	mov	DWORD PTR _data$[ebp], eax
$LN4@ConfigureB:

; 502  : 
; 503  :     ConfigBitmapInfo configInfo;
; 504  :     configInfo.data = data;

	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _configInfo$[ebp], eax

; 505  : 
; 506  :     if(OBSDialogBox(hinstMain, MAKEINTRESOURCE(IDD_CONFIGUREBITMAPSOURCE), hwndMain, ConfigureBitmapProc, (LPARAM)&configInfo) == IDOK)

	lea	ecx, DWORD PTR _configInfo$[ebp]
	push	ecx
	push	OFFSET ?ConfigureBitmapProc@@YGHPAUHWND__@@IIJ@Z ; ConfigureBitmapProc
	mov	edx, DWORD PTR ?hwndMain@@3PAUHWND__@@A	; hwndMain
	push	edx
	push	124					; 0000007cH
	mov	eax, DWORD PTR ?hinstMain@@3PAUHINSTANCE__@@A ; hinstMain
	push	eax
	call	DWORD PTR __imp_?OBSDialogBox@@YAHPAUHINSTANCE__@@PB_WPAUHWND__@@P6GH2IIJ@ZJ@Z
	add	esp, 20					; 00000014H
	cmp	eax, 1
	jne	SHORT $LN3@ConfigureB

; 507  :     {
; 508  :         CTSTR lpBitmap = data->GetString(TEXT("path"));

	push	0
	push	OFFSET $SG4294949905
	mov	ecx, DWORD PTR _data$[ebp]
	call	DWORD PTR __imp_?GetString@XElement@@QBEPB_WPB_WPA_W@Z
	mov	DWORD PTR _lpBitmap$1[ebp], eax

; 509  : 
; 510  :         D3DX10_IMAGE_INFO ii;
; 511  :         if(SUCCEEDED(D3DX10GetImageInfoFromFile(lpBitmap, NULL, &ii, NULL)))

	push	0
	lea	ecx, DWORD PTR _ii$2[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _lpBitmap$1[ebp]
	push	edx
	call	DWORD PTR __imp__D3DX10GetImageInfoFromFileW@16
	test	eax, eax
	jl	SHORT $LN2@ConfigureB

; 512  :         {
; 513  :             element->SetInt(TEXT("cx"), ii.Width);

	mov	eax, DWORD PTR _ii$2[ebp]
	push	eax
	push	OFFSET $SG4294949904
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 514  :             element->SetInt(TEXT("cy"), ii.Height);

	mov	ecx, DWORD PTR _ii$2[ebp+4]
	push	ecx
	push	OFFSET $SG4294949903
	mov	ecx, DWORD PTR _element$[ebp]
	call	DWORD PTR __imp_?SetInt@XElement@@QAEXPB_WH@Z

; 515  :         }
; 516  :         else

	jmp	SHORT $LN1@ConfigureB
$LN2@ConfigureB:

; 517  :             AppWarning(TEXT("ConfigureBitmapSource: could not get image info for bitmap '%s'"), lpBitmap);

	mov	edx, DWORD PTR _lpBitmap$1[ebp]
	push	edx
	push	OFFSET $SG4294949902
	call	DWORD PTR __imp_?AppWarning@@YAXPB_WZZ
	add	esp, 8
$LN1@ConfigureB:

; 518  : 
; 519  :         return true;

	mov	al, 1
	jmp	SHORT $LN6@ConfigureB
$LN3@ConfigureB:

; 520  :     }
; 521  : 
; 522  :     return false;

	xor	al, al
$LN6@ConfigureB:

; 523  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	8
?ConfigureBitmapSource@@YG_NPAVXElement@@_N@Z ENDP	; ConfigureBitmapSource
_TEXT	ENDS
END
